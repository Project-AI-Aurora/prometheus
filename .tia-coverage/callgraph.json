{
  "Funcs": {
    "?.At": {
      "Name": "?.At",
      "File": "tsdb/index/postings.go",
      "Line": 718,
      "Receiver": "?"
    },
    "?.Err": {
      "Name": "?.Err",
      "File": "tsdb/index/postings.go",
      "Line": 722,
      "Receiver": "?"
    },
    "?.Get": {
      "Name": "?.Get",
      "File": "util/zeropool/pool.go",
      "Line": 52,
      "Receiver": "?"
    },
    "?.Next": {
      "Name": "?.Next",
      "File": "tsdb/index/postings.go",
      "Line": 692,
      "Receiver": "?"
    },
    "?.Put": {
      "Name": "?.Put",
      "File": "util/zeropool/pool.go",
      "Line": 68,
      "Receiver": "?"
    },
    "?.Seek": {
      "Name": "?.Seek",
      "File": "tsdb/index/postings.go",
      "Line": 706,
      "Receiver": "?"
    },
    "?.String": {
      "Name": "?.String",
      "File": "model/histogram/generic.go",
      "Line": 94,
      "Receiver": "?"
    },
    "?.at": {
      "Name": "?.at",
      "File": "model/histogram/generic.go",
      "Line": 146,
      "Receiver": "?"
    },
    "?.strippedAt": {
      "Name": "?.strippedAt",
      "File": "model/histogram/generic.go",
      "Line": 169,
      "Receiver": "?"
    },
    "API.ClearCodecs": {
      "Name": "API.ClearCodecs",
      "File": "web/api/v1/api.go",
      "Line": 332,
      "Receiver": "API"
    },
    "API.InstallCodec": {
      "Name": "API.InstallCodec",
      "File": "web/api/v1/api.go",
      "Line": 327,
      "Receiver": "API"
    },
    "API.Register": {
      "Name": "API.Register",
      "File": "web/api/v1/api.go",
      "Line": 344,
      "Receiver": "API"
    },
    "API.alertmanagers": {
      "Name": "API.alertmanagers",
      "File": "web/api/v1/api.go",
      "Line": 1288,
      "Receiver": "API"
    },
    "API.alerts": {
      "Name": "API.alerts",
      "File": "web/api/v1/api.go",
      "Line": 1316,
      "Receiver": "API"
    },
    "API.cleanTombstones": {
      "Name": "API.cleanTombstones",
      "File": "web/api/v1/api.go",
      "Line": 1951,
      "Receiver": "API"
    },
    "API.deleteSeries": {
      "Name": "API.deleteSeries",
      "File": "web/api/v1/api.go",
      "Line": 1884,
      "Receiver": "API"
    },
    "API.dropSeries": {
      "Name": "API.dropSeries",
      "File": "web/api/v1/api.go",
      "Line": 997,
      "Receiver": "API"
    },
    "API.formatQuery": {
      "Name": "API.formatQuery",
      "File": "web/api/v1/api.go",
      "Line": 517,
      "Receiver": "API"
    },
    "API.labelNames": {
      "Name": "API.labelNames",
      "File": "web/api/v1/api.go",
      "Line": 704,
      "Receiver": "API"
    },
    "API.labelValues": {
      "Name": "API.labelValues",
      "File": "web/api/v1/api.go",
      "Line": 781,
      "Receiver": "API"
    },
    "API.metricMetadata": {
      "Name": "API.metricMetadata",
      "File": "web/api/v1/api.go",
      "Line": 1350,
      "Receiver": "API"
    },
    "API.negotiateCodec": {
      "Name": "API.negotiateCodec",
      "File": "web/api/v1/api.go",
      "Line": 1995,
      "Receiver": "API"
    },
    "API.notifications": {
      "Name": "API.notifications",
      "File": "web/api/v1/api.go",
      "Line": 1808,
      "Receiver": "API"
    },
    "API.notificationsSSE": {
      "Name": "API.notificationsSSE",
      "File": "web/api/v1/api.go",
      "Line": 1813,
      "Receiver": "API"
    },
    "API.options": {
      "Name": "API.options",
      "File": "web/api/v1/api.go",
      "Line": 444,
      "Receiver": "API"
    },
    "API.otlpWrite": {
      "Name": "API.otlpWrite",
      "File": "web/api/v1/api.go",
      "Line": 1876,
      "Receiver": "API"
    },
    "API.parseQuery": {
      "Name": "API.parseQuery",
      "File": "web/api/v1/api.go",
      "Line": 526,
      "Receiver": "API"
    },
    "API.query": {
      "Name": "API.query",
      "File": "web/api/v1/api.go",
      "Line": 448,
      "Receiver": "API"
    },
    "API.queryExemplars": {
      "Name": "API.queryExemplars",
      "File": "web/api/v1/api.go",
      "Line": 642,
      "Receiver": "API"
    },
    "API.queryRange": {
      "Name": "API.queryRange",
      "File": "web/api/v1/api.go",
      "Line": 549,
      "Receiver": "API"
    },
    "API.remoteRead": {
      "Name": "API.remoteRead",
      "File": "web/api/v1/api.go",
      "Line": 1859,
      "Receiver": "API"
    },
    "API.remoteWrite": {
      "Name": "API.remoteWrite",
      "File": "web/api/v1/api.go",
      "Line": 1868,
      "Receiver": "API"
    },
    "API.respond": {
      "Name": "API.respond",
      "File": "web/api/v1/api.go",
      "Line": 1964,
      "Receiver": "API"
    },
    "API.respondError": {
      "Name": "API.respondError",
      "File": "web/api/v1/api.go",
      "Line": 2012,
      "Receiver": "API"
    },
    "API.rules": {
      "Name": "API.rules",
      "File": "web/api/v1/api.go",
      "Line": 1475,
      "Receiver": "API"
    },
    "API.scrapePools": {
      "Name": "API.scrapePools",
      "File": "web/api/v1/api.go",
      "Line": 1106,
      "Receiver": "API"
    },
    "API.series": {
      "Name": "API.series",
      "File": "web/api/v1/api.go",
      "Line": 903,
      "Receiver": "API"
    },
    "API.serveBuildInfo": {
      "Name": "API.serveBuildInfo",
      "File": "web/api/v1/api.go",
      "Line": 1699,
      "Receiver": "API"
    },
    "API.serveConfig": {
      "Name": "API.serveConfig",
      "File": "web/api/v1/api.go",
      "Line": 1703,
      "Receiver": "API"
    },
    "API.serveFlags": {
      "Name": "API.serveFlags",
      "File": "web/api/v1/api.go",
      "Line": 1710,
      "Receiver": "API"
    },
    "API.serveRuntimeInfo": {
      "Name": "API.serveRuntimeInfo",
      "File": "web/api/v1/api.go",
      "Line": 1691,
      "Receiver": "API"
    },
    "API.serveTSDBStatus": {
      "Name": "API.serveTSDBStatus",
      "File": "web/api/v1/api.go",
      "Line": 1748,
      "Receiver": "API"
    },
    "API.serveWALReplayStatus": {
      "Name": "API.serveWALReplayStatus",
      "File": "web/api/v1/api.go",
      "Line": 1795,
      "Receiver": "API"
    },
    "API.snapshot": {
      "Name": "API.snapshot",
      "File": "web/api/v1/api.go",
      "Line": 1917,
      "Receiver": "API"
    },
    "API.targetMetadata": {
      "Name": "API.targetMetadata",
      "File": "web/api/v1/api.go",
      "Line": 1209,
      "Receiver": "API"
    },
    "API.targets": {
      "Name": "API.targets",
      "File": "web/api/v1/api.go",
      "Line": 1113,
      "Receiver": "API"
    },
    "Action.UnmarshalYAML": {
      "Name": "Action.UnmarshalYAML",
      "File": "model/relabel/relabel.go",
      "Line": 72,
      "Receiver": "Action"
    },
    "ActiveQueryTracker.Close": {
      "Name": "ActiveQueryTracker.Close",
      "File": "promql/query_logger.go",
      "Line": 228,
      "Receiver": "ActiveQueryTracker"
    },
    "ActiveQueryTracker.Delete": {
      "Name": "ActiveQueryTracker.Delete",
      "File": "promql/query_logger.go",
      "Line": 207,
      "Receiver": "ActiveQueryTracker"
    },
    "ActiveQueryTracker.GetMaxConcurrent": {
      "Name": "ActiveQueryTracker.GetMaxConcurrent",
      "File": "promql/query_logger.go",
      "Line": 203,
      "Receiver": "ActiveQueryTracker"
    },
    "ActiveQueryTracker.Insert": {
      "Name": "ActiveQueryTracker.Insert",
      "File": "promql/query_logger.go",
      "Line": 212,
      "Receiver": "ActiveQueryTracker"
    },
    "ActiveQueryTracker.generateIndices": {
      "Name": "ActiveQueryTracker.generateIndices",
      "File": "promql/query_logger.go",
      "Line": 197,
      "Receiver": "ActiveQueryTracker"
    },
    "Adapter.Run": {
      "Name": "Adapter.Run",
      "File": "documentation/examples/custom-sd/adapter/adapter.go",
      "Line": 157,
      "Receiver": "Adapter"
    },
    "Adapter.refreshTargetGroups": {
      "Name": "Adapter.refreshTargetGroups",
      "File": "documentation/examples/custom-sd/adapter/adapter.go",
      "Line": 101,
      "Receiver": "Adapter"
    },
    "Adapter.runCustomSD": {
      "Name": "Adapter.runCustomSD",
      "File": "documentation/examples/custom-sd/adapter/adapter.go",
      "Line": 140,
      "Receiver": "Adapter"
    },
    "Adapter.writeOutput": {
      "Name": "Adapter.writeOutput",
      "File": "documentation/examples/custom-sd/adapter/adapter.go",
      "Line": 114,
      "Receiver": "Adapter"
    },
    "AddMetricFamilyToProtobuf": {
      "Name": "AddMetricFamilyToProtobuf",
      "File": "scrape/clientprotobuf.go",
      "Line": 38,
      "Receiver": ""
    },
    "AggregateExpr.PositionRange": {
      "Name": "AggregateExpr.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 450,
      "Receiver": "AggregateExpr"
    },
    "AggregateExpr.Pretty": {
      "Name": "AggregateExpr.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 50,
      "Receiver": "AggregateExpr"
    },
    "AggregateExpr.PromQLExpr": {
      "Name": "AggregateExpr.PromQLExpr",
      "File": "promql/parser/ast.go",
      "Line": 264,
      "Receiver": "AggregateExpr"
    },
    "AggregateExpr.ShortString": {
      "Name": "AggregateExpr.ShortString",
      "File": "promql/parser/printer.go",
      "Line": 77,
      "Receiver": "AggregateExpr"
    },
    "AggregateExpr.String": {
      "Name": "AggregateExpr.String",
      "File": "promql/parser/printer.go",
      "Line": 66,
      "Receiver": "AggregateExpr"
    },
    "AggregateExpr.Type": {
      "Name": "AggregateExpr.Type",
      "File": "promql/parser/ast.go",
      "Line": 246,
      "Receiver": "AggregateExpr"
    },
    "AggregateExpr.getAggOpStr": {
      "Name": "AggregateExpr.getAggOpStr",
      "File": "promql/parser/printer.go",
      "Line": 82,
      "Receiver": "AggregateExpr"
    },
    "Alert.Hash": {
      "Name": "Alert.Hash",
      "File": "notifier/alert.go",
      "Line": 45,
      "Receiver": "Alert"
    },
    "Alert.Name": {
      "Name": "Alert.Name",
      "File": "notifier/alert.go",
      "Line": 40,
      "Receiver": "Alert"
    },
    "Alert.Resolved": {
      "Name": "Alert.Resolved",
      "File": "notifier/alert.go",
      "Line": 58,
      "Receiver": "Alert"
    },
    "Alert.ResolvedAt": {
      "Name": "Alert.ResolvedAt",
      "File": "notifier/alert.go",
      "Line": 64,
      "Receiver": "Alert"
    },
    "Alert.String": {
      "Name": "Alert.String",
      "File": "notifier/alert.go",
      "Line": 49,
      "Receiver": "Alert"
    },
    "Alert.needsSending": {
      "Name": "Alert.needsSending",
      "File": "rules/alerting.go",
      "Line": 94,
      "Receiver": "Alert"
    },
    "AlertState.String": {
      "Name": "AlertState.String",
      "File": "rules/alerting.go",
      "Line": 63,
      "Receiver": "AlertState"
    },
    "AlertTemplateData": {
      "Name": "AlertTemplateData",
      "File": "template/template.go",
      "Line": 296,
      "Receiver": ""
    },
    "AlertingConfig.SetDirectory": {
      "Name": "AlertingConfig.SetDirectory",
      "File": "config/config.go",
      "Line": 1085,
      "Receiver": "AlertingConfig"
    },
    "AlertingConfig.UnmarshalYAML": {
      "Name": "AlertingConfig.UnmarshalYAML",
      "File": "config/config.go",
      "Line": 1092,
      "Receiver": "AlertingConfig"
    },
    "AlertingRule.ActiveAlerts": {
      "Name": "AlertingRule.ActiveAlerts",
      "File": "rules/alerting.go",
      "Line": 548,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.ActiveAlertsCount": {
      "Name": "AlertingRule.ActiveAlertsCount",
      "File": "rules/alerting.go",
      "Line": 586,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.Annotations": {
      "Name": "AlertingRule.Annotations",
      "File": "rules/alerting.go",
      "Line": 225,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.DependencyRules": {
      "Name": "AlertingRule.DependencyRules",
      "File": "rules/alerting.go",
      "Line": 362,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.DependentRules": {
      "Name": "AlertingRule.DependentRules",
      "File": "rules/alerting.go",
      "Line": 337,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.Eval": {
      "Name": "AlertingRule.Eval",
      "File": "rules/alerting.go",
      "Line": 374,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.ForEachActiveAlert": {
      "Name": "AlertingRule.ForEachActiveAlert",
      "File": "rules/alerting.go",
      "Line": 577,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.GetEvaluationDuration": {
      "Name": "AlertingRule.GetEvaluationDuration",
      "File": "rules/alerting.go",
      "Line": 294,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.GetEvaluationTimestamp": {
      "Name": "AlertingRule.GetEvaluationTimestamp",
      "File": "rules/alerting.go",
      "Line": 304,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.Health": {
      "Name": "AlertingRule.Health",
      "File": "rules/alerting.go",
      "Line": 199,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.HoldDuration": {
      "Name": "AlertingRule.HoldDuration",
      "File": "rules/alerting.go",
      "Line": 209,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.KeepFiringFor": {
      "Name": "AlertingRule.KeepFiringFor",
      "File": "rules/alerting.go",
      "Line": 215,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.Labels": {
      "Name": "AlertingRule.Labels",
      "File": "rules/alerting.go",
      "Line": 220,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.LastError": {
      "Name": "AlertingRule.LastError",
      "File": "rules/alerting.go",
      "Line": 189,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.Name": {
      "Name": "AlertingRule.Name",
      "File": "rules/alerting.go",
      "Line": 179,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.NoDependencyRules": {
      "Name": "AlertingRule.NoDependencyRules",
      "File": "rules/alerting.go",
      "Line": 351,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.NoDependentRules": {
      "Name": "AlertingRule.NoDependentRules",
      "File": "rules/alerting.go",
      "Line": 326,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.Query": {
      "Name": "AlertingRule.Query",
      "File": "rules/alerting.go",
      "Line": 204,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.QueryForStateSeries": {
      "Name": "AlertingRule.QueryForStateSeries",
      "File": "rules/alerting.go",
      "Line": 271,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.Restored": {
      "Name": "AlertingRule.Restored",
      "File": "rules/alerting.go",
      "Line": 314,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.SetDependencyRules": {
      "Name": "AlertingRule.SetDependencyRules",
      "File": "rules/alerting.go",
      "Line": 343,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.SetDependentRules": {
      "Name": "AlertingRule.SetDependentRules",
      "File": "rules/alerting.go",
      "Line": 318,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.SetEvaluationDuration": {
      "Name": "AlertingRule.SetEvaluationDuration",
      "File": "rules/alerting.go",
      "Line": 289,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.SetEvaluationTimestamp": {
      "Name": "AlertingRule.SetEvaluationTimestamp",
      "File": "rules/alerting.go",
      "Line": 299,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.SetHealth": {
      "Name": "AlertingRule.SetHealth",
      "File": "rules/alerting.go",
      "Line": 194,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.SetLastError": {
      "Name": "AlertingRule.SetLastError",
      "File": "rules/alerting.go",
      "Line": 184,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.SetRestored": {
      "Name": "AlertingRule.SetRestored",
      "File": "rules/alerting.go",
      "Line": 309,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.State": {
      "Name": "AlertingRule.State",
      "File": "rules/alerting.go",
      "Line": 534,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.String": {
      "Name": "AlertingRule.String",
      "File": "rules/alerting.go",
      "Line": 613,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.currentAlerts": {
      "Name": "AlertingRule.currentAlerts",
      "File": "rules/alerting.go",
      "Line": 560,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.forStateSample": {
      "Name": "AlertingRule.forStateSample",
      "File": "rules/alerting.go",
      "Line": 250,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.sample": {
      "Name": "AlertingRule.sample",
      "File": "rules/alerting.go",
      "Line": 229,
      "Receiver": "AlertingRule"
    },
    "AlertingRule.sendAlerts": {
      "Name": "AlertingRule.sendAlerts",
      "File": "rules/alerting.go",
      "Line": 593,
      "Receiver": "AlertingRule"
    },
    "AlertmanagerAPIVersion.UnmarshalYAML": {
      "Name": "AlertmanagerAPIVersion.UnmarshalYAML",
      "File": "config/config.go",
      "Line": 1127,
      "Receiver": "AlertmanagerAPIVersion"
    },
    "AlertmanagerConfig.MarshalYAML": {
      "Name": "AlertmanagerConfig.MarshalYAML",
      "File": "config/config.go",
      "Line": 1229,
      "Receiver": "AlertmanagerConfig"
    },
    "AlertmanagerConfig.SetDirectory": {
      "Name": "AlertmanagerConfig.SetDirectory",
      "File": "config/config.go",
      "Line": 1180,
      "Receiver": "AlertmanagerConfig"
    },
    "AlertmanagerConfig.UnmarshalYAML": {
      "Name": "AlertmanagerConfig.UnmarshalYAML",
      "File": "config/config.go",
      "Line": 1186,
      "Receiver": "AlertmanagerConfig"
    },
    "AlertmanagerConfigs.ToMap": {
      "Name": "AlertmanagerConfigs.ToMap",
      "File": "config/config.go",
      "Line": 1113,
      "Receiver": "AlertmanagerConfigs"
    },
    "AlertmanagerFromGroup": {
      "Name": "AlertmanagerFromGroup",
      "File": "notifier/alertmanager.go",
      "Line": 48,
      "Receiver": ""
    },
    "AllPostingsKey": {
      "Name": "AllPostingsKey",
      "File": "tsdb/index/postings.go",
      "Line": 41,
      "Receiver": ""
    },
    "AllSortedPostings": {
      "Name": "AllSortedPostings",
      "File": "tsdb/compact.go",
      "Line": 750,
      "Receiver": ""
    },
    "Annotations.Add": {
      "Name": "Annotations.Add",
      "File": "util/annotations/annotations.go",
      "Line": 41,
      "Receiver": "Annotations"
    },
    "Annotations.AsErrors": {
      "Name": "Annotations.AsErrors",
      "File": "util/annotations/annotations.go",
      "Line": 66,
      "Receiver": "Annotations"
    },
    "Annotations.AsStrings": {
      "Name": "Annotations.AsStrings",
      "File": "util/annotations/annotations.go",
      "Line": 79,
      "Receiver": "Annotations"
    },
    "Annotations.CountWarningsAndInfo": {
      "Name": "Annotations.CountWarningsAndInfo",
      "File": "util/annotations/annotations.go",
      "Line": 116,
      "Receiver": "Annotations"
    },
    "Annotations.Merge": {
      "Name": "Annotations.Merge",
      "File": "util/annotations/annotations.go",
      "Line": 51,
      "Receiver": "Annotations"
    },
    "AzureADConfig.UnmarshalYAML": {
      "Name": "AzureADConfig.UnmarshalYAML",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 176,
      "Receiver": "AzureADConfig"
    },
    "AzureADConfig.Validate": {
      "Name": "AzureADConfig.Validate",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 105,
      "Receiver": "AzureADConfig"
    },
    "AzureAdTestSuite.BeforeTest": {
      "Name": "AzureAdTestSuite.BeforeTest",
      "File": "storage/remote/azuread/azuread_test.go",
      "Line": 59,
      "Receiver": "AzureAdTestSuite"
    },
    "AzureAdTestSuite.TestAzureAdRoundTripper": {
      "Name": "AzureAdTestSuite.TestAzureAdRoundTripper",
      "File": "storage/remote/azuread/azuread_test.go",
      "Line": 67,
      "Receiver": "AzureAdTestSuite"
    },
    "BenchmarkAddExemplar": {
      "Name": "BenchmarkAddExemplar",
      "File": "tsdb/exemplar_test.go",
      "Line": 414,
      "Receiver": ""
    },
    "BenchmarkAlertingRuleAtomicField": {
      "Name": "BenchmarkAlertingRuleAtomicField",
      "File": "rules/alerting_test.go",
      "Line": 565,
      "Receiver": ""
    },
    "BenchmarkAppendable": {
      "Name": "BenchmarkAppendable",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 1726,
      "Receiver": ""
    },
    "BenchmarkBufferedSeriesIterator": {
      "Name": "BenchmarkBufferedSeriesIterator",
      "File": "storage/buffer_test.go",
      "Line": 367,
      "Receiver": ""
    },
    "BenchmarkBuildTimeSeries": {
      "Name": "BenchmarkBuildTimeSeries",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 2287,
      "Receiver": ""
    },
    "BenchmarkBuildV2WriteRequest": {
      "Name": "BenchmarkBuildV2WriteRequest",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1892,
      "Receiver": ""
    },
    "BenchmarkBuildWriteRequest": {
      "Name": "BenchmarkBuildWriteRequest",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1852,
      "Receiver": ""
    },
    "BenchmarkBuilder": {
      "Name": "BenchmarkBuilder",
      "File": "model/labels/labels_test.go",
      "Line": 965,
      "Receiver": ""
    },
    "BenchmarkCheckDuplicates": {
      "Name": "BenchmarkCheckDuplicates",
      "File": "cmd/promtool/main_test.go",
      "Line": 197,
      "Receiver": ""
    },
    "BenchmarkChunkWriteQueue_addJob": {
      "Name": "BenchmarkChunkWriteQueue_addJob",
      "File": "tsdb/chunks/chunk_write_queue_test.go",
      "Line": 209,
      "Receiver": ""
    },
    "BenchmarkCompaction": {
      "Name": "BenchmarkCompaction",
      "File": "tsdb/compact_test.go",
      "Line": 1115,
      "Receiver": ""
    },
    "BenchmarkCompactionFromHead": {
      "Name": "BenchmarkCompactionFromHead",
      "File": "tsdb/compact_test.go",
      "Line": 1185,
      "Receiver": ""
    },
    "BenchmarkCompactionFromOOOHead": {
      "Name": "BenchmarkCompactionFromOOOHead",
      "File": "tsdb/compact_test.go",
      "Line": 1215,
      "Receiver": ""
    },
    "BenchmarkConvertBucketLayout": {
      "Name": "BenchmarkConvertBucketLayout",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms_test.go",
      "Line": 389,
      "Receiver": ""
    },
    "BenchmarkConvertHistogramBucketsToNHCBLayout": {
      "Name": "BenchmarkConvertHistogramBucketsToNHCBLayout",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms_test.go",
      "Line": 978,
      "Receiver": ""
    },
    "BenchmarkCreateSeries": {
      "Name": "BenchmarkCreateSeries",
      "File": "tsdb/head_test.go",
      "Line": 94,
      "Receiver": ""
    },
    "BenchmarkCreatedTimestampPromProto": {
      "Name": "BenchmarkCreatedTimestampPromProto",
      "File": "model/textparse/benchmark_test.go",
      "Line": 274,
      "Receiver": ""
    },
    "BenchmarkCuttingHeadHistogramChunks": {
      "Name": "BenchmarkCuttingHeadHistogramChunks",
      "File": "tsdb/head_test.go",
      "Line": 6062,
      "Receiver": ""
    },
    "BenchmarkDecode": {
      "Name": "BenchmarkDecode",
      "File": "util/compression/compression_test.go",
      "Line": 175,
      "Receiver": ""
    },
    "BenchmarkEncode": {
      "Name": "BenchmarkEncode",
      "File": "util/compression/compression_test.go",
      "Line": 149,
      "Receiver": ""
    },
    "BenchmarkFastRegexMatcher": {
      "Name": "BenchmarkFastRegexMatcher",
      "File": "model/labels/regexp_test.go",
      "Line": 282,
      "Receiver": ""
    },
    "BenchmarkFloatHistogramAllBucketIterator": {
      "Name": "BenchmarkFloatHistogramAllBucketIterator",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 3515,
      "Receiver": ""
    },
    "BenchmarkFloatHistogramDetectReset": {
      "Name": "BenchmarkFloatHistogramDetectReset",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 3529,
      "Receiver": ""
    },
    "BenchmarkHeadAppender_Append_Commit_ExistingSeries": {
      "Name": "BenchmarkHeadAppender_Append_Commit_ExistingSeries",
      "File": "tsdb/head_test.go",
      "Line": 109,
      "Receiver": ""
    },
    "BenchmarkHeadChunkQuerier": {
      "Name": "BenchmarkHeadChunkQuerier",
      "File": "tsdb/querier_test.go",
      "Line": 3500,
      "Receiver": ""
    },
    "BenchmarkHeadLabelValuesWithMatchers": {
      "Name": "BenchmarkHeadLabelValuesWithMatchers",
      "File": "tsdb/head_test.go",
      "Line": 3448,
      "Receiver": ""
    },
    "BenchmarkHeadQuerier": {
      "Name": "BenchmarkHeadQuerier",
      "File": "tsdb/querier_test.go",
      "Line": 3545,
      "Receiver": ""
    },
    "BenchmarkHeadStripeSeriesCreate": {
      "Name": "BenchmarkHeadStripeSeriesCreate",
      "File": "tsdb/head_bench_test.go",
      "Line": 35,
      "Receiver": ""
    },
    "BenchmarkHeadStripeSeriesCreateParallel": {
      "Name": "BenchmarkHeadStripeSeriesCreateParallel",
      "File": "tsdb/head_bench_test.go",
      "Line": 50,
      "Receiver": ""
    },
    "BenchmarkHeadStripeSeriesCreate_PreCreationFailure": {
      "Name": "BenchmarkHeadStripeSeriesCreate_PreCreationFailure",
      "File": "tsdb/head_bench_test.go",
      "Line": 70,
      "Receiver": ""
    },
    "BenchmarkHead_Truncate": {
      "Name": "BenchmarkHead_Truncate",
      "File": "tsdb/head_test.go",
      "Line": 1069,
      "Receiver": ""
    },
    "BenchmarkHead_WalCommit": {
      "Name": "BenchmarkHead_WalCommit",
      "File": "tsdb/head_bench_test.go",
      "Line": 89,
      "Receiver": ""
    },
    "BenchmarkHistogramValidation": {
      "Name": "BenchmarkHistogramValidation",
      "File": "model/histogram/histogram_test.go",
      "Line": 1591,
      "Receiver": ""
    },
    "BenchmarkInfoFunction": {
      "Name": "BenchmarkInfoFunction",
      "File": "promql/bench_test.go",
      "Line": 455,
      "Receiver": ""
    },
    "BenchmarkIntersect": {
      "Name": "BenchmarkIntersect",
      "File": "tsdb/index/postings_test.go",
      "Line": 288,
      "Receiver": ""
    },
    "BenchmarkIsolation": {
      "Name": "BenchmarkIsolation",
      "File": "tsdb/isolation_test.go",
      "Line": 82,
      "Receiver": ""
    },
    "BenchmarkIsolationWithState": {
      "Name": "BenchmarkIsolationWithState",
      "File": "tsdb/isolation_test.go",
      "Line": 112,
      "Receiver": ""
    },
    "BenchmarkLabelValuesWithMatchers": {
      "Name": "BenchmarkLabelValuesWithMatchers",
      "File": "tsdb/block_test.go",
      "Line": 426,
      "Receiver": ""
    },
    "BenchmarkLabels_Compare": {
      "Name": "BenchmarkLabels_Compare",
      "File": "model/labels/labels_test.go",
      "Line": 706,
      "Receiver": ""
    },
    "BenchmarkLabels_Copy": {
      "Name": "BenchmarkLabels_Copy",
      "File": "model/labels/labels_test.go",
      "Line": 978,
      "Receiver": ""
    },
    "BenchmarkLabels_Equals": {
      "Name": "BenchmarkLabels_Equals",
      "File": "model/labels/labels_test.go",
      "Line": 695,
      "Receiver": ""
    },
    "BenchmarkLabels_Get": {
      "Name": "BenchmarkLabels_Get",
      "File": "model/labels/labels_test.go",
      "Line": 625,
      "Receiver": ""
    },
    "BenchmarkLabels_Hash": {
      "Name": "BenchmarkLabels_Hash",
      "File": "model/labels/labels_test.go",
      "Line": 900,
      "Receiver": ""
    },
    "BenchmarkListPostings": {
      "Name": "BenchmarkListPostings",
      "File": "tsdb/index/postings_test.go",
      "Line": 1391,
      "Receiver": ""
    },
    "BenchmarkLoadRealWLs": {
      "Name": "BenchmarkLoadRealWLs",
      "File": "tsdb/head_test.go",
      "Line": 476,
      "Receiver": ""
    },
    "BenchmarkLoadWLs": {
      "Name": "BenchmarkLoadWLs",
      "File": "tsdb/head_test.go",
      "Line": 227,
      "Receiver": ""
    },
    "BenchmarkMatchType_String": {
      "Name": "BenchmarkMatchType_String",
      "File": "model/labels/matcher_test.go",
      "Line": 214,
      "Receiver": ""
    },
    "BenchmarkMatcher_String": {
      "Name": "BenchmarkMatcher_String",
      "File": "model/labels/matcher_test.go",
      "Line": 230,
      "Receiver": ""
    },
    "BenchmarkMemPostings_Delete": {
      "Name": "BenchmarkMemPostings_Delete",
      "File": "tsdb/index/postings_test.go",
      "Line": 1012,
      "Receiver": ""
    },
    "BenchmarkMemPostings_PostingsForLabelMatching": {
      "Name": "BenchmarkMemPostings_PostingsForLabelMatching",
      "File": "tsdb/index/postings_test.go",
      "Line": 1430,
      "Receiver": ""
    },
    "BenchmarkMemPostings_ensureOrder": {
      "Name": "BenchmarkMemPostings_ensureOrder",
      "File": "tsdb/index/postings_test.go",
      "Line": 73,
      "Receiver": ""
    },
    "BenchmarkMemoizedSeriesIterator": {
      "Name": "BenchmarkMemoizedSeriesIterator",
      "File": "storage/memoized_iterator_test.go",
      "Line": 109,
      "Receiver": ""
    },
    "BenchmarkMerge": {
      "Name": "BenchmarkMerge",
      "File": "tsdb/index/postings_test.go",
      "Line": 381,
      "Receiver": ""
    },
    "BenchmarkMergeLabelValuesWithLimit": {
      "Name": "BenchmarkMergeLabelValuesWithLimit",
      "File": "storage/merge_test.go",
      "Line": 1393,
      "Receiver": ""
    },
    "BenchmarkMergeSeriesSet": {
      "Name": "BenchmarkMergeSeriesSet",
      "File": "storage/merge_test.go",
      "Line": 1375,
      "Receiver": ""
    },
    "BenchmarkMergedSeriesSet": {
      "Name": "BenchmarkMergedSeriesSet",
      "File": "tsdb/querier_test.go",
      "Line": 2026,
      "Receiver": ""
    },
    "BenchmarkMergedStringIter": {
      "Name": "BenchmarkMergedStringIter",
      "File": "tsdb/querier_bench_test.go",
      "Line": 238,
      "Receiver": ""
    },
    "BenchmarkNativeHistograms": {
      "Name": "BenchmarkNativeHistograms",
      "File": "promql/bench_test.go",
      "Line": 315,
      "Receiver": ""
    },
    "BenchmarkNativeHistogramsCustomBuckets": {
      "Name": "BenchmarkNativeHistogramsCustomBuckets",
      "File": "promql/bench_test.go",
      "Line": 385,
      "Receiver": ""
    },
    "BenchmarkNewCompressionHandler_MaliciousAcceptEncoding": {
      "Name": "BenchmarkNewCompressionHandler_MaliciousAcceptEncoding",
      "File": "util/httputil/compression_test.go",
      "Line": 76,
      "Receiver": ""
    },
    "BenchmarkNewMatcher": {
      "Name": "BenchmarkNewMatcher",
      "File": "model/labels/matcher_test.go",
      "Line": 220,
      "Receiver": ""
    },
    "BenchmarkNoMergeSeriesSet_100_100": {
      "Name": "BenchmarkNoMergeSeriesSet_100_100",
      "File": "storage/merge_test.go",
      "Line": 1370,
      "Receiver": ""
    },
    "BenchmarkOTLP": {
      "Name": "BenchmarkOTLP",
      "File": "storage/remote/write_test.go",
      "Line": 673,
      "Receiver": ""
    },
    "BenchmarkOpenBlock": {
      "Name": "BenchmarkOpenBlock",
      "File": "tsdb/block_test.go",
      "Line": 82,
      "Receiver": ""
    },
    "BenchmarkOptimizeEqualOrPrefixStringMatchers": {
      "Name": "BenchmarkOptimizeEqualOrPrefixStringMatchers",
      "File": "model/labels/regexp_test.go",
      "Line": 1091,
      "Receiver": ""
    },
    "BenchmarkParseOMText": {
      "Name": "BenchmarkParseOMText",
      "File": "model/textparse/benchmark_test.go",
      "Line": 102,
      "Receiver": ""
    },
    "BenchmarkParseOpenMetricsNHCB": {
      "Name": "BenchmarkParseOpenMetricsNHCB",
      "File": "model/textparse/benchmark_test.go",
      "Line": 128,
      "Receiver": ""
    },
    "BenchmarkParsePromProto": {
      "Name": "BenchmarkParsePromProto",
      "File": "model/textparse/benchmark_test.go",
      "Line": 115,
      "Receiver": ""
    },
    "BenchmarkParsePromText": {
      "Name": "BenchmarkParsePromText",
      "File": "model/textparse/benchmark_test.go",
      "Line": 55,
      "Receiver": ""
    },
    "BenchmarkParsePromText_NoMeta": {
      "Name": "BenchmarkParsePromText_NoMeta",
      "File": "model/textparse/benchmark_test.go",
      "Line": 79,
      "Receiver": ""
    },
    "BenchmarkParser": {
      "Name": "BenchmarkParser",
      "File": "promql/bench_test.go",
      "Line": 630,
      "Receiver": ""
    },
    "BenchmarkPostingStatsMaxHep": {
      "Name": "BenchmarkPostingStatsMaxHep",
      "File": "tsdb/index/postingsstats_test.go",
      "Line": 58,
      "Receiver": ""
    },
    "BenchmarkPostings_Stats": {
      "Name": "BenchmarkPostings_Stats",
      "File": "tsdb/index/postings_test.go",
      "Line": 915,
      "Receiver": ""
    },
    "BenchmarkPrometheusConverter_FromMetrics": {
      "Name": "BenchmarkPrometheusConverter_FromMetrics",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 962,
      "Receiver": ""
    },
    "BenchmarkQuerier": {
      "Name": "BenchmarkQuerier",
      "File": "tsdb/querier_bench_test.go",
      "Line": 34,
      "Receiver": ""
    },
    "BenchmarkQuerierSelect": {
      "Name": "BenchmarkQuerierSelect",
      "File": "tsdb/querier_bench_test.go",
      "Line": 304,
      "Receiver": ""
    },
    "BenchmarkQuerierSelectWithOutOfOrder": {
      "Name": "BenchmarkQuerierSelectWithOutOfOrder",
      "File": "tsdb/querier_bench_test.go",
      "Line": 341,
      "Receiver": ""
    },
    "BenchmarkQueries": {
      "Name": "BenchmarkQueries",
      "File": "tsdb/querier_test.go",
      "Line": 3160,
      "Receiver": ""
    },
    "BenchmarkQueryIterator": {
      "Name": "BenchmarkQueryIterator",
      "File": "tsdb/querier_test.go",
      "Line": 2420,
      "Receiver": ""
    },
    "BenchmarkQuerySeek": {
      "Name": "BenchmarkQuerySeek",
      "File": "tsdb/querier_test.go",
      "Line": 2483,
      "Receiver": ""
    },
    "BenchmarkRangeQuery": {
      "Name": "BenchmarkRangeQuery",
      "File": "promql/bench_test.go",
      "Line": 270,
      "Receiver": ""
    },
    "BenchmarkReader_ShardedPostings": {
      "Name": "BenchmarkReader_ShardedPostings",
      "File": "tsdb/index/index_test.go",
      "Line": 538,
      "Receiver": ""
    },
    "BenchmarkRelabel": {
      "Name": "BenchmarkRelabel",
      "File": "model/relabel/relabel_test.go",
      "Line": 856,
      "Receiver": ""
    },
    "BenchmarkRemoteWriteHandler": {
      "Name": "BenchmarkRemoteWriteHandler",
      "File": "storage/remote/write_handler_test.go",
      "Line": 669,
      "Receiver": ""
    },
    "BenchmarkRemoteWriteOOOSamples": {
      "Name": "BenchmarkRemoteWriteOOOSamples",
      "File": "storage/remote/write_handler_test.go",
      "Line": 742,
      "Receiver": ""
    },
    "BenchmarkResizeExemplars": {
      "Name": "BenchmarkResizeExemplars",
      "File": "tsdb/exemplar_test.go",
      "Line": 445,
      "Receiver": ""
    },
    "BenchmarkResolvePodRef": {
      "Name": "BenchmarkResolvePodRef",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 1277,
      "Receiver": ""
    },
    "BenchmarkRespond": {
      "Name": "BenchmarkRespond",
      "File": "web/api/v1/api_test.go",
      "Line": 4422,
      "Receiver": ""
    },
    "BenchmarkRuleDependencyController_AnalyseRules": {
      "Name": "BenchmarkRuleDependencyController_AnalyseRules",
      "File": "rules/manager_test.go",
      "Line": 2693,
      "Receiver": ""
    },
    "BenchmarkRuleEval": {
      "Name": "BenchmarkRuleEval",
      "File": "rules/recording_test.go",
      "Line": 137,
      "Receiver": ""
    },
    "BenchmarkSampleSend": {
      "Name": "BenchmarkSampleSend",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1309,
      "Receiver": ""
    },
    "BenchmarkScrapeLoopAppend": {
      "Name": "BenchmarkScrapeLoopAppend",
      "File": "scrape/scrape_test.go",
      "Line": 1509,
      "Receiver": ""
    },
    "BenchmarkSetMatcher": {
      "Name": "BenchmarkSetMatcher",
      "File": "tsdb/querier_test.go",
      "Line": 2563,
      "Receiver": ""
    },
    "BenchmarkSize": {
      "Name": "BenchmarkSize",
      "File": "model/labels/labels_test.go",
      "Line": 86,
      "Receiver": ""
    },
    "BenchmarkStartup": {
      "Name": "BenchmarkStartup",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1398,
      "Receiver": ""
    },
    "BenchmarkStoreSeries": {
      "Name": "BenchmarkStoreSeries",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1347,
      "Receiver": ""
    },
    "BenchmarkStreamReadEndpoint": {
      "Name": "BenchmarkStreamReadEndpoint",
      "File": "storage/remote/read_handler_test.go",
      "Line": 134,
      "Receiver": ""
    },
    "BenchmarkString": {
      "Name": "BenchmarkString",
      "File": "model/labels/labels_test.go",
      "Line": 59,
      "Receiver": ""
    },
    "BenchmarkSyncPoolNewPointer": {
      "Name": "BenchmarkSyncPoolNewPointer",
      "File": "util/zeropool/pool_test.go",
      "Line": 144,
      "Receiver": ""
    },
    "BenchmarkSyncPoolPointer": {
      "Name": "BenchmarkSyncPoolPointer",
      "File": "util/zeropool/pool_test.go",
      "Line": 163,
      "Receiver": ""
    },
    "BenchmarkSyncPoolValue": {
      "Name": "BenchmarkSyncPoolValue",
      "File": "util/zeropool/pool_test.go",
      "Line": 127,
      "Receiver": ""
    },
    "BenchmarkTargetScraperGzip": {
      "Name": "BenchmarkTargetScraperGzip",
      "File": "scrape/scrape_test.go",
      "Line": 5066,
      "Receiver": ""
    },
    "BenchmarkTargetsFromGroup": {
      "Name": "BenchmarkTargetsFromGroup",
      "File": "scrape/target_test.go",
      "Line": 433,
      "Receiver": ""
    },
    "BenchmarkToNormalizedLower": {
      "Name": "BenchmarkToNormalizedLower",
      "File": "model/labels/regexp_test.go",
      "Line": 300,
      "Receiver": ""
    },
    "BenchmarkWAL_HistogramEncoding": {
      "Name": "BenchmarkWAL_HistogramEncoding",
      "File": "tsdb/record/record_test.go",
      "Line": 480,
      "Receiver": ""
    },
    "BenchmarkWAL_Log": {
      "Name": "BenchmarkWAL_Log",
      "File": "tsdb/wlog/wlog_test.go",
      "Line": 543,
      "Receiver": ""
    },
    "BenchmarkWAL_LogBatched": {
      "Name": "BenchmarkWAL_LogBatched",
      "File": "tsdb/wlog/wlog_test.go",
      "Line": 513,
      "Receiver": ""
    },
    "BenchmarkXORAppender": {
      "Name": "BenchmarkXORAppender",
      "File": "tsdb/chunkenc/chunk_test.go",
      "Line": 262,
      "Receiver": ""
    },
    "BenchmarkXORIterator": {
      "Name": "BenchmarkXORIterator",
      "File": "tsdb/chunkenc/chunk_test.go",
      "Line": 258,
      "Receiver": ""
    },
    "BenchmarkXorRead": {
      "Name": "BenchmarkXorRead",
      "File": "tsdb/chunkenc/xor_test.go",
      "Line": 22,
      "Receiver": ""
    },
    "BenchmarkZeroOrOneCharacterStringMatcher": {
      "Name": "BenchmarkZeroOrOneCharacterStringMatcher",
      "File": "model/labels/regexp_test.go",
      "Line": 1204,
      "Receiver": ""
    },
    "BenchmarkZeropoolPool": {
      "Name": "BenchmarkZeropoolPool",
      "File": "util/zeropool/pool_test.go",
      "Line": 112,
      "Receiver": ""
    },
    "BeyondSizeRetention": {
      "Name": "BeyondSizeRetention",
      "File": "tsdb/db.go",
      "Line": 1761,
      "Receiver": ""
    },
    "BeyondTimeRetention": {
      "Name": "BeyondTimeRetention",
      "File": "tsdb/db.go",
      "Line": 1738,
      "Receiver": ""
    },
    "BinaryExpr.PositionRange": {
      "Name": "BinaryExpr.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 454,
      "Receiver": "BinaryExpr"
    },
    "BinaryExpr.Pretty": {
      "Name": "BinaryExpr.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 67,
      "Receiver": "BinaryExpr"
    },
    "BinaryExpr.PromQLExpr": {
      "Name": "BinaryExpr.PromQLExpr",
      "File": "promql/parser/ast.go",
      "Line": 265,
      "Receiver": "BinaryExpr"
    },
    "BinaryExpr.ShortString": {
      "Name": "BinaryExpr.ShortString",
      "File": "promql/parser/printer.go",
      "Line": 124,
      "Receiver": "BinaryExpr"
    },
    "BinaryExpr.String": {
      "Name": "BinaryExpr.String",
      "File": "promql/parser/printer.go",
      "Line": 119,
      "Receiver": "BinaryExpr"
    },
    "BinaryExpr.Type": {
      "Name": "BinaryExpr.Type",
      "File": "promql/parser/ast.go",
      "Line": 255,
      "Receiver": "BinaryExpr"
    },
    "BinaryExpr.getMatchingStr": {
      "Name": "BinaryExpr.getMatchingStr",
      "File": "promql/parser/printer.go",
      "Line": 128,
      "Receiver": "BinaryExpr"
    },
    "BinaryExpr.returnBool": {
      "Name": "BinaryExpr.returnBool",
      "File": "promql/parser/printer.go",
      "Line": 112,
      "Receiver": "BinaryExpr"
    },
    "Block.Chunks": {
      "Name": "Block.Chunks",
      "File": "tsdb/block.go",
      "Line": 441,
      "Receiver": "Block"
    },
    "Block.CleanTombstones": {
      "Name": "Block.CleanTombstones",
      "File": "tsdb/block.go",
      "Line": 657,
      "Receiver": "Block"
    },
    "Block.Close": {
      "Name": "Block.Close",
      "File": "tsdb/block.go",
      "Line": 383,
      "Receiver": "Block"
    },
    "Block.Delete": {
      "Name": "Block.Delete",
      "File": "tsdb/block.go",
      "Line": 586,
      "Receiver": "Block"
    },
    "Block.Dir": {
      "Name": "Block.Dir",
      "File": "tsdb/block.go",
      "Line": 402,
      "Receiver": "Block"
    },
    "Block.GetSymbolTableSize": {
      "Name": "Block.GetSymbolTableSize",
      "File": "tsdb/block.go",
      "Line": 457,
      "Receiver": "Block"
    },
    "Block.Index": {
      "Name": "Block.Index",
      "File": "tsdb/block.go",
      "Line": 433,
      "Receiver": "Block"
    },
    "Block.LabelNames": {
      "Name": "Block.LabelNames",
      "File": "tsdb/block.go",
      "Line": 728,
      "Receiver": "Block"
    },
    "Block.MaxTime": {
      "Name": "Block.MaxTime",
      "File": "tsdb/block.go",
      "Line": 411,
      "Receiver": "Block"
    },
    "Block.Meta": {
      "Name": "Block.Meta",
      "File": "tsdb/block.go",
      "Line": 405,
      "Receiver": "Block"
    },
    "Block.MinTime": {
      "Name": "Block.MinTime",
      "File": "tsdb/block.go",
      "Line": 408,
      "Receiver": "Block"
    },
    "Block.OverlapsClosedInterval": {
      "Name": "Block.OverlapsClosedInterval",
      "File": "tsdb/block.go",
      "Line": 721,
      "Receiver": "Block"
    },
    "Block.Size": {
      "Name": "Block.Size",
      "File": "tsdb/block.go",
      "Line": 414,
      "Receiver": "Block"
    },
    "Block.Snapshot": {
      "Name": "Block.Snapshot",
      "File": "tsdb/block.go",
      "Line": 681,
      "Receiver": "Block"
    },
    "Block.String": {
      "Name": "Block.String",
      "File": "tsdb/block.go",
      "Line": 397,
      "Receiver": "Block"
    },
    "Block.Tombstones": {
      "Name": "Block.Tombstones",
      "File": "tsdb/block.go",
      "Line": 449,
      "Receiver": "Block"
    },
    "Block.setCompactionFailed": {
      "Name": "Block.setCompactionFailed",
      "File": "tsdb/block.go",
      "Line": 461,
      "Receiver": "Block"
    },
    "Block.startRead": {
      "Name": "Block.startRead",
      "File": "tsdb/block.go",
      "Line": 421,
      "Receiver": "Block"
    },
    "BlockChunkRef.Unpack": {
      "Name": "BlockChunkRef.Unpack",
      "File": "tsdb/chunks/chunks.go",
      "Line": 114,
      "Receiver": "BlockChunkRef"
    },
    "BlockMetaCompaction.FromOutOfOrder": {
      "Name": "BlockMetaCompaction.FromOutOfOrder",
      "File": "tsdb/block.go",
      "Line": 232,
      "Receiver": "BlockMetaCompaction"
    },
    "BlockMetaCompaction.SetOutOfOrder": {
      "Name": "BlockMetaCompaction.SetOutOfOrder",
      "File": "tsdb/block.go",
      "Line": 224,
      "Receiver": "BlockMetaCompaction"
    },
    "BlockWriter.Appender": {
      "Name": "BlockWriter.Appender",
      "File": "tsdb/blockwriter.go",
      "Line": 86,
      "Receiver": "BlockWriter"
    },
    "BlockWriter.Close": {
      "Name": "BlockWriter.Close",
      "File": "tsdb/blockwriter.go",
      "Line": 120,
      "Receiver": "BlockWriter"
    },
    "BlockWriter.Flush": {
      "Name": "BlockWriter.Flush",
      "File": "tsdb/blockwriter.go",
      "Line": 92,
      "Receiver": "BlockWriter"
    },
    "BlockWriter.initHead": {
      "Name": "BlockWriter.initHead",
      "File": "tsdb/blockwriter.go",
      "Line": 65,
      "Receiver": "BlockWriter"
    },
    "Bucket.Descriptor": {
      "Name": "Bucket.Descriptor",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 608,
      "Receiver": "Bucket"
    },
    "Bucket.GetCumulativeCount": {
      "Name": "Bucket.GetCumulativeCount",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 638,
      "Receiver": "Bucket"
    },
    "Bucket.GetCumulativeCountFloat": {
      "Name": "Bucket.GetCumulativeCountFloat",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 645,
      "Receiver": "Bucket"
    },
    "Bucket.GetExemplar": {
      "Name": "Bucket.GetExemplar",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 659,
      "Receiver": "Bucket"
    },
    "Bucket.GetUpperBound": {
      "Name": "Bucket.GetUpperBound",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 652,
      "Receiver": "Bucket"
    },
    "Bucket.Marshal": {
      "Name": "Bucket.Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1511,
      "Receiver": "Bucket"
    },
    "Bucket.MarshalTo": {
      "Name": "Bucket.MarshalTo",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1521,
      "Receiver": "Bucket"
    },
    "Bucket.MarshalToSizedBuffer": {
      "Name": "Bucket.MarshalToSizedBuffer",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1526,
      "Receiver": "Bucket"
    },
    "Bucket.ProtoMessage": {
      "Name": "Bucket.ProtoMessage",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 607,
      "Receiver": "Bucket"
    },
    "Bucket.Reset": {
      "Name": "Bucket.Reset",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 605,
      "Receiver": "Bucket"
    },
    "Bucket.Size": {
      "Name": "Bucket.Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 2047,
      "Receiver": "Bucket"
    },
    "Bucket.String": {
      "Name": "Bucket.String",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 606,
      "Receiver": "Bucket"
    },
    "Bucket.Unmarshal": {
      "Name": "Bucket.Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 3382,
      "Receiver": "Bucket"
    },
    "Bucket.XXX_DiscardUnknown": {
      "Name": "Bucket.XXX_DiscardUnknown",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 632,
      "Receiver": "Bucket"
    },
    "Bucket.XXX_Marshal": {
      "Name": "Bucket.XXX_Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 614,
      "Receiver": "Bucket"
    },
    "Bucket.XXX_Merge": {
      "Name": "Bucket.XXX_Merge",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 626,
      "Receiver": "Bucket"
    },
    "Bucket.XXX_Size": {
      "Name": "Bucket.XXX_Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 629,
      "Receiver": "Bucket"
    },
    "Bucket.XXX_Unmarshal": {
      "Name": "Bucket.XXX_Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 611,
      "Receiver": "Bucket"
    },
    "BucketFraction": {
      "Name": "BucketFraction",
      "File": "promql/quantile.go",
      "Line": 506,
      "Receiver": ""
    },
    "BucketQuantile": {
      "Name": "BucketQuantile",
      "File": "promql/quantile.go",
      "Line": 108,
      "Receiver": ""
    },
    "BucketSpan.Descriptor": {
      "Name": "BucketSpan.Descriptor",
      "File": "prompb/types.pb.go",
      "Line": 627,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.GetLength": {
      "Name": "BucketSpan.GetLength",
      "File": "prompb/types.pb.go",
      "Line": 664,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.GetOffset": {
      "Name": "BucketSpan.GetOffset",
      "File": "prompb/types.pb.go",
      "Line": 657,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.Marshal": {
      "Name": "BucketSpan.Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1595,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.MarshalTo": {
      "Name": "BucketSpan.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1605,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.MarshalToSizedBuffer": {
      "Name": "BucketSpan.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1610,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.ProtoMessage": {
      "Name": "BucketSpan.ProtoMessage",
      "File": "prompb/types.pb.go",
      "Line": 626,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.Reset": {
      "Name": "BucketSpan.Reset",
      "File": "prompb/types.pb.go",
      "Line": 624,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.Size": {
      "Name": "BucketSpan.Size",
      "File": "prompb/types.pb.go",
      "Line": 2204,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.String": {
      "Name": "BucketSpan.String",
      "File": "prompb/types.pb.go",
      "Line": 625,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.Unmarshal": {
      "Name": "BucketSpan.Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 3353,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.XXX_DiscardUnknown": {
      "Name": "BucketSpan.XXX_DiscardUnknown",
      "File": "prompb/types.pb.go",
      "Line": 651,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.XXX_Marshal": {
      "Name": "BucketSpan.XXX_Marshal",
      "File": "prompb/types.pb.go",
      "Line": 633,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.XXX_Merge": {
      "Name": "BucketSpan.XXX_Merge",
      "File": "prompb/types.pb.go",
      "Line": 645,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.XXX_Size": {
      "Name": "BucketSpan.XXX_Size",
      "File": "prompb/types.pb.go",
      "Line": 648,
      "Receiver": "BucketSpan"
    },
    "BucketSpan.XXX_Unmarshal": {
      "Name": "BucketSpan.XXX_Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 630,
      "Receiver": "BucketSpan"
    },
    "BufferedSeriesIterator.At": {
      "Name": "BufferedSeriesIterator.At",
      "File": "storage/buffer.go",
      "Line": 141,
      "Receiver": "BufferedSeriesIterator"
    },
    "BufferedSeriesIterator.AtFloatHistogram": {
      "Name": "BufferedSeriesIterator.AtFloatHistogram",
      "File": "storage/buffer.go",
      "Line": 151,
      "Receiver": "BufferedSeriesIterator"
    },
    "BufferedSeriesIterator.AtHistogram": {
      "Name": "BufferedSeriesIterator.AtHistogram",
      "File": "storage/buffer.go",
      "Line": 146,
      "Receiver": "BufferedSeriesIterator"
    },
    "BufferedSeriesIterator.AtT": {
      "Name": "BufferedSeriesIterator.AtT",
      "File": "storage/buffer.go",
      "Line": 156,
      "Receiver": "BufferedSeriesIterator"
    },
    "BufferedSeriesIterator.Buffer": {
      "Name": "BufferedSeriesIterator.Buffer",
      "File": "storage/buffer.go",
      "Line": 80,
      "Receiver": "BufferedSeriesIterator"
    },
    "BufferedSeriesIterator.Err": {
      "Name": "BufferedSeriesIterator.Err",
      "File": "storage/buffer.go",
      "Line": 161,
      "Receiver": "BufferedSeriesIterator"
    },
    "BufferedSeriesIterator.Next": {
      "Name": "BufferedSeriesIterator.Next",
      "File": "storage/buffer.go",
      "Line": 115,
      "Receiver": "BufferedSeriesIterator"
    },
    "BufferedSeriesIterator.PeekBack": {
      "Name": "BufferedSeriesIterator.PeekBack",
      "File": "storage/buffer.go",
      "Line": 74,
      "Receiver": "BufferedSeriesIterator"
    },
    "BufferedSeriesIterator.ReduceDelta": {
      "Name": "BufferedSeriesIterator.ReduceDelta",
      "File": "storage/buffer.go",
      "Line": 68,
      "Receiver": "BufferedSeriesIterator"
    },
    "BufferedSeriesIterator.Reset": {
      "Name": "BufferedSeriesIterator.Reset",
      "File": "storage/buffer.go",
      "Line": 59,
      "Receiver": "BufferedSeriesIterator"
    },
    "BufferedSeriesIterator.Seek": {
      "Name": "BufferedSeriesIterator.Seek",
      "File": "storage/buffer.go",
      "Line": 85,
      "Receiver": "BufferedSeriesIterator"
    },
    "Builder.Del": {
      "Name": "Builder.Del",
      "File": "model/labels/labels_common.go",
      "Line": 157,
      "Receiver": "Builder"
    },
    "Builder.Get": {
      "Name": "Builder.Get",
      "File": "model/labels/labels_common.go",
      "Line": 197,
      "Receiver": "Builder"
    },
    "Builder.Keep": {
      "Name": "Builder.Keep",
      "File": "model/labels/labels_common.go",
      "Line": 170,
      "Receiver": "Builder"
    },
    "Builder.Labels": {
      "Name": "Builder.Labels",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 480,
      "Receiver": "Builder"
    },
    "Builder.Range": {
      "Name": "Builder.Range",
      "File": "model/labels/labels_common.go",
      "Line": 211,
      "Receiver": "Builder"
    },
    "Builder.Reset": {
      "Name": "Builder.Reset",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 467,
      "Receiver": "Builder"
    },
    "Builder.Set": {
      "Name": "Builder.Set",
      "File": "model/labels/labels_common.go",
      "Line": 181,
      "Receiver": "Builder"
    },
    "BuiltinStats.Builtin": {
      "Name": "BuiltinStats.Builtin",
      "File": "util/stats/query_stats.go",
      "Line": 123,
      "Receiver": "BuiltinStats"
    },
    "ByLabelName.Len": {
      "Name": "ByLabelName.Len",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 79,
      "Receiver": "ByLabelName"
    },
    "ByLabelName.Less": {
      "Name": "ByLabelName.Less",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 80,
      "Receiver": "ByLabelName"
    },
    "ByLabelName.Swap": {
      "Name": "ByLabelName.Swap",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 81,
      "Receiver": "ByLabelName"
    },
    "Call.PositionRange": {
      "Name": "Call.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 480,
      "Receiver": "Call"
    },
    "Call.Pretty": {
      "Name": "Call.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 98,
      "Receiver": "Call"
    },
    "Call.PromQLExpr": {
      "Name": "Call.PromQLExpr",
      "File": "promql/parser/ast.go",
      "Line": 266,
      "Receiver": "Call"
    },
    "Call.ShortString": {
      "Name": "Call.ShortString",
      "File": "promql/parser/printer.go",
      "Line": 186,
      "Receiver": "Call"
    },
    "Call.String": {
      "Name": "Call.String",
      "File": "promql/parser/printer.go",
      "Line": 182,
      "Receiver": "Call"
    },
    "Call.Type": {
      "Name": "Call.Type",
      "File": "promql/parser/ast.go",
      "Line": 247,
      "Receiver": "Call"
    },
    "ChainSampleIteratorFromIterables": {
      "Name": "ChainSampleIteratorFromIterables",
      "File": "storage/merge.go",
      "Line": 515,
      "Receiver": ""
    },
    "ChainSampleIteratorFromIterators": {
      "Name": "ChainSampleIteratorFromIterators",
      "File": "storage/merge.go",
      "Line": 523,
      "Receiver": ""
    },
    "ChainSampleIteratorFromSeries": {
      "Name": "ChainSampleIteratorFromSeries",
      "File": "storage/merge.go",
      "Line": 507,
      "Receiver": ""
    },
    "ChainedSeriesMerge": {
      "Name": "ChainedSeriesMerge",
      "File": "storage/merge.go",
      "Line": 464,
      "Receiver": ""
    },
    "CheckConfig": {
      "Name": "CheckConfig",
      "File": "cmd/promtool/main.go",
      "Line": 580,
      "Receiver": ""
    },
    "CheckMetrics": {
      "Name": "CheckMetrics",
      "File": "cmd/promtool/main.go",
      "Line": 1022,
      "Receiver": ""
    },
    "CheckRules": {
      "Name": "CheckRules",
      "File": "cmd/promtool/main.go",
      "Line": 828,
      "Receiver": ""
    },
    "CheckSD": {
      "Name": "CheckSD",
      "File": "cmd/promtool/sd.go",
      "Line": 41,
      "Receiver": ""
    },
    "CheckServerStatus": {
      "Name": "CheckServerStatus",
      "File": "cmd/promtool/main.go",
      "Line": 543,
      "Receiver": ""
    },
    "CheckTargetAddress": {
      "Name": "CheckTargetAddress",
      "File": "config/config.go",
      "Line": 1251,
      "Receiver": ""
    },
    "CheckWebConfig": {
      "Name": "CheckWebConfig",
      "File": "cmd/promtool/main.go",
      "Line": 616,
      "Receiver": ""
    },
    "Checkpoint": {
      "Name": "Checkpoint",
      "File": "tsdb/wlog/checkpoint.go",
      "Line": 96,
      "Receiver": ""
    },
    "Children": {
      "Name": "Children",
      "File": "promql/parser/ast.go",
      "Line": 379,
      "Receiver": ""
    },
    "Chunk.Descriptor": {
      "Name": "Chunk.Descriptor",
      "File": "prompb/types.pb.go",
      "Line": 1021,
      "Receiver": "Chunk"
    },
    "Chunk.GetData": {
      "Name": "Chunk.GetData",
      "File": "prompb/types.pb.go",
      "Line": 1072,
      "Receiver": "Chunk"
    },
    "Chunk.GetMaxTimeMs": {
      "Name": "Chunk.GetMaxTimeMs",
      "File": "prompb/types.pb.go",
      "Line": 1058,
      "Receiver": "Chunk"
    },
    "Chunk.GetMinTimeMs": {
      "Name": "Chunk.GetMinTimeMs",
      "File": "prompb/types.pb.go",
      "Line": 1051,
      "Receiver": "Chunk"
    },
    "Chunk.GetType": {
      "Name": "Chunk.GetType",
      "File": "prompb/types.pb.go",
      "Line": 1065,
      "Receiver": "Chunk"
    },
    "Chunk.Marshal": {
      "Name": "Chunk.Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1916,
      "Receiver": "Chunk"
    },
    "Chunk.MarshalTo": {
      "Name": "Chunk.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1926,
      "Receiver": "Chunk"
    },
    "Chunk.MarshalToSizedBuffer": {
      "Name": "Chunk.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1931,
      "Receiver": "Chunk"
    },
    "Chunk.ProtoMessage": {
      "Name": "Chunk.ProtoMessage",
      "File": "prompb/types.pb.go",
      "Line": 1020,
      "Receiver": "Chunk"
    },
    "Chunk.Reset": {
      "Name": "Chunk.Reset",
      "File": "prompb/types.pb.go",
      "Line": 1018,
      "Receiver": "Chunk"
    },
    "Chunk.Size": {
      "Name": "Chunk.Size",
      "File": "prompb/types.pb.go",
      "Line": 2356,
      "Receiver": "Chunk"
    },
    "Chunk.String": {
      "Name": "Chunk.String",
      "File": "prompb/types.pb.go",
      "Line": 1019,
      "Receiver": "Chunk"
    },
    "Chunk.Unmarshal": {
      "Name": "Chunk.Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 4176,
      "Receiver": "Chunk"
    },
    "Chunk.XXX_DiscardUnknown": {
      "Name": "Chunk.XXX_DiscardUnknown",
      "File": "prompb/types.pb.go",
      "Line": 1045,
      "Receiver": "Chunk"
    },
    "Chunk.XXX_Marshal": {
      "Name": "Chunk.XXX_Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1027,
      "Receiver": "Chunk"
    },
    "Chunk.XXX_Merge": {
      "Name": "Chunk.XXX_Merge",
      "File": "prompb/types.pb.go",
      "Line": 1039,
      "Receiver": "Chunk"
    },
    "Chunk.XXX_Size": {
      "Name": "Chunk.XXX_Size",
      "File": "prompb/types.pb.go",
      "Line": 1042,
      "Receiver": "Chunk"
    },
    "Chunk.XXX_Unmarshal": {
      "Name": "Chunk.XXX_Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 1024,
      "Receiver": "Chunk"
    },
    "ChunkDiskMapper.ApplyOutOfOrderMask": {
      "Name": "ChunkDiskMapper.ApplyOutOfOrderMask",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 286,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.Chunk": {
      "Name": "ChunkDiskMapper.Chunk",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 698,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.Close": {
      "Name": "ChunkDiskMapper.Close",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 1062,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.CutNewFile": {
      "Name": "ChunkDiskMapper.CutNewFile",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 568,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.DeleteCorrupted": {
      "Name": "ChunkDiskMapper.DeleteCorrupted",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 1018,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.IsOutOfOrderChunk": {
      "Name": "ChunkDiskMapper.IsOutOfOrderChunk",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 291,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.IsQueueEmpty": {
      "Name": "ChunkDiskMapper.IsQueueEmpty",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 575,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.IterateAllChunks": {
      "Name": "ChunkDiskMapper.IterateAllChunks",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 815,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.RemoveMasks": {
      "Name": "ChunkDiskMapper.RemoveMasks",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 295,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.Size": {
      "Name": "ChunkDiskMapper.Size",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 1052,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.Truncate": {
      "Name": "ChunkDiskMapper.Truncate",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 935,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.WriteChunk": {
      "Name": "ChunkDiskMapper.WriteChunk",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 457,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.curFileSize": {
      "Name": "ChunkDiskMapper.curFileSize",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 1056,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.cut": {
      "Name": "ChunkDiskMapper.cut",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 601,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.cutAndExpectRef": {
      "Name": "ChunkDiskMapper.cutAndExpectRef",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 586,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.deleteFiles": {
      "Name": "ChunkDiskMapper.deleteFiles",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 993,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.finalizeCurFile": {
      "Name": "ChunkDiskMapper.finalizeCurFile",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 653,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.flushBuffer": {
      "Name": "ChunkDiskMapper.flushBuffer",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 689,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.openMMapFiles": {
      "Name": "ChunkDiskMapper.openMMapFiles",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 301,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.write": {
      "Name": "ChunkDiskMapper.write",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 669,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.writeAndAppendToCRC32": {
      "Name": "ChunkDiskMapper.writeAndAppendToCRC32",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 675,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.writeCRC32": {
      "Name": "ChunkDiskMapper.writeCRC32",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 683,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.writeChunk": {
      "Name": "ChunkDiskMapper.writeChunk",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 499,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapper.writeChunkViaQueue": {
      "Name": "ChunkDiskMapper.writeChunkViaQueue",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 475,
      "Receiver": "ChunkDiskMapper"
    },
    "ChunkDiskMapperRef.GreaterThan": {
      "Name": "ChunkDiskMapperRef.GreaterThan",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 96,
      "Receiver": "ChunkDiskMapperRef"
    },
    "ChunkDiskMapperRef.GreaterThanOrEqualTo": {
      "Name": "ChunkDiskMapperRef.GreaterThanOrEqualTo",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 90,
      "Receiver": "ChunkDiskMapperRef"
    },
    "ChunkDiskMapperRef.Unpack": {
      "Name": "ChunkDiskMapperRef.Unpack",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 84,
      "Receiver": "ChunkDiskMapperRef"
    },
    "ChunkFromSamples": {
      "Name": "ChunkFromSamples",
      "File": "tsdb/chunks/chunks.go",
      "Line": 139,
      "Receiver": ""
    },
    "ChunkFromSamplesGeneric": {
      "Name": "ChunkFromSamplesGeneric",
      "File": "tsdb/chunks/chunks.go",
      "Line": 144,
      "Receiver": ""
    },
    "ChunkMetasToSamples": {
      "Name": "ChunkMetasToSamples",
      "File": "tsdb/chunks/chunks.go",
      "Line": 198,
      "Receiver": ""
    },
    "ChunkSeriesEntry.Iterator": {
      "Name": "ChunkSeriesEntry.Iterator",
      "File": "storage/series.go",
      "Line": 41,
      "Receiver": "ChunkSeriesEntry"
    },
    "ChunkSeriesEntry.Labels": {
      "Name": "ChunkSeriesEntry.Labels",
      "File": "storage/series.go",
      "Line": 40,
      "Receiver": "ChunkSeriesEntry"
    },
    "Chunk_Encoding.EnumDescriptor": {
      "Name": "Chunk_Encoding.EnumDescriptor",
      "File": "prompb/types.pb.go",
      "Line": 161,
      "Receiver": "Chunk_Encoding"
    },
    "Chunk_Encoding.String": {
      "Name": "Chunk_Encoding.String",
      "File": "prompb/types.pb.go",
      "Line": 157,
      "Receiver": "Chunk_Encoding"
    },
    "ChunkedReadResponse.Descriptor": {
      "Name": "ChunkedReadResponse.Descriptor",
      "File": "prompb/remote.pb.go",
      "Line": 366,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.GetChunkedSeries": {
      "Name": "ChunkedReadResponse.GetChunkedSeries",
      "File": "prompb/remote.pb.go",
      "Line": 396,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.GetQueryIndex": {
      "Name": "ChunkedReadResponse.GetQueryIndex",
      "File": "prompb/remote.pb.go",
      "Line": 403,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.Marshal": {
      "Name": "ChunkedReadResponse.Marshal",
      "File": "prompb/remote.pb.go",
      "Line": 716,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.MarshalTo": {
      "Name": "ChunkedReadResponse.MarshalTo",
      "File": "prompb/remote.pb.go",
      "Line": 726,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.MarshalToSizedBuffer": {
      "Name": "ChunkedReadResponse.MarshalToSizedBuffer",
      "File": "prompb/remote.pb.go",
      "Line": 731,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.PooledMarshal": {
      "Name": "ChunkedReadResponse.PooledMarshal",
      "File": "prompb/custom.go",
      "Line": 20,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.ProtoMessage": {
      "Name": "ChunkedReadResponse.ProtoMessage",
      "File": "prompb/remote.pb.go",
      "Line": 365,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.Reset": {
      "Name": "ChunkedReadResponse.Reset",
      "File": "prompb/remote.pb.go",
      "Line": 363,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.Size": {
      "Name": "ChunkedReadResponse.Size",
      "File": "prompb/remote.pb.go",
      "Line": 886,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.String": {
      "Name": "ChunkedReadResponse.String",
      "File": "prompb/remote.pb.go",
      "Line": 364,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.Unmarshal": {
      "Name": "ChunkedReadResponse.Unmarshal",
      "File": "prompb/remote.pb.go",
      "Line": 1515,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.XXX_DiscardUnknown": {
      "Name": "ChunkedReadResponse.XXX_DiscardUnknown",
      "File": "prompb/remote.pb.go",
      "Line": 390,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.XXX_Marshal": {
      "Name": "ChunkedReadResponse.XXX_Marshal",
      "File": "prompb/remote.pb.go",
      "Line": 372,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.XXX_Merge": {
      "Name": "ChunkedReadResponse.XXX_Merge",
      "File": "prompb/remote.pb.go",
      "Line": 384,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.XXX_Size": {
      "Name": "ChunkedReadResponse.XXX_Size",
      "File": "prompb/remote.pb.go",
      "Line": 387,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReadResponse.XXX_Unmarshal": {
      "Name": "ChunkedReadResponse.XXX_Unmarshal",
      "File": "prompb/remote.pb.go",
      "Line": 369,
      "Receiver": "ChunkedReadResponse"
    },
    "ChunkedReader.Next": {
      "Name": "ChunkedReader.Next",
      "File": "storage/remote/chunked.go",
      "Line": 112,
      "Receiver": "ChunkedReader"
    },
    "ChunkedReader.NextProto": {
      "Name": "ChunkedReader.NextProto",
      "File": "storage/remote/chunked.go",
      "Line": 146,
      "Receiver": "ChunkedReader"
    },
    "ChunkedSeries.Descriptor": {
      "Name": "ChunkedSeries.Descriptor",
      "File": "prompb/types.pb.go",
      "Line": 1093,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.GetChunks": {
      "Name": "ChunkedSeries.GetChunks",
      "File": "prompb/types.pb.go",
      "Line": 1130,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.GetLabels": {
      "Name": "ChunkedSeries.GetLabels",
      "File": "prompb/types.pb.go",
      "Line": 1123,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.Marshal": {
      "Name": "ChunkedSeries.Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1965,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.MarshalTo": {
      "Name": "ChunkedSeries.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1975,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.MarshalToSizedBuffer": {
      "Name": "ChunkedSeries.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1980,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.ProtoMessage": {
      "Name": "ChunkedSeries.ProtoMessage",
      "File": "prompb/types.pb.go",
      "Line": 1092,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.Reset": {
      "Name": "ChunkedSeries.Reset",
      "File": "prompb/types.pb.go",
      "Line": 1090,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.Size": {
      "Name": "ChunkedSeries.Size",
      "File": "prompb/types.pb.go",
      "Line": 2381,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.String": {
      "Name": "ChunkedSeries.String",
      "File": "prompb/types.pb.go",
      "Line": 1091,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.ToLabels": {
      "Name": "ChunkedSeries.ToLabels",
      "File": "prompb/codec.go",
      "Line": 34,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.Unmarshal": {
      "Name": "ChunkedSeries.Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 4318,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.XXX_DiscardUnknown": {
      "Name": "ChunkedSeries.XXX_DiscardUnknown",
      "File": "prompb/types.pb.go",
      "Line": 1117,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.XXX_Marshal": {
      "Name": "ChunkedSeries.XXX_Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1099,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.XXX_Merge": {
      "Name": "ChunkedSeries.XXX_Merge",
      "File": "prompb/types.pb.go",
      "Line": 1111,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.XXX_Size": {
      "Name": "ChunkedSeries.XXX_Size",
      "File": "prompb/types.pb.go",
      "Line": 1114,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedSeries.XXX_Unmarshal": {
      "Name": "ChunkedSeries.XXX_Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 1096,
      "Receiver": "ChunkedSeries"
    },
    "ChunkedWriter.Write": {
      "Name": "ChunkedWriter.Write",
      "File": "storage/remote/chunked.go",
      "Line": 60,
      "Receiver": "ChunkedWriter"
    },
    "CircularExemplarStorage.AddExemplar": {
      "Name": "CircularExemplarStorage.AddExemplar",
      "File": "tsdb/exemplar.go",
      "Line": 348,
      "Receiver": "CircularExemplarStorage"
    },
    "CircularExemplarStorage.Appender": {
      "Name": "CircularExemplarStorage.Appender",
      "File": "tsdb/exemplar.go",
      "Line": 139,
      "Receiver": "CircularExemplarStorage"
    },
    "CircularExemplarStorage.ApplyConfig": {
      "Name": "CircularExemplarStorage.ApplyConfig",
      "File": "tsdb/exemplar.go",
      "Line": 134,
      "Receiver": "CircularExemplarStorage"
    },
    "CircularExemplarStorage.ExemplarQuerier": {
      "Name": "CircularExemplarStorage.ExemplarQuerier",
      "File": "tsdb/exemplar.go",
      "Line": 143,
      "Receiver": "CircularExemplarStorage"
    },
    "CircularExemplarStorage.IterateExemplars": {
      "Name": "CircularExemplarStorage.IterateExemplars",
      "File": "tsdb/exemplar.go",
      "Line": 429,
      "Receiver": "CircularExemplarStorage"
    },
    "CircularExemplarStorage.Querier": {
      "Name": "CircularExemplarStorage.Querier",
      "File": "tsdb/exemplar.go",
      "Line": 147,
      "Receiver": "CircularExemplarStorage"
    },
    "CircularExemplarStorage.ResetSymbolTable": {
      "Name": "CircularExemplarStorage.ResetSymbolTable",
      "File": "tsdb/head_dedupelabels.go",
      "Line": 72,
      "Receiver": "CircularExemplarStorage"
    },
    "CircularExemplarStorage.Resize": {
      "Name": "CircularExemplarStorage.Resize",
      "File": "tsdb/exemplar.go",
      "Line": 278,
      "Receiver": "CircularExemplarStorage"
    },
    "CircularExemplarStorage.Select": {
      "Name": "CircularExemplarStorage.Select",
      "File": "tsdb/exemplar.go",
      "Line": 152,
      "Receiver": "CircularExemplarStorage"
    },
    "CircularExemplarStorage.ValidateExemplar": {
      "Name": "CircularExemplarStorage.ValidateExemplar",
      "File": "tsdb/exemplar.go",
      "Line": 209,
      "Receiver": "CircularExemplarStorage"
    },
    "CircularExemplarStorage.computeMetrics": {
      "Name": "CircularExemplarStorage.computeMetrics",
      "File": "tsdb/exemplar.go",
      "Line": 405,
      "Receiver": "CircularExemplarStorage"
    },
    "CircularExemplarStorage.migrate": {
      "Name": "CircularExemplarStorage.migrate",
      "File": "tsdb/exemplar.go",
      "Line": 328,
      "Receiver": "CircularExemplarStorage"
    },
    "CircularExemplarStorage.validateExemplar": {
      "Name": "CircularExemplarStorage.validateExemplar",
      "File": "tsdb/exemplar.go",
      "Line": 222,
      "Receiver": "CircularExemplarStorage"
    },
    "Client.Collect": {
      "Name": "Client.Collect",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client.go",
      "Line": 339,
      "Receiver": "Client"
    },
    "Client.Describe": {
      "Name": "Client.Describe",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client.go",
      "Line": 334,
      "Receiver": "Client"
    },
    "Client.Endpoint": {
      "Name": "Client.Endpoint",
      "File": "storage/remote/client.go",
      "Line": 336,
      "Receiver": "Client"
    },
    "Client.Name": {
      "Name": "Client.Name",
      "File": "storage/remote/client.go",
      "Line": 331,
      "Receiver": "Client"
    },
    "Client.Read": {
      "Name": "Client.Read",
      "File": "storage/remote/client.go",
      "Line": 342,
      "Receiver": "Client"
    },
    "Client.Store": {
      "Name": "Client.Store",
      "File": "storage/remote/client.go",
      "Line": 254,
      "Receiver": "Client"
    },
    "Client.Write": {
      "Name": "Client.Write",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/opentsdb/client.go",
      "Line": 75,
      "Receiver": "Client"
    },
    "Client.buildCommand": {
      "Name": "Client.buildCommand",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client.go",
      "Line": 156,
      "Receiver": "Client"
    },
    "Client.handleSampledResponse": {
      "Name": "Client.handleSampledResponse",
      "File": "storage/remote/client.go",
      "Line": 421,
      "Receiver": "Client"
    },
    "CloseAll": {
      "Name": "CloseAll",
      "File": "tsdb/errors/errors.go",
      "Line": 103,
      "Receiver": ""
    },
    "CloudConfigurationFromName": {
      "Name": "CloudConfigurationFromName",
      "File": "discovery/azure/azure.go",
      "Line": 91,
      "Receiver": ""
    },
    "CompactBlockMetas": {
      "Name": "CompactBlockMetas",
      "File": "tsdb/compact.go",
      "Line": 416,
      "Receiver": ""
    },
    "Compare": {
      "Name": "Compare",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 332,
      "Receiver": ""
    },
    "CompressionHandler.ServeHTTP": {
      "Name": "CompressionHandler.ServeHTTP",
      "File": "util/httputil/compression.go",
      "Line": 97,
      "Receiver": "CompressionHandler"
    },
    "CondensedString": {
      "Name": "CondensedString",
      "File": "cmd/promtool/tsdb.go",
      "Line": 782,
      "Receiver": ""
    },
    "Config.GetScrapeConfigs": {
      "Name": "Config.GetScrapeConfigs",
      "File": "config/config.go",
      "Line": 319,
      "Receiver": "Config"
    },
    "Config.SetDirectory": {
      "Name": "Config.SetDirectory",
      "File": "config/config.go",
      "Line": 284,
      "Receiver": "Config"
    },
    "Config.String": {
      "Name": "Config.String",
      "File": "config/config.go",
      "Line": 305,
      "Receiver": "Config"
    },
    "Config.UnmarshalYAML": {
      "Name": "Config.UnmarshalYAML",
      "File": "model/relabel/relabel.go",
      "Line": 106,
      "Receiver": "Config"
    },
    "Config.Validate": {
      "Name": "Config.Validate",
      "File": "model/relabel/relabel.go",
      "Line": 118,
      "Receiver": "Config"
    },
    "Configs.MarshalYAML": {
      "Name": "Configs.MarshalYAML",
      "File": "discovery/discovery.go",
      "Line": 126,
      "Receiver": "Configs"
    },
    "Configs.SetDirectory": {
      "Name": "Configs.SetDirectory",
      "File": "discovery/discovery.go",
      "Line": 102,
      "Receiver": "Configs"
    },
    "Configs.UnmarshalYAML": {
      "Name": "Configs.UnmarshalYAML",
      "File": "discovery/discovery.go",
      "Line": 111,
      "Receiver": "Configs"
    },
    "ContextFromRequest": {
      "Name": "ContextFromRequest",
      "File": "util/httputil/context.go",
      "Line": 34,
      "Receiver": ""
    },
    "ContextWithMetricMetadataStore": {
      "Name": "ContextWithMetricMetadataStore",
      "File": "scrape/scrape.go",
      "Line": 2239,
      "Receiver": ""
    },
    "ContextWithPath": {
      "Name": "ContextWithPath",
      "File": "util/httputil/context.go",
      "Line": 28,
      "Receiver": ""
    },
    "ContextWithTarget": {
      "Name": "ContextWithTarget",
      "File": "scrape/scrape.go",
      "Line": 2248,
      "Receiver": ""
    },
    "CopyDirs": {
      "Name": "CopyDirs",
      "File": "tsdb/fileutil/fileutil.go",
      "Line": 28,
      "Receiver": ""
    },
    "CorruptionErr.Error": {
      "Name": "CorruptionErr.Error",
      "File": "tsdb/wlog/wlog.go",
      "Line": 112,
      "Receiver": "CorruptionErr"
    },
    "CorruptionErr.Unwrap": {
      "Name": "CorruptionErr.Unwrap",
      "File": "tsdb/wlog/wlog.go",
      "Line": 119,
      "Receiver": "CorruptionErr"
    },
    "Counter.Descriptor": {
      "Name": "Counter.Descriptor",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 186,
      "Receiver": "Counter"
    },
    "Counter.GetCreatedTimestamp": {
      "Name": "Counter.GetCreatedTimestamp",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 230,
      "Receiver": "Counter"
    },
    "Counter.GetExemplar": {
      "Name": "Counter.GetExemplar",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 223,
      "Receiver": "Counter"
    },
    "Counter.GetValue": {
      "Name": "Counter.GetValue",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 216,
      "Receiver": "Counter"
    },
    "Counter.Marshal": {
      "Name": "Counter.Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1124,
      "Receiver": "Counter"
    },
    "Counter.MarshalTo": {
      "Name": "Counter.MarshalTo",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1134,
      "Receiver": "Counter"
    },
    "Counter.MarshalToSizedBuffer": {
      "Name": "Counter.MarshalToSizedBuffer",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1139,
      "Receiver": "Counter"
    },
    "Counter.ProtoMessage": {
      "Name": "Counter.ProtoMessage",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 185,
      "Receiver": "Counter"
    },
    "Counter.Reset": {
      "Name": "Counter.Reset",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 183,
      "Receiver": "Counter"
    },
    "Counter.Size": {
      "Name": "Counter.Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1882,
      "Receiver": "Counter"
    },
    "Counter.String": {
      "Name": "Counter.String",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 184,
      "Receiver": "Counter"
    },
    "Counter.Unmarshal": {
      "Name": "Counter.Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 2372,
      "Receiver": "Counter"
    },
    "Counter.XXX_DiscardUnknown": {
      "Name": "Counter.XXX_DiscardUnknown",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 210,
      "Receiver": "Counter"
    },
    "Counter.XXX_Marshal": {
      "Name": "Counter.XXX_Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 192,
      "Receiver": "Counter"
    },
    "Counter.XXX_Merge": {
      "Name": "Counter.XXX_Merge",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 204,
      "Receiver": "Counter"
    },
    "Counter.XXX_Size": {
      "Name": "Counter.XXX_Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 207,
      "Receiver": "Counter"
    },
    "Counter.XXX_Unmarshal": {
      "Name": "Counter.XXX_Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 189,
      "Receiver": "Counter"
    },
    "CounterResetHintToHeader": {
      "Name": "CounterResetHintToHeader",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 895,
      "Receiver": ""
    },
    "CreateAndRegisterSDMetrics": {
      "Name": "CreateAndRegisterSDMetrics",
      "File": "discovery/manager.go",
      "Line": 72,
      "Receiver": ""
    },
    "CreateBlock": {
      "Name": "CreateBlock",
      "File": "tsdb/tsdbblockutil.go",
      "Line": 30,
      "Receiver": ""
    },
    "CreateSegment": {
      "Name": "CreateSegment",
      "File": "tsdb/wlog/wlog.go",
      "Line": 151,
      "Receiver": ""
    },
    "DB.Appender": {
      "Name": "DB.Appender",
      "File": "tsdb/db.go",
      "Line": 1125,
      "Receiver": "DB"
    },
    "DB.ApplyConfig": {
      "Name": "DB.ApplyConfig",
      "File": "tsdb/db.go",
      "Line": 1146,
      "Receiver": "DB"
    },
    "DB.Blocks": {
      "Name": "DB.Blocks",
      "File": "tsdb/db.go",
      "Line": 1924,
      "Receiver": "DB"
    },
    "DB.ChunkQuerier": {
      "Name": "DB.ChunkQuerier",
      "File": "tsdb/db.go",
      "Line": 2196,
      "Receiver": "DB"
    },
    "DB.CleanTombstones": {
      "Name": "DB.CleanTombstones",
      "File": "tsdb/db.go",
      "Line": 2239,
      "Receiver": "DB"
    },
    "DB.Close": {
      "Name": "DB.Close",
      "File": "tsdb/db.go",
      "Line": 1952,
      "Receiver": "DB"
    },
    "DB.Compact": {
      "Name": "DB.Compact",
      "File": "tsdb/db.go",
      "Line": 1234,
      "Receiver": "DB"
    },
    "DB.CompactHead": {
      "Name": "DB.CompactHead",
      "File": "tsdb/db.go",
      "Line": 1331,
      "Receiver": "DB"
    },
    "DB.CompactOOOHead": {
      "Name": "DB.CompactOOOHead",
      "File": "tsdb/db.go",
      "Line": 1346,
      "Receiver": "DB"
    },
    "DB.Delete": {
      "Name": "DB.Delete",
      "File": "tsdb/db.go",
      "Line": 2213,
      "Receiver": "DB"
    },
    "DB.Dir": {
      "Name": "DB.Dir",
      "File": "tsdb/db.go",
      "Line": 1073,
      "Receiver": "DB"
    },
    "DB.DisableCompactions": {
      "Name": "DB.DisableCompactions",
      "File": "tsdb/db.go",
      "Line": 1977,
      "Receiver": "DB"
    },
    "DB.DisableNativeHistograms": {
      "Name": "DB.DisableNativeHistograms",
      "File": "tsdb/db.go",
      "Line": 1190,
      "Receiver": "DB"
    },
    "DB.EnableCompactions": {
      "Name": "DB.EnableCompactions",
      "File": "tsdb/db.go",
      "Line": 1986,
      "Receiver": "DB"
    },
    "DB.EnableNativeHistograms": {
      "Name": "DB.EnableNativeHistograms",
      "File": "tsdb/db.go",
      "Line": 1185,
      "Receiver": "DB"
    },
    "DB.ExemplarQuerier": {
      "Name": "DB.ExemplarQuerier",
      "File": "tsdb/db.go",
      "Line": 2204,
      "Receiver": "DB"
    },
    "DB.ForceHeadMMap": {
      "Name": "DB.ForceHeadMMap",
      "File": "tsdb/db.go",
      "Line": 1999,
      "Receiver": "DB"
    },
    "DB.Head": {
      "Name": "DB.Head",
      "File": "tsdb/db.go",
      "Line": 1947,
      "Receiver": "DB"
    },
    "DB.Querier": {
      "Name": "DB.Querier",
      "File": "tsdb/db.go",
      "Line": 2042,
      "Receiver": "DB"
    },
    "DB.SetWriteNotified": {
      "Name": "DB.SetWriteNotified",
      "File": "tsdb/db.go",
      "Line": 2292,
      "Receiver": "DB"
    },
    "DB.Snapshot": {
      "Name": "DB.Snapshot",
      "File": "tsdb/db.go",
      "Line": 2005,
      "Receiver": "DB"
    },
    "DB.StartTime": {
      "Name": "DB.StartTime",
      "File": "tsdb/db.go",
      "Line": 1062,
      "Receiver": "DB"
    },
    "DB.String": {
      "Name": "DB.String",
      "File": "tsdb/db.go",
      "Line": 1919,
      "Receiver": "DB"
    },
    "DB.blockChunkQuerierForRange": {
      "Name": "DB.blockChunkQuerierForRange",
      "File": "tsdb/db.go",
      "Line": 2120,
      "Receiver": "DB"
    },
    "DB.compactBlocks": {
      "Name": "DB.compactBlocks",
      "File": "tsdb/db.go",
      "Line": 1483,
      "Receiver": "DB"
    },
    "DB.compactHead": {
      "Name": "DB.compactHead",
      "File": "tsdb/db.go",
      "Line": 1457,
      "Receiver": "DB"
    },
    "DB.compactOOO": {
      "Name": "DB.compactOOO",
      "File": "tsdb/db.go",
      "Line": 1412,
      "Receiver": "DB"
    },
    "DB.compactOOOHead": {
      "Name": "DB.compactOOOHead",
      "File": "tsdb/db.go",
      "Line": 1357,
      "Receiver": "DB"
    },
    "DB.deleteBlocks": {
      "Name": "DB.deleteBlocks",
      "File": "tsdb/db.go",
      "Line": 1789,
      "Receiver": "DB"
    },
    "DB.gc": {
      "Name": "DB.gc",
      "File": "tsdb/agent/db.go",
      "Line": 722,
      "Receiver": "DB"
    },
    "DB.generateCompactionDelay": {
      "Name": "DB.generateCompactionDelay",
      "File": "tsdb/db.go",
      "Line": 1994,
      "Receiver": "DB"
    },
    "DB.inOrderBlocksMaxTime": {
      "Name": "DB.inOrderBlocksMaxTime",
      "File": "tsdb/db.go",
      "Line": 1934,
      "Receiver": "DB"
    },
    "DB.keepSeriesInWALCheckpoint": {
      "Name": "DB.keepSeriesInWALCheckpoint",
      "File": "tsdb/agent/db.go",
      "Line": 636,
      "Receiver": "DB"
    },
    "DB.loadWAL": {
      "Name": "DB.loadWAL",
      "File": "tsdb/agent/db.go",
      "Line": 437,
      "Receiver": "DB"
    },
    "DB.reload": {
      "Name": "DB.reload",
      "File": "tsdb/db.go",
      "Line": 1540,
      "Receiver": "DB"
    },
    "DB.reloadBlocks": {
      "Name": "DB.reloadBlocks",
      "File": "tsdb/db.go",
      "Line": 1557,
      "Receiver": "DB"
    },
    "DB.replayWAL": {
      "Name": "DB.replayWAL",
      "File": "tsdb/agent/db.go",
      "Line": 368,
      "Receiver": "DB"
    },
    "DB.resetWALReplayResources": {
      "Name": "DB.resetWALReplayResources",
      "File": "tsdb/agent/db.go",
      "Line": 430,
      "Receiver": "DB"
    },
    "DB.run": {
      "Name": "DB.run",
      "File": "tsdb/db.go",
      "Line": 1077,
      "Receiver": "DB"
    },
    "DB.truncate": {
      "Name": "DB.truncate",
      "File": "tsdb/agent/db.go",
      "Line": 647,
      "Receiver": "DB"
    },
    "DB.waitingForCompactionDelay": {
      "Name": "DB.waitingForCompactionDelay",
      "File": "tsdb/db.go",
      "Line": 1226,
      "Receiver": "DB"
    },
    "DBReadOnly.Block": {
      "Name": "DBReadOnly.Block",
      "File": "tsdb/db.go",
      "Line": 737,
      "Receiver": "DBReadOnly"
    },
    "DBReadOnly.Blocks": {
      "Name": "DBReadOnly.Blocks",
      "File": "tsdb/db.go",
      "Line": 633,
      "Receiver": "DBReadOnly"
    },
    "DBReadOnly.ChunkQuerier": {
      "Name": "DBReadOnly.ChunkQuerier",
      "File": "tsdb/db.go",
      "Line": 624,
      "Receiver": "DBReadOnly"
    },
    "DBReadOnly.Close": {
      "Name": "DBReadOnly.Close",
      "File": "tsdb/db.go",
      "Line": 759,
      "Receiver": "DBReadOnly"
    },
    "DBReadOnly.FlushWAL": {
      "Name": "DBReadOnly.FlushWAL",
      "File": "tsdb/db.go",
      "Line": 469,
      "Receiver": "DBReadOnly"
    },
    "DBReadOnly.LastBlockID": {
      "Name": "DBReadOnly.LastBlockID",
      "File": "tsdb/db.go",
      "Line": 705,
      "Receiver": "DBReadOnly"
    },
    "DBReadOnly.Querier": {
      "Name": "DBReadOnly.Querier",
      "File": "tsdb/db.go",
      "Line": 614,
      "Receiver": "DBReadOnly"
    },
    "DBReadOnly.loadDataAsQueryable": {
      "Name": "DBReadOnly.loadDataAsQueryable",
      "File": "tsdb/db.go",
      "Line": 530,
      "Receiver": "DBReadOnly"
    },
    "Decbuf.Be32": {
      "Name": "Decbuf.Be32",
      "File": "tsdb/encoding/encoding.go",
      "Line": 268,
      "Receiver": "Decbuf"
    },
    "Decbuf.Be32int": {
      "Name": "Decbuf.Be32int",
      "File": "tsdb/encoding/encoding.go",
      "Line": 182,
      "Receiver": "Decbuf"
    },
    "Decbuf.Be64": {
      "Name": "Decbuf.Be64",
      "File": "tsdb/encoding/encoding.go",
      "Line": 251,
      "Receiver": "Decbuf"
    },
    "Decbuf.Be64Float64": {
      "Name": "Decbuf.Be64Float64",
      "File": "tsdb/encoding/encoding.go",
      "Line": 264,
      "Receiver": "Decbuf"
    },
    "Decbuf.Be64int64": {
      "Name": "Decbuf.Be64int64",
      "File": "tsdb/encoding/encoding.go",
      "Line": 183,
      "Receiver": "Decbuf"
    },
    "Decbuf.Byte": {
      "Name": "Decbuf.Byte",
      "File": "tsdb/encoding/encoding.go",
      "Line": 281,
      "Receiver": "Decbuf"
    },
    "Decbuf.ConsumePadding": {
      "Name": "Decbuf.ConsumePadding",
      "File": "tsdb/encoding/encoding.go",
      "Line": 294,
      "Receiver": "Decbuf"
    },
    "Decbuf.Crc32": {
      "Name": "Decbuf.Crc32",
      "File": "tsdb/encoding/encoding.go",
      "Line": 186,
      "Receiver": "Decbuf"
    },
    "Decbuf.Err": {
      "Name": "Decbuf.Err",
      "File": "tsdb/encoding/encoding.go",
      "Line": 306,
      "Receiver": "Decbuf"
    },
    "Decbuf.Get": {
      "Name": "Decbuf.Get",
      "File": "tsdb/encoding/encoding.go",
      "Line": 308,
      "Receiver": "Decbuf"
    },
    "Decbuf.Len": {
      "Name": "Decbuf.Len",
      "File": "tsdb/encoding/encoding.go",
      "Line": 307,
      "Receiver": "Decbuf"
    },
    "Decbuf.Skip": {
      "Name": "Decbuf.Skip",
      "File": "tsdb/encoding/encoding.go",
      "Line": 190,
      "Receiver": "Decbuf"
    },
    "Decbuf.Uvarint": {
      "Name": "Decbuf.Uvarint",
      "File": "tsdb/encoding/encoding.go",
      "Line": 180,
      "Receiver": "Decbuf"
    },
    "Decbuf.Uvarint32": {
      "Name": "Decbuf.Uvarint32",
      "File": "tsdb/encoding/encoding.go",
      "Line": 181,
      "Receiver": "Decbuf"
    },
    "Decbuf.Uvarint64": {
      "Name": "Decbuf.Uvarint64",
      "File": "tsdb/encoding/encoding.go",
      "Line": 238,
      "Receiver": "Decbuf"
    },
    "Decbuf.UvarintBytes": {
      "Name": "Decbuf.UvarintBytes",
      "File": "tsdb/encoding/encoding.go",
      "Line": 205,
      "Receiver": "Decbuf"
    },
    "Decbuf.UvarintStr": {
      "Name": "Decbuf.UvarintStr",
      "File": "tsdb/encoding/encoding.go",
      "Line": 198,
      "Receiver": "Decbuf"
    },
    "Decbuf.Varint64": {
      "Name": "Decbuf.Varint64",
      "File": "tsdb/encoding/encoding.go",
      "Line": 219,
      "Receiver": "Decbuf"
    },
    "Decode": {
      "Name": "Decode",
      "File": "util/compression/compression.go",
      "Line": 93,
      "Receiver": ""
    },
    "DecodeFloatHistogram": {
      "Name": "DecodeFloatHistogram",
      "File": "tsdb/record/record.go",
      "Line": 565,
      "Receiver": ""
    },
    "DecodeHistogram": {
      "Name": "DecodeHistogram",
      "File": "tsdb/record/record.go",
      "Line": 473,
      "Receiver": ""
    },
    "DecodeOTLPWriteRequest": {
      "Name": "DecodeOTLPWriteRequest",
      "File": "storage/remote/codec.go",
      "Line": 881,
      "Receiver": ""
    },
    "DecodePostingsRaw": {
      "Name": "DecodePostingsRaw",
      "File": "tsdb/index/index.go",
      "Line": 1935,
      "Receiver": ""
    },
    "DecodeReadRequest": {
      "Name": "DecodeReadRequest",
      "File": "storage/remote/codec.go",
      "Line": 64,
      "Receiver": ""
    },
    "DecodeWriteRequest": {
      "Name": "DecodeWriteRequest",
      "File": "storage/remote/codec.go",
      "Line": 840,
      "Receiver": ""
    },
    "DecodeWriteV2Request": {
      "Name": "DecodeWriteV2Request",
      "File": "storage/remote/codec.go",
      "Line": 862,
      "Receiver": ""
    },
    "Decoder.DecodeLabels": {
      "Name": "Decoder.DecodeLabels",
      "File": "tsdb/record/record.go",
      "Line": 293,
      "Receiver": "Decoder"
    },
    "Decoder.Exemplars": {
      "Name": "Decoder.Exemplars",
      "File": "tsdb/record/record.go",
      "Line": 367,
      "Receiver": "Decoder"
    },
    "Decoder.ExemplarsFromBuffer": {
      "Name": "Decoder.ExemplarsFromBuffer",
      "File": "tsdb/record/record.go",
      "Line": 377,
      "Receiver": "Decoder"
    },
    "Decoder.FloatHistogramSamples": {
      "Name": "Decoder.FloatHistogramSamples",
      "File": "tsdb/record/record.go",
      "Line": 528,
      "Receiver": "Decoder"
    },
    "Decoder.HistogramSamples": {
      "Name": "Decoder.HistogramSamples",
      "File": "tsdb/record/record.go",
      "Line": 436,
      "Receiver": "Decoder"
    },
    "Decoder.LabelNamesOffsetsFor": {
      "Name": "Decoder.LabelNamesOffsetsFor",
      "File": "tsdb/index/index.go",
      "Line": 1949,
      "Receiver": "Decoder"
    },
    "Decoder.LabelValueFor": {
      "Name": "Decoder.LabelValueFor",
      "File": "tsdb/index/index.go",
      "Line": 1967,
      "Receiver": "Decoder"
    },
    "Decoder.Metadata": {
      "Name": "Decoder.Metadata",
      "File": "tsdb/record/record.go",
      "Line": 250,
      "Receiver": "Decoder"
    },
    "Decoder.MmapMarkers": {
      "Name": "Decoder.MmapMarkers",
      "File": "tsdb/record/record.go",
      "Line": 408,
      "Receiver": "Decoder"
    },
    "Decoder.Samples": {
      "Name": "Decoder.Samples",
      "File": "tsdb/record/record.go",
      "Line": 305,
      "Receiver": "Decoder"
    },
    "Decoder.Series": {
      "Name": "Decoder.Series",
      "File": "tsdb/record/record.go",
      "Line": 225,
      "Receiver": "Decoder"
    },
    "Decoder.Tombstones": {
      "Name": "Decoder.Tombstones",
      "File": "tsdb/record/record.go",
      "Line": 344,
      "Receiver": "Decoder"
    },
    "Decoder.Type": {
      "Name": "Decoder.Type",
      "File": "tsdb/record/record.go",
      "Line": 213,
      "Receiver": "Decoder"
    },
    "Dedupe": {
      "Name": "Dedupe",
      "File": "util/logging/dedupe.go",
      "Line": 41,
      "Receiver": ""
    },
    "Deduper.Enabled": {
      "Name": "Deduper.Enabled",
      "File": "util/logging/dedupe.go",
      "Line": 56,
      "Receiver": "Deduper"
    },
    "Deduper.Handle": {
      "Name": "Deduper.Handle",
      "File": "util/logging/dedupe.go",
      "Line": 65,
      "Receiver": "Deduper"
    },
    "Deduper.Stop": {
      "Name": "Deduper.Stop",
      "File": "util/logging/dedupe.go",
      "Line": 113,
      "Receiver": "Deduper"
    },
    "Deduper.WithAttrs": {
      "Name": "Deduper.WithAttrs",
      "File": "util/logging/dedupe.go",
      "Line": 86,
      "Receiver": "Deduper"
    },
    "Deduper.WithGroup": {
      "Name": "Deduper.WithGroup",
      "File": "util/logging/dedupe.go",
      "Line": 98,
      "Receiver": "Deduper"
    },
    "Deduper.run": {
      "Name": "Deduper.run",
      "File": "util/logging/dedupe.go",
      "Line": 117,
      "Receiver": "Deduper"
    },
    "DefaultBlockPopulator.PopulateBlock": {
      "Name": "DefaultBlockPopulator.PopulateBlock",
      "File": "tsdb/compact.go",
      "Line": 764,
      "Receiver": "DefaultBlockPopulator"
    },
    "DefaultBlocksToDelete": {
      "Name": "DefaultBlocksToDelete",
      "File": "tsdb/db.go",
      "Line": 1696,
      "Receiver": ""
    },
    "DefaultEvalIterationFunc": {
      "Name": "DefaultEvalIterationFunc",
      "File": "rules/manager.go",
      "Line": 78,
      "Receiver": ""
    },
    "DefaultHeadOptions": {
      "Name": "DefaultHeadOptions",
      "File": "tsdb/head.go",
      "Line": 198,
      "Receiver": ""
    },
    "DefaultOptions": {
      "Name": "DefaultOptions",
      "File": "tsdb/db.go",
      "Line": 75,
      "Receiver": ""
    },
    "DefaultPostingsDecoderFactory": {
      "Name": "DefaultPostingsDecoderFactory",
      "File": "tsdb/compact.go",
      "Line": 181,
      "Receiver": ""
    },
    "DefaultStatsRenderer": {
      "Name": "DefaultStatsRenderer",
      "File": "web/api/v1/api.go",
      "Line": 129,
      "Receiver": ""
    },
    "DeleteCheckpoints": {
      "Name": "DeleteCheckpoints",
      "File": "tsdb/wlog/checkpoint.go",
      "Line": 68,
      "Receiver": ""
    },
    "DeleteChunkSnapshots": {
      "Name": "DeleteChunkSnapshots",
      "File": "tsdb/head_wal.go",
      "Line": 1475,
      "Receiver": ""
    },
    "DeletedIterator.At": {
      "Name": "DeletedIterator.At",
      "File": "tsdb/querier.go",
      "Line": 1187,
      "Receiver": "DeletedIterator"
    },
    "DeletedIterator.AtFloatHistogram": {
      "Name": "DeletedIterator.AtFloatHistogram",
      "File": "tsdb/querier.go",
      "Line": 1196,
      "Receiver": "DeletedIterator"
    },
    "DeletedIterator.AtHistogram": {
      "Name": "DeletedIterator.AtHistogram",
      "File": "tsdb/querier.go",
      "Line": 1191,
      "Receiver": "DeletedIterator"
    },
    "DeletedIterator.AtT": {
      "Name": "DeletedIterator.AtT",
      "File": "tsdb/querier.go",
      "Line": 1201,
      "Receiver": "DeletedIterator"
    },
    "DeletedIterator.Err": {
      "Name": "DeletedIterator.Err",
      "File": "tsdb/querier.go",
      "Line": 1253,
      "Receiver": "DeletedIterator"
    },
    "DeletedIterator.Next": {
      "Name": "DeletedIterator.Next",
      "File": "tsdb/querier.go",
      "Line": 1234,
      "Receiver": "DeletedIterator"
    },
    "DeletedIterator.Seek": {
      "Name": "DeletedIterator.Seek",
      "File": "tsdb/querier.go",
      "Line": 1205,
      "Receiver": "DeletedIterator"
    },
    "DigitalOceanSDTestSuite.SetupTest": {
      "Name": "DigitalOceanSDTestSuite.SetupTest",
      "File": "discovery/digitalocean/digitalocean_test.go",
      "Line": 38,
      "Receiver": "DigitalOceanSDTestSuite"
    },
    "DigitalOceanSDTestSuite.TearDownSuite": {
      "Name": "DigitalOceanSDTestSuite.TearDownSuite",
      "File": "discovery/digitalocean/digitalocean_test.go",
      "Line": 34,
      "Receiver": "DigitalOceanSDTestSuite"
    },
    "DirHash": {
      "Name": "DirHash",
      "File": "util/testutil/directory.go",
      "Line": 134,
      "Receiver": ""
    },
    "DirLocker.Lock": {
      "Name": "DirLocker.Lock",
      "File": "tsdb/tsdbutil/dir_locker.go",
      "Line": 70,
      "Receiver": "DirLocker"
    },
    "DirLocker.Release": {
      "Name": "DirLocker.Release",
      "File": "tsdb/tsdbutil/dir_locker.go",
      "Line": 92,
      "Receiver": "DirLocker"
    },
    "DirSize": {
      "Name": "DirSize",
      "File": "tsdb/fileutil/dir.go",
      "Line": 21,
      "Receiver": ""
    },
    "Discovery.Refresh": {
      "Name": "Discovery.Refresh",
      "File": "discovery/http/http.go",
      "Line": 153,
      "Receiver": "Discovery"
    },
    "Discovery.Run": {
      "Name": "Discovery.Run",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 201,
      "Receiver": "Discovery"
    },
    "Discovery.addToCache": {
      "Name": "Discovery.addToCache",
      "File": "discovery/azure/azure.go",
      "Line": 720,
      "Receiver": "Discovery"
    },
    "Discovery.createAzureClient": {
      "Name": "Discovery.createAzureClient",
      "File": "discovery/azure/azure.go",
      "Line": 232,
      "Receiver": "Discovery"
    },
    "Discovery.deleteTimestamp": {
      "Name": "Discovery.deleteTimestamp",
      "File": "discovery/file/file.go",
      "Line": 295,
      "Receiver": "Discovery"
    },
    "Discovery.fetchTargetGroups": {
      "Name": "Discovery.fetchTargetGroups",
      "File": "discovery/marathon/marathon.go",
      "Line": 258,
      "Receiver": "Discovery"
    },
    "Discovery.getDatacenter": {
      "Name": "Discovery.getDatacenter",
      "File": "discovery/consul/consul.go",
      "Line": 277,
      "Receiver": "Discovery"
    },
    "Discovery.getEndpointLabels": {
      "Name": "Discovery.getEndpointLabels",
      "File": "discovery/uyuni/uyuni.go",
      "Line": 256,
      "Receiver": "Discovery"
    },
    "Discovery.getFromCache": {
      "Name": "Discovery.getFromCache",
      "File": "discovery/azure/azure.go",
      "Line": 730,
      "Receiver": "Discovery"
    },
    "Discovery.getNamespaces": {
      "Name": "Discovery.getNamespaces",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 257,
      "Receiver": "Discovery"
    },
    "Discovery.getNodesLabels": {
      "Name": "Discovery.getNodesLabels",
      "File": "discovery/moby/nodes.go",
      "Line": 87,
      "Receiver": "Discovery"
    },
    "Discovery.getServicesLabelsAndPorts": {
      "Name": "Discovery.getServicesLabelsAndPorts",
      "File": "discovery/moby/services.go",
      "Line": 128,
      "Receiver": "Discovery"
    },
    "Discovery.getTargetsForSystems": {
      "Name": "Discovery.getTargetsForSystems",
      "File": "discovery/uyuni/uyuni.go",
      "Line": 295,
      "Receiver": "Discovery"
    },
    "Discovery.hasSynced": {
      "Name": "Discovery.hasSynced",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 237,
      "Receiver": "Discovery"
    },
    "Discovery.informerWatchErrorHandler": {
      "Name": "Discovery.informerWatchErrorHandler",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 761,
      "Receiver": "Discovery"
    },
    "Discovery.initialize": {
      "Name": "Discovery.initialize",
      "File": "discovery/consul/consul.go",
      "Line": 304,
      "Receiver": "Discovery"
    },
    "Discovery.listDroplets": {
      "Name": "Discovery.listDroplets",
      "File": "discovery/digitalocean/digitalocean.go",
      "Line": 216,
      "Receiver": "Discovery"
    },
    "Discovery.listFiles": {
      "Name": "Discovery.listFiles",
      "File": "discovery/file/file.go",
      "Line": 208,
      "Receiver": "Discovery"
    },
    "Discovery.listInstances": {
      "Name": "Discovery.listInstances",
      "File": "discovery/vultr/vultr.go",
      "Line": 201,
      "Receiver": "Discovery"
    },
    "Discovery.mustNewSharedIndexInformer": {
      "Name": "Discovery.mustNewSharedIndexInformer",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 776,
      "Receiver": "Discovery"
    },
    "Discovery.mustNewSharedInformer": {
      "Name": "Discovery.mustNewSharedInformer",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 766,
      "Receiver": "Discovery"
    },
    "Discovery.newEndpointSlicesByNodeInformer": {
      "Name": "Discovery.newEndpointSlicesByNodeInformer",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 716,
      "Receiver": "Discovery"
    },
    "Discovery.newEndpointsByNodeInformer": {
      "Name": "Discovery.newEndpointsByNodeInformer",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 669,
      "Receiver": "Discovery"
    },
    "Discovery.newNodeInformer": {
      "Name": "Discovery.newNodeInformer",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 638,
      "Receiver": "Discovery"
    },
    "Discovery.newPodsByNodeInformer": {
      "Name": "Discovery.newPodsByNodeInformer",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 654,
      "Receiver": "Discovery"
    },
    "Discovery.processComputeNodeResponse": {
      "Name": "Discovery.processComputeNodeResponse",
      "File": "discovery/triton/triton.go",
      "Line": 278,
      "Receiver": "Discovery"
    },
    "Discovery.processContainerResponse": {
      "Name": "Discovery.processContainerResponse",
      "File": "discovery/triton/triton.go",
      "Line": 245,
      "Receiver": "Discovery"
    },
    "Discovery.readFile": {
      "Name": "Discovery.readFile",
      "File": "discovery/file/file.go",
      "Line": 377,
      "Receiver": "Discovery"
    },
    "Discovery.refresh": {
      "Name": "Discovery.refresh",
      "File": "discovery/vultr/vultr.go",
      "Line": 151,
      "Receiver": "Discovery"
    },
    "Discovery.refreshAzureClient": {
      "Name": "Discovery.refreshAzureClient",
      "File": "discovery/azure/azure.go",
      "Line": 348,
      "Receiver": "Discovery"
    },
    "Discovery.refreshData": {
      "Name": "Discovery.refreshData",
      "File": "discovery/linode/linode.go",
      "Line": 230,
      "Receiver": "Discovery"
    },
    "Discovery.refreshNodes": {
      "Name": "Discovery.refreshNodes",
      "File": "discovery/moby/nodes.go",
      "Line": 46,
      "Receiver": "Discovery"
    },
    "Discovery.refreshOne": {
      "Name": "Discovery.refreshOne",
      "File": "discovery/dns/dns.go",
      "Line": 194,
      "Receiver": "Discovery"
    },
    "Discovery.refreshServices": {
      "Name": "Discovery.refreshServices",
      "File": "discovery/moby/services.go",
      "Line": 43,
      "Receiver": "Discovery"
    },
    "Discovery.refreshTasks": {
      "Name": "Discovery.refreshTasks",
      "File": "discovery/moby/tasks.go",
      "Line": 40,
      "Receiver": "Discovery"
    },
    "Discovery.shouldWatch": {
      "Name": "Discovery.shouldWatch",
      "File": "discovery/consul/consul.go",
      "Line": 241,
      "Receiver": "Discovery"
    },
    "Discovery.shouldWatchFromName": {
      "Name": "Discovery.shouldWatchFromName",
      "File": "discovery/consul/consul.go",
      "Line": 246,
      "Receiver": "Discovery"
    },
    "Discovery.shouldWatchFromTags": {
      "Name": "Discovery.shouldWatchFromTags",
      "File": "discovery/consul/consul.go",
      "Line": 258,
      "Receiver": "Discovery"
    },
    "Discovery.stop": {
      "Name": "Discovery.stop",
      "File": "discovery/file/file.go",
      "Line": 302,
      "Receiver": "Discovery"
    },
    "Discovery.vmToLabelSet": {
      "Name": "Discovery.vmToLabelSet",
      "File": "discovery/azure/azure.go",
      "Line": 420,
      "Receiver": "Discovery"
    },
    "Discovery.watchFiles": {
      "Name": "Discovery.watchFiles",
      "File": "discovery/file/file.go",
      "Line": 223,
      "Receiver": "Discovery"
    },
    "Discovery.watchService": {
      "Name": "Discovery.watchService",
      "File": "discovery/consul/consul.go",
      "Line": 456,
      "Receiver": "Discovery"
    },
    "Discovery.watchServices": {
      "Name": "Discovery.watchServices",
      "File": "discovery/consul/consul.go",
      "Line": 363,
      "Receiver": "Discovery"
    },
    "Discovery.writeTimestamp": {
      "Name": "Discovery.writeTimestamp",
      "File": "discovery/file/file.go",
      "Line": 289,
      "Receiver": "Discovery"
    },
    "DockerDiscovery.refresh": {
      "Name": "DockerDiscovery.refresh",
      "File": "discovery/moby/docker.go",
      "Line": 198,
      "Receiver": "DockerDiscovery"
    },
    "DockerSDConfig.Name": {
      "Name": "DockerSDConfig.Name",
      "File": "discovery/moby/docker.go",
      "Line": 93,
      "Receiver": "DockerSDConfig"
    },
    "DockerSDConfig.NewDiscoverer": {
      "Name": "DockerSDConfig.NewDiscoverer",
      "File": "discovery/moby/docker.go",
      "Line": 96,
      "Receiver": "DockerSDConfig"
    },
    "DockerSDConfig.NewDiscovererMetrics": {
      "Name": "DockerSDConfig.NewDiscovererMetrics",
      "File": "discovery/moby/docker.go",
      "Line": 86,
      "Receiver": "DockerSDConfig"
    },
    "DockerSDConfig.SetDirectory": {
      "Name": "DockerSDConfig.SetDirectory",
      "File": "discovery/moby/docker.go",
      "Line": 101,
      "Receiver": "DockerSDConfig"
    },
    "DockerSDConfig.UnmarshalYAML": {
      "Name": "DockerSDConfig.UnmarshalYAML",
      "File": "discovery/moby/docker.go",
      "Line": 106,
      "Receiver": "DockerSDConfig"
    },
    "DockerSwarmSDConfig.Name": {
      "Name": "DockerSwarmSDConfig.Name",
      "File": "discovery/moby/dockerswarm.go",
      "Line": 80,
      "Receiver": "DockerSwarmSDConfig"
    },
    "DockerSwarmSDConfig.NewDiscoverer": {
      "Name": "DockerSwarmSDConfig.NewDiscoverer",
      "File": "discovery/moby/dockerswarm.go",
      "Line": 83,
      "Receiver": "DockerSwarmSDConfig"
    },
    "DockerSwarmSDConfig.NewDiscovererMetrics": {
      "Name": "DockerSwarmSDConfig.NewDiscovererMetrics",
      "File": "discovery/moby/dockerswarm.go",
      "Line": 73,
      "Receiver": "DockerSwarmSDConfig"
    },
    "DockerSwarmSDConfig.SetDirectory": {
      "Name": "DockerSwarmSDConfig.SetDirectory",
      "File": "discovery/moby/dockerswarm.go",
      "Line": 88,
      "Receiver": "DockerSwarmSDConfig"
    },
    "DockerSwarmSDConfig.UnmarshalYAML": {
      "Name": "DockerSwarmSDConfig.UnmarshalYAML",
      "File": "discovery/moby/dockerswarm.go",
      "Line": 93,
      "Receiver": "DockerSwarmSDConfig"
    },
    "DocumentedType": {
      "Name": "DocumentedType",
      "File": "promql/parser/value.go",
      "Line": 36,
      "Receiver": ""
    },
    "DummyAlertmanagerRetriever.Alertmanagers": {
      "Name": "DummyAlertmanagerRetriever.Alertmanagers",
      "File": "web/api/v1/errors_test.go",
      "Line": 251,
      "Receiver": "DummyAlertmanagerRetriever"
    },
    "DummyAlertmanagerRetriever.DroppedAlertmanagers": {
      "Name": "DummyAlertmanagerRetriever.DroppedAlertmanagers",
      "File": "web/api/v1/errors_test.go",
      "Line": 254,
      "Receiver": "DummyAlertmanagerRetriever"
    },
    "DummyRulesRetriever.AlertingRules": {
      "Name": "DummyRulesRetriever.AlertingRules",
      "File": "web/api/v1/errors_test.go",
      "Line": 265,
      "Receiver": "DummyRulesRetriever"
    },
    "DummyRulesRetriever.RuleGroups": {
      "Name": "DummyRulesRetriever.RuleGroups",
      "File": "web/api/v1/errors_test.go",
      "Line": 260,
      "Receiver": "DummyRulesRetriever"
    },
    "DummyScrapePoolsRetriever.ScrapePools": {
      "Name": "DummyScrapePoolsRetriever.ScrapePools",
      "File": "web/api/v1/errors_test.go",
      "Line": 225,
      "Receiver": "DummyScrapePoolsRetriever"
    },
    "DummyTargetRetriever.TargetsActive": {
      "Name": "DummyTargetRetriever.TargetsActive",
      "File": "web/api/v1/errors_test.go",
      "Line": 233,
      "Receiver": "DummyTargetRetriever"
    },
    "DummyTargetRetriever.TargetsDropped": {
      "Name": "DummyTargetRetriever.TargetsDropped",
      "File": "web/api/v1/errors_test.go",
      "Line": 238,
      "Receiver": "DummyTargetRetriever"
    },
    "DummyTargetRetriever.TargetsDroppedCounts": {
      "Name": "DummyTargetRetriever.TargetsDroppedCounts",
      "File": "web/api/v1/errors_test.go",
      "Line": 243,
      "Receiver": "DummyTargetRetriever"
    },
    "DurationExpr.PositionRange": {
      "Name": "DurationExpr.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 458,
      "Receiver": "DurationExpr"
    },
    "DurationExpr.Pretty": {
      "Name": "DurationExpr.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 82,
      "Receiver": "DurationExpr"
    },
    "DurationExpr.PromQLExpr": {
      "Name": "DurationExpr.PromQLExpr",
      "File": "promql/parser/ast.go",
      "Line": 275,
      "Receiver": "DurationExpr"
    },
    "DurationExpr.ShortString": {
      "Name": "DurationExpr.ShortString",
      "File": "promql/parser/printer.go",
      "Line": 178,
      "Receiver": "DurationExpr"
    },
    "DurationExpr.String": {
      "Name": "DurationExpr.String",
      "File": "promql/parser/printer.go",
      "Line": 149,
      "Receiver": "DurationExpr"
    },
    "DurationExpr.Type": {
      "Name": "DurationExpr.Type",
      "File": "promql/parser/ast.go",
      "Line": 262,
      "Receiver": "DurationExpr"
    },
    "EC2Discovery.ec2Client": {
      "Name": "EC2Discovery.ec2Client",
      "File": "discovery/aws/ec2.go",
      "Line": 186,
      "Receiver": "EC2Discovery"
    },
    "EC2Discovery.refresh": {
      "Name": "EC2Discovery.refresh",
      "File": "discovery/aws/ec2.go",
      "Line": 236,
      "Receiver": "EC2Discovery"
    },
    "EC2Discovery.refreshAZIDs": {
      "Name": "EC2Discovery.refreshAZIDs",
      "File": "discovery/aws/ec2.go",
      "Line": 224,
      "Receiver": "EC2Discovery"
    },
    "EC2SDConfig.Name": {
      "Name": "EC2SDConfig.Name",
      "File": "discovery/aws/ec2.go",
      "Line": 111,
      "Receiver": "EC2SDConfig"
    },
    "EC2SDConfig.NewDiscoverer": {
      "Name": "EC2SDConfig.NewDiscoverer",
      "File": "discovery/aws/ec2.go",
      "Line": 114,
      "Receiver": "EC2SDConfig"
    },
    "EC2SDConfig.NewDiscovererMetrics": {
      "Name": "EC2SDConfig.NewDiscovererMetrics",
      "File": "discovery/aws/ec2.go",
      "Line": 104,
      "Receiver": "EC2SDConfig"
    },
    "EC2SDConfig.UnmarshalYAML": {
      "Name": "EC2SDConfig.UnmarshalYAML",
      "File": "discovery/aws/ec2.go",
      "Line": 119,
      "Receiver": "EC2SDConfig"
    },
    "EmptyChunkSeriesSet": {
      "Name": "EmptyChunkSeriesSet",
      "File": "storage/interface.go",
      "Line": 438,
      "Receiver": ""
    },
    "EmptyLabels": {
      "Name": "EmptyLabels",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 299,
      "Receiver": ""
    },
    "EmptyPostings": {
      "Name": "EmptyPostings",
      "File": "tsdb/index/postings.go",
      "Line": 577,
      "Receiver": ""
    },
    "EmptySeriesSet": {
      "Name": "EmptySeriesSet",
      "File": "storage/interface.go",
      "Line": 403,
      "Receiver": ""
    },
    "Encbuf.Get": {
      "Name": "Encbuf.Get",
      "File": "tsdb/encoding/encoding.go",
      "Line": 39,
      "Receiver": "Encbuf"
    },
    "Encbuf.Len": {
      "Name": "Encbuf.Len",
      "File": "tsdb/encoding/encoding.go",
      "Line": 40,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutBE32": {
      "Name": "Encbuf.PutBE32",
      "File": "tsdb/encoding/encoding.go",
      "Line": 51,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutBE32int": {
      "Name": "Encbuf.PutBE32int",
      "File": "tsdb/encoding/encoding.go",
      "Line": 46,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutBE64": {
      "Name": "Encbuf.PutBE64",
      "File": "tsdb/encoding/encoding.go",
      "Line": 56,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutBE64int64": {
      "Name": "Encbuf.PutBE64int64",
      "File": "tsdb/encoding/encoding.go",
      "Line": 48,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutBEFloat64": {
      "Name": "Encbuf.PutBEFloat64",
      "File": "tsdb/encoding/encoding.go",
      "Line": 61,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutByte": {
      "Name": "Encbuf.PutByte",
      "File": "tsdb/encoding/encoding.go",
      "Line": 43,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutBytes": {
      "Name": "Encbuf.PutBytes",
      "File": "tsdb/encoding/encoding.go",
      "Line": 44,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutHash": {
      "Name": "Encbuf.PutHash",
      "File": "tsdb/encoding/encoding.go",
      "Line": 88,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutHashSum": {
      "Name": "Encbuf.PutHashSum",
      "File": "tsdb/encoding/encoding.go",
      "Line": 103,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutString": {
      "Name": "Encbuf.PutString",
      "File": "tsdb/encoding/encoding.go",
      "Line": 42,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutUvarint": {
      "Name": "Encbuf.PutUvarint",
      "File": "tsdb/encoding/encoding.go",
      "Line": 49,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutUvarint32": {
      "Name": "Encbuf.PutUvarint32",
      "File": "tsdb/encoding/encoding.go",
      "Line": 47,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutUvarint64": {
      "Name": "Encbuf.PutUvarint64",
      "File": "tsdb/encoding/encoding.go",
      "Line": 65,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutUvarintBytes": {
      "Name": "Encbuf.PutUvarintBytes",
      "File": "tsdb/encoding/encoding.go",
      "Line": 82,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutUvarintStr": {
      "Name": "Encbuf.PutUvarintStr",
      "File": "tsdb/encoding/encoding.go",
      "Line": 76,
      "Receiver": "Encbuf"
    },
    "Encbuf.PutVarint64": {
      "Name": "Encbuf.PutVarint64",
      "File": "tsdb/encoding/encoding.go",
      "Line": 70,
      "Receiver": "Encbuf"
    },
    "Encbuf.Reset": {
      "Name": "Encbuf.Reset",
      "File": "tsdb/encoding/encoding.go",
      "Line": 38,
      "Receiver": "Encbuf"
    },
    "Encbuf.WriteToHash": {
      "Name": "Encbuf.WriteToHash",
      "File": "tsdb/encoding/encoding.go",
      "Line": 95,
      "Receiver": "Encbuf"
    },
    "Encode": {
      "Name": "Encode",
      "File": "util/compression/compression.go",
      "Line": 48,
      "Receiver": ""
    },
    "EncodeFloatHistogram": {
      "Name": "EncodeFloatHistogram",
      "File": "tsdb/record/record.go",
      "Line": 906,
      "Receiver": ""
    },
    "EncodeHistogram": {
      "Name": "EncodeHistogram",
      "File": "tsdb/record/record.go",
      "Line": 806,
      "Receiver": ""
    },
    "EncodeLabels": {
      "Name": "EncodeLabels",
      "File": "tsdb/record/record.go",
      "Line": 657,
      "Receiver": ""
    },
    "EncodePostingsRaw": {
      "Name": "EncodePostingsRaw",
      "File": "tsdb/index/index.go",
      "Line": 973,
      "Receiver": ""
    },
    "EncodeReadResponse": {
      "Name": "EncodeReadResponse",
      "File": "storage/remote/codec.go",
      "Line": 84,
      "Receiver": ""
    },
    "Encoder.CustomBucketsFloatHistogramSamples": {
      "Name": "Encoder.CustomBucketsFloatHistogramSamples",
      "File": "tsdb/record/record.go",
      "Line": 881,
      "Receiver": "Encoder"
    },
    "Encoder.CustomBucketsHistogramSamples": {
      "Name": "Encoder.CustomBucketsHistogramSamples",
      "File": "tsdb/record/record.go",
      "Line": 781,
      "Receiver": "Encoder"
    },
    "Encoder.EncodeExemplarsIntoBuffer": {
      "Name": "Encoder.EncodeExemplarsIntoBuffer",
      "File": "tsdb/record/record.go",
      "Line": 719,
      "Receiver": "Encoder"
    },
    "Encoder.Exemplars": {
      "Name": "Encoder.Exemplars",
      "File": "tsdb/record/record.go",
      "Line": 706,
      "Receiver": "Encoder"
    },
    "Encoder.FloatHistogramSamples": {
      "Name": "Encoder.FloatHistogramSamples",
      "File": "tsdb/record/record.go",
      "Line": 846,
      "Receiver": "Encoder"
    },
    "Encoder.HistogramSamples": {
      "Name": "Encoder.HistogramSamples",
      "File": "tsdb/record/record.go",
      "Line": 747,
      "Receiver": "Encoder"
    },
    "Encoder.Metadata": {
      "Name": "Encoder.Metadata",
      "File": "tsdb/record/record.go",
      "Line": 637,
      "Receiver": "Encoder"
    },
    "Encoder.MmapMarkers": {
      "Name": "Encoder.MmapMarkers",
      "File": "tsdb/record/record.go",
      "Line": 735,
      "Receiver": "Encoder"
    },
    "Encoder.Samples": {
      "Name": "Encoder.Samples",
      "File": "tsdb/record/record.go",
      "Line": 668,
      "Receiver": "Encoder"
    },
    "Encoder.Series": {
      "Name": "Encoder.Series",
      "File": "tsdb/record/record.go",
      "Line": 625,
      "Receiver": "Encoder"
    },
    "Encoder.Tombstones": {
      "Name": "Encoder.Tombstones",
      "File": "tsdb/record/record.go",
      "Line": 692,
      "Receiver": "Encoder"
    },
    "Encoding.String": {
      "Name": "Encoding.String",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 35,
      "Receiver": "Encoding"
    },
    "EndpointSlice.Run": {
      "Name": "EndpointSlice.Run",
      "File": "discovery/kubernetes/endpointslice.go",
      "Line": 182,
      "Receiver": "EndpointSlice"
    },
    "EndpointSlice.addServiceLabels": {
      "Name": "EndpointSlice.addServiceLabels",
      "File": "discovery/kubernetes/endpointslice.go",
      "Line": 469,
      "Receiver": "EndpointSlice"
    },
    "EndpointSlice.buildEndpointSlice": {
      "Name": "EndpointSlice.buildEndpointSlice",
      "File": "discovery/kubernetes/endpointslice.go",
      "Line": 264,
      "Receiver": "EndpointSlice"
    },
    "EndpointSlice.enqueue": {
      "Name": "EndpointSlice.enqueue",
      "File": "discovery/kubernetes/endpointslice.go",
      "Line": 172,
      "Receiver": "EndpointSlice"
    },
    "EndpointSlice.enqueueNode": {
      "Name": "EndpointSlice.enqueueNode",
      "File": "discovery/kubernetes/endpointslice.go",
      "Line": 160,
      "Receiver": "EndpointSlice"
    },
    "EndpointSlice.hasSynced": {
      "Name": "EndpointSlice.hasSynced",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 258,
      "Receiver": "EndpointSlice"
    },
    "EndpointSlice.process": {
      "Name": "EndpointSlice.process",
      "File": "discovery/kubernetes/endpointslice.go",
      "Line": 205,
      "Receiver": "EndpointSlice"
    },
    "EndpointSlice.resolvePodRef": {
      "Name": "EndpointSlice.resolvePodRef",
      "File": "discovery/kubernetes/endpointslice.go",
      "Line": 453,
      "Receiver": "EndpointSlice"
    },
    "Endpoints.Run": {
      "Name": "Endpoints.Run",
      "File": "discovery/kubernetes/endpoints.go",
      "Line": 217,
      "Receiver": "Endpoints"
    },
    "Endpoints.addServiceLabels": {
      "Name": "Endpoints.addServiceLabels",
      "File": "discovery/kubernetes/endpoints.go",
      "Line": 470,
      "Receiver": "Endpoints"
    },
    "Endpoints.buildEndpoints": {
      "Name": "Endpoints.buildEndpoints",
      "File": "discovery/kubernetes/endpoints.go",
      "Line": 300,
      "Receiver": "Endpoints"
    },
    "Endpoints.enqueue": {
      "Name": "Endpoints.enqueue",
      "File": "discovery/kubernetes/endpoints.go",
      "Line": 207,
      "Receiver": "Endpoints"
    },
    "Endpoints.enqueueNode": {
      "Name": "Endpoints.enqueueNode",
      "File": "discovery/kubernetes/endpoints.go",
      "Line": 183,
      "Receiver": "Endpoints"
    },
    "Endpoints.enqueuePod": {
      "Name": "Endpoints.enqueuePod",
      "File": "discovery/kubernetes/endpoints.go",
      "Line": 195,
      "Receiver": "Endpoints"
    },
    "Endpoints.hasSynced": {
      "Name": "Endpoints.hasSynced",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 254,
      "Receiver": "Endpoints"
    },
    "Endpoints.process": {
      "Name": "Endpoints.process",
      "File": "discovery/kubernetes/endpoints.go",
      "Line": 241,
      "Receiver": "Endpoints"
    },
    "Endpoints.resolvePodRef": {
      "Name": "Endpoints.resolvePodRef",
      "File": "discovery/kubernetes/endpoints.go",
      "Line": 454,
      "Receiver": "Endpoints"
    },
    "Engine.Close": {
      "Name": "Engine.Close",
      "File": "promql/engine.go",
      "Line": 443,
      "Receiver": "Engine"
    },
    "Engine.NewInstantQuery": {
      "Name": "Engine.NewInstantQuery",
      "File": "promql/engine.go",
      "Line": 478,
      "Receiver": "Engine"
    },
    "Engine.NewRangeQuery": {
      "Name": "Engine.NewRangeQuery",
      "File": "promql/engine.go",
      "Line": 499,
      "Receiver": "Engine"
    },
    "Engine.NewTestQuery": {
      "Name": "Engine.NewTestQuery",
      "File": "promql/engine.go",
      "Line": 605,
      "Receiver": "Engine"
    },
    "Engine.SetQueryLogger": {
      "Name": "Engine.SetQueryLogger",
      "File": "promql/engine.go",
      "Line": 455,
      "Receiver": "Engine"
    },
    "Engine.exec": {
      "Name": "Engine.exec",
      "File": "promql/engine.go",
      "Line": 620,
      "Receiver": "Engine"
    },
    "Engine.execEvalStmt": {
      "Name": "Engine.execEvalStmt",
      "File": "promql/engine.go",
      "Line": 716,
      "Receiver": "Engine"
    },
    "Engine.getLastSubqueryInterval": {
      "Name": "Engine.getLastSubqueryInterval",
      "File": "promql/engine.go",
      "Line": 945,
      "Receiver": "Engine"
    },
    "Engine.newQuery": {
      "Name": "Engine.newQuery",
      "File": "promql/engine.go",
      "Line": 521,
      "Receiver": "Engine"
    },
    "Engine.populateSeries": {
      "Name": "Engine.populateSeries",
      "File": "promql/engine.go",
      "Line": 958,
      "Receiver": "Engine"
    },
    "Engine.queueActive": {
      "Name": "Engine.queueActive",
      "File": "promql/engine.go",
      "Line": 697,
      "Receiver": "Engine"
    },
    "Engine.sortMatrixResult": {
      "Name": "Engine.sortMatrixResult",
      "File": "promql/engine.go",
      "Line": 834,
      "Receiver": "Engine"
    },
    "Engine.validateOpts": {
      "Name": "Engine.validateOpts",
      "File": "promql/engine.go",
      "Line": 553,
      "Receiver": "Engine"
    },
    "EngineQueryFunc": {
      "Name": "EngineQueryFunc",
      "File": "rules/manager.go",
      "Line": 47,
      "Receiver": ""
    },
    "EnrichParseError": {
      "Name": "EnrichParseError",
      "File": "promql/parser/parse.go",
      "Line": 164,
      "Receiver": ""
    },
    "Equal": {
      "Name": "Equal",
      "File": "util/almost/almost.go",
      "Line": 26,
      "Receiver": ""
    },
    "ErrChunkSeriesSet": {
      "Name": "ErrChunkSeriesSet",
      "File": "storage/interface.go",
      "Line": 452,
      "Receiver": ""
    },
    "ErrPostings": {
      "Name": "ErrPostings",
      "File": "tsdb/index/postings.go",
      "Line": 589,
      "Receiver": ""
    },
    "ErrQueryCanceled.Error": {
      "Name": "ErrQueryCanceled.Error",
      "File": "promql/engine.go",
      "Line": 105,
      "Receiver": "ErrQueryCanceled"
    },
    "ErrQueryTimeout.Error": {
      "Name": "ErrQueryTimeout.Error",
      "File": "promql/engine.go",
      "Line": 101,
      "Receiver": "ErrQueryTimeout"
    },
    "ErrSeriesSet": {
      "Name": "ErrSeriesSet",
      "File": "storage/interface.go",
      "Line": 431,
      "Receiver": ""
    },
    "ErrStorage.Error": {
      "Name": "ErrStorage.Error",
      "File": "promql/engine.go",
      "Line": 113,
      "Receiver": "ErrStorage"
    },
    "ErrTooManySamples.Error": {
      "Name": "ErrTooManySamples.Error",
      "File": "promql/engine.go",
      "Line": 109,
      "Receiver": "ErrTooManySamples"
    },
    "Error.Error": {
      "Name": "Error.Error",
      "File": "model/rulefmt/rulefmt.go",
      "Line": 44,
      "Receiver": "Error"
    },
    "Error.Unwrap": {
      "Name": "Error.Unwrap",
      "File": "model/rulefmt/rulefmt.go",
      "Line": 58,
      "Receiver": "Error"
    },
    "EvalNodeHelper.resetBuilder": {
      "Name": "EvalNodeHelper.resetBuilder",
      "File": "promql/engine.go",
      "Line": 1160,
      "Receiver": "EvalNodeHelper"
    },
    "EvalNodeHelper.resetHistograms": {
      "Name": "EvalNodeHelper.resetHistograms",
      "File": "promql/engine.go",
      "Line": 1169,
      "Receiver": "EvalNodeHelper"
    },
    "EvalStmt.PositionRange": {
      "Name": "EvalStmt.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 484,
      "Receiver": "EvalStmt"
    },
    "EvalStmt.Pretty": {
      "Name": "EvalStmt.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 108,
      "Receiver": "EvalStmt"
    },
    "EvalStmt.PromQLStmt": {
      "Name": "EvalStmt.PromQLStmt",
      "File": "promql/parser/ast.go",
      "Line": 74,
      "Receiver": "EvalStmt"
    },
    "EvalStmt.String": {
      "Name": "EvalStmt.String",
      "File": "promql/parser/printer.go",
      "Line": 51,
      "Receiver": "EvalStmt"
    },
    "Example": {
      "Name": "Example",
      "File": "tsdb/example_test.go",
      "Line": 27,
      "Receiver": ""
    },
    "Exemplar.Descriptor": {
      "Name": "Exemplar.Descriptor",
      "File": "prompb/types.pb.go",
      "Line": 310,
      "Receiver": "Exemplar"
    },
    "Exemplar.Equals": {
      "Name": "Exemplar.Equals",
      "File": "model/exemplar/exemplar.go",
      "Line": 42,
      "Receiver": "Exemplar"
    },
    "Exemplar.GetLabel": {
      "Name": "Exemplar.GetLabel",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 769,
      "Receiver": "Exemplar"
    },
    "Exemplar.GetLabels": {
      "Name": "Exemplar.GetLabels",
      "File": "prompb/types.pb.go",
      "Line": 340,
      "Receiver": "Exemplar"
    },
    "Exemplar.GetLabelsRefs": {
      "Name": "Exemplar.GetLabelsRefs",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 349,
      "Receiver": "Exemplar"
    },
    "Exemplar.GetTimestamp": {
      "Name": "Exemplar.GetTimestamp",
      "File": "prompb/types.pb.go",
      "Line": 354,
      "Receiver": "Exemplar"
    },
    "Exemplar.GetValue": {
      "Name": "Exemplar.GetValue",
      "File": "prompb/types.pb.go",
      "Line": 347,
      "Receiver": "Exemplar"
    },
    "Exemplar.Marshal": {
      "Name": "Exemplar.Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1323,
      "Receiver": "Exemplar"
    },
    "Exemplar.MarshalTo": {
      "Name": "Exemplar.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1333,
      "Receiver": "Exemplar"
    },
    "Exemplar.MarshalToSizedBuffer": {
      "Name": "Exemplar.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1338,
      "Receiver": "Exemplar"
    },
    "Exemplar.ProtoMessage": {
      "Name": "Exemplar.ProtoMessage",
      "File": "prompb/types.pb.go",
      "Line": 309,
      "Receiver": "Exemplar"
    },
    "Exemplar.Reset": {
      "Name": "Exemplar.Reset",
      "File": "prompb/types.pb.go",
      "Line": 307,
      "Receiver": "Exemplar"
    },
    "Exemplar.Size": {
      "Name": "Exemplar.Size",
      "File": "prompb/types.pb.go",
      "Line": 2076,
      "Receiver": "Exemplar"
    },
    "Exemplar.String": {
      "Name": "Exemplar.String",
      "File": "prompb/types.pb.go",
      "Line": 308,
      "Receiver": "Exemplar"
    },
    "Exemplar.ToExemplar": {
      "Name": "Exemplar.ToExemplar",
      "File": "prompb/io/prometheus/write/v2/codec.go",
      "Line": 210,
      "Receiver": "Exemplar"
    },
    "Exemplar.Unmarshal": {
      "Name": "Exemplar.Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 2658,
      "Receiver": "Exemplar"
    },
    "Exemplar.XXX_DiscardUnknown": {
      "Name": "Exemplar.XXX_DiscardUnknown",
      "File": "prompb/types.pb.go",
      "Line": 334,
      "Receiver": "Exemplar"
    },
    "Exemplar.XXX_Marshal": {
      "Name": "Exemplar.XXX_Marshal",
      "File": "prompb/types.pb.go",
      "Line": 316,
      "Receiver": "Exemplar"
    },
    "Exemplar.XXX_Merge": {
      "Name": "Exemplar.XXX_Merge",
      "File": "prompb/types.pb.go",
      "Line": 328,
      "Receiver": "Exemplar"
    },
    "Exemplar.XXX_Size": {
      "Name": "Exemplar.XXX_Size",
      "File": "prompb/types.pb.go",
      "Line": 331,
      "Receiver": "Exemplar"
    },
    "Exemplar.XXX_Unmarshal": {
      "Name": "Exemplar.XXX_Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 313,
      "Receiver": "Exemplar"
    },
    "ExpandChunks": {
      "Name": "ExpandChunks",
      "File": "storage/series.go",
      "Line": 479,
      "Receiver": ""
    },
    "ExpandPostings": {
      "Name": "ExpandPostings",
      "File": "tsdb/index/postings.go",
      "Line": 538,
      "Receiver": ""
    },
    "ExpandSamples": {
      "Name": "ExpandSamples",
      "File": "storage/series.go",
      "Line": 442,
      "Receiver": ""
    },
    "Expander.Expand": {
      "Name": "Expander.Expand",
      "File": "template/template.go",
      "Line": 325,
      "Receiver": "Expander"
    },
    "Expander.ExpandHTML": {
      "Name": "Expander.ExpandHTML",
      "File": "template/template.go",
      "Line": 358,
      "Receiver": "Expander"
    },
    "Expander.Funcs": {
      "Name": "Expander.Funcs",
      "File": "template/template.go",
      "Line": 318,
      "Receiver": "Expander"
    },
    "Expander.ParseTest": {
      "Name": "Expander.ParseTest",
      "File": "template/template.go",
      "Line": 397,
      "Receiver": "Expander"
    },
    "ExponentialBlockRanges": {
      "Name": "ExponentialBlockRanges",
      "File": "tsdb/compact.go",
      "Line": 42,
      "Receiver": ""
    },
    "Expressions.PositionRange": {
      "Name": "Expressions.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 488,
      "Receiver": "Expressions"
    },
    "Expressions.Pretty": {
      "Name": "Expressions.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 112,
      "Receiver": "Expressions"
    },
    "Expressions.String": {
      "Name": "Expressions.String",
      "File": "promql/parser/printer.go",
      "Line": 55,
      "Receiver": "Expressions"
    },
    "ExtractSelectors": {
      "Name": "ExtractSelectors",
      "File": "promql/parser/ast.go",
      "Line": 349,
      "Receiver": ""
    },
    "FPoint.MarshalJSON": {
      "Name": "FPoint.MarshalJSON",
      "File": "promql/value.go",
      "Line": 112,
      "Receiver": "FPoint"
    },
    "FPoint.String": {
      "Name": "FPoint.String",
      "File": "promql/value.go",
      "Line": 98,
      "Receiver": "FPoint"
    },
    "FakeTestSuites": {
      "Name": "FakeTestSuites",
      "File": "util/junitxml/junitxml_test.go",
      "Line": 52,
      "Receiver": ""
    },
    "FastRegexMatcher.GetRegexString": {
      "Name": "FastRegexMatcher.GetRegexString",
      "File": "model/labels/regexp.go",
      "Line": 310,
      "Receiver": "FastRegexMatcher"
    },
    "FastRegexMatcher.IsOptimized": {
      "Name": "FastRegexMatcher.IsOptimized",
      "File": "model/labels/regexp.go",
      "Line": 118,
      "Receiver": "FastRegexMatcher"
    },
    "FastRegexMatcher.MatchString": {
      "Name": "FastRegexMatcher.MatchString",
      "File": "model/labels/regexp.go",
      "Line": 300,
      "Receiver": "FastRegexMatcher"
    },
    "FastRegexMatcher.SetMatches": {
      "Name": "FastRegexMatcher.SetMatches",
      "File": "model/labels/regexp.go",
      "Line": 304,
      "Receiver": "FastRegexMatcher"
    },
    "FastRegexMatcher.compileMatchStringFunction": {
      "Name": "FastRegexMatcher.compileMatchStringFunction",
      "File": "model/labels/regexp.go",
      "Line": 90,
      "Receiver": "FastRegexMatcher"
    },
    "FdLimits": {
      "Name": "FdLimits",
      "File": "util/runtime/limits_windows.go",
      "Line": 19,
      "Receiver": ""
    },
    "Fdatasync": {
      "Name": "Fdatasync",
      "File": "tsdb/fileutil/sync_linux.go",
      "Line": 27,
      "Receiver": ""
    },
    "FileLoader.Load": {
      "Name": "FileLoader.Load",
      "File": "rules/manager.go",
      "Line": 300,
      "Receiver": "FileLoader"
    },
    "FileLoader.Parse": {
      "Name": "FileLoader.Parse",
      "File": "rules/manager.go",
      "Line": 304,
      "Receiver": "FileLoader"
    },
    "FileWriter.AddPadding": {
      "Name": "FileWriter.AddPadding",
      "File": "tsdb/index/index.go",
      "Line": 327,
      "Receiver": "FileWriter"
    },
    "FileWriter.Close": {
      "Name": "FileWriter.Close",
      "File": "tsdb/index/index.go",
      "Line": 340,
      "Receiver": "FileWriter"
    },
    "FileWriter.Flush": {
      "Name": "FileWriter.Flush",
      "File": "tsdb/index/index.go",
      "Line": 314,
      "Receiver": "FileWriter"
    },
    "FileWriter.Pos": {
      "Name": "FileWriter.Pos",
      "File": "tsdb/index/index.go",
      "Line": 292,
      "Receiver": "FileWriter"
    },
    "FileWriter.Remove": {
      "Name": "FileWriter.Remove",
      "File": "tsdb/index/index.go",
      "Line": 350,
      "Receiver": "FileWriter"
    },
    "FileWriter.Write": {
      "Name": "FileWriter.Write",
      "File": "tsdb/index/index.go",
      "Line": 296,
      "Receiver": "FileWriter"
    },
    "FileWriter.WriteAt": {
      "Name": "FileWriter.WriteAt",
      "File": "tsdb/index/index.go",
      "Line": 318,
      "Receiver": "FileWriter"
    },
    "FindIntersectingPostings": {
      "Name": "FindIntersectingPostings",
      "File": "tsdb/index/postings.go",
      "Line": 924,
      "Receiver": ""
    },
    "FindMinMaxTime": {
      "Name": "FindMinMaxTime",
      "File": "promql/engine.go",
      "Line": 872,
      "Receiver": ""
    },
    "FloatBucketsMatch": {
      "Name": "FloatBucketsMatch",
      "File": "model/histogram/float_histogram.go",
      "Line": 1326,
      "Receiver": ""
    },
    "FloatHistogram.Add": {
      "Name": "FloatHistogram.Add",
      "File": "model/histogram/float_histogram.go",
      "Line": 336,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.AllBucketIterator": {
      "Name": "FloatHistogram.AllBucketIterator",
      "File": "model/histogram/float_histogram.go",
      "Line": 750,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.AllReverseBucketIterator": {
      "Name": "FloatHistogram.AllReverseBucketIterator",
      "File": "model/histogram/float_histogram.go",
      "Line": 764,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.Compact": {
      "Name": "FloatHistogram.Compact",
      "File": "model/histogram/float_histogram.go",
      "Line": 564,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.Copy": {
      "Name": "FloatHistogram.Copy",
      "File": "model/histogram/float_histogram.go",
      "Line": 67,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.CopyTo": {
      "Name": "FloatHistogram.CopyTo",
      "File": "model/histogram/float_histogram.go",
      "Line": 106,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.CopyToSchema": {
      "Name": "FloatHistogram.CopyToSchema",
      "File": "model/histogram/float_histogram.go",
      "Line": 145,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.DetectReset": {
      "Name": "FloatHistogram.DetectReset",
      "File": "model/histogram/float_histogram.go",
      "Line": 602,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.Div": {
      "Name": "FloatHistogram.Div",
      "File": "model/histogram/float_histogram.go",
      "Line": 302,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.Equals": {
      "Name": "FloatHistogram.Equals",
      "File": "model/histogram/float_histogram.go",
      "Line": 471,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.Mul": {
      "Name": "FloatHistogram.Mul",
      "File": "model/histogram/float_histogram.go",
      "Line": 287,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.NegativeBucketIterator": {
      "Name": "FloatHistogram.NegativeBucketIterator",
      "File": "model/histogram/float_histogram.go",
      "Line": 724,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.NegativeReverseBucketIterator": {
      "Name": "FloatHistogram.NegativeReverseBucketIterator",
      "File": "model/histogram/float_histogram.go",
      "Line": 740,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.PositiveBucketIterator": {
      "Name": "FloatHistogram.PositiveBucketIterator",
      "File": "model/histogram/float_histogram.go",
      "Line": 716,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.PositiveReverseBucketIterator": {
      "Name": "FloatHistogram.PositiveReverseBucketIterator",
      "File": "model/histogram/float_histogram.go",
      "Line": 732,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.ReduceResolution": {
      "Name": "FloatHistogram.ReduceResolution",
      "File": "model/histogram/float_histogram.go",
      "Line": 1342,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.Size": {
      "Name": "FloatHistogram.Size",
      "File": "model/histogram/float_histogram.go",
      "Line": 513,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.String": {
      "Name": "FloatHistogram.String",
      "File": "model/histogram/float_histogram.go",
      "Line": 174,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.Sub": {
      "Name": "FloatHistogram.Sub",
      "File": "model/histogram/float_histogram.go",
      "Line": 412,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.TestExpression": {
      "Name": "FloatHistogram.TestExpression",
      "File": "model/histogram/float_histogram.go",
      "Line": 207,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.UsesCustomBuckets": {
      "Name": "FloatHistogram.UsesCustomBuckets",
      "File": "model/histogram/float_histogram.go",
      "Line": 62,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.Validate": {
      "Name": "FloatHistogram.Validate",
      "File": "model/histogram/float_histogram.go",
      "Line": 779,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.ZeroBucket": {
      "Name": "FloatHistogram.ZeroBucket",
      "File": "model/histogram/float_histogram.go",
      "Line": 268,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.floatBucketIterator": {
      "Name": "FloatHistogram.floatBucketIterator",
      "File": "model/histogram/float_histogram.go",
      "Line": 946,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.reconcileZeroBuckets": {
      "Name": "FloatHistogram.reconcileZeroBuckets",
      "File": "model/histogram/float_histogram.go",
      "Line": 915,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.trimBucketsInZeroBucket": {
      "Name": "FloatHistogram.trimBucketsInZeroBucket",
      "File": "model/histogram/float_histogram.go",
      "Line": 882,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogram.zeroCountForLargerThreshold": {
      "Name": "FloatHistogram.zeroCountForLargerThreshold",
      "File": "model/histogram/float_histogram.go",
      "Line": 827,
      "Receiver": "FloatHistogram"
    },
    "FloatHistogramAppender.Append": {
      "Name": "FloatHistogramAppender.Append",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 218,
      "Receiver": "FloatHistogramAppender"
    },
    "FloatHistogramAppender.AppendFloatHistogram": {
      "Name": "FloatHistogramAppender.AppendFloatHistogram",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 735,
      "Receiver": "FloatHistogramAppender"
    },
    "FloatHistogramAppender.AppendHistogram": {
      "Name": "FloatHistogramAppender.AppendHistogram",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 731,
      "Receiver": "FloatHistogramAppender"
    },
    "FloatHistogramAppender.GetCounterResetHeader": {
      "Name": "FloatHistogramAppender.GetCounterResetHeader",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 204,
      "Receiver": "FloatHistogramAppender"
    },
    "FloatHistogramAppender.NumSamples": {
      "Name": "FloatHistogramAppender.NumSamples",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 212,
      "Receiver": "FloatHistogramAppender"
    },
    "FloatHistogramAppender.appendFloatHistogram": {
      "Name": "FloatHistogramAppender.appendFloatHistogram",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 558,
      "Receiver": "FloatHistogramAppender"
    },
    "FloatHistogramAppender.appendable": {
      "Name": "FloatHistogramAppender.appendable",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 247,
      "Receiver": "FloatHistogramAppender"
    },
    "FloatHistogramAppender.appendableGauge": {
      "Name": "FloatHistogramAppender.appendableGauge",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 520,
      "Receiver": "FloatHistogramAppender"
    },
    "FloatHistogramAppender.recode": {
      "Name": "FloatHistogramAppender.recode",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 667,
      "Receiver": "FloatHistogramAppender"
    },
    "FloatHistogramAppender.recodeHistogram": {
      "Name": "FloatHistogramAppender.recodeHistogram",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 717,
      "Receiver": "FloatHistogramAppender"
    },
    "FloatHistogramAppender.setCounterResetHeader": {
      "Name": "FloatHistogramAppender.setCounterResetHeader",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 208,
      "Receiver": "FloatHistogramAppender"
    },
    "FloatHistogramAppender.writeXorValue": {
      "Name": "FloatHistogramAppender.writeXorValue",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 657,
      "Receiver": "FloatHistogramAppender"
    },
    "FloatHistogramChunk.Appender": {
      "Name": "FloatHistogramChunk.Appender",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 106,
      "Receiver": "FloatHistogramChunk"
    },
    "FloatHistogramChunk.Bytes": {
      "Name": "FloatHistogramChunk.Bytes",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 66,
      "Receiver": "FloatHistogramChunk"
    },
    "FloatHistogramChunk.Compact": {
      "Name": "FloatHistogramChunk.Compact",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 97,
      "Receiver": "FloatHistogramChunk"
    },
    "FloatHistogramChunk.Encoding": {
      "Name": "FloatHistogramChunk.Encoding",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 61,
      "Receiver": "FloatHistogramChunk"
    },
    "FloatHistogramChunk.GetCounterResetHeader": {
      "Name": "FloatHistogramChunk.GetCounterResetHeader",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 92,
      "Receiver": "FloatHistogramChunk"
    },
    "FloatHistogramChunk.Iterator": {
      "Name": "FloatHistogramChunk.Iterator",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 185,
      "Receiver": "FloatHistogramChunk"
    },
    "FloatHistogramChunk.Layout": {
      "Name": "FloatHistogramChunk.Layout",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 77,
      "Receiver": "FloatHistogramChunk"
    },
    "FloatHistogramChunk.NumSamples": {
      "Name": "FloatHistogramChunk.NumSamples",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 71,
      "Receiver": "FloatHistogramChunk"
    },
    "FloatHistogramChunk.Reset": {
      "Name": "FloatHistogramChunk.Reset",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 48,
      "Receiver": "FloatHistogramChunk"
    },
    "FloatHistogramChunk.iterator": {
      "Name": "FloatHistogramChunk.iterator",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 159,
      "Receiver": "FloatHistogramChunk"
    },
    "Flock": {
      "Name": "Flock",
      "File": "tsdb/fileutil/flock.go",
      "Line": 31,
      "Receiver": ""
    },
    "FromData": {
      "Name": "FromData",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 356,
      "Receiver": ""
    },
    "FromFloatHistogram": {
      "Name": "FromFloatHistogram",
      "File": "prompb/io/prometheus/write/v2/codec.go",
      "Line": 181,
      "Receiver": ""
    },
    "FromFloatSeconds": {
      "Name": "FromFloatSeconds",
      "File": "model/timestamp/timestamp.go",
      "Line": 32,
      "Receiver": ""
    },
    "FromIntHistogram": {
      "Name": "FromIntHistogram",
      "File": "prompb/io/prometheus/write/v2/codec.go",
      "Line": 163,
      "Receiver": ""
    },
    "FromLabelMatchers": {
      "Name": "FromLabelMatchers",
      "File": "storage/remote/codec.go",
      "Line": 812,
      "Receiver": ""
    },
    "FromLabels": {
      "Name": "FromLabels",
      "File": "prompb/codec.go",
      "Line": 49,
      "Receiver": ""
    },
    "FromMap": {
      "Name": "FromMap",
      "File": "model/labels/labels_common.go",
      "Line": 138,
      "Receiver": ""
    },
    "FromMaps": {
      "Name": "FromMaps",
      "File": "rules/manager.go",
      "Line": 572,
      "Receiver": ""
    },
    "FromMetadataType": {
      "Name": "FromMetadataType",
      "File": "prompb/io/prometheus/write/v2/codec.go",
      "Line": 60,
      "Receiver": ""
    },
    "FromOriginContext": {
      "Name": "FromOriginContext",
      "File": "rules/origin.go",
      "Line": 74,
      "Receiver": ""
    },
    "FromQueryResult": {
      "Name": "FromQueryResult",
      "File": "storage/remote/codec.go",
      "Line": 177,
      "Receiver": ""
    },
    "FromStrings": {
      "Name": "FromStrings",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 318,
      "Receiver": ""
    },
    "FromStringsForBenchmark": {
      "Name": "FromStringsForBenchmark",
      "File": "model/labels/labels_test.go",
      "Line": 599,
      "Receiver": ""
    },
    "FromTime": {
      "Name": "FromTime",
      "File": "model/timestamp/timestamp.go",
      "Line": 22,
      "Receiver": ""
    },
    "FuzzParseExpr": {
      "Name": "FuzzParseExpr",
      "File": "promql/fuzz.go",
      "Line": 115,
      "Receiver": ""
    },
    "FuzzParseMetric": {
      "Name": "FuzzParseMetric",
      "File": "promql/fuzz.go",
      "Line": 93,
      "Receiver": ""
    },
    "FuzzParseMetricSelector": {
      "Name": "FuzzParseMetricSelector",
      "File": "promql/fuzz.go",
      "Line": 102,
      "Receiver": ""
    },
    "FuzzParseOpenMetric": {
      "Name": "FuzzParseOpenMetric",
      "File": "promql/fuzz.go",
      "Line": 97,
      "Receiver": ""
    },
    "Gate.Done": {
      "Name": "Gate.Done",
      "File": "util/gate/gate.go",
      "Line": 42,
      "Receiver": "Gate"
    },
    "Gate.Start": {
      "Name": "Gate.Start",
      "File": "util/gate/gate.go",
      "Line": 32,
      "Receiver": "Gate"
    },
    "Gauge.Descriptor": {
      "Name": "Gauge.Descriptor",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 137,
      "Receiver": "Gauge"
    },
    "Gauge.GetValue": {
      "Name": "Gauge.GetValue",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 167,
      "Receiver": "Gauge"
    },
    "Gauge.Marshal": {
      "Name": "Gauge.Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1091,
      "Receiver": "Gauge"
    },
    "Gauge.MarshalTo": {
      "Name": "Gauge.MarshalTo",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1101,
      "Receiver": "Gauge"
    },
    "Gauge.MarshalToSizedBuffer": {
      "Name": "Gauge.MarshalToSizedBuffer",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1106,
      "Receiver": "Gauge"
    },
    "Gauge.ProtoMessage": {
      "Name": "Gauge.ProtoMessage",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 136,
      "Receiver": "Gauge"
    },
    "Gauge.Reset": {
      "Name": "Gauge.Reset",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 134,
      "Receiver": "Gauge"
    },
    "Gauge.Size": {
      "Name": "Gauge.Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1867,
      "Receiver": "Gauge"
    },
    "Gauge.String": {
      "Name": "Gauge.String",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 135,
      "Receiver": "Gauge"
    },
    "Gauge.Unmarshal": {
      "Name": "Gauge.Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 2310,
      "Receiver": "Gauge"
    },
    "Gauge.XXX_DiscardUnknown": {
      "Name": "Gauge.XXX_DiscardUnknown",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 161,
      "Receiver": "Gauge"
    },
    "Gauge.XXX_Marshal": {
      "Name": "Gauge.XXX_Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 143,
      "Receiver": "Gauge"
    },
    "Gauge.XXX_Merge": {
      "Name": "Gauge.XXX_Merge",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 155,
      "Receiver": "Gauge"
    },
    "Gauge.XXX_Size": {
      "Name": "Gauge.XXX_Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 158,
      "Receiver": "Gauge"
    },
    "Gauge.XXX_Unmarshal": {
      "Name": "Gauge.XXX_Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 140,
      "Receiver": "Gauge"
    },
    "GenerateBigTestHistograms": {
      "Name": "GenerateBigTestHistograms",
      "File": "model/histogram/test_utils.go",
      "Line": 17,
      "Receiver": ""
    },
    "GenerateChecksum": {
      "Name": "GenerateChecksum",
      "File": "config/reload.go",
      "Line": 33,
      "Receiver": ""
    },
    "GenerateMarkdown": {
      "Name": "GenerateMarkdown",
      "File": "util/documentcli/documentcli.go",
      "Line": 35,
      "Receiver": ""
    },
    "GenerateSamples": {
      "Name": "GenerateSamples",
      "File": "tsdb/chunks/samples.go",
      "Line": 86,
      "Receiver": ""
    },
    "GenerateTestCustomBucketsFloatHistogram": {
      "Name": "GenerateTestCustomBucketsFloatHistogram",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 142,
      "Receiver": ""
    },
    "GenerateTestCustomBucketsFloatHistograms": {
      "Name": "GenerateTestCustomBucketsFloatHistograms",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 131,
      "Receiver": ""
    },
    "GenerateTestCustomBucketsHistogram": {
      "Name": "GenerateTestCustomBucketsHistogram",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 71,
      "Receiver": ""
    },
    "GenerateTestCustomBucketsHistograms": {
      "Name": "GenerateTestCustomBucketsHistograms",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 60,
      "Receiver": ""
    },
    "GenerateTestFloatHistogram": {
      "Name": "GenerateTestFloatHistogram",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 111,
      "Receiver": ""
    },
    "GenerateTestFloatHistograms": {
      "Name": "GenerateTestFloatHistograms",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 99,
      "Receiver": ""
    },
    "GenerateTestGaugeFloatHistogram": {
      "Name": "GenerateTestGaugeFloatHistogram",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 164,
      "Receiver": ""
    },
    "GenerateTestGaugeFloatHistograms": {
      "Name": "GenerateTestGaugeFloatHistograms",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 156,
      "Receiver": ""
    },
    "GenerateTestGaugeHistogram": {
      "Name": "GenerateTestGaugeHistogram",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 93,
      "Receiver": ""
    },
    "GenerateTestGaugeHistograms": {
      "Name": "GenerateTestGaugeHistograms",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 85,
      "Receiver": ""
    },
    "GenerateTestHistogram": {
      "Name": "GenerateTestHistogram",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 40,
      "Receiver": ""
    },
    "GenerateTestHistogramWithHint": {
      "Name": "GenerateTestHistogramWithHint",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 33,
      "Receiver": ""
    },
    "GenerateTestHistograms": {
      "Name": "GenerateTestHistograms",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 22,
      "Receiver": ""
    },
    "GetControllerOf": {
      "Name": "GetControllerOf",
      "File": "discovery/kubernetes/pod.go",
      "Line": 206,
      "Receiver": ""
    },
    "GetFQDN": {
      "Name": "GetFQDN",
      "File": "util/osutil/hostname.go",
      "Line": 23,
      "Receiver": ""
    },
    "GetHistogramMetricBase": {
      "Name": "GetHistogramMetricBase",
      "File": "util/convertnhcb/convertnhcb.go",
      "Line": 232,
      "Receiver": ""
    },
    "GetHistogramMetricBaseName": {
      "Name": "GetHistogramMetricBaseName",
      "File": "util/convertnhcb/convertnhcb.go",
      "Line": 251,
      "Receiver": ""
    },
    "GetMetricType": {
      "Name": "GetMetricType",
      "File": "tsdb/record/record.go",
      "Line": 102,
      "Receiver": ""
    },
    "GlobalConfig.SetDirectory": {
      "Name": "GlobalConfig.SetDirectory",
      "File": "config/config.go",
      "Line": 583,
      "Receiver": "GlobalConfig"
    },
    "GlobalConfig.UnmarshalYAML": {
      "Name": "GlobalConfig.UnmarshalYAML",
      "File": "config/config.go",
      "Line": 589,
      "Receiver": "GlobalConfig"
    },
    "GlobalConfig.isZero": {
      "Name": "GlobalConfig.isZero",
      "File": "config/config.go",
      "Line": 641,
      "Receiver": "GlobalConfig"
    },
    "GraphLinkForExpression": {
      "Name": "GraphLinkForExpression",
      "File": "util/strutil/strconv.go",
      "Line": 35,
      "Receiver": ""
    },
    "Group.AlertingRules": {
      "Name": "Group.AlertingRules",
      "File": "rules/group.go",
      "Line": 320,
      "Receiver": "Group"
    },
    "Group.Context": {
      "Name": "Group.Context",
      "File": "rules/group.go",
      "Line": 197,
      "Receiver": "Group"
    },
    "Group.CopyState": {
      "Name": "Group.CopyState",
      "File": "rules/group.go",
      "Line": 454,
      "Receiver": "Group"
    },
    "Group.Equals": {
      "Name": "Group.Equals",
      "File": "rules/group.go",
      "Line": 870,
      "Receiver": "Group"
    },
    "Group.Eval": {
      "Name": "Group.Eval",
      "File": "rules/group.go",
      "Line": 505,
      "Receiver": "Group"
    },
    "Group.EvalTimestamp": {
      "Name": "Group.EvalTimestamp",
      "File": "rules/group.go",
      "Line": 421,
      "Receiver": "Group"
    },
    "Group.File": {
      "Name": "Group.File",
      "File": "rules/group.go",
      "Line": 153,
      "Receiver": "Group"
    },
    "Group.GetEvaluationTime": {
      "Name": "Group.GetEvaluationTime",
      "File": "rules/group.go",
      "Line": 353,
      "Receiver": "Group"
    },
    "Group.GetLastEvalTimestamp": {
      "Name": "Group.GetLastEvalTimestamp",
      "File": "rules/group.go",
      "Line": 407,
      "Receiver": "Group"
    },
    "Group.GetLastEvaluation": {
      "Name": "Group.GetLastEvaluation",
      "File": "rules/group.go",
      "Line": 391,
      "Receiver": "Group"
    },
    "Group.GetRuleEvaluationTimeSum": {
      "Name": "Group.GetRuleEvaluationTimeSum",
      "File": "rules/group.go",
      "Line": 369,
      "Receiver": "Group"
    },
    "Group.HasAlertingRules": {
      "Name": "Group.HasAlertingRules",
      "File": "rules/group.go",
      "Line": 340,
      "Receiver": "Group"
    },
    "Group.Interval": {
      "Name": "Group.Interval",
      "File": "rules/group.go",
      "Line": 200,
      "Receiver": "Group"
    },
    "Group.Limit": {
      "Name": "Group.Limit",
      "File": "rules/group.go",
      "Line": 203,
      "Receiver": "Group"
    },
    "Group.Logger": {
      "Name": "Group.Logger",
      "File": "rules/group.go",
      "Line": 205,
      "Receiver": "Group"
    },
    "Group.MarshalJSON": {
      "Name": "Group.MarshalJSON",
      "File": "discovery/targetgroup/targetgroup.go",
      "Line": 96,
      "Receiver": "Group"
    },
    "Group.MarshalYAML": {
      "Name": "Group.MarshalYAML",
      "File": "discovery/targetgroup/targetgroup.go",
      "Line": 59,
      "Receiver": "Group"
    },
    "Group.Name": {
      "Name": "Group.Name",
      "File": "rules/group.go",
      "Line": 150,
      "Receiver": "Group"
    },
    "Group.QueryOffset": {
      "Name": "Group.QueryOffset",
      "File": "rules/group.go",
      "Line": 693,
      "Receiver": "Group"
    },
    "Group.Queryable": {
      "Name": "Group.Queryable",
      "File": "rules/group.go",
      "Line": 194,
      "Receiver": "Group"
    },
    "Group.RestoreForState": {
      "Name": "Group.RestoreForState",
      "File": "rules/group.go",
      "Line": 739,
      "Receiver": "Group"
    },
    "Group.Rules": {
      "Name": "Group.Rules",
      "File": "rules/group.go",
      "Line": 156,
      "Receiver": "Group"
    },
    "Group.String": {
      "Name": "Group.String",
      "File": "discovery/targetgroup/targetgroup.go",
      "Line": 35,
      "Receiver": "Group"
    },
    "Group.UnmarshalJSON": {
      "Name": "Group.UnmarshalJSON",
      "File": "discovery/targetgroup/targetgroup.go",
      "Line": 74,
      "Receiver": "Group"
    },
    "Group.UnmarshalYAML": {
      "Name": "Group.UnmarshalYAML",
      "File": "discovery/targetgroup/targetgroup.go",
      "Line": 40,
      "Receiver": "Group"
    },
    "Group.cleanupStaleSeries": {
      "Name": "Group.cleanupStaleSeries",
      "File": "rules/group.go",
      "Line": 705,
      "Receiver": "Group"
    },
    "Group.hash": {
      "Name": "Group.hash",
      "File": "rules/group.go",
      "Line": 311,
      "Receiver": "Group"
    },
    "Group.run": {
      "Name": "Group.run",
      "File": "rules/group.go",
      "Line": 207,
      "Receiver": "Group"
    },
    "Group.setEvaluationTime": {
      "Name": "Group.setEvaluationTime",
      "File": "rules/group.go",
      "Line": 360,
      "Receiver": "Group"
    },
    "Group.setLastEvalTimestamp": {
      "Name": "Group.setLastEvalTimestamp",
      "File": "rules/group.go",
      "Line": 414,
      "Receiver": "Group"
    },
    "Group.setLastEvaluation": {
      "Name": "Group.setLastEvaluation",
      "File": "rules/group.go",
      "Line": 398,
      "Receiver": "Group"
    },
    "Group.stop": {
      "Name": "Group.stop",
      "File": "rules/group.go",
      "Line": 306,
      "Receiver": "Group"
    },
    "Group.stopAsync": {
      "Name": "Group.stopAsync",
      "File": "rules/group.go",
      "Line": 298,
      "Receiver": "Group"
    },
    "Group.updateRuleEvaluationTimeSum": {
      "Name": "Group.updateRuleEvaluationTimeSum",
      "File": "rules/group.go",
      "Line": 377,
      "Receiver": "Group"
    },
    "Group.waitStopped": {
      "Name": "Group.waitStopped",
      "File": "rules/group.go",
      "Line": 302,
      "Receiver": "Group"
    },
    "GroupKey": {
      "Name": "GroupKey",
      "File": "rules/group.go",
      "Line": 905,
      "Receiver": ""
    },
    "HPoint.MarshalJSON": {
      "Name": "HPoint.MarshalJSON",
      "File": "promql/value.go",
      "Line": 137,
      "Receiver": "HPoint"
    },
    "HPoint.String": {
      "Name": "HPoint.String",
      "File": "promql/value.go",
      "Line": 124,
      "Receiver": "HPoint"
    },
    "HPoint.size": {
      "Name": "HPoint.size",
      "File": "promql/value.go",
      "Line": 179,
      "Receiver": "HPoint"
    },
    "HTTPClientOptions": {
      "Name": "HTTPClientOptions",
      "File": "discovery/manager.go",
      "Line": 137,
      "Receiver": ""
    },
    "HTTPError.Error": {
      "Name": "HTTPError.Error",
      "File": "storage/remote/codec.go",
      "Line": 55,
      "Receiver": "HTTPError"
    },
    "HTTPError.Status": {
      "Name": "HTTPError.Status",
      "File": "storage/remote/codec.go",
      "Line": 59,
      "Receiver": "HTTPError"
    },
    "HTTPResourceClient.Close": {
      "Name": "HTTPResourceClient.Close",
      "File": "discovery/xds/client.go",
      "Line": 160,
      "Receiver": "HTTPResourceClient"
    },
    "HTTPResourceClient.Fetch": {
      "Name": "HTTPResourceClient.Fetch",
      "File": "discovery/xds/client.go",
      "Line": 166,
      "Receiver": "HTTPResourceClient"
    },
    "HTTPResourceClient.ID": {
      "Name": "HTTPResourceClient.ID",
      "File": "discovery/xds/client.go",
      "Line": 156,
      "Receiver": "HTTPResourceClient"
    },
    "HTTPResourceClient.ResourceTypeURL": {
      "Name": "HTTPResourceClient.ResourceTypeURL",
      "File": "discovery/xds/client.go",
      "Line": 152,
      "Receiver": "HTTPResourceClient"
    },
    "HTTPResourceClient.Server": {
      "Name": "HTTPResourceClient.Server",
      "File": "discovery/xds/client.go",
      "Line": 148,
      "Receiver": "HTTPResourceClient"
    },
    "Handler.ApplyConfig": {
      "Name": "Handler.ApplyConfig",
      "File": "web/web.go",
      "Line": 245,
      "Receiver": "Handler"
    },
    "Handler.Listener": {
      "Name": "Handler.Listener",
      "File": "web/web.go",
      "Line": 656,
      "Receiver": "Handler"
    },
    "Handler.Listeners": {
      "Name": "Handler.Listeners",
      "File": "web/web.go",
      "Line": 642,
      "Receiver": "Handler"
    },
    "Handler.Quit": {
      "Name": "Handler.Quit",
      "File": "web/web.go",
      "Line": 632,
      "Receiver": "Handler"
    },
    "Handler.Reload": {
      "Name": "Handler.Reload",
      "File": "web/web.go",
      "Line": 637,
      "Receiver": "Handler"
    },
    "Handler.Run": {
      "Name": "Handler.Run",
      "File": "web/web.go",
      "Line": 674,
      "Receiver": "Handler"
    },
    "Handler.SetReady": {
      "Name": "Handler.SetReady",
      "File": "web/web.go",
      "Line": 594,
      "Receiver": "Handler"
    },
    "Handler.consoles": {
      "Name": "Handler.consoles",
      "File": "web/web.go",
      "Line": 724,
      "Receiver": "Handler"
    },
    "Handler.consolesPath": {
      "Name": "Handler.consolesPath",
      "File": "web/web.go",
      "Line": 889,
      "Receiver": "Handler"
    },
    "Handler.federation": {
      "Name": "Handler.federation",
      "File": "web/federate.go",
      "Line": 56,
      "Receiver": "Handler"
    },
    "Handler.isReady": {
      "Name": "Handler.isReady",
      "File": "web/web.go",
      "Line": 606,
      "Receiver": "Handler"
    },
    "Handler.quit": {
      "Name": "Handler.quit",
      "File": "web/web.go",
      "Line": 869,
      "Receiver": "Handler"
    },
    "Handler.reload": {
      "Name": "Handler.reload",
      "File": "web/web.go",
      "Line": 881,
      "Receiver": "Handler"
    },
    "Handler.runtimeInfo": {
      "Name": "Handler.runtimeInfo",
      "File": "web/web.go",
      "Line": 803,
      "Receiver": "Handler"
    },
    "Handler.testReady": {
      "Name": "Handler.testReady",
      "File": "web/web.go",
      "Line": 611,
      "Receiver": "Handler"
    },
    "Handler.version": {
      "Name": "Handler.version",
      "File": "web/web.go",
      "Line": 862,
      "Receiver": "Handler"
    },
    "HardLinkChunkFiles": {
      "Name": "HardLinkChunkFiles",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 386,
      "Receiver": ""
    },
    "HashRatioSampler.AddRatioSample": {
      "Name": "HashRatioSampler.AddRatioSample",
      "File": "promql/engine.go",
      "Line": 3936,
      "Receiver": "HashRatioSampler"
    },
    "HashRatioSampler.sampleOffset": {
      "Name": "HashRatioSampler.sampleOffset",
      "File": "promql/engine.go",
      "Line": 3929,
      "Receiver": "HashRatioSampler"
    },
    "Head.AppendableMinValidTime": {
      "Name": "Head.AppendableMinValidTime",
      "File": "tsdb/head_append.go",
      "Line": 208,
      "Receiver": "Head"
    },
    "Head.Appender": {
      "Name": "Head.Appender",
      "File": "tsdb/head_append.go",
      "Line": 151,
      "Receiver": "Head"
    },
    "Head.ApplyConfig": {
      "Name": "Head.ApplyConfig",
      "File": "tsdb/head.go",
      "Line": 1002,
      "Receiver": "Head"
    },
    "Head.ChunkSnapshot": {
      "Name": "Head.ChunkSnapshot",
      "File": "tsdb/head_wal.go",
      "Line": 1247,
      "Receiver": "Head"
    },
    "Head.Chunks": {
      "Name": "Head.Chunks",
      "File": "tsdb/head_read.go",
      "Line": 311,
      "Receiver": "Head"
    },
    "Head.Close": {
      "Name": "Head.Close",
      "File": "tsdb/head.go",
      "Line": 1708,
      "Receiver": "Head"
    },
    "Head.Delete": {
      "Name": "Head.Delete",
      "File": "tsdb/head.go",
      "Line": 1543,
      "Receiver": "Head"
    },
    "Head.DisableNativeHistograms": {
      "Name": "Head.DisableNativeHistograms",
      "File": "tsdb/head.go",
      "Line": 1048,
      "Receiver": "Head"
    },
    "Head.EnableNativeHistograms": {
      "Name": "Head.EnableNativeHistograms",
      "File": "tsdb/head.go",
      "Line": 1043,
      "Receiver": "Head"
    },
    "Head.ExemplarQuerier": {
      "Name": "Head.ExemplarQuerier",
      "File": "tsdb/head_read.go",
      "Line": 31,
      "Receiver": "Head"
    },
    "Head.Index": {
      "Name": "Head.Index",
      "File": "tsdb/head_read.go",
      "Line": 36,
      "Receiver": "Head"
    },
    "Head.Init": {
      "Name": "Head.Init",
      "File": "tsdb/head.go",
      "Line": 642,
      "Receiver": "Head"
    },
    "Head.IsQuerierCollidingWithTruncation": {
      "Name": "Head.IsQuerierCollidingWithTruncation",
      "File": "tsdb/head.go",
      "Line": 1233,
      "Receiver": "Head"
    },
    "Head.MaxOOOTime": {
      "Name": "Head.MaxOOOTime",
      "File": "tsdb/head.go",
      "Line": 1686,
      "Receiver": "Head"
    },
    "Head.MaxTime": {
      "Name": "Head.MaxTime",
      "File": "tsdb/head.go",
      "Line": 1674,
      "Receiver": "Head"
    },
    "Head.Meta": {
      "Name": "Head.Meta",
      "File": "tsdb/head.go",
      "Line": 1657,
      "Receiver": "Head"
    },
    "Head.MinOOOTime": {
      "Name": "Head.MinOOOTime",
      "File": "tsdb/head.go",
      "Line": 1680,
      "Receiver": "Head"
    },
    "Head.MinTime": {
      "Name": "Head.MinTime",
      "File": "tsdb/head.go",
      "Line": 1669,
      "Receiver": "Head"
    },
    "Head.NumSeries": {
      "Name": "Head.NumSeries",
      "File": "tsdb/head.go",
      "Line": 1649,
      "Receiver": "Head"
    },
    "Head.OverlapsClosedInterval": {
      "Name": "Head.OverlapsClosedInterval",
      "File": "tsdb/head.go",
      "Line": 1137,
      "Receiver": "Head"
    },
    "Head.PostingsCardinalityStats": {
      "Name": "Head.PostingsCardinalityStats",
      "File": "tsdb/head.go",
      "Line": 1053,
      "Receiver": "Head"
    },
    "Head.RebuildSymbolTable": {
      "Name": "Head.RebuildSymbolTable",
      "File": "tsdb/head_other.go",
      "Line": 30,
      "Receiver": "Head"
    },
    "Head.SetMinValidTime": {
      "Name": "Head.SetMinValidTime",
      "File": "tsdb/head.go",
      "Line": 1120,
      "Receiver": "Head"
    },
    "Head.SetOutOfOrderTimeWindow": {
      "Name": "Head.SetOutOfOrderTimeWindow",
      "File": "tsdb/head.go",
      "Line": 1034,
      "Receiver": "Head"
    },
    "Head.Size": {
      "Name": "Head.Size",
      "File": "tsdb/head.go",
      "Line": 2396,
      "Receiver": "Head"
    },
    "Head.Stats": {
      "Name": "Head.Stats",
      "File": "tsdb/head.go",
      "Line": 1449,
      "Receiver": "Head"
    },
    "Head.String": {
      "Name": "Head.String",
      "File": "tsdb/head.go",
      "Line": 1733,
      "Receiver": "Head"
    },
    "Head.Tombstones": {
      "Name": "Head.Tombstones",
      "File": "tsdb/head.go",
      "Line": 1644,
      "Receiver": "Head"
    },
    "Head.Truncate": {
      "Name": "Head.Truncate",
      "File": "tsdb/head.go",
      "Line": 1125,
      "Receiver": "Head"
    },
    "Head.WaitForAppendersOverlapping": {
      "Name": "Head.WaitForAppendersOverlapping",
      "File": "tsdb/head.go",
      "Line": 1222,
      "Receiver": "Head"
    },
    "Head.WaitForPendingReadersForOOOChunksAtOrBefore": {
      "Name": "Head.WaitForPendingReadersForOOOChunksAtOrBefore",
      "File": "tsdb/head.go",
      "Line": 1215,
      "Receiver": "Head"
    },
    "Head.WaitForPendingReadersInTimeRange": {
      "Name": "Head.WaitForPendingReadersInTimeRange",
      "File": "tsdb/head.go",
      "Line": 1194,
      "Receiver": "Head"
    },
    "Head.appendableMinValidTime": {
      "Name": "Head.appendableMinValidTime",
      "File": "tsdb/head_append.go",
      "Line": 194,
      "Receiver": "Head"
    },
    "Head.appender": {
      "Name": "Head.appender",
      "File": "tsdb/head_append.go",
      "Line": 164,
      "Receiver": "Head"
    },
    "Head.chunkFromSeries": {
      "Name": "Head.chunkFromSeries",
      "File": "tsdb/head_read.go",
      "Line": 385,
      "Receiver": "Head"
    },
    "Head.chunksRange": {
      "Name": "Head.chunksRange",
      "File": "tsdb/head_read.go",
      "Line": 315,
      "Receiver": "Head"
    },
    "Head.compactable": {
      "Name": "Head.compactable",
      "File": "tsdb/head.go",
      "Line": 1698,
      "Receiver": "Head"
    },
    "Head.gc": {
      "Name": "Head.gc",
      "File": "tsdb/head.go",
      "Line": 1601,
      "Receiver": "Head"
    },
    "Head.getAppendBuffer": {
      "Name": "Head.getAppendBuffer",
      "File": "tsdb/head_append.go",
      "Line": 216,
      "Receiver": "Head"
    },
    "Head.getBytesBuffer": {
      "Name": "Head.getBytesBuffer",
      "File": "tsdb/head_append.go",
      "Line": 298,
      "Receiver": "Head"
    },
    "Head.getExemplarBuffer": {
      "Name": "Head.getExemplarBuffer",
      "File": "tsdb/head_append.go",
      "Line": 228,
      "Receiver": "Head"
    },
    "Head.getFloatHistogramBuffer": {
      "Name": "Head.getFloatHistogramBuffer",
      "File": "tsdb/head_append.go",
      "Line": 259,
      "Receiver": "Head"
    },
    "Head.getHistogramBuffer": {
      "Name": "Head.getHistogramBuffer",
      "File": "tsdb/head_append.go",
      "Line": 247,
      "Receiver": "Head"
    },
    "Head.getMetadataBuffer": {
      "Name": "Head.getMetadataBuffer",
      "File": "tsdb/head_append.go",
      "Line": 271,
      "Receiver": "Head"
    },
    "Head.getOrCreate": {
      "Name": "Head.getOrCreate",
      "File": "tsdb/head.go",
      "Line": 1737,
      "Receiver": "Head"
    },
    "Head.getOrCreateWithID": {
      "Name": "Head.getOrCreateWithID",
      "File": "tsdb/head.go",
      "Line": 1752,
      "Receiver": "Head"
    },
    "Head.getSeriesBuffer": {
      "Name": "Head.getSeriesBuffer",
      "File": "tsdb/head_append.go",
      "Line": 283,
      "Receiver": "Head"
    },
    "Head.getWALExpiry": {
      "Name": "Head.getWALExpiry",
      "File": "tsdb/head.go",
      "Line": 1275,
      "Receiver": "Head"
    },
    "Head.indexRange": {
      "Name": "Head.indexRange",
      "File": "tsdb/head_read.go",
      "Line": 40,
      "Receiver": "Head"
    },
    "Head.initTime": {
      "Name": "Head.initTime",
      "File": "tsdb/head_append.go",
      "Line": 118,
      "Receiver": "Head"
    },
    "Head.initialized": {
      "Name": "Head.initialized",
      "File": "tsdb/head.go",
      "Line": 1691,
      "Receiver": "Head"
    },
    "Head.keepSeriesInWALCheckpoint": {
      "Name": "Head.keepSeriesInWALCheckpoint",
      "File": "tsdb/head.go",
      "Line": 1292,
      "Receiver": "Head"
    },
    "Head.loadChunkSnapshot": {
      "Name": "Head.loadChunkSnapshot",
      "File": "tsdb/head_wal.go",
      "Line": 1513,
      "Receiver": "Head"
    },
    "Head.loadMmappedChunks": {
      "Name": "Head.loadMmappedChunks",
      "File": "tsdb/head.go",
      "Line": 875,
      "Receiver": "Head"
    },
    "Head.loadWAL": {
      "Name": "Head.loadWAL",
      "File": "tsdb/head_wal.go",
      "Line": 78,
      "Receiver": "Head"
    },
    "Head.loadWBL": {
      "Name": "Head.loadWBL",
      "File": "tsdb/head_wal.go",
      "Line": 688,
      "Receiver": "Head"
    },
    "Head.mmapHeadChunks": {
      "Name": "Head.mmapHeadChunks",
      "File": "tsdb/head.go",
      "Line": 1795,
      "Receiver": "Head"
    },
    "Head.performChunkSnapshot": {
      "Name": "Head.performChunkSnapshot",
      "File": "tsdb/head_wal.go",
      "Line": 1408,
      "Receiver": "Head"
    },
    "Head.putAppendBuffer": {
      "Name": "Head.putAppendBuffer",
      "File": "tsdb/head_append.go",
      "Line": 224,
      "Receiver": "Head"
    },
    "Head.putBytesBuffer": {
      "Name": "Head.putBytesBuffer",
      "File": "tsdb/head_append.go",
      "Line": 306,
      "Receiver": "Head"
    },
    "Head.putExemplarBuffer": {
      "Name": "Head.putExemplarBuffer",
      "File": "tsdb/head_append.go",
      "Line": 236,
      "Receiver": "Head"
    },
    "Head.putFloatHistogramBuffer": {
      "Name": "Head.putFloatHistogramBuffer",
      "File": "tsdb/head_append.go",
      "Line": 267,
      "Receiver": "Head"
    },
    "Head.putHistogramBuffer": {
      "Name": "Head.putHistogramBuffer",
      "File": "tsdb/head_append.go",
      "Line": 255,
      "Receiver": "Head"
    },
    "Head.putMetadataBuffer": {
      "Name": "Head.putMetadataBuffer",
      "File": "tsdb/head_append.go",
      "Line": 279,
      "Receiver": "Head"
    },
    "Head.putSeriesBuffer": {
      "Name": "Head.putSeriesBuffer",
      "File": "tsdb/head_append.go",
      "Line": 291,
      "Receiver": "Head"
    },
    "Head.removeCorruptedMmappedChunks": {
      "Name": "Head.removeCorruptedMmappedChunks",
      "File": "tsdb/head.go",
      "Line": 972,
      "Receiver": "Head"
    },
    "Head.resetInMemoryState": {
      "Name": "Head.resetInMemoryState",
      "File": "tsdb/head.go",
      "Line": 303,
      "Receiver": "Head"
    },
    "Head.resetSeriesWithMMappedChunks": {
      "Name": "Head.resetSeriesWithMMappedChunks",
      "File": "tsdb/head_wal.go",
      "Line": 474,
      "Receiver": "Head"
    },
    "Head.resetWLReplayResources": {
      "Name": "Head.resetWLReplayResources",
      "File": "tsdb/head.go",
      "Line": 349,
      "Receiver": "Head"
    },
    "Head.setWALExpiry": {
      "Name": "Head.setWALExpiry",
      "File": "tsdb/head.go",
      "Line": 1283,
      "Receiver": "Head"
    },
    "Head.startWALReplayStatus": {
      "Name": "Head.startWALReplayStatus",
      "File": "tsdb/head.go",
      "Line": 2412,
      "Receiver": "Head"
    },
    "Head.truncateMemory": {
      "Name": "Head.truncateMemory",
      "File": "tsdb/head.go",
      "Line": 1142,
      "Receiver": "Head"
    },
    "Head.truncateOOO": {
      "Name": "Head.truncateOOO",
      "File": "tsdb/head.go",
      "Line": 1386,
      "Receiver": "Head"
    },
    "Head.truncateSeriesAndChunkDiskMapper": {
      "Name": "Head.truncateSeriesAndChunkDiskMapper",
      "File": "tsdb/head.go",
      "Line": 1406,
      "Receiver": "Head"
    },
    "Head.truncateWAL": {
      "Name": "Head.truncateWAL",
      "File": "tsdb/head.go",
      "Line": 1304,
      "Receiver": "Head"
    },
    "Head.updateMinMaxTime": {
      "Name": "Head.updateMinMaxTime",
      "File": "tsdb/head.go",
      "Line": 1077,
      "Receiver": "Head"
    },
    "Head.updateMinOOOMaxOOOTime": {
      "Name": "Head.updateMinOOOMaxOOOTime",
      "File": "tsdb/head.go",
      "Line": 1098,
      "Receiver": "Head"
    },
    "Head.updateWALReplayStatusRead": {
      "Name": "Head.updateWALReplayStatusRead",
      "File": "tsdb/head.go",
      "Line": 2421,
      "Receiver": "Head"
    },
    "HeadAndOOOChunkQuerier.Close": {
      "Name": "HeadAndOOOChunkQuerier.Close",
      "File": "tsdb/ooo_head_read.go",
      "Line": 607,
      "Receiver": "HeadAndOOOChunkQuerier"
    },
    "HeadAndOOOChunkQuerier.LabelNames": {
      "Name": "HeadAndOOOChunkQuerier.LabelNames",
      "File": "tsdb/ooo_head_read.go",
      "Line": 600,
      "Receiver": "HeadAndOOOChunkQuerier"
    },
    "HeadAndOOOChunkQuerier.LabelValues": {
      "Name": "HeadAndOOOChunkQuerier.LabelValues",
      "File": "tsdb/ooo_head_read.go",
      "Line": 593,
      "Receiver": "HeadAndOOOChunkQuerier"
    },
    "HeadAndOOOChunkQuerier.Select": {
      "Name": "HeadAndOOOChunkQuerier.Select",
      "File": "tsdb/ooo_head_read.go",
      "Line": 615,
      "Receiver": "HeadAndOOOChunkQuerier"
    },
    "HeadAndOOOChunkReader.ChunkOrIterable": {
      "Name": "HeadAndOOOChunkReader.ChunkOrIterable",
      "File": "tsdb/ooo_head_read.go",
      "Line": 228,
      "Receiver": "HeadAndOOOChunkReader"
    },
    "HeadAndOOOChunkReader.ChunkOrIterableWithCopy": {
      "Name": "HeadAndOOOChunkReader.ChunkOrIterableWithCopy",
      "File": "tsdb/ooo_head_read.go",
      "Line": 235,
      "Receiver": "HeadAndOOOChunkReader"
    },
    "HeadAndOOOChunkReader.Close": {
      "Name": "HeadAndOOOChunkReader.Close",
      "File": "tsdb/ooo_head_read.go",
      "Line": 280,
      "Receiver": "HeadAndOOOChunkReader"
    },
    "HeadAndOOOChunkReader.chunkOrIterable": {
      "Name": "HeadAndOOOChunkReader.chunkOrIterable",
      "File": "tsdb/ooo_head_read.go",
      "Line": 239,
      "Receiver": "HeadAndOOOChunkReader"
    },
    "HeadAndOOOIndexReader.LabelValues": {
      "Name": "HeadAndOOOIndexReader.LabelValues",
      "File": "tsdb/ooo_head_read.go",
      "Line": 179,
      "Receiver": "HeadAndOOOIndexReader"
    },
    "HeadAndOOOIndexReader.Series": {
      "Name": "HeadAndOOOIndexReader.Series",
      "File": "tsdb/ooo_head_read.go",
      "Line": 62,
      "Receiver": "HeadAndOOOIndexReader"
    },
    "HeadAndOOOQuerier.Close": {
      "Name": "HeadAndOOOQuerier.Close",
      "File": "tsdb/ooo_head_read.go",
      "Line": 555,
      "Receiver": "HeadAndOOOQuerier"
    },
    "HeadAndOOOQuerier.LabelNames": {
      "Name": "HeadAndOOOQuerier.LabelNames",
      "File": "tsdb/ooo_head_read.go",
      "Line": 548,
      "Receiver": "HeadAndOOOQuerier"
    },
    "HeadAndOOOQuerier.LabelValues": {
      "Name": "HeadAndOOOQuerier.LabelValues",
      "File": "tsdb/ooo_head_read.go",
      "Line": 541,
      "Receiver": "HeadAndOOOQuerier"
    },
    "HeadAndOOOQuerier.Select": {
      "Name": "HeadAndOOOQuerier.Select",
      "File": "tsdb/ooo_head_read.go",
      "Line": 563,
      "Receiver": "HeadAndOOOQuerier"
    },
    "HeadChunkRef.Unpack": {
      "Name": "HeadChunkRef.Unpack",
      "File": "tsdb/chunks/chunks.go",
      "Line": 75,
      "Receiver": "HeadChunkRef"
    },
    "Histogram.Compact": {
      "Name": "Histogram.Compact",
      "File": "model/histogram/histogram.go",
      "Line": 351,
      "Receiver": "Histogram"
    },
    "Histogram.Copy": {
      "Name": "Histogram.Copy",
      "File": "model/histogram/histogram.go",
      "Line": 96,
      "Receiver": "Histogram"
    },
    "Histogram.CopyTo": {
      "Name": "Histogram.CopyTo",
      "File": "model/histogram/histogram.go",
      "Line": 135,
      "Receiver": "Histogram"
    },
    "Histogram.CumulativeBucketIterator": {
      "Name": "Histogram.CumulativeBucketIterator",
      "File": "model/histogram/histogram.go",
      "Line": 232,
      "Receiver": "Histogram"
    },
    "Histogram.Descriptor": {
      "Name": "Histogram.Descriptor",
      "File": "prompb/types.pb.go",
      "Line": 417,
      "Receiver": "Histogram"
    },
    "Histogram.Equals": {
      "Name": "Histogram.Equals",
      "File": "model/histogram/histogram.go",
      "Line": 248,
      "Receiver": "Histogram"
    },
    "Histogram.GetBucket": {
      "Name": "Histogram.GetBucket",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 504,
      "Receiver": "Histogram"
    },
    "Histogram.GetCount": {
      "Name": "Histogram.GetCount",
      "File": "prompb/types.pb.go",
      "Line": 476,
      "Receiver": "Histogram"
    },
    "Histogram.GetCountFloat": {
      "Name": "Histogram.GetCountFloat",
      "File": "prompb/types.pb.go",
      "Line": 496,
      "Receiver": "Histogram"
    },
    "Histogram.GetCountInt": {
      "Name": "Histogram.GetCountInt",
      "File": "prompb/types.pb.go",
      "Line": 489,
      "Receiver": "Histogram"
    },
    "Histogram.GetCreatedTimestamp": {
      "Name": "Histogram.GetCreatedTimestamp",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 511,
      "Receiver": "Histogram"
    },
    "Histogram.GetCustomValues": {
      "Name": "Histogram.GetCustomValues",
      "File": "prompb/types.pb.go",
      "Line": 594,
      "Receiver": "Histogram"
    },
    "Histogram.GetExemplars": {
      "Name": "Histogram.GetExemplars",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 588,
      "Receiver": "Histogram"
    },
    "Histogram.GetNegativeCount": {
      "Name": "Histogram.GetNegativeCount",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 560,
      "Receiver": "Histogram"
    },
    "Histogram.GetNegativeCounts": {
      "Name": "Histogram.GetNegativeCounts",
      "File": "prompb/types.pb.go",
      "Line": 552,
      "Receiver": "Histogram"
    },
    "Histogram.GetNegativeDelta": {
      "Name": "Histogram.GetNegativeDelta",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 553,
      "Receiver": "Histogram"
    },
    "Histogram.GetNegativeDeltas": {
      "Name": "Histogram.GetNegativeDeltas",
      "File": "prompb/types.pb.go",
      "Line": 545,
      "Receiver": "Histogram"
    },
    "Histogram.GetNegativeSpan": {
      "Name": "Histogram.GetNegativeSpan",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 546,
      "Receiver": "Histogram"
    },
    "Histogram.GetNegativeSpans": {
      "Name": "Histogram.GetNegativeSpans",
      "File": "prompb/types.pb.go",
      "Line": 538,
      "Receiver": "Histogram"
    },
    "Histogram.GetPositiveCount": {
      "Name": "Histogram.GetPositiveCount",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 581,
      "Receiver": "Histogram"
    },
    "Histogram.GetPositiveCounts": {
      "Name": "Histogram.GetPositiveCounts",
      "File": "prompb/types.pb.go",
      "Line": 573,
      "Receiver": "Histogram"
    },
    "Histogram.GetPositiveDelta": {
      "Name": "Histogram.GetPositiveDelta",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 574,
      "Receiver": "Histogram"
    },
    "Histogram.GetPositiveDeltas": {
      "Name": "Histogram.GetPositiveDeltas",
      "File": "prompb/types.pb.go",
      "Line": 566,
      "Receiver": "Histogram"
    },
    "Histogram.GetPositiveSpan": {
      "Name": "Histogram.GetPositiveSpan",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 567,
      "Receiver": "Histogram"
    },
    "Histogram.GetPositiveSpans": {
      "Name": "Histogram.GetPositiveSpans",
      "File": "prompb/types.pb.go",
      "Line": 559,
      "Receiver": "Histogram"
    },
    "Histogram.GetResetHint": {
      "Name": "Histogram.GetResetHint",
      "File": "prompb/types.pb.go",
      "Line": 580,
      "Receiver": "Histogram"
    },
    "Histogram.GetSampleCount": {
      "Name": "Histogram.GetSampleCount",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 483,
      "Receiver": "Histogram"
    },
    "Histogram.GetSampleCountFloat": {
      "Name": "Histogram.GetSampleCountFloat",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 490,
      "Receiver": "Histogram"
    },
    "Histogram.GetSampleSum": {
      "Name": "Histogram.GetSampleSum",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 497,
      "Receiver": "Histogram"
    },
    "Histogram.GetSchema": {
      "Name": "Histogram.GetSchema",
      "File": "prompb/types.pb.go",
      "Line": 510,
      "Receiver": "Histogram"
    },
    "Histogram.GetSum": {
      "Name": "Histogram.GetSum",
      "File": "prompb/types.pb.go",
      "Line": 503,
      "Receiver": "Histogram"
    },
    "Histogram.GetTimestamp": {
      "Name": "Histogram.GetTimestamp",
      "File": "prompb/types.pb.go",
      "Line": 587,
      "Receiver": "Histogram"
    },
    "Histogram.GetZeroCount": {
      "Name": "Histogram.GetZeroCount",
      "File": "prompb/types.pb.go",
      "Line": 482,
      "Receiver": "Histogram"
    },
    "Histogram.GetZeroCountFloat": {
      "Name": "Histogram.GetZeroCountFloat",
      "File": "prompb/types.pb.go",
      "Line": 531,
      "Receiver": "Histogram"
    },
    "Histogram.GetZeroCountInt": {
      "Name": "Histogram.GetZeroCountInt",
      "File": "prompb/types.pb.go",
      "Line": 524,
      "Receiver": "Histogram"
    },
    "Histogram.GetZeroThreshold": {
      "Name": "Histogram.GetZeroThreshold",
      "File": "prompb/types.pb.go",
      "Line": 517,
      "Receiver": "Histogram"
    },
    "Histogram.IsFloatHistogram": {
      "Name": "Histogram.IsFloatHistogram",
      "File": "prompb/io/prometheus/write/v2/codec.go",
      "Line": 82,
      "Receiver": "Histogram"
    },
    "Histogram.Marshal": {
      "Name": "Histogram.Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1375,
      "Receiver": "Histogram"
    },
    "Histogram.MarshalTo": {
      "Name": "Histogram.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1385,
      "Receiver": "Histogram"
    },
    "Histogram.MarshalToSizedBuffer": {
      "Name": "Histogram.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1390,
      "Receiver": "Histogram"
    },
    "Histogram.NegativeBucketIterator": {
      "Name": "Histogram.NegativeBucketIterator",
      "File": "model/histogram/histogram.go",
      "Line": 223,
      "Receiver": "Histogram"
    },
    "Histogram.PositiveBucketIterator": {
      "Name": "Histogram.PositiveBucketIterator",
      "File": "model/histogram/histogram.go",
      "Line": 216,
      "Receiver": "Histogram"
    },
    "Histogram.ProtoMessage": {
      "Name": "Histogram.ProtoMessage",
      "File": "prompb/types.pb.go",
      "Line": 416,
      "Receiver": "Histogram"
    },
    "Histogram.ReduceResolution": {
      "Name": "Histogram.ReduceResolution",
      "File": "model/histogram/histogram.go",
      "Line": 611,
      "Receiver": "Histogram"
    },
    "Histogram.Reset": {
      "Name": "Histogram.Reset",
      "File": "prompb/types.pb.go",
      "Line": 414,
      "Receiver": "Histogram"
    },
    "Histogram.Size": {
      "Name": "Histogram.Size",
      "File": "prompb/types.pb.go",
      "Line": 2100,
      "Receiver": "Histogram"
    },
    "Histogram.String": {
      "Name": "Histogram.String",
      "File": "prompb/types.pb.go",
      "Line": 415,
      "Receiver": "Histogram"
    },
    "Histogram.ToFloat": {
      "Name": "Histogram.ToFloat",
      "File": "model/histogram/histogram.go",
      "Line": 365,
      "Receiver": "Histogram"
    },
    "Histogram.ToFloatHistogram": {
      "Name": "Histogram.ToFloatHistogram",
      "File": "prompb/io/prometheus/write/v2/codec.go",
      "Line": 111,
      "Receiver": "Histogram"
    },
    "Histogram.ToIntHistogram": {
      "Name": "Histogram.ToIntHistogram",
      "File": "prompb/io/prometheus/write/v2/codec.go",
      "Line": 89,
      "Receiver": "Histogram"
    },
    "Histogram.Unmarshal": {
      "Name": "Histogram.Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 2773,
      "Receiver": "Histogram"
    },
    "Histogram.UsesCustomBuckets": {
      "Name": "Histogram.UsesCustomBuckets",
      "File": "model/histogram/histogram.go",
      "Line": 91,
      "Receiver": "Histogram"
    },
    "Histogram.Validate": {
      "Name": "Histogram.Validate",
      "File": "model/histogram/histogram.go",
      "Line": 426,
      "Receiver": "Histogram"
    },
    "Histogram.XXX_DiscardUnknown": {
      "Name": "Histogram.XXX_DiscardUnknown",
      "File": "prompb/types.pb.go",
      "Line": 441,
      "Receiver": "Histogram"
    },
    "Histogram.XXX_Marshal": {
      "Name": "Histogram.XXX_Marshal",
      "File": "prompb/types.pb.go",
      "Line": 423,
      "Receiver": "Histogram"
    },
    "Histogram.XXX_Merge": {
      "Name": "Histogram.XXX_Merge",
      "File": "prompb/types.pb.go",
      "Line": 435,
      "Receiver": "Histogram"
    },
    "Histogram.XXX_OneofWrappers": {
      "Name": "Histogram.XXX_OneofWrappers",
      "File": "prompb/types.pb.go",
      "Line": 602,
      "Receiver": "Histogram"
    },
    "Histogram.XXX_Size": {
      "Name": "Histogram.XXX_Size",
      "File": "prompb/types.pb.go",
      "Line": 438,
      "Receiver": "Histogram"
    },
    "Histogram.XXX_Unmarshal": {
      "Name": "Histogram.XXX_Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 420,
      "Receiver": "Histogram"
    },
    "Histogram.ZeroBucket": {
      "Name": "Histogram.ZeroBucket",
      "File": "model/histogram/histogram.go",
      "Line": 201,
      "Receiver": "Histogram"
    },
    "HistogramAppender.Append": {
      "Name": "HistogramAppender.Append",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 237,
      "Receiver": "HistogramAppender"
    },
    "HistogramAppender.AppendFloatHistogram": {
      "Name": "HistogramAppender.AppendFloatHistogram",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 778,
      "Receiver": "HistogramAppender"
    },
    "HistogramAppender.AppendHistogram": {
      "Name": "HistogramAppender.AppendHistogram",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 782,
      "Receiver": "HistogramAppender"
    },
    "HistogramAppender.GetCounterResetHeader": {
      "Name": "HistogramAppender.GetCounterResetHeader",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 223,
      "Receiver": "HistogramAppender"
    },
    "HistogramAppender.NumSamples": {
      "Name": "HistogramAppender.NumSamples",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 231,
      "Receiver": "HistogramAppender"
    },
    "HistogramAppender.appendHistogram": {
      "Name": "HistogramAppender.appendHistogram",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 590,
      "Receiver": "HistogramAppender"
    },
    "HistogramAppender.appendable": {
      "Name": "HistogramAppender.appendable",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 271,
      "Receiver": "HistogramAppender"
    },
    "HistogramAppender.appendableGauge": {
      "Name": "HistogramAppender.appendableGauge",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 552,
      "Receiver": "HistogramAppender"
    },
    "HistogramAppender.recode": {
      "Name": "HistogramAppender.recode",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 710,
      "Receiver": "HistogramAppender"
    },
    "HistogramAppender.recodeHistogram": {
      "Name": "HistogramAppender.recodeHistogram",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 760,
      "Receiver": "HistogramAppender"
    },
    "HistogramAppender.setCounterResetHeader": {
      "Name": "HistogramAppender.setCounterResetHeader",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 227,
      "Receiver": "HistogramAppender"
    },
    "HistogramAppender.writeSumDelta": {
      "Name": "HistogramAppender.writeSumDelta",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 774,
      "Receiver": "HistogramAppender"
    },
    "HistogramChunk.Appender": {
      "Name": "HistogramChunk.Appender",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 117,
      "Receiver": "HistogramChunk"
    },
    "HistogramChunk.Bytes": {
      "Name": "HistogramChunk.Bytes",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 59,
      "Receiver": "HistogramChunk"
    },
    "HistogramChunk.Compact": {
      "Name": "HistogramChunk.Compact",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 108,
      "Receiver": "HistogramChunk"
    },
    "HistogramChunk.Encoding": {
      "Name": "HistogramChunk.Encoding",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 54,
      "Receiver": "HistogramChunk"
    },
    "HistogramChunk.GetCounterResetHeader": {
      "Name": "HistogramChunk.GetCounterResetHeader",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 103,
      "Receiver": "HistogramChunk"
    },
    "HistogramChunk.Iterator": {
      "Name": "HistogramChunk.Iterator",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 192,
      "Receiver": "HistogramChunk"
    },
    "HistogramChunk.Layout": {
      "Name": "HistogramChunk.Layout",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 70,
      "Receiver": "HistogramChunk"
    },
    "HistogramChunk.NumSamples": {
      "Name": "HistogramChunk.NumSamples",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 64,
      "Receiver": "HistogramChunk"
    },
    "HistogramChunk.Reset": {
      "Name": "HistogramChunk.Reset",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 49,
      "Receiver": "HistogramChunk"
    },
    "HistogramChunk.iterator": {
      "Name": "HistogramChunk.iterator",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 179,
      "Receiver": "HistogramChunk"
    },
    "HistogramFraction": {
      "Name": "HistogramFraction",
      "File": "promql/quantile.go",
      "Line": 386,
      "Receiver": ""
    },
    "HistogramQuantile": {
      "Name": "HistogramQuantile",
      "File": "promql/quantile.go",
      "Line": 214,
      "Receiver": ""
    },
    "HistogramStatsIterator.AtFloatHistogram": {
      "Name": "HistogramStatsIterator.AtFloatHistogram",
      "File": "promql/histogram_stats_iterator.go",
      "Line": 89,
      "Receiver": "HistogramStatsIterator"
    },
    "HistogramStatsIterator.AtHistogram": {
      "Name": "HistogramStatsIterator.AtHistogram",
      "File": "promql/histogram_stats_iterator.go",
      "Line": 57,
      "Receiver": "HistogramStatsIterator"
    },
    "HistogramStatsIterator.Reset": {
      "Name": "HistogramStatsIterator.Reset",
      "File": "promql/histogram_stats_iterator.go",
      "Line": 49,
      "Receiver": "HistogramStatsIterator"
    },
    "HistogramStatsIterator.getFloatResetHint": {
      "Name": "HistogramStatsIterator.getFloatResetHint",
      "File": "promql/histogram_stats_iterator.go",
      "Line": 139,
      "Receiver": "HistogramStatsIterator"
    },
    "HistogramStatsIterator.getResetHint": {
      "Name": "HistogramStatsIterator.getResetHint",
      "File": "promql/histogram_stats_iterator.go",
      "Line": 157,
      "Receiver": "HistogramStatsIterator"
    },
    "HistogramStatsIterator.setLastFH": {
      "Name": "HistogramStatsIterator.setLastFH",
      "File": "promql/histogram_stats_iterator.go",
      "Line": 128,
      "Receiver": "HistogramStatsIterator"
    },
    "HistogramStatsIterator.setLastH": {
      "Name": "HistogramStatsIterator.setLastH",
      "File": "promql/histogram_stats_iterator.go",
      "Line": 117,
      "Receiver": "HistogramStatsIterator"
    },
    "HistogramTestExpression": {
      "Name": "HistogramTestExpression",
      "File": "promql/promqltest/test.go",
      "Line": 1188,
      "Receiver": ""
    },
    "Histogram_CountFloat.MarshalTo": {
      "Name": "Histogram_CountFloat.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1557,
      "Receiver": "Histogram_CountFloat"
    },
    "Histogram_CountFloat.MarshalToSizedBuffer": {
      "Name": "Histogram_CountFloat.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1562,
      "Receiver": "Histogram_CountFloat"
    },
    "Histogram_CountFloat.Size": {
      "Name": "Histogram_CountFloat.Size",
      "File": "prompb/types.pb.go",
      "Line": 2177,
      "Receiver": "Histogram_CountFloat"
    },
    "Histogram_CountFloat.isHistogram_Count": {
      "Name": "Histogram_CountFloat.isHistogram_Count",
      "File": "prompb/types.pb.go",
      "Line": 472,
      "Receiver": "Histogram_CountFloat"
    },
    "Histogram_CountInt.MarshalTo": {
      "Name": "Histogram_CountInt.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1545,
      "Receiver": "Histogram_CountInt"
    },
    "Histogram_CountInt.MarshalToSizedBuffer": {
      "Name": "Histogram_CountInt.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1550,
      "Receiver": "Histogram_CountInt"
    },
    "Histogram_CountInt.Size": {
      "Name": "Histogram_CountInt.Size",
      "File": "prompb/types.pb.go",
      "Line": 2168,
      "Receiver": "Histogram_CountInt"
    },
    "Histogram_CountInt.isHistogram_Count": {
      "Name": "Histogram_CountInt.isHistogram_Count",
      "File": "prompb/types.pb.go",
      "Line": 471,
      "Receiver": "Histogram_CountInt"
    },
    "Histogram_ResetHint.EnumDescriptor": {
      "Name": "Histogram_ResetHint.EnumDescriptor",
      "File": "prompb/types.pb.go",
      "Line": 98,
      "Receiver": "Histogram_ResetHint"
    },
    "Histogram_ResetHint.String": {
      "Name": "Histogram_ResetHint.String",
      "File": "prompb/types.pb.go",
      "Line": 94,
      "Receiver": "Histogram_ResetHint"
    },
    "Histogram_ZeroCountFloat.MarshalTo": {
      "Name": "Histogram_ZeroCountFloat.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1582,
      "Receiver": "Histogram_ZeroCountFloat"
    },
    "Histogram_ZeroCountFloat.MarshalToSizedBuffer": {
      "Name": "Histogram_ZeroCountFloat.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1587,
      "Receiver": "Histogram_ZeroCountFloat"
    },
    "Histogram_ZeroCountFloat.Size": {
      "Name": "Histogram_ZeroCountFloat.Size",
      "File": "prompb/types.pb.go",
      "Line": 2195,
      "Receiver": "Histogram_ZeroCountFloat"
    },
    "Histogram_ZeroCountFloat.isHistogram_ZeroCount": {
      "Name": "Histogram_ZeroCountFloat.isHistogram_ZeroCount",
      "File": "prompb/types.pb.go",
      "Line": 474,
      "Receiver": "Histogram_ZeroCountFloat"
    },
    "Histogram_ZeroCountInt.MarshalTo": {
      "Name": "Histogram_ZeroCountInt.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1570,
      "Receiver": "Histogram_ZeroCountInt"
    },
    "Histogram_ZeroCountInt.MarshalToSizedBuffer": {
      "Name": "Histogram_ZeroCountInt.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1575,
      "Receiver": "Histogram_ZeroCountInt"
    },
    "Histogram_ZeroCountInt.Size": {
      "Name": "Histogram_ZeroCountInt.Size",
      "File": "prompb/types.pb.go",
      "Line": 2186,
      "Receiver": "Histogram_ZeroCountInt"
    },
    "Histogram_ZeroCountInt.isHistogram_ZeroCount": {
      "Name": "Histogram_ZeroCountInt.isHistogram_ZeroCount",
      "File": "prompb/types.pb.go",
      "Line": 473,
      "Receiver": "Histogram_ZeroCountInt"
    },
    "HypervisorDiscovery.refresh": {
      "Name": "HypervisorDiscovery.refresh",
      "File": "discovery/openstack/hypervisor.go",
      "Line": 61,
      "Receiver": "HypervisorDiscovery"
    },
    "IgnoreOverriddenMetadataLabelsScratchBuilder.Add": {
      "Name": "IgnoreOverriddenMetadataLabelsScratchBuilder.Add",
      "File": "schema/labels.go",
      "Line": 152,
      "Receiver": "IgnoreOverriddenMetadataLabelsScratchBuilder"
    },
    "Ingress.Run": {
      "Name": "Ingress.Run",
      "File": "discovery/kubernetes/ingress.go",
      "Line": 83,
      "Receiver": "Ingress"
    },
    "Ingress.buildIngress": {
      "Name": "Ingress.buildIngress",
      "File": "discovery/kubernetes/ingress.go",
      "Line": 197,
      "Receiver": "Ingress"
    },
    "Ingress.enqueue": {
      "Name": "Ingress.enqueue",
      "File": "discovery/kubernetes/ingress.go",
      "Line": 73,
      "Receiver": "Ingress"
    },
    "Ingress.hasSynced": {
      "Name": "Ingress.hasSynced",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 262,
      "Receiver": "Ingress"
    },
    "Ingress.process": {
      "Name": "Ingress.process",
      "File": "discovery/kubernetes/ingress.go",
      "Line": 102,
      "Receiver": "Ingress"
    },
    "Inspect": {
      "Name": "Inspect",
      "File": "promql/parser/ast.go",
      "Line": 374,
      "Receiver": ""
    },
    "InstanceDiscovery.refresh": {
      "Name": "InstanceDiscovery.refresh",
      "File": "discovery/openstack/instance.go",
      "Line": 80,
      "Receiver": "InstanceDiscovery"
    },
    "Intersect": {
      "Name": "Intersect",
      "File": "tsdb/index/postings.go",
      "Line": 595,
      "Receiver": ""
    },
    "Interval.InBounds": {
      "Name": "Interval.InBounds",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 332,
      "Receiver": "Interval"
    },
    "Interval.IsSubrange": {
      "Name": "Interval.IsSubrange",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 336,
      "Receiver": "Interval"
    },
    "Intervals.Add": {
      "Name": "Intervals.Add",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 351,
      "Receiver": "Intervals"
    },
    "IsCustomBucketsSchema": {
      "Name": "IsCustomBucketsSchema",
      "File": "model/histogram/generic.go",
      "Line": 42,
      "Receiver": ""
    },
    "IsEmptyPostingsType": {
      "Name": "IsEmptyPostingsType",
      "File": "tsdb/index/postings.go",
      "Line": 584,
      "Receiver": ""
    },
    "IsExponentialSchema": {
      "Name": "IsExponentialSchema",
      "File": "model/histogram/generic.go",
      "Line": 46,
      "Receiver": ""
    },
    "IsMetadataLabel": {
      "Name": "IsMetadataLabel",
      "File": "schema/labels.go",
      "Line": 34,
      "Receiver": ""
    },
    "IsStaleNaN": {
      "Name": "IsStaleNaN",
      "File": "model/value/value.go",
      "Line": 32,
      "Receiver": ""
    },
    "IsValidEncoding": {
      "Name": "IsValidEncoding",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 50,
      "Receiver": ""
    },
    "Item.PositionRange": {
      "Name": "Item.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 443,
      "Receiver": "Item"
    },
    "Item.Pretty": {
      "Name": "Item.Pretty",
      "File": "promql/parser/lex.go",
      "Line": 55,
      "Receiver": "Item"
    },
    "Item.String": {
      "Name": "Item.String",
      "File": "promql/parser/lex.go",
      "Line": 33,
      "Receiver": "Item"
    },
    "Item.desc": {
      "Name": "Item.desc",
      "File": "promql/parser/lex.go",
      "Line": 219,
      "Receiver": "Item"
    },
    "ItemType.IsAggregator": {
      "Name": "ItemType.IsAggregator",
      "File": "promql/parser/lex.go",
      "Line": 63,
      "Receiver": "ItemType"
    },
    "ItemType.IsAggregatorWithParam": {
      "Name": "ItemType.IsAggregatorWithParam",
      "File": "promql/parser/lex.go",
      "Line": 67,
      "Receiver": "ItemType"
    },
    "ItemType.IsComparisonOperator": {
      "Name": "ItemType.IsComparisonOperator",
      "File": "promql/parser/lex.go",
      "Line": 83,
      "Receiver": "ItemType"
    },
    "ItemType.IsExperimentalAggregator": {
      "Name": "ItemType.IsExperimentalAggregator",
      "File": "promql/parser/lex.go",
      "Line": 73,
      "Receiver": "ItemType"
    },
    "ItemType.IsKeyword": {
      "Name": "ItemType.IsKeyword",
      "File": "promql/parser/lex.go",
      "Line": 79,
      "Receiver": "ItemType"
    },
    "ItemType.IsOperator": {
      "Name": "ItemType.IsOperator",
      "File": "promql/parser/lex.go",
      "Line": 59,
      "Receiver": "ItemType"
    },
    "ItemType.IsSetOperator": {
      "Name": "ItemType.IsSetOperator",
      "File": "promql/parser/lex.go",
      "Line": 93,
      "Receiver": "ItemType"
    },
    "ItemType.String": {
      "Name": "ItemType.String",
      "File": "promql/parser/lex.go",
      "Line": 212,
      "Receiver": "ItemType"
    },
    "ItemType.desc": {
      "Name": "ItemType.desc",
      "File": "promql/parser/lex.go",
      "Line": 229,
      "Receiver": "ItemType"
    },
    "JSONCodec.CanEncode": {
      "Name": "JSONCodec.CanEncode",
      "File": "web/api/v1/json_codec.go",
      "Line": 45,
      "Receiver": "JSONCodec"
    },
    "JSONCodec.ContentType": {
      "Name": "JSONCodec.ContentType",
      "File": "web/api/v1/json_codec.go",
      "Line": 41,
      "Receiver": "JSONCodec"
    },
    "JSONCodec.Encode": {
      "Name": "JSONCodec.Encode",
      "File": "web/api/v1/json_codec.go",
      "Line": 49,
      "Receiver": "JSONCodec"
    },
    "JSONFileLogger.Close": {
      "Name": "JSONFileLogger.Close",
      "File": "util/logging/file.go",
      "Line": 57,
      "Receiver": "JSONFileLogger"
    },
    "JSONFileLogger.Enabled": {
      "Name": "JSONFileLogger.Enabled",
      "File": "util/logging/file.go",
      "Line": 63,
      "Receiver": "JSONFileLogger"
    },
    "JSONFileLogger.Handle": {
      "Name": "JSONFileLogger.Handle",
      "File": "util/logging/file.go",
      "Line": 70,
      "Receiver": "JSONFileLogger"
    },
    "JSONFileLogger.WithAttrs": {
      "Name": "JSONFileLogger.WithAttrs",
      "File": "util/logging/file.go",
      "Line": 77,
      "Receiver": "JSONFileLogger"
    },
    "JSONFileLogger.WithGroup": {
      "Name": "JSONFileLogger.WithGroup",
      "File": "util/logging/file.go",
      "Line": 88,
      "Receiver": "JSONFileLogger"
    },
    "JUnitXML.Suite": {
      "Name": "JUnitXML.Suite",
      "File": "util/junitxml/junitxml.go",
      "Line": 45,
      "Receiver": "JUnitXML"
    },
    "JUnitXML.WriteXML": {
      "Name": "JUnitXML.WriteXML",
      "File": "util/junitxml/junitxml.go",
      "Line": 41,
      "Receiver": "JUnitXML"
    },
    "KumaSDConfig.Name": {
      "Name": "KumaSDConfig.Name",
      "File": "discovery/xds/kuma.go",
      "Line": 91,
      "Receiver": "KumaSDConfig"
    },
    "KumaSDConfig.NewDiscoverer": {
      "Name": "KumaSDConfig.NewDiscoverer",
      "File": "discovery/xds/kuma.go",
      "Line": 100,
      "Receiver": "KumaSDConfig"
    },
    "KumaSDConfig.NewDiscovererMetrics": {
      "Name": "KumaSDConfig.NewDiscovererMetrics",
      "File": "discovery/xds/kuma.go",
      "Line": 63,
      "Receiver": "KumaSDConfig"
    },
    "KumaSDConfig.SetDirectory": {
      "Name": "KumaSDConfig.SetDirectory",
      "File": "discovery/xds/kuma.go",
      "Line": 96,
      "Receiver": "KumaSDConfig"
    },
    "KumaSDConfig.UnmarshalYAML": {
      "Name": "KumaSDConfig.UnmarshalYAML",
      "File": "discovery/xds/kuma.go",
      "Line": 68,
      "Receiver": "KumaSDConfig"
    },
    "Label.Descriptor": {
      "Name": "Label.Descriptor",
      "File": "prompb/types.pb.go",
      "Line": 756,
      "Receiver": "Label"
    },
    "Label.GetName": {
      "Name": "Label.GetName",
      "File": "prompb/types.pb.go",
      "Line": 786,
      "Receiver": "Label"
    },
    "Label.GetValue": {
      "Name": "Label.GetValue",
      "File": "prompb/types.pb.go",
      "Line": 793,
      "Receiver": "Label"
    },
    "Label.Marshal": {
      "Name": "Label.Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1715,
      "Receiver": "Label"
    },
    "Label.MarshalTo": {
      "Name": "Label.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1725,
      "Receiver": "Label"
    },
    "Label.MarshalToSizedBuffer": {
      "Name": "Label.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1730,
      "Receiver": "Label"
    },
    "Label.ProtoMessage": {
      "Name": "Label.ProtoMessage",
      "File": "prompb/types.pb.go",
      "Line": 755,
      "Receiver": "Label"
    },
    "Label.Reset": {
      "Name": "Label.Reset",
      "File": "prompb/types.pb.go",
      "Line": 753,
      "Receiver": "Label"
    },
    "Label.Size": {
      "Name": "Label.Size",
      "File": "prompb/types.pb.go",
      "Line": 2258,
      "Receiver": "Label"
    },
    "Label.String": {
      "Name": "Label.String",
      "File": "prompb/types.pb.go",
      "Line": 754,
      "Receiver": "Label"
    },
    "Label.Unmarshal": {
      "Name": "Label.Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 3631,
      "Receiver": "Label"
    },
    "Label.XXX_DiscardUnknown": {
      "Name": "Label.XXX_DiscardUnknown",
      "File": "prompb/types.pb.go",
      "Line": 780,
      "Receiver": "Label"
    },
    "Label.XXX_Marshal": {
      "Name": "Label.XXX_Marshal",
      "File": "prompb/types.pb.go",
      "Line": 762,
      "Receiver": "Label"
    },
    "Label.XXX_Merge": {
      "Name": "Label.XXX_Merge",
      "File": "prompb/types.pb.go",
      "Line": 774,
      "Receiver": "Label"
    },
    "Label.XXX_Size": {
      "Name": "Label.XXX_Size",
      "File": "prompb/types.pb.go",
      "Line": 777,
      "Receiver": "Label"
    },
    "Label.XXX_Unmarshal": {
      "Name": "Label.XXX_Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 759,
      "Receiver": "Label"
    },
    "LabelMatcher.Descriptor": {
      "Name": "LabelMatcher.Descriptor",
      "File": "prompb/types.pb.go",
      "Line": 860,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.GetName": {
      "Name": "LabelMatcher.GetName",
      "File": "prompb/types.pb.go",
      "Line": 897,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.GetType": {
      "Name": "LabelMatcher.GetType",
      "File": "prompb/types.pb.go",
      "Line": 890,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.GetValue": {
      "Name": "LabelMatcher.GetValue",
      "File": "prompb/types.pb.go",
      "Line": 904,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.Marshal": {
      "Name": "LabelMatcher.Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1797,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.MarshalTo": {
      "Name": "LabelMatcher.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1807,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.MarshalToSizedBuffer": {
      "Name": "LabelMatcher.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1812,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.ProtoMessage": {
      "Name": "LabelMatcher.ProtoMessage",
      "File": "prompb/types.pb.go",
      "Line": 859,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.Reset": {
      "Name": "LabelMatcher.Reset",
      "File": "prompb/types.pb.go",
      "Line": 857,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.Size": {
      "Name": "LabelMatcher.Size",
      "File": "prompb/types.pb.go",
      "Line": 2296,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.String": {
      "Name": "LabelMatcher.String",
      "File": "prompb/types.pb.go",
      "Line": 858,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.Unmarshal": {
      "Name": "LabelMatcher.Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 3831,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.XXX_DiscardUnknown": {
      "Name": "LabelMatcher.XXX_DiscardUnknown",
      "File": "prompb/types.pb.go",
      "Line": 884,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.XXX_Marshal": {
      "Name": "LabelMatcher.XXX_Marshal",
      "File": "prompb/types.pb.go",
      "Line": 866,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.XXX_Merge": {
      "Name": "LabelMatcher.XXX_Merge",
      "File": "prompb/types.pb.go",
      "Line": 878,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.XXX_Size": {
      "Name": "LabelMatcher.XXX_Size",
      "File": "prompb/types.pb.go",
      "Line": 881,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher.XXX_Unmarshal": {
      "Name": "LabelMatcher.XXX_Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 863,
      "Receiver": "LabelMatcher"
    },
    "LabelMatcher_Type.EnumDescriptor": {
      "Name": "LabelMatcher_Type.EnumDescriptor",
      "File": "prompb/types.pb.go",
      "Line": 129,
      "Receiver": "LabelMatcher_Type"
    },
    "LabelMatcher_Type.String": {
      "Name": "LabelMatcher_Type.String",
      "File": "prompb/types.pb.go",
      "Line": 125,
      "Receiver": "LabelMatcher_Type"
    },
    "LabelPair.Descriptor": {
      "Name": "LabelPair.Descriptor",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 83,
      "Receiver": "LabelPair"
    },
    "LabelPair.GetName": {
      "Name": "LabelPair.GetName",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 113,
      "Receiver": "LabelPair"
    },
    "LabelPair.GetValue": {
      "Name": "LabelPair.GetValue",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 120,
      "Receiver": "LabelPair"
    },
    "LabelPair.Marshal": {
      "Name": "LabelPair.Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1050,
      "Receiver": "LabelPair"
    },
    "LabelPair.MarshalTo": {
      "Name": "LabelPair.MarshalTo",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1060,
      "Receiver": "LabelPair"
    },
    "LabelPair.MarshalToSizedBuffer": {
      "Name": "LabelPair.MarshalToSizedBuffer",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1065,
      "Receiver": "LabelPair"
    },
    "LabelPair.ProtoMessage": {
      "Name": "LabelPair.ProtoMessage",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 82,
      "Receiver": "LabelPair"
    },
    "LabelPair.Reset": {
      "Name": "LabelPair.Reset",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 80,
      "Receiver": "LabelPair"
    },
    "LabelPair.Size": {
      "Name": "LabelPair.Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1847,
      "Receiver": "LabelPair"
    },
    "LabelPair.String": {
      "Name": "LabelPair.String",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 81,
      "Receiver": "LabelPair"
    },
    "LabelPair.Unmarshal": {
      "Name": "LabelPair.Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 2195,
      "Receiver": "LabelPair"
    },
    "LabelPair.XXX_DiscardUnknown": {
      "Name": "LabelPair.XXX_DiscardUnknown",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 107,
      "Receiver": "LabelPair"
    },
    "LabelPair.XXX_Marshal": {
      "Name": "LabelPair.XXX_Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 89,
      "Receiver": "LabelPair"
    },
    "LabelPair.XXX_Merge": {
      "Name": "LabelPair.XXX_Merge",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 101,
      "Receiver": "LabelPair"
    },
    "LabelPair.XXX_Size": {
      "Name": "LabelPair.XXX_Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 104,
      "Receiver": "LabelPair"
    },
    "LabelPair.XXX_Unmarshal": {
      "Name": "LabelPair.XXX_Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 86,
      "Receiver": "LabelPair"
    },
    "Labels.ByteSize": {
      "Name": "Labels.ByteSize",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 289,
      "Receiver": "Labels"
    },
    "Labels.Bytes": {
      "Name": "Labels.Bytes",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 56,
      "Receiver": "Labels"
    },
    "Labels.BytesWithLabels": {
      "Name": "Labels.BytesWithLabels",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 143,
      "Receiver": "Labels"
    },
    "Labels.BytesWithoutLabels": {
      "Name": "Labels.BytesWithoutLabels",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 165,
      "Receiver": "Labels"
    },
    "Labels.Copy": {
      "Name": "Labels.Copy",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 183,
      "Receiver": "Labels"
    },
    "Labels.CopyFrom": {
      "Name": "Labels.CopyFrom",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 376,
      "Receiver": "Labels"
    },
    "Labels.Descriptor": {
      "Name": "Labels.Descriptor",
      "File": "prompb/types.pb.go",
      "Line": 810,
      "Receiver": "Labels"
    },
    "Labels.DropMetricName": {
      "Name": "Labels.DropMetricName",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 425,
      "Receiver": "Labels"
    },
    "Labels.DropReserved": {
      "Name": "Labels.DropReserved",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 430,
      "Receiver": "Labels"
    },
    "Labels.Get": {
      "Name": "Labels.Get",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 189,
      "Receiver": "Labels"
    },
    "Labels.GetLabels": {
      "Name": "Labels.GetLabels",
      "File": "prompb/types.pb.go",
      "Line": 840,
      "Receiver": "Labels"
    },
    "Labels.Has": {
      "Name": "Labels.Has",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 216,
      "Receiver": "Labels"
    },
    "Labels.HasDuplicateLabelNames": {
      "Name": "Labels.HasDuplicateLabelNames",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 243,
      "Receiver": "Labels"
    },
    "Labels.Hash": {
      "Name": "Labels.Hash",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 87,
      "Receiver": "Labels"
    },
    "Labels.HashForLabels": {
      "Name": "Labels.HashForLabels",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 93,
      "Receiver": "Labels"
    },
    "Labels.HashWithoutLabels": {
      "Name": "Labels.HashWithoutLabels",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 120,
      "Receiver": "Labels"
    },
    "Labels.InternStrings": {
      "Name": "Labels.InternStrings",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 452,
      "Receiver": "Labels"
    },
    "Labels.IsEmpty": {
      "Name": "Labels.IsEmpty",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 381,
      "Receiver": "Labels"
    },
    "Labels.IsValid": {
      "Name": "Labels.IsValid",
      "File": "model/labels/labels_common.go",
      "Line": 104,
      "Receiver": "Labels"
    },
    "Labels.IsZero": {
      "Name": "Labels.IsZero",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 67,
      "Receiver": "Labels"
    },
    "Labels.Len": {
      "Name": "Labels.Len",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 386,
      "Receiver": "Labels"
    },
    "Labels.Less": {
      "Name": "Labels.Less",
      "File": "model/labels/labels.go",
      "Line": 33,
      "Receiver": "Labels"
    },
    "Labels.Map": {
      "Name": "Labels.Map",
      "File": "model/labels/labels_common.go",
      "Line": 129,
      "Receiver": "Labels"
    },
    "Labels.Marshal": {
      "Name": "Labels.Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1756,
      "Receiver": "Labels"
    },
    "Labels.MarshalJSON": {
      "Name": "Labels.MarshalJSON",
      "File": "model/labels/labels_common.go",
      "Line": 70,
      "Receiver": "Labels"
    },
    "Labels.MarshalTo": {
      "Name": "Labels.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1766,
      "Receiver": "Labels"
    },
    "Labels.MarshalToSizedBuffer": {
      "Name": "Labels.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1771,
      "Receiver": "Labels"
    },
    "Labels.MarshalYAML": {
      "Name": "Labels.MarshalYAML",
      "File": "model/labels/labels_common.go",
      "Line": 87,
      "Receiver": "Labels"
    },
    "Labels.MatchLabels": {
      "Name": "Labels.MatchLabels",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 74,
      "Receiver": "Labels"
    },
    "Labels.ProtoMessage": {
      "Name": "Labels.ProtoMessage",
      "File": "prompb/types.pb.go",
      "Line": 809,
      "Receiver": "Labels"
    },
    "Labels.Range": {
      "Name": "Labels.Range",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 400,
      "Receiver": "Labels"
    },
    "Labels.ReleaseStrings": {
      "Name": "Labels.ReleaseStrings",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 456,
      "Receiver": "Labels"
    },
    "Labels.Reset": {
      "Name": "Labels.Reset",
      "File": "prompb/types.pb.go",
      "Line": 807,
      "Receiver": "Labels"
    },
    "Labels.Size": {
      "Name": "Labels.Size",
      "File": "prompb/types.pb.go",
      "Line": 2278,
      "Receiver": "Labels"
    },
    "Labels.String": {
      "Name": "Labels.String",
      "File": "prompb/types.pb.go",
      "Line": 808,
      "Receiver": "Labels"
    },
    "Labels.Swap": {
      "Name": "Labels.Swap",
      "File": "model/labels/labels.go",
      "Line": 32,
      "Receiver": "Labels"
    },
    "Labels.Unmarshal": {
      "Name": "Labels.Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 3746,
      "Receiver": "Labels"
    },
    "Labels.UnmarshalJSON": {
      "Name": "Labels.UnmarshalJSON",
      "File": "model/labels/labels_common.go",
      "Line": 75,
      "Receiver": "Labels"
    },
    "Labels.UnmarshalYAML": {
      "Name": "Labels.UnmarshalYAML",
      "File": "model/labels/labels_common.go",
      "Line": 92,
      "Receiver": "Labels"
    },
    "Labels.Validate": {
      "Name": "Labels.Validate",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 410,
      "Receiver": "Labels"
    },
    "Labels.WithoutEmpty": {
      "Name": "Labels.WithoutEmpty",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 258,
      "Receiver": "Labels"
    },
    "Labels.XXX_DiscardUnknown": {
      "Name": "Labels.XXX_DiscardUnknown",
      "File": "prompb/types.pb.go",
      "Line": 834,
      "Receiver": "Labels"
    },
    "Labels.XXX_Marshal": {
      "Name": "Labels.XXX_Marshal",
      "File": "prompb/types.pb.go",
      "Line": 816,
      "Receiver": "Labels"
    },
    "Labels.XXX_Merge": {
      "Name": "Labels.XXX_Merge",
      "File": "prompb/types.pb.go",
      "Line": 828,
      "Receiver": "Labels"
    },
    "Labels.XXX_Size": {
      "Name": "Labels.XXX_Size",
      "File": "prompb/types.pb.go",
      "Line": 831,
      "Receiver": "Labels"
    },
    "Labels.XXX_Unmarshal": {
      "Name": "Labels.XXX_Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 813,
      "Receiver": "Labels"
    },
    "LastCheckpoint": {
      "Name": "LastCheckpoint",
      "File": "tsdb/wlog/checkpoint.go",
      "Line": 53,
      "Receiver": ""
    },
    "LastChunkSnapshot": {
      "Name": "LastChunkSnapshot",
      "File": "tsdb/head_wal.go",
      "Line": 1430,
      "Receiver": ""
    },
    "LazyLoader.Close": {
      "Name": "LazyLoader.Close",
      "File": "promql/promqltest/test.go",
      "Line": 1632,
      "Receiver": "LazyLoader"
    },
    "LazyLoader.Context": {
      "Name": "LazyLoader.Context",
      "File": "promql/promqltest/test.go",
      "Line": 1622,
      "Receiver": "LazyLoader"
    },
    "LazyLoader.QueryEngine": {
      "Name": "LazyLoader.QueryEngine",
      "File": "promql/promqltest/test.go",
      "Line": 1610,
      "Receiver": "LazyLoader"
    },
    "LazyLoader.Queryable": {
      "Name": "LazyLoader.Queryable",
      "File": "promql/promqltest/test.go",
      "Line": 1617,
      "Receiver": "LazyLoader"
    },
    "LazyLoader.Storage": {
      "Name": "LazyLoader.Storage",
      "File": "promql/promqltest/test.go",
      "Line": 1627,
      "Receiver": "LazyLoader"
    },
    "LazyLoader.WithSamplesTill": {
      "Name": "LazyLoader.WithSamplesTill",
      "File": "promql/promqltest/test.go",
      "Line": 1604,
      "Receiver": "LazyLoader"
    },
    "LazyLoader.appendTill": {
      "Name": "LazyLoader.appendTill",
      "File": "promql/promqltest/test.go",
      "Line": 1582,
      "Receiver": "LazyLoader"
    },
    "LazyLoader.clear": {
      "Name": "LazyLoader.clear",
      "File": "promql/promqltest/test.go",
      "Line": 1550,
      "Receiver": "LazyLoader"
    },
    "LazyLoader.parse": {
      "Name": "LazyLoader.parse",
      "File": "promql/promqltest/test.go",
      "Line": 1527,
      "Receiver": "LazyLoader"
    },
    "LeveledCompactor.Compact": {
      "Name": "LeveledCompactor.Compact",
      "File": "tsdb/compact.go",
      "Line": 460,
      "Receiver": "LeveledCompactor"
    },
    "LeveledCompactor.CompactWithBlockPopulator": {
      "Name": "LeveledCompactor.CompactWithBlockPopulator",
      "File": "tsdb/compact.go",
      "Line": 464,
      "Receiver": "LeveledCompactor"
    },
    "LeveledCompactor.Plan": {
      "Name": "LeveledCompactor.Plan",
      "File": "tsdb/compact.go",
      "Line": 238,
      "Receiver": "LeveledCompactor"
    },
    "LeveledCompactor.Write": {
      "Name": "LeveledCompactor.Write",
      "File": "tsdb/compact.go",
      "Line": 561,
      "Receiver": "LeveledCompactor"
    },
    "LeveledCompactor.plan": {
      "Name": "LeveledCompactor.plan",
      "File": "tsdb/compact.go",
      "Line": 258,
      "Receiver": "LeveledCompactor"
    },
    "LeveledCompactor.selectDirs": {
      "Name": "LeveledCompactor.selectDirs",
      "File": "tsdb/compact.go",
      "Line": 307,
      "Receiver": "LeveledCompactor"
    },
    "LeveledCompactor.selectOverlappingDirs": {
      "Name": "LeveledCompactor.selectOverlappingDirs",
      "File": "tsdb/compact.go",
      "Line": 346,
      "Receiver": "LeveledCompactor"
    },
    "LeveledCompactor.write": {
      "Name": "LeveledCompactor.write",
      "File": "tsdb/compact.go",
      "Line": 629,
      "Receiver": "LeveledCompactor"
    },
    "Lex": {
      "Name": "Lex",
      "File": "promql/parser/lex.go",
      "Line": 374,
      "Receiver": ""
    },
    "Lexer.NextItem": {
      "Name": "Lexer.NextItem",
      "File": "promql/parser/lex.go",
      "Line": 358,
      "Receiver": "Lexer"
    },
    "Lexer.accept": {
      "Name": "Lexer.accept",
      "File": "promql/parser/lex.go",
      "Line": 327,
      "Receiver": "Lexer"
    },
    "Lexer.acceptRun": {
      "Name": "Lexer.acceptRun",
      "File": "promql/parser/lex.go",
      "Line": 341,
      "Receiver": "Lexer"
    },
    "Lexer.backup": {
      "Name": "Lexer.backup",
      "File": "promql/parser/lex.go",
      "Line": 310,
      "Receiver": "Lexer"
    },
    "Lexer.emit": {
      "Name": "Lexer.emit",
      "File": "promql/parser/lex.go",
      "Line": 315,
      "Receiver": "Lexer"
    },
    "Lexer.errorf": {
      "Name": "Lexer.errorf",
      "File": "promql/parser/lex.go",
      "Line": 350,
      "Receiver": "Lexer"
    },
    "Lexer.ignore": {
      "Name": "Lexer.ignore",
      "File": "promql/parser/lex.go",
      "Line": 322,
      "Receiver": "Lexer"
    },
    "Lexer.is": {
      "Name": "Lexer.is",
      "File": "promql/parser/lex.go",
      "Line": 336,
      "Receiver": "Lexer"
    },
    "Lexer.next": {
      "Name": "Lexer.next",
      "File": "promql/parser/lex.go",
      "Line": 291,
      "Receiver": "Lexer"
    },
    "Lexer.peek": {
      "Name": "Lexer.peek",
      "File": "promql/parser/lex.go",
      "Line": 303,
      "Receiver": "Lexer"
    },
    "Lexer.scanDurationKeyword": {
      "Name": "Lexer.scanDurationKeyword",
      "File": "promql/parser/lex.go",
      "Line": 902,
      "Receiver": "Lexer"
    },
    "Lexer.scanNumber": {
      "Name": "Lexer.scanNumber",
      "File": "promql/parser/lex.go",
      "Line": 969,
      "Receiver": "Lexer"
    },
    "LightsailDiscovery.lightsailClient": {
      "Name": "LightsailDiscovery.lightsailClient",
      "File": "discovery/aws/lightsail.go",
      "Line": 160,
      "Receiver": "LightsailDiscovery"
    },
    "LightsailDiscovery.refresh": {
      "Name": "LightsailDiscovery.refresh",
      "File": "discovery/aws/lightsail.go",
      "Line": 198,
      "Receiver": "LightsailDiscovery"
    },
    "LightsailSDConfig.Name": {
      "Name": "LightsailSDConfig.Name",
      "File": "discovery/aws/lightsail.go",
      "Line": 93,
      "Receiver": "LightsailSDConfig"
    },
    "LightsailSDConfig.NewDiscoverer": {
      "Name": "LightsailSDConfig.NewDiscoverer",
      "File": "discovery/aws/lightsail.go",
      "Line": 96,
      "Receiver": "LightsailSDConfig"
    },
    "LightsailSDConfig.NewDiscovererMetrics": {
      "Name": "LightsailSDConfig.NewDiscovererMetrics",
      "File": "discovery/aws/lightsail.go",
      "Line": 86,
      "Receiver": "LightsailSDConfig"
    },
    "LightsailSDConfig.UnmarshalYAML": {
      "Name": "LightsailSDConfig.UnmarshalYAML",
      "File": "discovery/aws/lightsail.go",
      "Line": 101,
      "Receiver": "LightsailSDConfig"
    },
    "ListPostings.At": {
      "Name": "ListPostings.At",
      "File": "tsdb/index/postings.go",
      "Line": 830,
      "Receiver": "ListPostings"
    },
    "ListPostings.Err": {
      "Name": "ListPostings.Err",
      "File": "tsdb/index/postings.go",
      "Line": 864,
      "Receiver": "ListPostings"
    },
    "ListPostings.Len": {
      "Name": "ListPostings.Len",
      "File": "tsdb/index/postings.go",
      "Line": 869,
      "Receiver": "ListPostings"
    },
    "ListPostings.Next": {
      "Name": "ListPostings.Next",
      "File": "tsdb/index/postings.go",
      "Line": 834,
      "Receiver": "ListPostings"
    },
    "ListPostings.Seek": {
      "Name": "ListPostings.Seek",
      "File": "tsdb/index/postings.go",
      "Line": 844,
      "Receiver": "ListPostings"
    },
    "LiveReader.Err": {
      "Name": "LiveReader.Err",
      "File": "tsdb/wlog/live_reader.go",
      "Line": 101,
      "Receiver": "LiveReader"
    },
    "LiveReader.Next": {
      "Name": "LiveReader.Next",
      "File": "tsdb/wlog/live_reader.go",
      "Line": 124,
      "Receiver": "LiveReader"
    },
    "LiveReader.Offset": {
      "Name": "LiveReader.Offset",
      "File": "tsdb/wlog/live_reader.go",
      "Line": 109,
      "Receiver": "LiveReader"
    },
    "LiveReader.Record": {
      "Name": "LiveReader.Record",
      "File": "tsdb/wlog/live_reader.go",
      "Line": 167,
      "Receiver": "LiveReader"
    },
    "LiveReader.buildRecord": {
      "Name": "LiveReader.buildRecord",
      "File": "tsdb/wlog/live_reader.go",
      "Line": 175,
      "Receiver": "LiveReader"
    },
    "LiveReader.fillBuffer": {
      "Name": "LiveReader.fillBuffer",
      "File": "tsdb/wlog/live_reader.go",
      "Line": 113,
      "Receiver": "LiveReader"
    },
    "LiveReader.readRecord": {
      "Name": "LiveReader.readRecord",
      "File": "tsdb/wlog/live_reader.go",
      "Line": 264,
      "Receiver": "LiveReader"
    },
    "Load": {
      "Name": "Load",
      "File": "config/config.go",
      "Line": 72,
      "Receiver": ""
    },
    "LoadBalancerDiscovery.refresh": {
      "Name": "LoadBalancerDiscovery.refresh",
      "File": "discovery/openstack/loadbalancer.go",
      "Line": 69,
      "Receiver": "LoadBalancerDiscovery"
    },
    "LoadFile": {
      "Name": "LoadFile",
      "File": "config/config.go",
      "Line": 122,
      "Receiver": ""
    },
    "LoadedStorage": {
      "Name": "LoadedStorage",
      "File": "promql/promqltest/test.go",
      "Line": 72,
      "Receiver": ""
    },
    "MIMEType.Satisfies": {
      "Name": "MIMEType.Satisfies",
      "File": "web/api/v1/codec.go",
      "Line": 39,
      "Receiver": "MIMEType"
    },
    "MIMEType.String": {
      "Name": "MIMEType.String",
      "File": "web/api/v1/codec.go",
      "Line": 35,
      "Receiver": "MIMEType"
    },
    "Manager.AlertingRules": {
      "Name": "Manager.AlertingRules",
      "File": "rules/manager.go",
      "Line": 416,
      "Receiver": "Manager"
    },
    "Manager.Alertmanagers": {
      "Name": "Manager.Alertmanagers",
      "File": "notifier/manager.go",
      "Line": 353,
      "Receiver": "Manager"
    },
    "Manager.ApplyConfig": {
      "Name": "Manager.ApplyConfig",
      "File": "tracing/tracing.go",
      "Line": 71,
      "Receiver": "Manager"
    },
    "Manager.DroppedAlertmanagers": {
      "Name": "Manager.DroppedAlertmanagers",
      "File": "notifier/manager.go",
      "Line": 372,
      "Receiver": "Manager"
    },
    "Manager.LoadGroups": {
      "Name": "Manager.LoadGroups",
      "File": "rules/manager.go",
      "Line": 307,
      "Receiver": "Manager"
    },
    "Manager.Providers": {
      "Name": "Manager.Providers",
      "File": "discovery/manager.go",
      "Line": 180,
      "Receiver": "Manager"
    },
    "Manager.RuleGroups": {
      "Name": "Manager.RuleGroups",
      "File": "rules/manager.go",
      "Line": 379,
      "Receiver": "Manager"
    },
    "Manager.Rules": {
      "Name": "Manager.Rules",
      "File": "rules/manager.go",
      "Line": 403,
      "Receiver": "Manager"
    },
    "Manager.Run": {
      "Name": "Manager.Run",
      "File": "tracing/tracing.go",
      "Line": 61,
      "Receiver": "Manager"
    },
    "Manager.ScrapePools": {
      "Name": "Manager.ScrapePools",
      "File": "scrape/manager.go",
      "Line": 362,
      "Receiver": "Manager"
    },
    "Manager.Send": {
      "Name": "Manager.Send",
      "File": "notifier/manager.go",
      "Line": 310,
      "Receiver": "Manager"
    },
    "Manager.StartCustomProvider": {
      "Name": "Manager.StartCustomProvider",
      "File": "discovery/manager.go",
      "Line": 291,
      "Receiver": "Manager"
    },
    "Manager.Stop": {
      "Name": "Manager.Stop",
      "File": "tracing/tracing.go",
      "Line": 109,
      "Receiver": "Manager"
    },
    "Manager.SyncCh": {
      "Name": "Manager.SyncCh",
      "File": "discovery/manager.go",
      "Line": 200,
      "Receiver": "Manager"
    },
    "Manager.TargetsActive": {
      "Name": "Manager.TargetsActive",
      "File": "scrape/manager.go",
      "Line": 374,
      "Receiver": "Manager"
    },
    "Manager.TargetsAll": {
      "Name": "Manager.TargetsAll",
      "File": "scrape/manager.go",
      "Line": 350,
      "Receiver": "Manager"
    },
    "Manager.TargetsDropped": {
      "Name": "Manager.TargetsDropped",
      "File": "scrape/manager.go",
      "Line": 386,
      "Receiver": "Manager"
    },
    "Manager.TargetsDroppedCounts": {
      "Name": "Manager.TargetsDroppedCounts",
      "File": "scrape/manager.go",
      "Line": 397,
      "Receiver": "Manager"
    },
    "Manager.UnregisterMetrics": {
      "Name": "Manager.UnregisterMetrics",
      "File": "scrape/manager.go",
      "Line": 148,
      "Receiver": "Manager"
    },
    "Manager.Update": {
      "Name": "Manager.Update",
      "File": "rules/manager.go",
      "Line": 212,
      "Receiver": "Manager"
    },
    "Manager.allGroups": {
      "Name": "Manager.allGroups",
      "File": "discovery/manager.go",
      "Line": 430,
      "Receiver": "Manager"
    },
    "Manager.cancelDiscoverers": {
      "Name": "Manager.cancelDiscoverers",
      "File": "discovery/manager.go",
      "Line": 396,
      "Receiver": "Manager"
    },
    "Manager.cleaner": {
      "Name": "Manager.cleaner",
      "File": "discovery/manager.go",
      "Line": 319,
      "Receiver": "Manager"
    },
    "Manager.drainQueue": {
      "Name": "Manager.drainQueue",
      "File": "notifier/manager.go",
      "Line": 275,
      "Receiver": "Manager"
    },
    "Manager.nextBatch": {
      "Name": "Manager.nextBatch",
      "File": "notifier/manager.go",
      "Line": 180,
      "Receiver": "Manager"
    },
    "Manager.queueLen": {
      "Name": "Manager.queueLen",
      "File": "notifier/manager.go",
      "Line": 173,
      "Receiver": "Manager"
    },
    "Manager.registerProviders": {
      "Name": "Manager.registerProviders",
      "File": "discovery/manager.go",
      "Line": 465,
      "Receiver": "Manager"
    },
    "Manager.reload": {
      "Name": "Manager.reload",
      "File": "scrape/manager.go",
      "Line": 177,
      "Receiver": "Manager"
    },
    "Manager.reloader": {
      "Name": "Manager.reloader",
      "File": "scrape/manager.go",
      "Line": 152,
      "Receiver": "Manager"
    },
    "Manager.sendAll": {
      "Name": "Manager.sendAll",
      "File": "notifier/manager.go",
      "Line": 392,
      "Receiver": "Manager"
    },
    "Manager.sendLoop": {
      "Name": "Manager.sendLoop",
      "File": "notifier/manager.go",
      "Line": 223,
      "Receiver": "Manager"
    },
    "Manager.sendOne": {
      "Name": "Manager.sendOne",
      "File": "notifier/manager.go",
      "Line": 511,
      "Receiver": "Manager"
    },
    "Manager.sendOneBatch": {
      "Name": "Manager.sendOneBatch",
      "File": "notifier/manager.go",
      "Line": 267,
      "Receiver": "Manager"
    },
    "Manager.sender": {
      "Name": "Manager.sender",
      "File": "discovery/manager.go",
      "Line": 366,
      "Receiver": "Manager"
    },
    "Manager.setMore": {
      "Name": "Manager.setMore",
      "File": "notifier/manager.go",
      "Line": 343,
      "Receiver": "Manager"
    },
    "Manager.setOffsetSeed": {
      "Name": "Manager.setOffsetSeed",
      "File": "scrape/manager.go",
      "Line": 219,
      "Receiver": "Manager"
    },
    "Manager.start": {
      "Name": "Manager.start",
      "File": "rules/manager.go",
      "Line": 181,
      "Receiver": "Manager"
    },
    "Manager.startProvider": {
      "Name": "Manager.startProvider",
      "File": "discovery/manager.go",
      "Line": 305,
      "Receiver": "Manager"
    },
    "Manager.targetUpdateLoop": {
      "Name": "Manager.targetUpdateLoop",
      "File": "notifier/manager.go",
      "Line": 247,
      "Receiver": "Manager"
    },
    "Manager.updateGroup": {
      "Name": "Manager.updateGroup",
      "File": "discovery/manager.go",
      "Line": 408,
      "Receiver": "Manager"
    },
    "Manager.updateTsets": {
      "Name": "Manager.updateTsets",
      "File": "scrape/manager.go",
      "Line": 243,
      "Receiver": "Manager"
    },
    "Manager.updater": {
      "Name": "Manager.updater",
      "File": "discovery/manager.go",
      "Line": 336,
      "Receiver": "Manager"
    },
    "MarshalFloat": {
      "Name": "MarshalFloat",
      "File": "util/jsonutil/marshal.go",
      "Line": 48,
      "Receiver": ""
    },
    "MarshalHistogram": {
      "Name": "MarshalHistogram",
      "File": "util/jsonutil/marshal.go",
      "Line": 90,
      "Receiver": ""
    },
    "MarshalTimestamp": {
      "Name": "MarshalTimestamp",
      "File": "util/jsonutil/marshal.go",
      "Line": 26,
      "Receiver": ""
    },
    "MarshalYAMLWithInlineConfigs": {
      "Name": "MarshalYAMLWithInlineConfigs",
      "File": "discovery/registry.go",
      "Line": 201,
      "Receiver": ""
    },
    "MatchType.String": {
      "Name": "MatchType.String",
      "File": "model/labels/matcher.go",
      "Line": 39,
      "Receiver": "MatchType"
    },
    "Matcher.GetRegexString": {
      "Name": "Matcher.GetRegexString",
      "File": "model/labels/matcher.go",
      "Line": 138,
      "Receiver": "Matcher"
    },
    "Matcher.Inverse": {
      "Name": "Matcher.Inverse",
      "File": "model/labels/matcher.go",
      "Line": 123,
      "Receiver": "Matcher"
    },
    "Matcher.IsRegexOptimized": {
      "Name": "Matcher.IsRegexOptimized",
      "File": "model/labels/matcher.go",
      "Line": 165,
      "Receiver": "Matcher"
    },
    "Matcher.Matches": {
      "Name": "Matcher.Matches",
      "File": "model/labels/matcher.go",
      "Line": 108,
      "Receiver": "Matcher"
    },
    "Matcher.Prefix": {
      "Name": "Matcher.Prefix",
      "File": "model/labels/matcher.go",
      "Line": 157,
      "Receiver": "Matcher"
    },
    "Matcher.SetMatches": {
      "Name": "Matcher.SetMatches",
      "File": "model/labels/matcher.go",
      "Line": 148,
      "Receiver": "Matcher"
    },
    "Matcher.String": {
      "Name": "Matcher.String",
      "File": "model/labels/matcher.go",
      "Line": 81,
      "Receiver": "Matcher"
    },
    "Matcher.shouldQuoteName": {
      "Name": "Matcher.shouldQuoteName",
      "File": "model/labels/matcher.go",
      "Line": 97,
      "Receiver": "Matcher"
    },
    "Matrix.ContainsSameLabelset": {
      "Name": "Matrix.ContainsSameLabelset",
      "File": "promql/value.go",
      "Line": 324,
      "Receiver": "Matrix"
    },
    "Matrix.Len": {
      "Name": "Matrix.Len",
      "File": "promql/value.go",
      "Line": 317,
      "Receiver": "Matrix"
    },
    "Matrix.Less": {
      "Name": "Matrix.Less",
      "File": "promql/value.go",
      "Line": 318,
      "Receiver": "Matrix"
    },
    "Matrix.String": {
      "Name": "Matrix.String",
      "File": "promql/value.go",
      "Line": 294,
      "Receiver": "Matrix"
    },
    "Matrix.Swap": {
      "Name": "Matrix.Swap",
      "File": "promql/value.go",
      "Line": 319,
      "Receiver": "Matrix"
    },
    "Matrix.TotalSamples": {
      "Name": "Matrix.TotalSamples",
      "File": "promql/value.go",
      "Line": 309,
      "Receiver": "Matrix"
    },
    "Matrix.Type": {
      "Name": "Matrix.Type",
      "File": "promql/value.go",
      "Line": 32,
      "Receiver": "Matrix"
    },
    "MatrixSelector.PositionRange": {
      "Name": "MatrixSelector.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 499,
      "Receiver": "MatrixSelector"
    },
    "MatrixSelector.Pretty": {
      "Name": "MatrixSelector.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 134,
      "Receiver": "MatrixSelector"
    },
    "MatrixSelector.PromQLExpr": {
      "Name": "MatrixSelector.PromQLExpr",
      "File": "promql/parser/ast.go",
      "Line": 267,
      "Receiver": "MatrixSelector"
    },
    "MatrixSelector.ShortString": {
      "Name": "MatrixSelector.ShortString",
      "File": "promql/parser/printer.go",
      "Line": 236,
      "Receiver": "MatrixSelector"
    },
    "MatrixSelector.String": {
      "Name": "MatrixSelector.String",
      "File": "promql/parser/printer.go",
      "Line": 214,
      "Receiver": "MatrixSelector"
    },
    "MatrixSelector.Type": {
      "Name": "MatrixSelector.Type",
      "File": "promql/parser/ast.go",
      "Line": 248,
      "Receiver": "MatrixSelector"
    },
    "MatrixSelector.atOffset": {
      "Name": "MatrixSelector.atOffset",
      "File": "promql/parser/printer.go",
      "Line": 190,
      "Receiver": "MatrixSelector"
    },
    "MemPostings.Add": {
      "Name": "MemPostings.Add",
      "File": "tsdb/index/postings.go",
      "Line": 403,
      "Receiver": "MemPostings"
    },
    "MemPostings.All": {
      "Name": "MemPostings.All",
      "File": "tsdb/index/postings.go",
      "Line": 243,
      "Receiver": "MemPostings"
    },
    "MemPostings.Delete": {
      "Name": "MemPostings.Delete",
      "File": "tsdb/index/postings.go",
      "Line": 308,
      "Receiver": "MemPostings"
    },
    "MemPostings.EnsureOrder": {
      "Name": "MemPostings.EnsureOrder",
      "File": "tsdb/index/postings.go",
      "Line": 252,
      "Receiver": "MemPostings"
    },
    "MemPostings.Iter": {
      "Name": "MemPostings.Iter",
      "File": "tsdb/index/postings.go",
      "Line": 388,
      "Receiver": "MemPostings"
    },
    "MemPostings.LabelNames": {
      "Name": "MemPostings.LabelNames",
      "File": "tsdb/index/postings.go",
      "Line": 153,
      "Receiver": "MemPostings"
    },
    "MemPostings.LabelValues": {
      "Name": "MemPostings.LabelValues",
      "File": "tsdb/index/postings.go",
      "Line": 171,
      "Receiver": "MemPostings"
    },
    "MemPostings.Postings": {
      "Name": "MemPostings.Postings",
      "File": "tsdb/index/postings.go",
      "Line": 502,
      "Receiver": "MemPostings"
    },
    "MemPostings.PostingsForAllLabelValues": {
      "Name": "MemPostings.PostingsForAllLabelValues",
      "File": "tsdb/index/postings.go",
      "Line": 517,
      "Receiver": "MemPostings"
    },
    "MemPostings.PostingsForLabelMatching": {
      "Name": "MemPostings.PostingsForLabelMatching",
      "File": "tsdb/index/postings.go",
      "Line": 451,
      "Receiver": "MemPostings"
    },
    "MemPostings.SortedKeys": {
      "Name": "MemPostings.SortedKeys",
      "File": "tsdb/index/postings.go",
      "Line": 129,
      "Receiver": "MemPostings"
    },
    "MemPostings.Stats": {
      "Name": "MemPostings.Stats",
      "File": "tsdb/index/postings.go",
      "Line": 198,
      "Receiver": "MemPostings"
    },
    "MemPostings.Symbols": {
      "Name": "MemPostings.Symbols",
      "File": "tsdb/index/postings.go",
      "Line": 103,
      "Receiver": "MemPostings"
    },
    "MemPostings.addFor": {
      "Name": "MemPostings.addFor",
      "File": "tsdb/index/postings.go",
      "Line": 423,
      "Receiver": "MemPostings"
    },
    "MemPostings.unlockWaitAndLockAgain": {
      "Name": "MemPostings.unlockWaitAndLockAgain",
      "File": "tsdb/index/postings.go",
      "Line": 372,
      "Receiver": "MemPostings"
    },
    "MemTombstones.AddInterval": {
      "Name": "MemTombstones.AddInterval",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 315,
      "Receiver": "MemTombstones"
    },
    "MemTombstones.Close": {
      "Name": "MemTombstones.Close",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 323,
      "Receiver": "MemTombstones"
    },
    "MemTombstones.DeleteTombstones": {
      "Name": "MemTombstones.DeleteTombstones",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 264,
      "Receiver": "MemTombstones"
    },
    "MemTombstones.Get": {
      "Name": "MemTombstones.Get",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 251,
      "Receiver": "MemTombstones"
    },
    "MemTombstones.Iter": {
      "Name": "MemTombstones.Iter",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 292,
      "Receiver": "MemTombstones"
    },
    "MemTombstones.Total": {
      "Name": "MemTombstones.Total",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 303,
      "Receiver": "MemTombstones"
    },
    "MemTombstones.TruncateBefore": {
      "Name": "MemTombstones.TruncateBefore",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 272,
      "Receiver": "MemTombstones"
    },
    "MemoizedSeriesIterator.At": {
      "Name": "MemoizedSeriesIterator.At",
      "File": "storage/memoized_iterator.go",
      "Line": 130,
      "Receiver": "MemoizedSeriesIterator"
    },
    "MemoizedSeriesIterator.AtFloatHistogram": {
      "Name": "MemoizedSeriesIterator.AtFloatHistogram",
      "File": "storage/memoized_iterator.go",
      "Line": 135,
      "Receiver": "MemoizedSeriesIterator"
    },
    "MemoizedSeriesIterator.AtT": {
      "Name": "MemoizedSeriesIterator.AtT",
      "File": "storage/memoized_iterator.go",
      "Line": 140,
      "Receiver": "MemoizedSeriesIterator"
    },
    "MemoizedSeriesIterator.Err": {
      "Name": "MemoizedSeriesIterator.Err",
      "File": "storage/memoized_iterator.go",
      "Line": 145,
      "Receiver": "MemoizedSeriesIterator"
    },
    "MemoizedSeriesIterator.Next": {
      "Name": "MemoizedSeriesIterator.Next",
      "File": "storage/memoized_iterator.go",
      "Line": 106,
      "Receiver": "MemoizedSeriesIterator"
    },
    "MemoizedSeriesIterator.PeekPrev": {
      "Name": "MemoizedSeriesIterator.PeekPrev",
      "File": "storage/memoized_iterator.go",
      "Line": 67,
      "Receiver": "MemoizedSeriesIterator"
    },
    "MemoizedSeriesIterator.Reset": {
      "Name": "MemoizedSeriesIterator.Reset",
      "File": "storage/memoized_iterator.go",
      "Line": 58,
      "Receiver": "MemoizedSeriesIterator"
    },
    "MemoizedSeriesIterator.Seek": {
      "Name": "MemoizedSeriesIterator.Seek",
      "File": "storage/memoized_iterator.go",
      "Line": 75,
      "Receiver": "MemoizedSeriesIterator"
    },
    "Merge": {
      "Name": "Merge",
      "File": "tsdb/index/postings.go",
      "Line": 665,
      "Receiver": ""
    },
    "MergeLabels": {
      "Name": "MergeLabels",
      "File": "storage/remote/codec.go",
      "Line": 300,
      "Receiver": ""
    },
    "Meta.OverlapsClosedInterval": {
      "Name": "Meta.OverlapsClosedInterval",
      "File": "tsdb/chunks/chunks.go",
      "Line": 248,
      "Receiver": "Meta"
    },
    "Meta.writeHash": {
      "Name": "Meta.writeHash",
      "File": "tsdb/chunks/chunks.go",
      "Line": 236,
      "Receiver": "Meta"
    },
    "Metadata.AddToLabels": {
      "Name": "Metadata.AddToLabels",
      "File": "schema/labels.go",
      "Line": 115,
      "Receiver": "Metadata"
    },
    "Metadata.Descriptor": {
      "Name": "Metadata.Descriptor",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 450,
      "Receiver": "Metadata"
    },
    "Metadata.GetHelpRef": {
      "Name": "Metadata.GetHelpRef",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 487,
      "Receiver": "Metadata"
    },
    "Metadata.GetType": {
      "Name": "Metadata.GetType",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 480,
      "Receiver": "Metadata"
    },
    "Metadata.GetUnitRef": {
      "Name": "Metadata.GetUnitRef",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 494,
      "Receiver": "Metadata"
    },
    "Metadata.IsEmptyFor": {
      "Name": "Metadata.IsEmptyFor",
      "File": "schema/labels.go",
      "Line": 100,
      "Receiver": "Metadata"
    },
    "Metadata.IsTypeEmpty": {
      "Name": "Metadata.IsTypeEmpty",
      "File": "schema/labels.go",
      "Line": 93,
      "Receiver": "Metadata"
    },
    "Metadata.Marshal": {
      "Name": "Metadata.Marshal",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 1171,
      "Receiver": "Metadata"
    },
    "Metadata.MarshalTo": {
      "Name": "Metadata.MarshalTo",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 1181,
      "Receiver": "Metadata"
    },
    "Metadata.MarshalToSizedBuffer": {
      "Name": "Metadata.MarshalToSizedBuffer",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 1186,
      "Receiver": "Metadata"
    },
    "Metadata.ProtoMessage": {
      "Name": "Metadata.ProtoMessage",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 449,
      "Receiver": "Metadata"
    },
    "Metadata.Reset": {
      "Name": "Metadata.Reset",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 447,
      "Receiver": "Metadata"
    },
    "Metadata.SetToLabels": {
      "Name": "Metadata.SetToLabels",
      "File": "schema/labels.go",
      "Line": 130,
      "Receiver": "Metadata"
    },
    "Metadata.Size": {
      "Name": "Metadata.Size",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 1590,
      "Receiver": "Metadata"
    },
    "Metadata.String": {
      "Name": "Metadata.String",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 448,
      "Receiver": "Metadata"
    },
    "Metadata.Unmarshal": {
      "Name": "Metadata.Unmarshal",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 2375,
      "Receiver": "Metadata"
    },
    "Metadata.XXX_DiscardUnknown": {
      "Name": "Metadata.XXX_DiscardUnknown",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 474,
      "Receiver": "Metadata"
    },
    "Metadata.XXX_Marshal": {
      "Name": "Metadata.XXX_Marshal",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 456,
      "Receiver": "Metadata"
    },
    "Metadata.XXX_Merge": {
      "Name": "Metadata.XXX_Merge",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 468,
      "Receiver": "Metadata"
    },
    "Metadata.XXX_Size": {
      "Name": "Metadata.XXX_Size",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 471,
      "Receiver": "Metadata"
    },
    "Metadata.XXX_Unmarshal": {
      "Name": "Metadata.XXX_Unmarshal",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 453,
      "Receiver": "Metadata"
    },
    "MetadataMetricsCollector.Collect": {
      "Name": "MetadataMetricsCollector.Collect",
      "File": "scrape/metrics.go",
      "Line": 318,
      "Receiver": "MetadataMetricsCollector"
    },
    "MetadataMetricsCollector.Describe": {
      "Name": "MetadataMetricsCollector.Describe",
      "File": "scrape/metrics.go",
      "Line": 312,
      "Receiver": "MetadataMetricsCollector"
    },
    "MetadataWatcher.Start": {
      "Name": "MetadataWatcher.Start",
      "File": "storage/remote/metadata_watcher.go",
      "Line": 89,
      "Receiver": "MetadataWatcher"
    },
    "MetadataWatcher.Stop": {
      "Name": "MetadataWatcher.Stop",
      "File": "storage/remote/metadata_watcher.go",
      "Line": 97,
      "Receiver": "MetadataWatcher"
    },
    "MetadataWatcher.collect": {
      "Name": "MetadataWatcher.collect",
      "File": "storage/remote/metadata_watcher.go",
      "Line": 128,
      "Receiver": "MetadataWatcher"
    },
    "MetadataWatcher.loop": {
      "Name": "MetadataWatcher.loop",
      "File": "storage/remote/metadata_watcher.go",
      "Line": 113,
      "Receiver": "MetadataWatcher"
    },
    "MetadataWatcher.ready": {
      "Name": "MetadataWatcher.ready",
      "File": "storage/remote/metadata_watcher.go",
      "Line": 152,
      "Receiver": "MetadataWatcher"
    },
    "Metadata_MetricType.EnumDescriptor": {
      "Name": "Metadata_MetricType.EnumDescriptor",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 67,
      "Receiver": "Metadata_MetricType"
    },
    "Metadata_MetricType.String": {
      "Name": "Metadata_MetricType.String",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 63,
      "Receiver": "Metadata_MetricType"
    },
    "Metric.Descriptor": {
      "Name": "Metric.Descriptor",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 806,
      "Receiver": "Metric"
    },
    "Metric.GetCounter": {
      "Name": "Metric.GetCounter",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 850,
      "Receiver": "Metric"
    },
    "Metric.GetGauge": {
      "Name": "Metric.GetGauge",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 843,
      "Receiver": "Metric"
    },
    "Metric.GetHistogram": {
      "Name": "Metric.GetHistogram",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 871,
      "Receiver": "Metric"
    },
    "Metric.GetLabel": {
      "Name": "Metric.GetLabel",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 836,
      "Receiver": "Metric"
    },
    "Metric.GetSummary": {
      "Name": "Metric.GetSummary",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 857,
      "Receiver": "Metric"
    },
    "Metric.GetTimestampMs": {
      "Name": "Metric.GetTimestampMs",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 878,
      "Receiver": "Metric"
    },
    "Metric.GetUntyped": {
      "Name": "Metric.GetUntyped",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 864,
      "Receiver": "Metric"
    },
    "Metric.Marshal": {
      "Name": "Metric.Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1663,
      "Receiver": "Metric"
    },
    "Metric.MarshalTo": {
      "Name": "Metric.MarshalTo",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1673,
      "Receiver": "Metric"
    },
    "Metric.MarshalToSizedBuffer": {
      "Name": "Metric.MarshalToSizedBuffer",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1678,
      "Receiver": "Metric"
    },
    "Metric.ProtoMessage": {
      "Name": "Metric.ProtoMessage",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 805,
      "Receiver": "Metric"
    },
    "Metric.Reset": {
      "Name": "Metric.Reset",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 803,
      "Receiver": "Metric"
    },
    "Metric.Size": {
      "Name": "Metric.Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 2115,
      "Receiver": "Metric"
    },
    "Metric.String": {
      "Name": "Metric.String",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 804,
      "Receiver": "Metric"
    },
    "Metric.Unmarshal": {
      "Name": "Metric.Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 3733,
      "Receiver": "Metric"
    },
    "Metric.XXX_DiscardUnknown": {
      "Name": "Metric.XXX_DiscardUnknown",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 830,
      "Receiver": "Metric"
    },
    "Metric.XXX_Marshal": {
      "Name": "Metric.XXX_Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 812,
      "Receiver": "Metric"
    },
    "Metric.XXX_Merge": {
      "Name": "Metric.XXX_Merge",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 824,
      "Receiver": "Metric"
    },
    "Metric.XXX_Size": {
      "Name": "Metric.XXX_Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 827,
      "Receiver": "Metric"
    },
    "Metric.XXX_Unmarshal": {
      "Name": "Metric.XXX_Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 809,
      "Receiver": "Metric"
    },
    "Metric.unmarshalWithoutLabels": {
      "Name": "Metric.unmarshalWithoutLabels",
      "File": "prompb/io/prometheus/client/decoder.go",
      "Line": 304,
      "Receiver": "Metric"
    },
    "MetricFamiliesToWriteRequest": {
      "Name": "MetricFamiliesToWriteRequest",
      "File": "util/fmtutil/format.go",
      "Line": 58,
      "Receiver": ""
    },
    "MetricFamily.Descriptor": {
      "Name": "MetricFamily.Descriptor",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 899,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.GetHelp": {
      "Name": "MetricFamily.GetHelp",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 936,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.GetMetric": {
      "Name": "MetricFamily.GetMetric",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 950,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.GetName": {
      "Name": "MetricFamily.GetName",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 929,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.GetType": {
      "Name": "MetricFamily.GetType",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 943,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.GetUnit": {
      "Name": "MetricFamily.GetUnit",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 957,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.Marshal": {
      "Name": "MetricFamily.Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1769,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.MarshalTo": {
      "Name": "MetricFamily.MarshalTo",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1779,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.MarshalToSizedBuffer": {
      "Name": "MetricFamily.MarshalToSizedBuffer",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1784,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.ProtoMessage": {
      "Name": "MetricFamily.ProtoMessage",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 898,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.Reset": {
      "Name": "MetricFamily.Reset",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 896,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.Size": {
      "Name": "MetricFamily.Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 2156,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.String": {
      "Name": "MetricFamily.String",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 897,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.Unmarshal": {
      "Name": "MetricFamily.Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 4017,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.XXX_DiscardUnknown": {
      "Name": "MetricFamily.XXX_DiscardUnknown",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 923,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.XXX_Marshal": {
      "Name": "MetricFamily.XXX_Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 905,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.XXX_Merge": {
      "Name": "MetricFamily.XXX_Merge",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 917,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.XXX_Size": {
      "Name": "MetricFamily.XXX_Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 920,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.XXX_Unmarshal": {
      "Name": "MetricFamily.XXX_Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 902,
      "Receiver": "MetricFamily"
    },
    "MetricFamily.unmarshalWithoutMetrics": {
      "Name": "MetricFamily.unmarshalWithoutMetrics",
      "File": "prompb/io/prometheus/client/decoder.go",
      "Line": 586,
      "Receiver": "MetricFamily"
    },
    "MetricFamilyToProtobuf": {
      "Name": "MetricFamilyToProtobuf",
      "File": "scrape/clientprotobuf.go",
      "Line": 27,
      "Receiver": ""
    },
    "MetricMetadata.Descriptor": {
      "Name": "MetricMetadata.Descriptor",
      "File": "prompb/types.pb.go",
      "Line": 180,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.GetHelp": {
      "Name": "MetricMetadata.GetHelp",
      "File": "prompb/types.pb.go",
      "Line": 224,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.GetMetricFamilyName": {
      "Name": "MetricMetadata.GetMetricFamilyName",
      "File": "prompb/types.pb.go",
      "Line": 217,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.GetType": {
      "Name": "MetricMetadata.GetType",
      "File": "prompb/types.pb.go",
      "Line": 210,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.GetUnit": {
      "Name": "MetricMetadata.GetUnit",
      "File": "prompb/types.pb.go",
      "Line": 231,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.Marshal": {
      "Name": "MetricMetadata.Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1232,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.MarshalTo": {
      "Name": "MetricMetadata.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1242,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.MarshalToSizedBuffer": {
      "Name": "MetricMetadata.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1247,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.ProtoMessage": {
      "Name": "MetricMetadata.ProtoMessage",
      "File": "prompb/types.pb.go",
      "Line": 179,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.Reset": {
      "Name": "MetricMetadata.Reset",
      "File": "prompb/types.pb.go",
      "Line": 177,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.Size": {
      "Name": "MetricMetadata.Size",
      "File": "prompb/types.pb.go",
      "Line": 2031,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.String": {
      "Name": "MetricMetadata.String",
      "File": "prompb/types.pb.go",
      "Line": 178,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.Unmarshal": {
      "Name": "MetricMetadata.Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 2411,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.XXX_DiscardUnknown": {
      "Name": "MetricMetadata.XXX_DiscardUnknown",
      "File": "prompb/types.pb.go",
      "Line": 204,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.XXX_Marshal": {
      "Name": "MetricMetadata.XXX_Marshal",
      "File": "prompb/types.pb.go",
      "Line": 186,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.XXX_Merge": {
      "Name": "MetricMetadata.XXX_Merge",
      "File": "prompb/types.pb.go",
      "Line": 198,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.XXX_Size": {
      "Name": "MetricMetadata.XXX_Size",
      "File": "prompb/types.pb.go",
      "Line": 201,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadata.XXX_Unmarshal": {
      "Name": "MetricMetadata.XXX_Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 183,
      "Receiver": "MetricMetadata"
    },
    "MetricMetadataStoreFromContext": {
      "Name": "MetricMetadataStoreFromContext",
      "File": "scrape/scrape.go",
      "Line": 2243,
      "Receiver": ""
    },
    "MetricMetadata_MetricType.EnumDescriptor": {
      "Name": "MetricMetadata_MetricType.EnumDescriptor",
      "File": "prompb/types.pb.go",
      "Line": 67,
      "Receiver": "MetricMetadata_MetricType"
    },
    "MetricMetadata_MetricType.String": {
      "Name": "MetricMetadata_MetricType.String",
      "File": "prompb/types.pb.go",
      "Line": 63,
      "Receiver": "MetricMetadata_MetricType"
    },
    "MetricStreamingDecoder.GetLabel": {
      "Name": "MetricStreamingDecoder.GetLabel",
      "File": "prompb/io/prometheus/client/decoder.go",
      "Line": 150,
      "Receiver": "MetricStreamingDecoder"
    },
    "MetricStreamingDecoder.GetMetric": {
      "Name": "MetricStreamingDecoder.GetMetric",
      "File": "prompb/io/prometheus/client/decoder.go",
      "Line": 146,
      "Receiver": "MetricStreamingDecoder"
    },
    "MetricStreamingDecoder.Label": {
      "Name": "MetricStreamingDecoder.Label",
      "File": "prompb/io/prometheus/client/decoder.go",
      "Line": 163,
      "Receiver": "MetricStreamingDecoder"
    },
    "MetricStreamingDecoder.NextMetric": {
      "Name": "MetricStreamingDecoder.NextMetric",
      "File": "prompb/io/prometheus/client/decoder.go",
      "Line": 92,
      "Receiver": "MetricStreamingDecoder"
    },
    "MetricStreamingDecoder.NextMetricFamily": {
      "Name": "MetricStreamingDecoder.NextMetricFamily",
      "File": "prompb/io/prometheus/client/decoder.go",
      "Line": 65,
      "Receiver": "MetricStreamingDecoder"
    },
    "MetricStreamingDecoder.resetMetric": {
      "Name": "MetricStreamingDecoder.resetMetric",
      "File": "prompb/io/prometheus/client/decoder.go",
      "Line": 107,
      "Receiver": "MetricStreamingDecoder"
    },
    "MetricStreamingDecoder.resetMetricFamily": {
      "Name": "MetricStreamingDecoder.resetMetricFamily",
      "File": "prompb/io/prometheus/client/decoder.go",
      "Line": 86,
      "Receiver": "MetricStreamingDecoder"
    },
    "MetricTextToWriteRequest": {
      "Name": "MetricTextToWriteRequest",
      "File": "util/fmtutil/format.go",
      "Line": 48,
      "Receiver": ""
    },
    "MetricType.EnumDescriptor": {
      "Name": "MetricType.EnumDescriptor",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 68,
      "Receiver": "MetricType"
    },
    "MetricType.String": {
      "Name": "MetricType.String",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 64,
      "Receiver": "MetricType"
    },
    "Metrics.Unregister": {
      "Name": "Metrics.Unregister",
      "File": "discovery/metrics.go",
      "Line": 94,
      "Receiver": "Metrics"
    },
    "MigrateTestData": {
      "Name": "MigrateTestData",
      "File": "promql/promqltest/test_migrate.go",
      "Line": 56,
      "Receiver": ""
    },
    "MmapFile.Bytes": {
      "Name": "MmapFile.Bytes",
      "File": "tsdb/fileutil/mmap.go",
      "Line": 70,
      "Receiver": "MmapFile"
    },
    "MmapFile.Close": {
      "Name": "MmapFile.Close",
      "File": "tsdb/fileutil/mmap.go",
      "Line": 56,
      "Receiver": "MmapFile"
    },
    "MmapFile.File": {
      "Name": "MmapFile.File",
      "File": "tsdb/fileutil/mmap.go",
      "Line": 66,
      "Receiver": "MmapFile"
    },
    "MockContext.Deadline": {
      "Name": "MockContext.Deadline",
      "File": "util/testutil/context.go",
      "Line": 30,
      "Receiver": "MockContext"
    },
    "MockContext.Done": {
      "Name": "MockContext.Done",
      "File": "util/testutil/context.go",
      "Line": 35,
      "Receiver": "MockContext"
    },
    "MockContext.Err": {
      "Name": "MockContext.Err",
      "File": "util/testutil/context.go",
      "Line": 40,
      "Receiver": "MockContext"
    },
    "MockContext.Value": {
      "Name": "MockContext.Value",
      "File": "util/testutil/context.go",
      "Line": 45,
      "Receiver": "MockContext"
    },
    "MockContextErrAfter.Count": {
      "Name": "MockContextErrAfter.Count",
      "File": "util/testutil/context.go",
      "Line": 65,
      "Receiver": "MockContextErrAfter"
    },
    "MockContextErrAfter.Err": {
      "Name": "MockContextErrAfter.Err",
      "File": "util/testutil/context.go",
      "Line": 57,
      "Receiver": "MockContextErrAfter"
    },
    "MockDedicatedAPI": {
      "Name": "MockDedicatedAPI",
      "File": "discovery/ovhcloud/dedicated_server_test.go",
      "Line": 81,
      "Receiver": ""
    },
    "MockQuerier.Close": {
      "Name": "MockQuerier.Close",
      "File": "storage/interface.go",
      "Line": 136,
      "Receiver": "MockQuerier"
    },
    "MockQuerier.LabelNames": {
      "Name": "MockQuerier.LabelNames",
      "File": "storage/interface.go",
      "Line": 132,
      "Receiver": "MockQuerier"
    },
    "MockQuerier.LabelValues": {
      "Name": "MockQuerier.LabelValues",
      "File": "storage/interface.go",
      "Line": 128,
      "Receiver": "MockQuerier"
    },
    "MockQuerier.Select": {
      "Name": "MockQuerier.Select",
      "File": "storage/interface.go",
      "Line": 140,
      "Receiver": "MockQuerier"
    },
    "MockQueryable.Querier": {
      "Name": "MockQueryable.Querier",
      "File": "storage/interface.go",
      "Line": 107,
      "Receiver": "MockQueryable"
    },
    "MockSeries": {
      "Name": "MockSeries",
      "File": "storage/interface.go",
      "Line": 477,
      "Receiver": ""
    },
    "MockSeriesIterator": {
      "Name": "MockSeriesIterator",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 212,
      "Receiver": ""
    },
    "MockVpsAPI": {
      "Name": "MockVpsAPI",
      "File": "discovery/ovhcloud/vps_test.go",
      "Line": 87,
      "Receiver": ""
    },
    "MockWriteClient.Endpoint": {
      "Name": "MockWriteClient.Endpoint",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1288,
      "Receiver": "MockWriteClient"
    },
    "MockWriteClient.Name": {
      "Name": "MockWriteClient.Name",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1287,
      "Receiver": "MockWriteClient"
    },
    "MockWriteClient.Store": {
      "Name": "MockWriteClient.Store",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1284,
      "Receiver": "MockWriteClient"
    },
    "MonitoringAssignment.Descriptor": {
      "Name": "MonitoringAssignment.Descriptor",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 95,
      "Receiver": "MonitoringAssignment"
    },
    "MonitoringAssignment.GetLabels": {
      "Name": "MonitoringAssignment.GetLabels",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 120,
      "Receiver": "MonitoringAssignment"
    },
    "MonitoringAssignment.GetMesh": {
      "Name": "MonitoringAssignment.GetMesh",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 99,
      "Receiver": "MonitoringAssignment"
    },
    "MonitoringAssignment.GetService": {
      "Name": "MonitoringAssignment.GetService",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 106,
      "Receiver": "MonitoringAssignment"
    },
    "MonitoringAssignment.GetTargets": {
      "Name": "MonitoringAssignment.GetTargets",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 113,
      "Receiver": "MonitoringAssignment"
    },
    "MonitoringAssignment.ProtoMessage": {
      "Name": "MonitoringAssignment.ProtoMessage",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 80,
      "Receiver": "MonitoringAssignment"
    },
    "MonitoringAssignment.ProtoReflect": {
      "Name": "MonitoringAssignment.ProtoReflect",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 82,
      "Receiver": "MonitoringAssignment"
    },
    "MonitoringAssignment.Reset": {
      "Name": "MonitoringAssignment.Reset",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 67,
      "Receiver": "MonitoringAssignment"
    },
    "MonitoringAssignment.String": {
      "Name": "MonitoringAssignment.String",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 76,
      "Receiver": "MonitoringAssignment"
    },
    "MonitoringAssignment_Target.Descriptor": {
      "Name": "MonitoringAssignment_Target.Descriptor",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 181,
      "Receiver": "MonitoringAssignment_Target"
    },
    "MonitoringAssignment_Target.GetAddress": {
      "Name": "MonitoringAssignment_Target.GetAddress",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 199,
      "Receiver": "MonitoringAssignment_Target"
    },
    "MonitoringAssignment_Target.GetLabels": {
      "Name": "MonitoringAssignment_Target.GetLabels",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 213,
      "Receiver": "MonitoringAssignment_Target"
    },
    "MonitoringAssignment_Target.GetMetricsPath": {
      "Name": "MonitoringAssignment_Target.GetMetricsPath",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 206,
      "Receiver": "MonitoringAssignment_Target"
    },
    "MonitoringAssignment_Target.GetName": {
      "Name": "MonitoringAssignment_Target.GetName",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 185,
      "Receiver": "MonitoringAssignment_Target"
    },
    "MonitoringAssignment_Target.GetScheme": {
      "Name": "MonitoringAssignment_Target.GetScheme",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 192,
      "Receiver": "MonitoringAssignment_Target"
    },
    "MonitoringAssignment_Target.ProtoMessage": {
      "Name": "MonitoringAssignment_Target.ProtoMessage",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 166,
      "Receiver": "MonitoringAssignment_Target"
    },
    "MonitoringAssignment_Target.ProtoReflect": {
      "Name": "MonitoringAssignment_Target.ProtoReflect",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 168,
      "Receiver": "MonitoringAssignment_Target"
    },
    "MonitoringAssignment_Target.Reset": {
      "Name": "MonitoringAssignment_Target.Reset",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 153,
      "Receiver": "MonitoringAssignment_Target"
    },
    "MonitoringAssignment_Target.String": {
      "Name": "MonitoringAssignment_Target.String",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 162,
      "Receiver": "MonitoringAssignment_Target"
    },
    "MustGetFunction": {
      "Name": "MustGetFunction",
      "File": "promql/parser/parse.go",
      "Line": 1127,
      "Receiver": ""
    },
    "MustLabelMatcher": {
      "Name": "MustLabelMatcher",
      "File": "promql/parser/parse.go",
      "Line": 1119,
      "Receiver": ""
    },
    "MustNewMatcher": {
      "Name": "MustNewMatcher",
      "File": "model/labels/matcher.go",
      "Line": 73,
      "Receiver": ""
    },
    "MustNewRegexp": {
      "Name": "MustNewRegexp",
      "File": "model/relabel/relabel.go",
      "Line": 189,
      "Receiver": ""
    },
    "NHCBParser.Comment": {
      "Name": "NHCBParser.Comment",
      "File": "model/textparse/nhcbparse.go",
      "Line": 139,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.CreatedTimestamp": {
      "Name": "NHCBParser.CreatedTimestamp",
      "File": "model/textparse/nhcbparse.go",
      "Line": 163,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.Exemplar": {
      "Name": "NHCBParser.Exemplar",
      "File": "model/textparse/nhcbparse.go",
      "Line": 151,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.Help": {
      "Name": "NHCBParser.Help",
      "File": "model/textparse/nhcbparse.go",
      "Line": 127,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.Histogram": {
      "Name": "NHCBParser.Histogram",
      "File": "model/textparse/nhcbparse.go",
      "Line": 120,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.Labels": {
      "Name": "NHCBParser.Labels",
      "File": "model/textparse/nhcbparse.go",
      "Line": 143,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.Next": {
      "Name": "NHCBParser.Next",
      "File": "model/textparse/nhcbparse.go",
      "Line": 177,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.Series": {
      "Name": "NHCBParser.Series",
      "File": "model/textparse/nhcbparse.go",
      "Line": 116,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.Type": {
      "Name": "NHCBParser.Type",
      "File": "model/textparse/nhcbparse.go",
      "Line": 131,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.Unit": {
      "Name": "NHCBParser.Unit",
      "File": "model/textparse/nhcbparse.go",
      "Line": 135,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.differentMetric": {
      "Name": "NHCBParser.differentMetric",
      "File": "model/textparse/nhcbparse.go",
      "Line": 252,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.handleClassicHistogramSeries": {
      "Name": "NHCBParser.handleClassicHistogramSeries",
      "File": "model/textparse/nhcbparse.go",
      "Line": 282,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.nextExemplarPtr": {
      "Name": "NHCBParser.nextExemplarPtr",
      "File": "model/textparse/nhcbparse.go",
      "Line": 336,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.processClassicHistogramSeries": {
      "Name": "NHCBParser.processClassicHistogramSeries",
      "File": "model/textparse/nhcbparse.go",
      "Line": 319,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.processNHCB": {
      "Name": "NHCBParser.processNHCB",
      "File": "model/textparse/nhcbparse.go",
      "Line": 357,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.storeClassicLabels": {
      "Name": "NHCBParser.storeClassicLabels",
      "File": "model/textparse/nhcbparse.go",
      "Line": 268,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.storeExemplars": {
      "Name": "NHCBParser.storeExemplars",
      "File": "model/textparse/nhcbparse.go",
      "Line": 330,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.storeExponentialLabels": {
      "Name": "NHCBParser.storeExponentialLabels",
      "File": "model/textparse/nhcbparse.go",
      "Line": 273,
      "Receiver": "NHCBParser"
    },
    "NHCBParser.swapExemplars": {
      "Name": "NHCBParser.swapExemplars",
      "File": "model/textparse/nhcbparse.go",
      "Line": 350,
      "Receiver": "NHCBParser"
    },
    "Name": {
      "Name": "Name",
      "File": "discovery/manager.go",
      "Line": 117,
      "Receiver": ""
    },
    "NamespaceDiscovery.UnmarshalYAML": {
      "Name": "NamespaceDiscovery.UnmarshalYAML",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 236,
      "Receiver": "NamespaceDiscovery"
    },
    "NegotiateResponseType": {
      "Name": "NegotiateResponseType",
      "File": "storage/remote/codec.go",
      "Line": 200,
      "Receiver": ""
    },
    "NerveSDConfig.Name": {
      "Name": "NerveSDConfig.Name",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 109,
      "Receiver": "NerveSDConfig"
    },
    "NerveSDConfig.NewDiscoverer": {
      "Name": "NerveSDConfig.NewDiscoverer",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 112,
      "Receiver": "NerveSDConfig"
    },
    "NerveSDConfig.NewDiscovererMetrics": {
      "Name": "NerveSDConfig.NewDiscovererMetrics",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 104,
      "Receiver": "NerveSDConfig"
    },
    "NerveSDConfig.UnmarshalYAML": {
      "Name": "NerveSDConfig.UnmarshalYAML",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 117,
      "Receiver": "NerveSDConfig"
    },
    "New": {
      "Name": "New",
      "File": "web/web.go",
      "Line": 305,
      "Receiver": ""
    },
    "NewAPI": {
      "Name": "NewAPI",
      "File": "web/api/v1/api.go",
      "Line": 234,
      "Receiver": ""
    },
    "NewActiveQueryTracker": {
      "Name": "NewActiveQueryTracker",
      "File": "promql/query_logger.go",
      "Line": 134,
      "Receiver": ""
    },
    "NewAdapter": {
      "Name": "NewAdapter",
      "File": "documentation/examples/custom-sd/adapter/adapter.go",
      "Line": 165,
      "Receiver": ""
    },
    "NewAlertingRule": {
      "Name": "NewAlertingRule",
      "File": "rules/alerting.go",
      "Line": 152,
      "Receiver": ""
    },
    "NewAzureADRoundTripper": {
      "Name": "NewAzureADRoundTripper",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 186,
      "Receiver": ""
    },
    "NewBadBucketLabelWarning": {
      "Name": "NewBadBucketLabelWarning",
      "File": "util/annotations/annotations.go",
      "Line": 197,
      "Receiver": ""
    },
    "NewBlockChunkQuerier": {
      "Name": "NewBlockChunkQuerier",
      "File": "tsdb/querier.go",
      "Line": 157,
      "Receiver": ""
    },
    "NewBlockChunkRef": {
      "Name": "NewBlockChunkRef",
      "File": "tsdb/chunks/chunks.go",
      "Line": 110,
      "Receiver": ""
    },
    "NewBlockChunkSeriesSet": {
      "Name": "NewBlockChunkSeriesSet",
      "File": "tsdb/querier.go",
      "Line": 1104,
      "Receiver": ""
    },
    "NewBlockQuerier": {
      "Name": "NewBlockQuerier",
      "File": "tsdb/querier.go",
      "Line": 109,
      "Receiver": ""
    },
    "NewBlockWriter": {
      "Name": "NewBlockWriter",
      "File": "tsdb/blockwriter.go",
      "Line": 52,
      "Receiver": ""
    },
    "NewBuffer": {
      "Name": "NewBuffer",
      "File": "storage/buffer.go",
      "Line": 41,
      "Receiver": ""
    },
    "NewBufferIterator": {
      "Name": "NewBufferIterator",
      "File": "storage/buffer.go",
      "Line": 47,
      "Receiver": ""
    },
    "NewBufioWriterWithSeek": {
      "Name": "NewBufioWriterWithSeek",
      "File": "tsdb/fileutil/direct_io_unsupported.go",
      "Line": 23,
      "Receiver": ""
    },
    "NewBuilder": {
      "Name": "NewBuilder",
      "File": "model/labels/labels_common.go",
      "Line": 147,
      "Receiver": ""
    },
    "NewBuilderWithSymbolTable": {
      "Name": "NewBuilderWithSymbolTable",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 670,
      "Receiver": ""
    },
    "NewCallbackCloser": {
      "Name": "NewCallbackCloser",
      "File": "util/testutil/directory.go",
      "Line": 89,
      "Receiver": ""
    },
    "NewChunkDiskMapper": {
      "Name": "NewChunkDiskMapper",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 244,
      "Receiver": ""
    },
    "NewChunkedReader": {
      "Name": "NewChunkedReader",
      "File": "storage/remote/chunked.go",
      "Line": 101,
      "Receiver": ""
    },
    "NewChunkedSeriesSet": {
      "Name": "NewChunkedSeriesSet",
      "File": "storage/remote/codec.go",
      "Line": 555,
      "Receiver": ""
    },
    "NewChunkedWriter": {
      "Name": "NewChunkedWriter",
      "File": "storage/remote/chunked.go",
      "Line": 48,
      "Receiver": ""
    },
    "NewCircularExemplarStorage": {
      "Name": "NewCircularExemplarStorage",
      "File": "tsdb/exemplar.go",
      "Line": 119,
      "Receiver": ""
    },
    "NewClient": {
      "Name": "NewClient",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/opentsdb/client.go",
      "Line": 45,
      "Receiver": ""
    },
    "NewCompactingChunkSeriesMerger": {
      "Name": "NewCompactingChunkSeriesMerger",
      "File": "storage/merge.go",
      "Line": 720,
      "Receiver": ""
    },
    "NewCompactorMetrics": {
      "Name": "NewCompactorMetrics",
      "File": "tsdb/compact.go",
      "Line": 106,
      "Receiver": ""
    },
    "NewConcatenatingChunkSeriesMerger": {
      "Name": "NewConcatenatingChunkSeriesMerger",
      "File": "storage/merge.go",
      "Line": 863,
      "Receiver": ""
    },
    "NewConcurrentDecodeBuffer": {
      "Name": "NewConcurrentDecodeBuffer",
      "File": "util/compression/buffers.go",
      "Line": 126,
      "Receiver": ""
    },
    "NewConcurrentEncodeBuffer": {
      "Name": "NewConcurrentEncodeBuffer",
      "File": "util/compression/buffers.go",
      "Line": 64,
      "Receiver": ""
    },
    "NewDBStats": {
      "Name": "NewDBStats",
      "File": "tsdb/db.go",
      "Line": 419,
      "Receiver": ""
    },
    "NewDecbufAt": {
      "Name": "NewDecbufAt",
      "File": "tsdb/encoding/encoding.go",
      "Line": 119,
      "Receiver": ""
    },
    "NewDecbufRaw": {
      "Name": "NewDecbufRaw",
      "File": "tsdb/encoding/encoding.go",
      "Line": 173,
      "Receiver": ""
    },
    "NewDecbufUvarintAt": {
      "Name": "NewDecbufUvarintAt",
      "File": "tsdb/encoding/encoding.go",
      "Line": 145,
      "Receiver": ""
    },
    "NewDecoder": {
      "Name": "NewDecoder",
      "File": "tsdb/record/record.go",
      "Line": 207,
      "Receiver": ""
    },
    "NewDirLocker": {
      "Name": "NewDirLocker",
      "File": "tsdb/tsdbutil/dir_locker.go",
      "Line": 45,
      "Receiver": ""
    },
    "NewDirReader": {
      "Name": "NewDirReader",
      "File": "tsdb/chunks/chunks.go",
      "Line": 652,
      "Receiver": ""
    },
    "NewDirectIOWriter": {
      "Name": "NewDirectIOWriter",
      "File": "tsdb/fileutil/direct_io_unsupported.go",
      "Line": 27,
      "Receiver": ""
    },
    "NewDiscovery": {
      "Name": "NewDiscovery",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 165,
      "Receiver": ""
    },
    "NewDockerDiscovery": {
      "Name": "NewDockerDiscovery",
      "File": "discovery/moby/docker.go",
      "Line": 132,
      "Receiver": ""
    },
    "NewDuplicateFloatErr": {
      "Name": "NewDuplicateFloatErr",
      "File": "storage/errors.go",
      "Line": 25,
      "Receiver": ""
    },
    "NewDuplicateHistogramToFloatErr": {
      "Name": "NewDuplicateHistogramToFloatErr",
      "File": "storage/errors.go",
      "Line": 34,
      "Receiver": ""
    },
    "NewEC2Discovery": {
      "Name": "NewEC2Discovery",
      "File": "discovery/aws/ec2.go",
      "Line": 161,
      "Receiver": ""
    },
    "NewEmptyChunk": {
      "Name": "NewEmptyChunk",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 369,
      "Receiver": ""
    },
    "NewEndpointSlice": {
      "Name": "NewEndpointSlice",
      "File": "discovery/kubernetes/endpointslice.go",
      "Line": 55,
      "Receiver": ""
    },
    "NewEndpoints": {
      "Name": "NewEndpoints",
      "File": "discovery/kubernetes/endpoints.go",
      "Line": 53,
      "Receiver": ""
    },
    "NewEngine": {
      "Name": "NewEngine",
      "File": "promql/engine.go",
      "Line": 348,
      "Receiver": ""
    },
    "NewExemplarMetrics": {
      "Name": "NewExemplarMetrics",
      "File": "tsdb/exemplar.go",
      "Line": 70,
      "Receiver": ""
    },
    "NewFanout": {
      "Name": "NewFanout",
      "File": "storage/fanout.go",
      "Line": 45,
      "Receiver": ""
    },
    "NewFastRegexMatcher": {
      "Name": "NewFastRegexMatcher",
      "File": "model/labels/regexp.go",
      "Line": 53,
      "Receiver": ""
    },
    "NewFileReader": {
      "Name": "NewFileReader",
      "File": "tsdb/index/index.go",
      "Line": 1149,
      "Receiver": ""
    },
    "NewFileWriter": {
      "Name": "NewFileWriter",
      "File": "tsdb/index/index.go",
      "Line": 279,
      "Receiver": ""
    },
    "NewFloatHistogramChunk": {
      "Name": "NewFloatHistogramChunk",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 43,
      "Receiver": ""
    },
    "NewForBenchmark": {
      "Name": "NewForBenchmark",
      "File": "model/labels/labels_test.go",
      "Line": 590,
      "Receiver": ""
    },
    "NewGroup": {
      "Name": "NewGroup",
      "File": "rules/group.go",
      "Line": 98,
      "Receiver": ""
    },
    "NewGroupMetrics": {
      "Name": "NewGroupMetrics",
      "File": "rules/group.go",
      "Line": 931,
      "Receiver": ""
    },
    "NewHTTPResourceClient": {
      "Name": "NewHTTPResourceClient",
      "File": "discovery/xds/client.go",
      "Line": 91,
      "Receiver": ""
    },
    "NewHashRatioSampler": {
      "Name": "NewHashRatioSampler",
      "File": "promql/engine.go",
      "Line": 3925,
      "Receiver": ""
    },
    "NewHead": {
      "Name": "NewHead",
      "File": "tsdb/head.go",
      "Line": 231,
      "Receiver": ""
    },
    "NewHeadAndOOOChunkQuerier": {
      "Name": "NewHeadAndOOOChunkQuerier",
      "File": "tsdb/ooo_head_read.go",
      "Line": 576,
      "Receiver": ""
    },
    "NewHeadAndOOOChunkReader": {
      "Name": "NewHeadAndOOOChunkReader",
      "File": "tsdb/ooo_head_read.go",
      "Line": 217,
      "Receiver": ""
    },
    "NewHeadAndOOOIndexReader": {
      "Name": "NewHeadAndOOOIndexReader",
      "File": "tsdb/ooo_head_read.go",
      "Line": 53,
      "Receiver": ""
    },
    "NewHeadAndOOOQuerier": {
      "Name": "NewHeadAndOOOQuerier",
      "File": "tsdb/ooo_head_read.go",
      "Line": 524,
      "Receiver": ""
    },
    "NewHeadChunkRef": {
      "Name": "NewHeadChunkRef",
      "File": "tsdb/chunks/chunks.go",
      "Line": 65,
      "Receiver": ""
    },
    "NewHeadStats": {
      "Name": "NewHeadStats",
      "File": "tsdb/head.go",
      "Line": 611,
      "Receiver": ""
    },
    "NewHistogramChunk": {
      "Name": "NewHistogramChunk",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 44,
      "Receiver": ""
    },
    "NewHistogramIgnoredInAggregationInfo": {
      "Name": "NewHistogramIgnoredInAggregationInfo",
      "File": "util/annotations/annotations.go",
      "Line": 306,
      "Receiver": ""
    },
    "NewHistogramIgnoredInMixedRangeInfo": {
      "Name": "NewHistogramIgnoredInMixedRangeInfo",
      "File": "util/annotations/annotations.go",
      "Line": 315,
      "Receiver": ""
    },
    "NewHistogramQuantileForcedMonotonicityInfo": {
      "Name": "NewHistogramQuantileForcedMonotonicityInfo",
      "File": "util/annotations/annotations.go",
      "Line": 288,
      "Receiver": ""
    },
    "NewHistogramStatsIterator": {
      "Name": "NewHistogramStatsIterator",
      "File": "promql/histogram_stats_iterator.go",
      "Line": 39,
      "Receiver": ""
    },
    "NewIncompatibleBucketLayoutInBinOpWarning": {
      "Name": "NewIncompatibleBucketLayoutInBinOpWarning",
      "File": "util/annotations/annotations.go",
      "Line": 324,
      "Receiver": ""
    },
    "NewIncompatibleCustomBucketsHistogramsWarning": {
      "Name": "NewIncompatibleCustomBucketsHistogramsWarning",
      "File": "util/annotations/annotations.go",
      "Line": 261,
      "Receiver": ""
    },
    "NewIncompatibleTypesInBinOpInfo": {
      "Name": "NewIncompatibleTypesInBinOpInfo",
      "File": "util/annotations/annotations.go",
      "Line": 297,
      "Receiver": ""
    },
    "NewIngress": {
      "Name": "NewIngress",
      "File": "discovery/kubernetes/ingress.go",
      "Line": 41,
      "Receiver": ""
    },
    "NewInvalidQuantileWarning": {
      "Name": "NewInvalidQuantileWarning",
      "File": "util/annotations/annotations.go",
      "Line": 179,
      "Receiver": ""
    },
    "NewInvalidRatioWarning": {
      "Name": "NewInvalidRatioWarning",
      "File": "util/annotations/annotations.go",
      "Line": 188,
      "Receiver": ""
    },
    "NewJSONFileLogger": {
      "Name": "NewJSONFileLogger",
      "File": "util/logging/file.go",
      "Line": 38,
      "Receiver": ""
    },
    "NewKumaHTTPDiscovery": {
      "Name": "NewKumaHTTPDiscovery",
      "File": "discovery/xds/kuma.go",
      "Line": 162,
      "Receiver": ""
    },
    "NewLazyLoader": {
      "Name": "NewLazyLoader",
      "File": "promql/promqltest/test.go",
      "Line": 1514,
      "Receiver": ""
    },
    "NewLeveledCompactor": {
      "Name": "NewLeveledCompactor",
      "File": "tsdb/compact.go",
      "Line": 185,
      "Receiver": ""
    },
    "NewLeveledCompactorWithOptions": {
      "Name": "NewLeveledCompactorWithOptions",
      "File": "tsdb/compact.go",
      "Line": 192,
      "Receiver": ""
    },
    "NewLightsailDiscovery": {
      "Name": "NewLightsailDiscovery",
      "File": "discovery/aws/lightsail.go",
      "Line": 135,
      "Receiver": ""
    },
    "NewListChunkSeriesFromSamples": {
      "Name": "NewListChunkSeriesFromSamples",
      "File": "storage/series.go",
      "Line": 61,
      "Receiver": ""
    },
    "NewListChunkSeriesIterator": {
      "Name": "NewListChunkSeriesIterator",
      "File": "storage/series.go",
      "Line": 208,
      "Receiver": ""
    },
    "NewListPostings": {
      "Name": "NewListPostings",
      "File": "tsdb/index/postings.go",
      "Line": 822,
      "Receiver": ""
    },
    "NewListSeries": {
      "Name": "NewListSeries",
      "File": "storage/series.go",
      "Line": 44,
      "Receiver": ""
    },
    "NewListSeriesIterator": {
      "Name": "NewListSeriesIterator",
      "File": "storage/series.go",
      "Line": 112,
      "Receiver": ""
    },
    "NewListSeriesIteratorWithCopy": {
      "Name": "NewListSeriesIteratorWithCopy",
      "File": "storage/series.go",
      "Line": 178,
      "Receiver": ""
    },
    "NewLiveReader": {
      "Name": "NewLiveReader",
      "File": "tsdb/wlog/live_reader.go",
      "Line": 53,
      "Receiver": ""
    },
    "NewLiveReaderMetrics": {
      "Name": "NewLiveReaderMetrics",
      "File": "tsdb/wlog/live_reader.go",
      "Line": 37,
      "Receiver": ""
    },
    "NewManager": {
      "Name": "NewManager",
      "File": "tracing/tracing.go",
      "Line": 52,
      "Receiver": ""
    },
    "NewManagerMetrics": {
      "Name": "NewManagerMetrics",
      "File": "discovery/metrics.go",
      "Line": 31,
      "Receiver": ""
    },
    "NewMatcher": {
      "Name": "NewMatcher",
      "File": "model/labels/matcher.go",
      "Line": 56,
      "Receiver": ""
    },
    "NewMemPostings": {
      "Name": "NewMemPostings",
      "File": "tsdb/index/postings.go",
      "Line": 84,
      "Receiver": ""
    },
    "NewMemTombstones": {
      "Name": "NewMemTombstones",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 237,
      "Receiver": ""
    },
    "NewMemoizedEmptyIterator": {
      "Name": "NewMemoizedEmptyIterator",
      "File": "storage/memoized_iterator.go",
      "Line": 41,
      "Receiver": ""
    },
    "NewMemoizedIterator": {
      "Name": "NewMemoizedIterator",
      "File": "storage/memoized_iterator.go",
      "Line": 47,
      "Receiver": ""
    },
    "NewMergeChunkQuerier": {
      "Name": "NewMergeChunkQuerier",
      "File": "storage/merge.go",
      "Line": 91,
      "Receiver": ""
    },
    "NewMergeChunkSeriesSet": {
      "Name": "NewMergeChunkSeriesSet",
      "File": "storage/merge.go",
      "Line": 312,
      "Receiver": ""
    },
    "NewMergeQuerier": {
      "Name": "NewMergeQuerier",
      "File": "storage/merge.go",
      "Line": 46,
      "Receiver": ""
    },
    "NewMergeSeriesSet": {
      "Name": "NewMergeSeriesSet",
      "File": "storage/merge.go",
      "Line": 297,
      "Receiver": ""
    },
    "NewMergedStringIter": {
      "Name": "NewMergedStringIter",
      "File": "tsdb/querier.go",
      "Line": 1129,
      "Receiver": ""
    },
    "NewMetadataFromLabels": {
      "Name": "NewMetadataFromLabels",
      "File": "schema/labels.go",
      "Line": 80,
      "Receiver": ""
    },
    "NewMetadataWatcher": {
      "Name": "NewMetadataWatcher",
      "File": "storage/remote/metadata_watcher.go",
      "Line": 65,
      "Receiver": ""
    },
    "NewMetricRegisterer": {
      "Name": "NewMetricRegisterer",
      "File": "discovery/util.go",
      "Line": 39,
      "Receiver": ""
    },
    "NewMetricStreamingDecoder": {
      "Name": "NewMetricStreamingDecoder",
      "File": "prompb/io/prometheus/client/decoder.go",
      "Line": 54,
      "Receiver": ""
    },
    "NewMixedClassicNativeHistogramsWarning": {
      "Name": "NewMixedClassicNativeHistogramsWarning",
      "File": "util/annotations/annotations.go",
      "Line": 225,
      "Receiver": ""
    },
    "NewMixedExponentialCustomHistogramsWarning": {
      "Name": "NewMixedExponentialCustomHistogramsWarning",
      "File": "util/annotations/annotations.go",
      "Line": 252,
      "Receiver": ""
    },
    "NewMixedFloatsHistogramsAggWarning": {
      "Name": "NewMixedFloatsHistogramsAggWarning",
      "File": "util/annotations/annotations.go",
      "Line": 216,
      "Receiver": ""
    },
    "NewMixedFloatsHistogramsWarning": {
      "Name": "NewMixedFloatsHistogramsWarning",
      "File": "util/annotations/annotations.go",
      "Line": 207,
      "Receiver": ""
    },
    "NewMockChunkSeriesSet": {
      "Name": "NewMockChunkSeriesSet",
      "File": "storage/merge_test.go",
      "Line": 1042,
      "Receiver": ""
    },
    "NewMockSeriesSet": {
      "Name": "NewMockSeriesSet",
      "File": "storage/merge_test.go",
      "Line": 1016,
      "Receiver": ""
    },
    "NewMulti": {
      "Name": "NewMulti",
      "File": "tsdb/errors/errors.go",
      "Line": 28,
      "Receiver": ""
    },
    "NewNHCBParser": {
      "Name": "NewNHCBParser",
      "File": "model/textparse/nhcbparse.go",
      "Line": 107,
      "Receiver": ""
    },
    "NewNativeHistogramFractionNaNsInfo": {
      "Name": "NewNativeHistogramFractionNaNsInfo",
      "File": "util/annotations/annotations.go",
      "Line": 345,
      "Receiver": ""
    },
    "NewNativeHistogramNotCounterWarning": {
      "Name": "NewNativeHistogramNotCounterWarning",
      "File": "util/annotations/annotations.go",
      "Line": 234,
      "Receiver": ""
    },
    "NewNativeHistogramNotGaugeWarning": {
      "Name": "NewNativeHistogramNotGaugeWarning",
      "File": "util/annotations/annotations.go",
      "Line": 243,
      "Receiver": ""
    },
    "NewNativeHistogramQuantileNaNResultInfo": {
      "Name": "NewNativeHistogramQuantileNaNResultInfo",
      "File": "util/annotations/annotations.go",
      "Line": 331,
      "Receiver": ""
    },
    "NewNativeHistogramQuantileNaNSkewInfo": {
      "Name": "NewNativeHistogramQuantileNaNSkewInfo",
      "File": "util/annotations/annotations.go",
      "Line": 338,
      "Receiver": ""
    },
    "NewNerveDiscovery": {
      "Name": "NewNerveDiscovery",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 154,
      "Receiver": ""
    },
    "NewNode": {
      "Name": "NewNode",
      "File": "discovery/kubernetes/node.go",
      "Line": 48,
      "Receiver": ""
    },
    "NewNopIterator": {
      "Name": "NewNopIterator",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 255,
      "Receiver": ""
    },
    "NewNopWriteClient": {
      "Name": "NewNopWriteClient",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1271,
      "Receiver": ""
    },
    "NewNotifications": {
      "Name": "NewNotifications",
      "File": "util/notifications/notifications.go",
      "Line": 50,
      "Receiver": ""
    },
    "NewOOOChunk": {
      "Name": "NewOOOChunk",
      "File": "tsdb/ooo_head.go",
      "Line": 31,
      "Receiver": ""
    },
    "NewOOOCompactionHead": {
      "Name": "NewOOOCompactionHead",
      "File": "tsdb/ooo_head_read.go",
      "Line": 306,
      "Receiver": ""
    },
    "NewOOOCompactionHeadIndexReader": {
      "Name": "NewOOOCompactionHeadIndexReader",
      "File": "tsdb/ooo_head_read.go",
      "Line": 432,
      "Receiver": ""
    },
    "NewOTLPWriteHandler": {
      "Name": "NewOTLPWriteHandler",
      "File": "storage/remote/write_handler.go",
      "Line": 540,
      "Receiver": ""
    },
    "NewOpenMetricsParser": {
      "Name": "NewOpenMetricsParser",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 146,
      "Receiver": ""
    },
    "NewOriginContext": {
      "Name": "NewOriginContext",
      "File": "rules/origin.go",
      "Line": 69,
      "Receiver": ""
    },
    "NewParser": {
      "Name": "NewParser",
      "File": "promql/parser/parse.go",
      "Line": 85,
      "Receiver": ""
    },
    "NewPod": {
      "Name": "NewPod",
      "File": "discovery/kubernetes/pod.go",
      "Line": 52,
      "Receiver": ""
    },
    "NewPool": {
      "Name": "NewPool",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 288,
      "Receiver": ""
    },
    "NewPossibleNonCounterInfo": {
      "Name": "NewPossibleNonCounterInfo",
      "File": "util/annotations/annotations.go",
      "Line": 270,
      "Receiver": ""
    },
    "NewPossibleNonCounterLabelInfo": {
      "Name": "NewPossibleNonCounterLabelInfo",
      "File": "util/annotations/annotations.go",
      "Line": 279,
      "Receiver": ""
    },
    "NewPromParser": {
      "Name": "NewPromParser",
      "File": "model/textparse/promparse.go",
      "Line": 172,
      "Receiver": ""
    },
    "NewPrometheusConverter": {
      "Name": "NewPrometheusConverter",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw.go",
      "Line": 67,
      "Receiver": ""
    },
    "NewPrometheusQueryOpts": {
      "Name": "NewPrometheusQueryOpts",
      "File": "promql/engine.go",
      "Line": 158,
      "Receiver": ""
    },
    "NewPromoteResourceAttributes": {
      "Name": "NewPromoteResourceAttributes",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw.go",
      "Line": 340,
      "Receiver": ""
    },
    "NewProtobufParser": {
      "Name": "NewProtobufParser",
      "File": "model/textparse/protobufparse.go",
      "Line": 86,
      "Receiver": ""
    },
    "NewQuerySamples": {
      "Name": "NewQuerySamples",
      "File": "util/stats/query_stats.go",
      "Line": 321,
      "Receiver": ""
    },
    "NewQueryStats": {
      "Name": "NewQueryStats",
      "File": "util/stats/query_stats.go",
      "Line": 129,
      "Receiver": ""
    },
    "NewQueryTimers": {
      "Name": "NewQueryTimers",
      "File": "util/stats/query_stats.go",
      "Line": 317,
      "Receiver": ""
    },
    "NewQueueManager": {
      "Name": "NewQueueManager",
      "File": "storage/remote/queue_manager.go",
      "Line": 453,
      "Receiver": ""
    },
    "NewRangeHead": {
      "Name": "NewRangeHead",
      "File": "tsdb/head.go",
      "Line": 1469,
      "Receiver": ""
    },
    "NewRangeHeadWithIsolationDisabled": {
      "Name": "NewRangeHeadWithIsolationDisabled",
      "File": "tsdb/head.go",
      "Line": 1478,
      "Receiver": ""
    },
    "NewReadClient": {
      "Name": "NewReadClient",
      "File": "storage/remote/client.go",
      "Line": 148,
      "Receiver": ""
    },
    "NewReadHandler": {
      "Name": "NewReadHandler",
      "File": "storage/remote/read_handler.go",
      "Line": 48,
      "Receiver": ""
    },
    "NewReader": {
      "Name": "NewReader",
      "File": "tsdb/wlog/reader.go",
      "Line": 41,
      "Receiver": ""
    },
    "NewRecordingRule": {
      "Name": "NewRecordingRule",
      "File": "rules/recording.go",
      "Line": 53,
      "Receiver": ""
    },
    "NewRefreshMetrics": {
      "Name": "NewRefreshMetrics",
      "File": "discovery/metrics_refresh.go",
      "Line": 32,
      "Receiver": ""
    },
    "NewRegexp": {
      "Name": "NewRegexp",
      "File": "model/relabel/relabel.go",
      "Line": 183,
      "Receiver": ""
    },
    "NewRoundTripCheckRequest": {
      "Name": "NewRoundTripCheckRequest",
      "File": "util/testutil/roundtrip.go",
      "Line": 41,
      "Receiver": ""
    },
    "NewRoundTripper": {
      "Name": "NewRoundTripper",
      "File": "storage/remote/googleiam/googleiam.go",
      "Line": 34,
      "Receiver": ""
    },
    "NewRuleDetail": {
      "Name": "NewRuleDetail",
      "File": "rules/origin.go",
      "Line": 47,
      "Receiver": ""
    },
    "NewSDMock": {
      "Name": "NewSDMock",
      "File": "discovery/vultr/mock_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "NewSampleAndChunkQueryableClient": {
      "Name": "NewSampleAndChunkQueryableClient",
      "File": "storage/remote/read.go",
      "Line": 35,
      "Receiver": ""
    },
    "NewScratchBuilder": {
      "Name": "NewScratchBuilder",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 606,
      "Receiver": ""
    },
    "NewScratchBuilderWithSymbolTable": {
      "Name": "NewScratchBuilderWithSymbolTable",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 675,
      "Receiver": ""
    },
    "NewSegmentBufReader": {
      "Name": "NewSegmentBufReader",
      "File": "tsdb/wlog/wlog.go",
      "Line": 968,
      "Receiver": ""
    },
    "NewSegmentBufReaderWithOffset": {
      "Name": "NewSegmentBufReaderWithOffset",
      "File": "tsdb/wlog/wlog.go",
      "Line": 979,
      "Receiver": ""
    },
    "NewSegmentsRangeReader": {
      "Name": "NewSegmentsRangeReader",
      "File": "tsdb/wlog/wlog.go",
      "Line": 930,
      "Receiver": ""
    },
    "NewSegmentsReader": {
      "Name": "NewSegmentsReader",
      "File": "tsdb/wlog/wlog.go",
      "Line": 924,
      "Receiver": ""
    },
    "NewSeriesSetFromChunkSeriesSet": {
      "Name": "NewSeriesSetFromChunkSeriesSet",
      "File": "storage/series.go",
      "Line": 237,
      "Receiver": ""
    },
    "NewSeriesSetToChunkSet": {
      "Name": "NewSeriesSetToChunkSet",
      "File": "storage/series.go",
      "Line": 290,
      "Receiver": ""
    },
    "NewSeriesToChunkEncoder": {
      "Name": "NewSeriesToChunkEncoder",
      "File": "storage/series.go",
      "Line": 316,
      "Receiver": ""
    },
    "NewServersetDiscovery": {
      "Name": "NewServersetDiscovery",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 159,
      "Receiver": ""
    },
    "NewService": {
      "Name": "NewService",
      "File": "discovery/kubernetes/service.go",
      "Line": 43,
      "Receiver": ""
    },
    "NewSharedSemaphore": {
      "Name": "NewSharedSemaphore",
      "File": "util/netconnlimit/netconnlimit.go",
      "Line": 27,
      "Receiver": ""
    },
    "NewSize": {
      "Name": "NewSize",
      "File": "tsdb/wlog/wlog.go",
      "Line": 300,
      "Receiver": ""
    },
    "NewSpanTimer": {
      "Name": "NewSpanTimer",
      "File": "util/stats/query_stats.go",
      "Line": 198,
      "Receiver": ""
    },
    "NewStorage": {
      "Name": "NewStorage",
      "File": "storage/remote/storage.go",
      "Line": 67,
      "Receiver": ""
    },
    "NewStorageSeries": {
      "Name": "NewStorageSeries",
      "File": "promql/value.go",
      "Line": 406,
      "Receiver": ""
    },
    "NewStringListIter": {
      "Name": "NewStringListIter",
      "File": "tsdb/index/index.go",
      "Line": 1904,
      "Receiver": ""
    },
    "NewSymbolTable": {
      "Name": "NewSymbolTable",
      "File": "prompb/io/prometheus/write/v2/symbols.go",
      "Line": 25,
      "Receiver": ""
    },
    "NewSymbols": {
      "Name": "NewSymbols",
      "File": "tsdb/index/index.go",
      "Line": 1311,
      "Receiver": ""
    },
    "NewSyncDecodeBuffer": {
      "Name": "NewSyncDecodeBuffer",
      "File": "util/compression/buffers.go",
      "Line": 99,
      "Receiver": ""
    },
    "NewSyncEncodeBuffer": {
      "Name": "NewSyncEncodeBuffer",
      "File": "util/compression/buffers.go",
      "Line": 37,
      "Receiver": ""
    },
    "NewTOCFromByteSlice": {
      "Name": "NewTOCFromByteSlice",
      "File": "tsdb/index/index.go",
      "Line": 173,
      "Receiver": ""
    },
    "NewTarget": {
      "Name": "NewTarget",
      "File": "scrape/target.go",
      "Line": 64,
      "Receiver": ""
    },
    "NewTempHistogram": {
      "Name": "NewTempHistogram",
      "File": "util/convertnhcb/convertnhcb.go",
      "Line": 52,
      "Receiver": ""
    },
    "NewTemplateExpander": {
      "Name": "NewTemplateExpander",
      "File": "template/template.go",
      "Line": 119,
      "Receiver": ""
    },
    "NewTemporaryDirectory": {
      "Name": "NewTemporaryDirectory",
      "File": "util/testutil/directory.go",
      "Line": 116,
      "Receiver": ""
    },
    "NewTestBlockedWriteClient": {
      "Name": "NewTestBlockedWriteClient",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1246,
      "Receiver": ""
    },
    "NewTestEngine": {
      "Name": "NewTestEngine",
      "File": "promql/promqltest/test.go",
      "Line": 88,
      "Receiver": ""
    },
    "NewTestEngineWithOpts": {
      "Name": "NewTestEngineWithOpts",
      "File": "promql/promqltest/test.go",
      "Line": 104,
      "Receiver": ""
    },
    "NewTestMemTombstones": {
      "Name": "NewTestMemTombstones",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 241,
      "Receiver": ""
    },
    "NewTestMetrics": {
      "Name": "NewTestMetrics",
      "File": "discovery/manager_test.go",
      "Line": 40,
      "Receiver": ""
    },
    "NewTestWriteClient": {
      "Name": "NewTestWriteClient",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 977,
      "Receiver": ""
    },
    "NewTimerGroup": {
      "Name": "NewTimerGroup",
      "File": "util/stats/timer.go",
      "Line": 64,
      "Receiver": ""
    },
    "NewTimestampCollector": {
      "Name": "NewTimestampCollector",
      "File": "discovery/file/file.go",
      "Line": 152,
      "Receiver": ""
    },
    "NewUnorderedMemPostings": {
      "Name": "NewUnorderedMemPostings",
      "File": "tsdb/index/postings.go",
      "Line": 94,
      "Receiver": ""
    },
    "NewWatcher": {
      "Name": "NewWatcher",
      "File": "tsdb/wlog/watcher.go",
      "Line": 175,
      "Receiver": ""
    },
    "NewWatcherMetrics": {
      "Name": "NewWatcherMetrics",
      "File": "tsdb/wlog/watcher.go",
      "Line": 114,
      "Receiver": ""
    },
    "NewWithError": {
      "Name": "NewWithError",
      "File": "util/teststorage/storage.go",
      "Line": 41,
      "Receiver": ""
    },
    "NewWriteClient": {
      "Name": "NewWriteClient",
      "File": "storage/remote/client.go",
      "Line": 173,
      "Receiver": ""
    },
    "NewWriteHandler": {
      "Name": "NewWriteHandler",
      "File": "storage/remote/write_handler.go",
      "Line": 68,
      "Receiver": ""
    },
    "NewWriteStorage": {
      "Name": "NewWriteStorage",
      "File": "storage/remote/write.go",
      "Line": 80,
      "Receiver": ""
    },
    "NewWriter": {
      "Name": "NewWriter",
      "File": "tsdb/index/index.go",
      "Line": 256,
      "Receiver": ""
    },
    "NewWriterWithEncoder": {
      "Name": "NewWriterWithEncoder",
      "File": "tsdb/index/index.go",
      "Line": 200,
      "Receiver": ""
    },
    "NewXORChunk": {
      "Name": "NewXORChunk",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 64,
      "Receiver": ""
    },
    "NewZookeeperLogger": {
      "Name": "NewZookeeperLogger",
      "File": "util/treecache/treecache.go",
      "Line": 55,
      "Receiver": ""
    },
    "NewZookeeperTreeCache": {
      "Name": "NewZookeeperTreeCache",
      "File": "util/treecache/treecache.go",
      "Line": 92,
      "Receiver": ""
    },
    "Node.Run": {
      "Name": "Node.Run",
      "File": "discovery/kubernetes/node.go",
      "Line": 94,
      "Receiver": "Node"
    },
    "Node.buildNode": {
      "Name": "Node.buildNode",
      "File": "discovery/kubernetes/node.go",
      "Line": 176,
      "Receiver": "Node"
    },
    "Node.enqueue": {
      "Name": "Node.enqueue",
      "File": "discovery/kubernetes/node.go",
      "Line": 84,
      "Receiver": "Node"
    },
    "Node.hasSynced": {
      "Name": "Node.hasSynced",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 250,
      "Receiver": "Node"
    },
    "Node.process": {
      "Name": "Node.process",
      "File": "discovery/kubernetes/node.go",
      "Line": 113,
      "Receiver": "Node"
    },
    "NomadSDTestSuite.SetupTest": {
      "Name": "NomadSDTestSuite.SetupTest",
      "File": "discovery/nomad/nomad_test.go",
      "Line": 70,
      "Receiver": "NomadSDTestSuite"
    },
    "NomadSDTestSuite.TearDownSuite": {
      "Name": "NomadSDTestSuite.TearDownSuite",
      "File": "discovery/nomad/nomad_test.go",
      "Line": 66,
      "Receiver": "NomadSDTestSuite"
    },
    "NoopChunkedQuerier": {
      "Name": "NoopChunkedQuerier",
      "File": "storage/noop.go",
      "Line": 49,
      "Receiver": ""
    },
    "NoopChunkedSeriesSet": {
      "Name": "NoopChunkedSeriesSet",
      "File": "storage/noop.go",
      "Line": 87,
      "Receiver": ""
    },
    "NoopDiscovererMetrics.Register": {
      "Name": "NoopDiscovererMetrics.Register",
      "File": "discovery/discoverer_metrics_noop.go",
      "Line": 22,
      "Receiver": "NoopDiscovererMetrics"
    },
    "NoopDiscovererMetrics.Unregister": {
      "Name": "NoopDiscovererMetrics.Unregister",
      "File": "discovery/discoverer_metrics_noop.go",
      "Line": 27,
      "Receiver": "NoopDiscovererMetrics"
    },
    "NoopQuerier": {
      "Name": "NoopQuerier",
      "File": "storage/noop.go",
      "Line": 26,
      "Receiver": ""
    },
    "NoopSeriesSet": {
      "Name": "NoopSeriesSet",
      "File": "storage/noop.go",
      "Line": 72,
      "Receiver": ""
    },
    "NopWriteClient.Endpoint": {
      "Name": "NopWriteClient.Endpoint",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1276,
      "Receiver": "NopWriteClient"
    },
    "NopWriteClient.Name": {
      "Name": "NopWriteClient.Name",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1275,
      "Receiver": "NopWriteClient"
    },
    "NopWriteClient.Store": {
      "Name": "NopWriteClient.Store",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1272,
      "Receiver": "NopWriteClient"
    },
    "Notifications.AddNotification": {
      "Name": "Notifications.AddNotification",
      "File": "util/notifications/notifications.go",
      "Line": 82,
      "Receiver": "Notifications"
    },
    "Notifications.DeleteNotification": {
      "Name": "Notifications.DeleteNotification",
      "File": "util/notifications/notifications.go",
      "Line": 122,
      "Receiver": "Notifications"
    },
    "Notifications.Get": {
      "Name": "Notifications.Get",
      "File": "util/notifications/notifications.go",
      "Line": 141,
      "Receiver": "Notifications"
    },
    "Notifications.Sub": {
      "Name": "Notifications.Sub",
      "File": "util/notifications/notifications.go",
      "Line": 154,
      "Receiver": "Notifications"
    },
    "Notifications.notifySubscribers": {
      "Name": "Notifications.notifySubscribers",
      "File": "util/notifications/notifications.go",
      "Line": 106,
      "Receiver": "Notifications"
    },
    "NumberLiteral.PositionRange": {
      "Name": "NumberLiteral.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 513,
      "Receiver": "NumberLiteral"
    },
    "NumberLiteral.Pretty": {
      "Name": "NumberLiteral.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 149,
      "Receiver": "NumberLiteral"
    },
    "NumberLiteral.PromQLExpr": {
      "Name": "NumberLiteral.PromQLExpr",
      "File": "promql/parser/ast.go",
      "Line": 269,
      "Receiver": "NumberLiteral"
    },
    "NumberLiteral.String": {
      "Name": "NumberLiteral.String",
      "File": "promql/parser/printer.go",
      "Line": 286,
      "Receiver": "NumberLiteral"
    },
    "NumberLiteral.Type": {
      "Name": "NumberLiteral.Type",
      "File": "promql/parser/ast.go",
      "Line": 250,
      "Receiver": "NumberLiteral"
    },
    "OOOChunk.Insert": {
      "Name": "OOOChunk.Insert",
      "File": "tsdb/ooo_head.go",
      "Line": 37,
      "Receiver": "OOOChunk"
    },
    "OOOChunk.NumSamples": {
      "Name": "OOOChunk.NumSamples",
      "File": "tsdb/ooo_head.go",
      "Line": 69,
      "Receiver": "OOOChunk"
    },
    "OOOChunk.ToEncodedChunks": {
      "Name": "OOOChunk.ToEncodedChunks",
      "File": "tsdb/ooo_head.go",
      "Line": 76,
      "Receiver": "OOOChunk"
    },
    "OOOCompactionHead.ChunkRange": {
      "Name": "OOOCompactionHead.ChunkRange",
      "File": "tsdb/ooo_head_read.go",
      "Line": 424,
      "Receiver": "OOOCompactionHead"
    },
    "OOOCompactionHead.Chunks": {
      "Name": "OOOCompactionHead.Chunks",
      "File": "tsdb/ooo_head_read.go",
      "Line": 385,
      "Receiver": "OOOCompactionHead"
    },
    "OOOCompactionHead.CloneForTimeRange": {
      "Name": "OOOCompactionHead.CloneForTimeRange",
      "File": "tsdb/ooo_head_read.go",
      "Line": 410,
      "Receiver": "OOOCompactionHead"
    },
    "OOOCompactionHead.Index": {
      "Name": "OOOCompactionHead.Index",
      "File": "tsdb/ooo_head_read.go",
      "Line": 381,
      "Receiver": "OOOCompactionHead"
    },
    "OOOCompactionHead.LastMmapRef": {
      "Name": "OOOCompactionHead.LastMmapRef",
      "File": "tsdb/ooo_head_read.go",
      "Line": 425,
      "Receiver": "OOOCompactionHead"
    },
    "OOOCompactionHead.LastWBLFile": {
      "Name": "OOOCompactionHead.LastWBLFile",
      "File": "tsdb/ooo_head_read.go",
      "Line": 426,
      "Receiver": "OOOCompactionHead"
    },
    "OOOCompactionHead.MaxTime": {
      "Name": "OOOCompactionHead.MaxTime",
      "File": "tsdb/ooo_head_read.go",
      "Line": 423,
      "Receiver": "OOOCompactionHead"
    },
    "OOOCompactionHead.Meta": {
      "Name": "OOOCompactionHead.Meta",
      "File": "tsdb/ooo_head_read.go",
      "Line": 395,
      "Receiver": "OOOCompactionHead"
    },
    "OOOCompactionHead.MinTime": {
      "Name": "OOOCompactionHead.MinTime",
      "File": "tsdb/ooo_head_read.go",
      "Line": 422,
      "Receiver": "OOOCompactionHead"
    },
    "OOOCompactionHead.Size": {
      "Name": "OOOCompactionHead.Size",
      "File": "tsdb/ooo_head_read.go",
      "Line": 421,
      "Receiver": "OOOCompactionHead"
    },
    "OOOCompactionHead.Tombstones": {
      "Name": "OOOCompactionHead.Tombstones",
      "File": "tsdb/ooo_head_read.go",
      "Line": 389,
      "Receiver": "OOOCompactionHead"
    },
    "OOOCompactionHeadIndexReader.Close": {
      "Name": "OOOCompactionHeadIndexReader.Close",
      "File": "tsdb/ooo_head_read.go",
      "Line": 511,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OOOCompactionHeadIndexReader.LabelNames": {
      "Name": "OOOCompactionHeadIndexReader.LabelNames",
      "File": "tsdb/ooo_head_read.go",
      "Line": 499,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OOOCompactionHeadIndexReader.LabelNamesFor": {
      "Name": "OOOCompactionHeadIndexReader.LabelNamesFor",
      "File": "tsdb/ooo_head_read.go",
      "Line": 507,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OOOCompactionHeadIndexReader.LabelValueFor": {
      "Name": "OOOCompactionHeadIndexReader.LabelValueFor",
      "File": "tsdb/ooo_head_read.go",
      "Line": 503,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OOOCompactionHeadIndexReader.LabelValues": {
      "Name": "OOOCompactionHeadIndexReader.LabelValues",
      "File": "tsdb/ooo_head_read.go",
      "Line": 491,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OOOCompactionHeadIndexReader.Postings": {
      "Name": "OOOCompactionHeadIndexReader.Postings",
      "File": "tsdb/ooo_head_read.go",
      "Line": 441,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OOOCompactionHeadIndexReader.PostingsForAllLabelValues": {
      "Name": "OOOCompactionHeadIndexReader.PostingsForAllLabelValues",
      "File": "tsdb/ooo_head_read.go",
      "Line": 453,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OOOCompactionHeadIndexReader.PostingsForLabelMatching": {
      "Name": "OOOCompactionHeadIndexReader.PostingsForLabelMatching",
      "File": "tsdb/ooo_head_read.go",
      "Line": 449,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OOOCompactionHeadIndexReader.PostingsForMatchers": {
      "Name": "OOOCompactionHeadIndexReader.PostingsForMatchers",
      "File": "tsdb/ooo_head_read.go",
      "Line": 495,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OOOCompactionHeadIndexReader.Series": {
      "Name": "OOOCompactionHeadIndexReader.Series",
      "File": "tsdb/ooo_head_read.go",
      "Line": 467,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OOOCompactionHeadIndexReader.ShardedPostings": {
      "Name": "OOOCompactionHeadIndexReader.ShardedPostings",
      "File": "tsdb/ooo_head_read.go",
      "Line": 462,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OOOCompactionHeadIndexReader.SortedLabelValues": {
      "Name": "OOOCompactionHeadIndexReader.SortedLabelValues",
      "File": "tsdb/ooo_head_read.go",
      "Line": 487,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OOOCompactionHeadIndexReader.SortedPostings": {
      "Name": "OOOCompactionHeadIndexReader.SortedPostings",
      "File": "tsdb/ooo_head_read.go",
      "Line": 457,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OOOCompactionHeadIndexReader.Symbols": {
      "Name": "OOOCompactionHeadIndexReader.Symbols",
      "File": "tsdb/ooo_head_read.go",
      "Line": 436,
      "Receiver": "OOOCompactionHeadIndexReader"
    },
    "OTLPConfig.UnmarshalYAML": {
      "Name": "OTLPConfig.UnmarshalYAML",
      "File": "config/config.go",
      "Line": 1613,
      "Receiver": "OTLPConfig"
    },
    "Open": {
      "Name": "Open",
      "File": "tsdb/wlog/wlog.go",
      "Line": 354,
      "Receiver": ""
    },
    "OpenBlock": {
      "Name": "OpenBlock",
      "File": "tsdb/block.go",
      "Line": 329,
      "Receiver": ""
    },
    "OpenDBReadOnly": {
      "Name": "OpenDBReadOnly",
      "File": "tsdb/db.go",
      "Line": 440,
      "Receiver": ""
    },
    "OpenDir": {
      "Name": "OpenDir",
      "File": "tsdb/fileutil/dir_windows.go",
      "Line": 25,
      "Receiver": ""
    },
    "OpenMetricsParser.Comment": {
      "Name": "OpenMetricsParser.Comment",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 210,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.CreatedTimestamp": {
      "Name": "OpenMetricsParser.CreatedTimestamp",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 290,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.Exemplar": {
      "Name": "OpenMetricsParser.Exemplar",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 255,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.Help": {
      "Name": "OpenMetricsParser.Help",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 182,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.Histogram": {
      "Name": "OpenMetricsParser.Histogram",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 175,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.Labels": {
      "Name": "OpenMetricsParser.Labels",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 215,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.Next": {
      "Name": "OpenMetricsParser.Next",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 448,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.Series": {
      "Name": "OpenMetricsParser.Series",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 165,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.Type": {
      "Name": "OpenMetricsParser.Type",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 196,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.Unit": {
      "Name": "OpenMetricsParser.Unit",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 203,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.getFloatValue": {
      "Name": "OpenMetricsParser.getFloatValue",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 758,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.isCreatedSeries": {
      "Name": "OpenMetricsParser.isCreatedSeries",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 700,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.nextToken": {
      "Name": "OpenMetricsParser.nextToken",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 433,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.parseComment": {
      "Name": "OpenMetricsParser.parseComment",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 581,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.parseError": {
      "Name": "OpenMetricsParser.parseError",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 438,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.parseLVals": {
      "Name": "OpenMetricsParser.parseLVals",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 635,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.parseSeriesEndOfLine": {
      "Name": "OpenMetricsParser.parseSeriesEndOfLine",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 712,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.resetCTParseValues": {
      "Name": "OpenMetricsParser.resetCTParseValues",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 417,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.seriesHash": {
      "Name": "OpenMetricsParser.seriesHash",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 380,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMetricsParser.setCTParseValues": {
      "Name": "OpenMetricsParser.setCTParseValues",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 409,
      "Receiver": "OpenMetricsParser"
    },
    "OpenMmapFile": {
      "Name": "OpenMmapFile",
      "File": "tsdb/fileutil/mmap.go",
      "Line": 26,
      "Receiver": ""
    },
    "OpenMmapFileWithSize": {
      "Name": "OpenMmapFileWithSize",
      "File": "tsdb/fileutil/mmap.go",
      "Line": 30,
      "Receiver": ""
    },
    "OpenReadSegment": {
      "Name": "OpenReadSegment",
      "File": "tsdb/wlog/wlog.go",
      "Line": 160,
      "Receiver": ""
    },
    "OpenWriteSegment": {
      "Name": "OpenWriteSegment",
      "File": "tsdb/wlog/wlog.go",
      "Line": 124,
      "Receiver": ""
    },
    "OpenstackSDHypervisorTestSuite.SetupTest": {
      "Name": "OpenstackSDHypervisorTestSuite.SetupTest",
      "File": "discovery/openstack/hypervisor_test.go",
      "Line": 28,
      "Receiver": "OpenstackSDHypervisorTestSuite"
    },
    "OpenstackSDHypervisorTestSuite.openstackAuthSuccess": {
      "Name": "OpenstackSDHypervisorTestSuite.openstackAuthSuccess",
      "File": "discovery/openstack/hypervisor_test.go",
      "Line": 37,
      "Receiver": "OpenstackSDHypervisorTestSuite"
    },
    "OpenstackSDInstanceTestSuite.SetupTest": {
      "Name": "OpenstackSDInstanceTestSuite.SetupTest",
      "File": "discovery/openstack/instance_test.go",
      "Line": 29,
      "Receiver": "OpenstackSDInstanceTestSuite"
    },
    "OpenstackSDInstanceTestSuite.openstackAuthSuccess": {
      "Name": "OpenstackSDInstanceTestSuite.openstackAuthSuccess",
      "File": "discovery/openstack/instance_test.go",
      "Line": 41,
      "Receiver": "OpenstackSDInstanceTestSuite"
    },
    "OpenstackSDLoadBalancerTestSuite.SetupTest": {
      "Name": "OpenstackSDLoadBalancerTestSuite.SetupTest",
      "File": "discovery/openstack/loadbalancer_test.go",
      "Line": 29,
      "Receiver": "OpenstackSDLoadBalancerTestSuite"
    },
    "OpenstackSDLoadBalancerTestSuite.openstackAuthSuccess": {
      "Name": "OpenstackSDLoadBalancerTestSuite.openstackAuthSuccess",
      "File": "discovery/openstack/loadbalancer_test.go",
      "Line": 41,
      "Receiver": "OpenstackSDLoadBalancerTestSuite"
    },
    "OverlappingBlocks": {
      "Name": "OverlappingBlocks",
      "File": "tsdb/db.go",
      "Line": 1854,
      "Receiver": ""
    },
    "Overlaps.String": {
      "Name": "Overlaps.String",
      "File": "tsdb/db.go",
      "Line": 1829,
      "Receiver": "Overlaps"
    },
    "Parameters.toLabels": {
      "Name": "Parameters.toLabels",
      "File": "discovery/puppetdb/resources.go",
      "Line": 39,
      "Receiver": "Parameters"
    },
    "ParenExpr.PositionRange": {
      "Name": "ParenExpr.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 517,
      "Receiver": "ParenExpr"
    },
    "ParenExpr.Pretty": {
      "Name": "ParenExpr.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 121,
      "Receiver": "ParenExpr"
    },
    "ParenExpr.PromQLExpr": {
      "Name": "ParenExpr.PromQLExpr",
      "File": "promql/parser/ast.go",
      "Line": 270,
      "Receiver": "ParenExpr"
    },
    "ParenExpr.String": {
      "Name": "ParenExpr.String",
      "File": "promql/parser/printer.go",
      "Line": 296,
      "Receiver": "ParenExpr"
    },
    "ParenExpr.Type": {
      "Name": "ParenExpr.Type",
      "File": "promql/parser/ast.go",
      "Line": 251,
      "Receiver": "ParenExpr"
    },
    "Parse": {
      "Name": "Parse",
      "File": "model/rulefmt/rulefmt.go",
      "Line": 336,
      "Receiver": ""
    },
    "ParseErr.Error": {
      "Name": "ParseErr.Error",
      "File": "promql/parser/parse.go",
      "Line": 143,
      "Receiver": "ParseErr"
    },
    "ParseErrors.Error": {
      "Name": "ParseErrors.Error",
      "File": "promql/parser/parse.go",
      "Line": 153,
      "Receiver": "ParseErrors"
    },
    "ParseExpr": {
      "Name": "ParseExpr",
      "File": "promql/parser/parse.go",
      "Line": 179,
      "Receiver": ""
    },
    "ParseFile": {
      "Name": "ParseFile",
      "File": "model/rulefmt/rulefmt.go",
      "Line": 365,
      "Receiver": ""
    },
    "ParseFiles": {
      "Name": "ParseFiles",
      "File": "rules/manager.go",
      "Line": 585,
      "Receiver": ""
    },
    "ParseMetric": {
      "Name": "ParseMetric",
      "File": "promql/parser/parse.go",
      "Line": 191,
      "Receiver": ""
    },
    "ParseMetricSelector": {
      "Name": "ParseMetricSelector",
      "File": "promql/parser/parse.go",
      "Line": 210,
      "Receiver": ""
    },
    "ParseMetricSelectors": {
      "Name": "ParseMetricSelectors",
      "File": "promql/parser/parse.go",
      "Line": 229,
      "Receiver": ""
    },
    "ParseMigrateMode": {
      "Name": "ParseMigrateMode",
      "File": "promql/promqltest/test_migrate.go",
      "Line": 40,
      "Receiver": ""
    },
    "ParseSeriesDesc": {
      "Name": "ParseSeriesDesc",
      "File": "promql/parser/parse.go",
      "Line": 265,
      "Receiver": ""
    },
    "ParseWriteResponseStats": {
      "Name": "ParseWriteResponseStats",
      "File": "storage/remote/stats.go",
      "Line": 80,
      "Receiver": ""
    },
    "Pod.Run": {
      "Name": "Pod.Run",
      "File": "discovery/kubernetes/pod.go",
      "Line": 123,
      "Receiver": "Pod"
    },
    "Pod.buildPod": {
      "Name": "Pod.buildPod",
      "File": "discovery/kubernetes/pod.go",
      "Line": 258,
      "Receiver": "Pod"
    },
    "Pod.enqueue": {
      "Name": "Pod.enqueue",
      "File": "discovery/kubernetes/pod.go",
      "Line": 113,
      "Receiver": "Pod"
    },
    "Pod.enqueuePodsForNode": {
      "Name": "Pod.enqueuePodsForNode",
      "File": "discovery/kubernetes/pod.go",
      "Line": 318,
      "Receiver": "Pod"
    },
    "Pod.findPodContainerID": {
      "Name": "Pod.findPodContainerID",
      "File": "discovery/kubernetes/pod.go",
      "Line": 249,
      "Receiver": "Pod"
    },
    "Pod.findPodContainerStatus": {
      "Name": "Pod.findPodContainerStatus",
      "File": "discovery/kubernetes/pod.go",
      "Line": 240,
      "Receiver": "Pod"
    },
    "Pod.hasSynced": {
      "Name": "Pod.hasSynced",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 266,
      "Receiver": "Pod"
    },
    "Pod.process": {
      "Name": "Pod.process",
      "File": "discovery/kubernetes/pod.go",
      "Line": 147,
      "Receiver": "Pod"
    },
    "Pool.Get": {
      "Name": "Pool.Get",
      "File": "util/pool/pool.go",
      "Line": 59,
      "Receiver": "Pool"
    },
    "Pool.Put": {
      "Name": "Pool.Put",
      "File": "util/pool/pool.go",
      "Line": 74,
      "Receiver": "Pool"
    },
    "PopulateDiscoveredLabels": {
      "Name": "PopulateDiscoveredLabels",
      "File": "scrape/target.go",
      "Line": 432,
      "Receiver": ""
    },
    "PopulateLabels": {
      "Name": "PopulateLabels",
      "File": "scrape/target.go",
      "Line": 469,
      "Receiver": ""
    },
    "PositionRange.StartPosInput": {
      "Name": "PositionRange.StartPosInput",
      "File": "promql/parser/posrange/posrange.go",
      "Line": 35,
      "Receiver": "PositionRange"
    },
    "PostingsForMatchers": {
      "Name": "PostingsForMatchers",
      "File": "tsdb/querier.go",
      "Line": 195,
      "Receiver": ""
    },
    "Preallocate": {
      "Name": "Preallocate",
      "File": "tsdb/fileutil/preallocate.go",
      "Line": 27,
      "Receiver": ""
    },
    "PreprocessExpr": {
      "Name": "PreprocessExpr",
      "File": "promql/engine.go",
      "Line": 3734,
      "Receiver": ""
    },
    "Prettify": {
      "Name": "Prettify",
      "File": "promql/parser/prettier.go",
      "Line": 46,
      "Receiver": ""
    },
    "Process": {
      "Name": "Process",
      "File": "model/relabel/relabel.go",
      "Line": 260,
      "Receiver": ""
    },
    "ProcessBuilder": {
      "Name": "ProcessBuilder",
      "File": "model/relabel/relabel.go",
      "Line": 270,
      "Receiver": ""
    },
    "PromParser.Comment": {
      "Name": "PromParser.Comment",
      "File": "model/textparse/promparse.go",
      "Line": 226,
      "Receiver": "PromParser"
    },
    "PromParser.CreatedTimestamp": {
      "Name": "PromParser.CreatedTimestamp",
      "File": "model/textparse/promparse.go",
      "Line": 278,
      "Receiver": "PromParser"
    },
    "PromParser.Exemplar": {
      "Name": "PromParser.Exemplar",
      "File": "model/textparse/promparse.go",
      "Line": 272,
      "Receiver": "PromParser"
    },
    "PromParser.Help": {
      "Name": "PromParser.Help",
      "File": "model/textparse/promparse.go",
      "Line": 198,
      "Receiver": "PromParser"
    },
    "PromParser.Histogram": {
      "Name": "PromParser.Histogram",
      "File": "model/textparse/promparse.go",
      "Line": 191,
      "Receiver": "PromParser"
    },
    "PromParser.Labels": {
      "Name": "PromParser.Labels",
      "File": "model/textparse/promparse.go",
      "Line": 231,
      "Receiver": "PromParser"
    },
    "PromParser.Next": {
      "Name": "PromParser.Next",
      "File": "model/textparse/promparse.go",
      "Line": 302,
      "Receiver": "PromParser"
    },
    "PromParser.Series": {
      "Name": "PromParser.Series",
      "File": "model/textparse/promparse.go",
      "Line": 182,
      "Receiver": "PromParser"
    },
    "PromParser.Type": {
      "Name": "PromParser.Type",
      "File": "model/textparse/promparse.go",
      "Line": 211,
      "Receiver": "PromParser"
    },
    "PromParser.Unit": {
      "Name": "PromParser.Unit",
      "File": "model/textparse/promparse.go",
      "Line": 218,
      "Receiver": "PromParser"
    },
    "PromParser.nextToken": {
      "Name": "PromParser.nextToken",
      "File": "model/textparse/promparse.go",
      "Line": 284,
      "Receiver": "PromParser"
    },
    "PromParser.parseError": {
      "Name": "PromParser.parseError",
      "File": "model/textparse/promparse.go",
      "Line": 292,
      "Receiver": "PromParser"
    },
    "PromParser.parseLVals": {
      "Name": "PromParser.parseLVals",
      "File": "model/textparse/promparse.go",
      "Line": 408,
      "Receiver": "PromParser"
    },
    "PromParser.parseMetricSuffix": {
      "Name": "PromParser.parseMetricSuffix",
      "File": "model/textparse/promparse.go",
      "Line": 468,
      "Receiver": "PromParser"
    },
    "PrometheusConverter.FromMetrics": {
      "Name": "PrometheusConverter.FromMetrics",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw.go",
      "Line": 117,
      "Receiver": "PrometheusConverter"
    },
    "PrometheusConverter.Metadata": {
      "Name": "PrometheusConverter.Metadata",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/timeseries.go",
      "Line": 44,
      "Receiver": "PrometheusConverter"
    },
    "PrometheusConverter.TimeSeries": {
      "Name": "PrometheusConverter.TimeSeries",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/timeseries.go",
      "Line": 25,
      "Receiver": "PrometheusConverter"
    },
    "PrometheusConverter.addCustomBucketsHistogramDataPoints": {
      "Name": "PrometheusConverter.addCustomBucketsHistogramDataPoints",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms.go",
      "Line": 255,
      "Receiver": "PrometheusConverter"
    },
    "PrometheusConverter.addExemplars": {
      "Name": "PrometheusConverter.addExemplars",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw.go",
      "Line": 296,
      "Receiver": "PrometheusConverter"
    },
    "PrometheusConverter.addExponentialHistogramDataPoints": {
      "Name": "PrometheusConverter.addExponentialHistogramDataPoints",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms.go",
      "Line": 38,
      "Receiver": "PrometheusConverter"
    },
    "PrometheusConverter.addGaugeNumberDataPoints": {
      "Name": "PrometheusConverter.addGaugeNumberDataPoints",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/number_data_points.go",
      "Line": 31,
      "Receiver": "PrometheusConverter"
    },
    "PrometheusConverter.addHistogramDataPoints": {
      "Name": "PrometheusConverter.addHistogramDataPoints",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 256,
      "Receiver": "PrometheusConverter"
    },
    "PrometheusConverter.addSample": {
      "Name": "PrometheusConverter.addSample",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw.go",
      "Line": 329,
      "Receiver": "PrometheusConverter"
    },
    "PrometheusConverter.addSumNumberDataPoints": {
      "Name": "PrometheusConverter.addSumNumberDataPoints",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/number_data_points.go",
      "Line": 69,
      "Receiver": "PrometheusConverter"
    },
    "PrometheusConverter.addSummaryDataPoints": {
      "Name": "PrometheusConverter.addSummaryDataPoints",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 466,
      "Receiver": "PrometheusConverter"
    },
    "PrometheusConverter.addTimeSeriesIfNeeded": {
      "Name": "PrometheusConverter.addTimeSeriesIfNeeded",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 582,
      "Receiver": "PrometheusConverter"
    },
    "PrometheusConverter.getOrCreateTimeSeries": {
      "Name": "PrometheusConverter.getOrCreateTimeSeries",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 546,
      "Receiver": "PrometheusConverter"
    },
    "PrometheusQueryOpts.EnablePerStepStats": {
      "Name": "PrometheusQueryOpts.EnablePerStepStats",
      "File": "promql/engine.go",
      "Line": 165,
      "Receiver": "PrometheusQueryOpts"
    },
    "PrometheusQueryOpts.LookbackDelta": {
      "Name": "PrometheusQueryOpts.LookbackDelta",
      "File": "promql/engine.go",
      "Line": 169,
      "Receiver": "PrometheusQueryOpts"
    },
    "PromoteResourceAttributes.promotedAttributes": {
      "Name": "PromoteResourceAttributes.promotedAttributes",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw.go",
      "Line": 356,
      "Receiver": "PromoteResourceAttributes"
    },
    "ProtobufParser.Comment": {
      "Name": "ProtobufParser.Comment",
      "File": "model/textparse/protobufparse.go",
      "Line": 302,
      "Receiver": "ProtobufParser"
    },
    "ProtobufParser.CreatedTimestamp": {
      "Name": "ProtobufParser.CreatedTimestamp",
      "File": "model/textparse/protobufparse.go",
      "Line": 385,
      "Receiver": "ProtobufParser"
    },
    "ProtobufParser.Exemplar": {
      "Name": "ProtobufParser.Exemplar",
      "File": "model/textparse/protobufparse.go",
      "Line": 316,
      "Receiver": "ProtobufParser"
    },
    "ProtobufParser.Help": {
      "Name": "ProtobufParser.Help",
      "File": "model/textparse/protobufparse.go",
      "Line": 269,
      "Receiver": "ProtobufParser"
    },
    "ProtobufParser.Histogram": {
      "Name": "ProtobufParser.Histogram",
      "File": "model/textparse/protobufparse.go",
      "Line": 179,
      "Receiver": "ProtobufParser"
    },
    "ProtobufParser.Labels": {
      "Name": "ProtobufParser.Labels",
      "File": "model/textparse/protobufparse.go",
      "Line": 307,
      "Receiver": "ProtobufParser"
    },
    "ProtobufParser.Next": {
      "Name": "ProtobufParser.Next",
      "File": "model/textparse/protobufparse.go",
      "Line": 407,
      "Receiver": "ProtobufParser"
    },
    "ProtobufParser.Series": {
      "Name": "ProtobufParser.Series",
      "File": "model/textparse/protobufparse.go",
      "Line": 100,
      "Receiver": "ProtobufParser"
    },
    "ProtobufParser.Type": {
      "Name": "ProtobufParser.Type",
      "File": "model/textparse/protobufparse.go",
      "Line": 276,
      "Receiver": "ProtobufParser"
    },
    "ProtobufParser.Unit": {
      "Name": "ProtobufParser.Unit",
      "File": "model/textparse/protobufparse.go",
      "Line": 296,
      "Receiver": "ProtobufParser"
    },
    "ProtobufParser.getMagicLabel": {
      "Name": "ProtobufParser.getMagicLabel",
      "File": "model/textparse/protobufparse.go",
      "Line": 625,
      "Receiver": "ProtobufParser"
    },
    "ProtobufParser.getMagicName": {
      "Name": "ProtobufParser.getMagicName",
      "File": "model/textparse/protobufparse.go",
      "Line": 606,
      "Receiver": "ProtobufParser"
    },
    "ProtobufParser.onSeriesOrHistogramUpdate": {
      "Name": "ProtobufParser.onSeriesOrHistogramUpdate",
      "File": "model/textparse/protobufparse.go",
      "Line": 555,
      "Receiver": "ProtobufParser"
    },
    "Provider.Config": {
      "Name": "Provider.Config",
      "File": "discovery/manager.go",
      "Line": 65,
      "Receiver": "Provider"
    },
    "Provider.Discoverer": {
      "Name": "Provider.Discoverer",
      "File": "discovery/manager.go",
      "Line": 54,
      "Receiver": "Provider"
    },
    "Provider.IsStarted": {
      "Name": "Provider.IsStarted",
      "File": "discovery/manager.go",
      "Line": 59,
      "Receiver": "Provider"
    },
    "PushMetrics": {
      "Name": "PushMetrics",
      "File": "cmd/promtool/metrics.go",
      "Line": 35,
      "Receiver": ""
    },
    "Quantile.Descriptor": {
      "Name": "Quantile.Descriptor",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 248,
      "Receiver": "Quantile"
    },
    "Quantile.GetQuantile": {
      "Name": "Quantile.GetQuantile",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 278,
      "Receiver": "Quantile"
    },
    "Quantile.GetValue": {
      "Name": "Quantile.GetValue",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 285,
      "Receiver": "Quantile"
    },
    "Quantile.Marshal": {
      "Name": "Quantile.Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1181,
      "Receiver": "Quantile"
    },
    "Quantile.MarshalTo": {
      "Name": "Quantile.MarshalTo",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1191,
      "Receiver": "Quantile"
    },
    "Quantile.MarshalToSizedBuffer": {
      "Name": "Quantile.MarshalToSizedBuffer",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1196,
      "Receiver": "Quantile"
    },
    "Quantile.ProtoMessage": {
      "Name": "Quantile.ProtoMessage",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 247,
      "Receiver": "Quantile"
    },
    "Quantile.Reset": {
      "Name": "Quantile.Reset",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 245,
      "Receiver": "Quantile"
    },
    "Quantile.Size": {
      "Name": "Quantile.Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1905,
      "Receiver": "Quantile"
    },
    "Quantile.String": {
      "Name": "Quantile.String",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 246,
      "Receiver": "Quantile"
    },
    "Quantile.Unmarshal": {
      "Name": "Quantile.Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 2506,
      "Receiver": "Quantile"
    },
    "Quantile.XXX_DiscardUnknown": {
      "Name": "Quantile.XXX_DiscardUnknown",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 272,
      "Receiver": "Quantile"
    },
    "Quantile.XXX_Marshal": {
      "Name": "Quantile.XXX_Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 254,
      "Receiver": "Quantile"
    },
    "Quantile.XXX_Merge": {
      "Name": "Quantile.XXX_Merge",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 266,
      "Receiver": "Quantile"
    },
    "Quantile.XXX_Size": {
      "Name": "Quantile.XXX_Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 269,
      "Receiver": "Quantile"
    },
    "Quantile.XXX_Unmarshal": {
      "Name": "Quantile.XXX_Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 251,
      "Receiver": "Quantile"
    },
    "Query.Descriptor": {
      "Name": "Query.Descriptor",
      "File": "prompb/remote.pb.go",
      "Line": 244,
      "Receiver": "Query"
    },
    "Query.GetEndTimestampMs": {
      "Name": "Query.GetEndTimestampMs",
      "File": "prompb/remote.pb.go",
      "Line": 281,
      "Receiver": "Query"
    },
    "Query.GetHints": {
      "Name": "Query.GetHints",
      "File": "prompb/remote.pb.go",
      "Line": 295,
      "Receiver": "Query"
    },
    "Query.GetMatchers": {
      "Name": "Query.GetMatchers",
      "File": "prompb/remote.pb.go",
      "Line": 288,
      "Receiver": "Query"
    },
    "Query.GetStartTimestampMs": {
      "Name": "Query.GetStartTimestampMs",
      "File": "prompb/remote.pb.go",
      "Line": 274,
      "Receiver": "Query"
    },
    "Query.Marshal": {
      "Name": "Query.Marshal",
      "File": "prompb/remote.pb.go",
      "Line": 612,
      "Receiver": "Query"
    },
    "Query.MarshalTo": {
      "Name": "Query.MarshalTo",
      "File": "prompb/remote.pb.go",
      "Line": 622,
      "Receiver": "Query"
    },
    "Query.MarshalToSizedBuffer": {
      "Name": "Query.MarshalToSizedBuffer",
      "File": "prompb/remote.pb.go",
      "Line": 627,
      "Receiver": "Query"
    },
    "Query.ProtoMessage": {
      "Name": "Query.ProtoMessage",
      "File": "prompb/remote.pb.go",
      "Line": 243,
      "Receiver": "Query"
    },
    "Query.Reset": {
      "Name": "Query.Reset",
      "File": "prompb/remote.pb.go",
      "Line": 241,
      "Receiver": "Query"
    },
    "Query.Size": {
      "Name": "Query.Size",
      "File": "prompb/remote.pb.go",
      "Line": 840,
      "Receiver": "Query"
    },
    "Query.String": {
      "Name": "Query.String",
      "File": "prompb/remote.pb.go",
      "Line": 242,
      "Receiver": "Query"
    },
    "Query.Unmarshal": {
      "Name": "Query.Unmarshal",
      "File": "prompb/remote.pb.go",
      "Line": 1271,
      "Receiver": "Query"
    },
    "Query.XXX_DiscardUnknown": {
      "Name": "Query.XXX_DiscardUnknown",
      "File": "prompb/remote.pb.go",
      "Line": 268,
      "Receiver": "Query"
    },
    "Query.XXX_Marshal": {
      "Name": "Query.XXX_Marshal",
      "File": "prompb/remote.pb.go",
      "Line": 250,
      "Receiver": "Query"
    },
    "Query.XXX_Merge": {
      "Name": "Query.XXX_Merge",
      "File": "prompb/remote.pb.go",
      "Line": 262,
      "Receiver": "Query"
    },
    "Query.XXX_Size": {
      "Name": "Query.XXX_Size",
      "File": "prompb/remote.pb.go",
      "Line": 265,
      "Receiver": "Query"
    },
    "Query.XXX_Unmarshal": {
      "Name": "Query.XXX_Unmarshal",
      "File": "prompb/remote.pb.go",
      "Line": 247,
      "Receiver": "Query"
    },
    "QueryAnalyzeConfig.getStatsFromMetrics": {
      "Name": "QueryAnalyzeConfig.getStatsFromMetrics",
      "File": "cmd/promtool/analyze.go",
      "Line": 84,
      "Receiver": "QueryAnalyzeConfig"
    },
    "QueryAnalyzeConfig.run": {
      "Name": "QueryAnalyzeConfig.run",
      "File": "cmd/promtool/analyze.go",
      "Line": 59,
      "Receiver": "QueryAnalyzeConfig"
    },
    "QueryInstant": {
      "Name": "QueryInstant",
      "File": "cmd/promtool/query.go",
      "Line": 64,
      "Receiver": ""
    },
    "QueryLabels": {
      "Name": "QueryLabels",
      "File": "cmd/promtool/query.go",
      "Line": 176,
      "Receiver": ""
    },
    "QueryRange": {
      "Name": "QueryRange",
      "File": "cmd/promtool/query.go",
      "Line": 94,
      "Receiver": ""
    },
    "QueryResult.Descriptor": {
      "Name": "QueryResult.Descriptor",
      "File": "prompb/remote.pb.go",
      "Line": 313,
      "Receiver": "QueryResult"
    },
    "QueryResult.GetTimeseries": {
      "Name": "QueryResult.GetTimeseries",
      "File": "prompb/remote.pb.go",
      "Line": 343,
      "Receiver": "QueryResult"
    },
    "QueryResult.Marshal": {
      "Name": "QueryResult.Marshal",
      "File": "prompb/remote.pb.go",
      "Line": 675,
      "Receiver": "QueryResult"
    },
    "QueryResult.MarshalTo": {
      "Name": "QueryResult.MarshalTo",
      "File": "prompb/remote.pb.go",
      "Line": 685,
      "Receiver": "QueryResult"
    },
    "QueryResult.MarshalToSizedBuffer": {
      "Name": "QueryResult.MarshalToSizedBuffer",
      "File": "prompb/remote.pb.go",
      "Line": 690,
      "Receiver": "QueryResult"
    },
    "QueryResult.ProtoMessage": {
      "Name": "QueryResult.ProtoMessage",
      "File": "prompb/remote.pb.go",
      "Line": 312,
      "Receiver": "QueryResult"
    },
    "QueryResult.Reset": {
      "Name": "QueryResult.Reset",
      "File": "prompb/remote.pb.go",
      "Line": 310,
      "Receiver": "QueryResult"
    },
    "QueryResult.Size": {
      "Name": "QueryResult.Size",
      "File": "prompb/remote.pb.go",
      "Line": 868,
      "Receiver": "QueryResult"
    },
    "QueryResult.String": {
      "Name": "QueryResult.String",
      "File": "prompb/remote.pb.go",
      "Line": 311,
      "Receiver": "QueryResult"
    },
    "QueryResult.Unmarshal": {
      "Name": "QueryResult.Unmarshal",
      "File": "prompb/remote.pb.go",
      "Line": 1430,
      "Receiver": "QueryResult"
    },
    "QueryResult.XXX_DiscardUnknown": {
      "Name": "QueryResult.XXX_DiscardUnknown",
      "File": "prompb/remote.pb.go",
      "Line": 337,
      "Receiver": "QueryResult"
    },
    "QueryResult.XXX_Marshal": {
      "Name": "QueryResult.XXX_Marshal",
      "File": "prompb/remote.pb.go",
      "Line": 319,
      "Receiver": "QueryResult"
    },
    "QueryResult.XXX_Merge": {
      "Name": "QueryResult.XXX_Merge",
      "File": "prompb/remote.pb.go",
      "Line": 331,
      "Receiver": "QueryResult"
    },
    "QueryResult.XXX_Size": {
      "Name": "QueryResult.XXX_Size",
      "File": "prompb/remote.pb.go",
      "Line": 334,
      "Receiver": "QueryResult"
    },
    "QueryResult.XXX_Unmarshal": {
      "Name": "QueryResult.XXX_Unmarshal",
      "File": "prompb/remote.pb.go",
      "Line": 316,
      "Receiver": "QueryResult"
    },
    "QuerySamples.IncrementSamplesAtStep": {
      "Name": "QuerySamples.IncrementSamplesAtStep",
      "File": "util/stats/query_stats.go",
      "Line": 270,
      "Receiver": "QuerySamples"
    },
    "QuerySamples.IncrementSamplesAtTimestamp": {
      "Name": "QuerySamples.IncrementSamplesAtTimestamp",
      "File": "util/stats/query_stats.go",
      "Line": 283,
      "Receiver": "QuerySamples"
    },
    "QuerySamples.InitStepTracking": {
      "Name": "QuerySamples.InitStepTracking",
      "File": "util/stats/query_stats.go",
      "Line": 258,
      "Receiver": "QuerySamples"
    },
    "QuerySamples.NewChild": {
      "Name": "QuerySamples.NewChild",
      "File": "util/stats/query_stats.go",
      "Line": 326,
      "Receiver": "QuerySamples"
    },
    "QuerySamples.TotalSamplesPerStepMap": {
      "Name": "QuerySamples.TotalSamplesPerStepMap",
      "File": "util/stats/query_stats.go",
      "Line": 166,
      "Receiver": "QuerySamples"
    },
    "QuerySamples.UpdatePeak": {
      "Name": "QuerySamples.UpdatePeak",
      "File": "util/stats/query_stats.go",
      "Line": 297,
      "Receiver": "QuerySamples"
    },
    "QuerySamples.UpdatePeakFromSubquery": {
      "Name": "QuerySamples.UpdatePeakFromSubquery",
      "File": "util/stats/query_stats.go",
      "Line": 308,
      "Receiver": "QuerySamples"
    },
    "QuerySamples.totalSamplesPerStepPoints": {
      "Name": "QuerySamples.totalSamplesPerStepPoints",
      "File": "util/stats/query_stats.go",
      "Line": 178,
      "Receiver": "QuerySamples"
    },
    "QuerySeries": {
      "Name": "QuerySeries",
      "File": "cmd/promtool/query.go",
      "Line": 149,
      "Receiver": ""
    },
    "QueryTimers.GetSpanTimer": {
      "Name": "QueryTimers.GetSpanTimer",
      "File": "util/stats/query_stats.go",
      "Line": 330,
      "Receiver": "QueryTimers"
    },
    "QueryTiming.SpanOperation": {
      "Name": "QueryTiming.SpanOperation",
      "File": "util/stats/query_stats.go",
      "Line": 61,
      "Receiver": "QueryTiming"
    },
    "QueryTiming.String": {
      "Name": "QueryTiming.String",
      "File": "util/stats/query_stats.go",
      "Line": 41,
      "Receiver": "QueryTiming"
    },
    "QueryableFunc.Querier": {
      "Name": "QueryableFunc.Querier",
      "File": "storage/interface.go",
      "Line": 254,
      "Receiver": "QueryableFunc"
    },
    "QueueManager.Append": {
      "Name": "QueueManager.Append",
      "File": "storage/remote/queue_manager.go",
      "Line": 694,
      "Receiver": "QueueManager"
    },
    "QueueManager.AppendExemplars": {
      "Name": "QueueManager.AppendExemplars",
      "File": "storage/remote/queue_manager.go",
      "Line": 753,
      "Receiver": "QueueManager"
    },
    "QueueManager.AppendFloatHistograms": {
      "Name": "QueueManager.AppendFloatHistograms",
      "File": "storage/remote/queue_manager.go",
      "Line": 865,
      "Receiver": "QueueManager"
    },
    "QueueManager.AppendHistograms": {
      "Name": "QueueManager.AppendHistograms",
      "File": "storage/remote/queue_manager.go",
      "Line": 810,
      "Receiver": "QueueManager"
    },
    "QueueManager.AppendWatcherMetadata": {
      "Name": "QueueManager.AppendWatcherMetadata",
      "File": "storage/remote/queue_manager.go",
      "Line": 541,
      "Receiver": "QueueManager"
    },
    "QueueManager.SeriesReset": {
      "Name": "QueueManager.SeriesReset",
      "File": "storage/remote/queue_manager.go",
      "Line": 1013,
      "Receiver": "QueueManager"
    },
    "QueueManager.SetClient": {
      "Name": "QueueManager.SetClient",
      "File": "storage/remote/queue_manager.go",
      "Line": 1032,
      "Receiver": "QueueManager"
    },
    "QueueManager.Start": {
      "Name": "QueueManager.Start",
      "File": "storage/remote/queue_manager.go",
      "Line": 922,
      "Receiver": "QueueManager"
    },
    "QueueManager.Stop": {
      "Name": "QueueManager.Stop",
      "File": "storage/remote/queue_manager.go",
      "Line": 944,
      "Receiver": "QueueManager"
    },
    "QueueManager.StoreMetadata": {
      "Name": "QueueManager.StoreMetadata",
      "File": "storage/remote/queue_manager.go",
      "Line": 984,
      "Receiver": "QueueManager"
    },
    "QueueManager.StoreSeries": {
      "Name": "QueueManager.StoreSeries",
      "File": "storage/remote/queue_manager.go",
      "Line": 962,
      "Receiver": "QueueManager"
    },
    "QueueManager.UpdateSeriesSegment": {
      "Name": "QueueManager.UpdateSeriesSegment",
      "File": "storage/remote/queue_manager.go",
      "Line": 1002,
      "Receiver": "QueueManager"
    },
    "QueueManager.calculateDesiredShards": {
      "Name": "QueueManager.calculateDesiredShards",
      "File": "storage/remote/queue_manager.go",
      "Line": 1108,
      "Receiver": "QueueManager"
    },
    "QueueManager.client": {
      "Name": "QueueManager.client",
      "File": "storage/remote/queue_manager.go",
      "Line": 1038,
      "Receiver": "QueueManager"
    },
    "QueueManager.newShards": {
      "Name": "QueueManager.newShards",
      "File": "storage/remote/queue_manager.go",
      "Line": 1200,
      "Receiver": "QueueManager"
    },
    "QueueManager.reshardLoop": {
      "Name": "QueueManager.reshardLoop",
      "File": "storage/remote/queue_manager.go",
      "Line": 1183,
      "Receiver": "QueueManager"
    },
    "QueueManager.sendMetadataWithBackoff": {
      "Name": "QueueManager.sendMetadataWithBackoff",
      "File": "storage/remote/queue_manager.go",
      "Line": 573,
      "Receiver": "QueueManager"
    },
    "QueueManager.sendWriteRequestWithBackoff": {
      "Name": "QueueManager.sendWriteRequestWithBackoff",
      "File": "storage/remote/queue_manager.go",
      "Line": 1970,
      "Receiver": "QueueManager"
    },
    "QueueManager.shouldReshard": {
      "Name": "QueueManager.shouldReshard",
      "File": "storage/remote/queue_manager.go",
      "Line": 1082,
      "Receiver": "QueueManager"
    },
    "QueueManager.updateShardsLoop": {
      "Name": "QueueManager.updateShardsLoop",
      "File": "storage/remote/queue_manager.go",
      "Line": 1054,
      "Receiver": "QueueManager"
    },
    "RandomUnprivilegedPort": {
      "Name": "RandomUnprivilegedPort",
      "File": "util/testutil/port.go",
      "Line": 29,
      "Receiver": ""
    },
    "RangeHead.BlockMaxTime": {
      "Name": "RangeHead.BlockMaxTime",
      "File": "tsdb/head.go",
      "Line": 1513,
      "Receiver": "RangeHead"
    },
    "RangeHead.Chunks": {
      "Name": "RangeHead.Chunks",
      "File": "tsdb/head.go",
      "Line": 1488,
      "Receiver": "RangeHead"
    },
    "RangeHead.Index": {
      "Name": "RangeHead.Index",
      "File": "tsdb/head.go",
      "Line": 1484,
      "Receiver": "RangeHead"
    },
    "RangeHead.MaxTime": {
      "Name": "RangeHead.MaxTime",
      "File": "tsdb/head.go",
      "Line": 1506,
      "Receiver": "RangeHead"
    },
    "RangeHead.Meta": {
      "Name": "RangeHead.Meta",
      "File": "tsdb/head.go",
      "Line": 1523,
      "Receiver": "RangeHead"
    },
    "RangeHead.MinTime": {
      "Name": "RangeHead.MinTime",
      "File": "tsdb/head.go",
      "Line": 1500,
      "Receiver": "RangeHead"
    },
    "RangeHead.NumSeries": {
      "Name": "RangeHead.NumSeries",
      "File": "tsdb/head.go",
      "Line": 1517,
      "Receiver": "RangeHead"
    },
    "RangeHead.Size": {
      "Name": "RangeHead.Size",
      "File": "tsdb/head.go",
      "Line": 2408,
      "Receiver": "RangeHead"
    },
    "RangeHead.String": {
      "Name": "RangeHead.String",
      "File": "tsdb/head.go",
      "Line": 1537,
      "Receiver": "RangeHead"
    },
    "RangeHead.Tombstones": {
      "Name": "RangeHead.Tombstones",
      "File": "tsdb/head.go",
      "Line": 1496,
      "Receiver": "RangeHead"
    },
    "ReadHints.Descriptor": {
      "Name": "ReadHints.Descriptor",
      "File": "prompb/types.pb.go",
      "Line": 927,
      "Receiver": "ReadHints"
    },
    "ReadHints.GetBy": {
      "Name": "ReadHints.GetBy",
      "File": "prompb/types.pb.go",
      "Line": 992,
      "Receiver": "ReadHints"
    },
    "ReadHints.GetEndMs": {
      "Name": "ReadHints.GetEndMs",
      "File": "prompb/types.pb.go",
      "Line": 978,
      "Receiver": "ReadHints"
    },
    "ReadHints.GetFunc": {
      "Name": "ReadHints.GetFunc",
      "File": "prompb/types.pb.go",
      "Line": 964,
      "Receiver": "ReadHints"
    },
    "ReadHints.GetGrouping": {
      "Name": "ReadHints.GetGrouping",
      "File": "prompb/types.pb.go",
      "Line": 985,
      "Receiver": "ReadHints"
    },
    "ReadHints.GetRangeMs": {
      "Name": "ReadHints.GetRangeMs",
      "File": "prompb/types.pb.go",
      "Line": 999,
      "Receiver": "ReadHints"
    },
    "ReadHints.GetStartMs": {
      "Name": "ReadHints.GetStartMs",
      "File": "prompb/types.pb.go",
      "Line": 971,
      "Receiver": "ReadHints"
    },
    "ReadHints.GetStepMs": {
      "Name": "ReadHints.GetStepMs",
      "File": "prompb/types.pb.go",
      "Line": 957,
      "Receiver": "ReadHints"
    },
    "ReadHints.Marshal": {
      "Name": "ReadHints.Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1843,
      "Receiver": "ReadHints"
    },
    "ReadHints.MarshalTo": {
      "Name": "ReadHints.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1853,
      "Receiver": "ReadHints"
    },
    "ReadHints.MarshalToSizedBuffer": {
      "Name": "ReadHints.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1858,
      "Receiver": "ReadHints"
    },
    "ReadHints.ProtoMessage": {
      "Name": "ReadHints.ProtoMessage",
      "File": "prompb/types.pb.go",
      "Line": 926,
      "Receiver": "ReadHints"
    },
    "ReadHints.Reset": {
      "Name": "ReadHints.Reset",
      "File": "prompb/types.pb.go",
      "Line": 924,
      "Receiver": "ReadHints"
    },
    "ReadHints.Size": {
      "Name": "ReadHints.Size",
      "File": "prompb/types.pb.go",
      "Line": 2319,
      "Receiver": "ReadHints"
    },
    "ReadHints.String": {
      "Name": "ReadHints.String",
      "File": "prompb/types.pb.go",
      "Line": 925,
      "Receiver": "ReadHints"
    },
    "ReadHints.Unmarshal": {
      "Name": "ReadHints.Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 3965,
      "Receiver": "ReadHints"
    },
    "ReadHints.XXX_DiscardUnknown": {
      "Name": "ReadHints.XXX_DiscardUnknown",
      "File": "prompb/types.pb.go",
      "Line": 951,
      "Receiver": "ReadHints"
    },
    "ReadHints.XXX_Marshal": {
      "Name": "ReadHints.XXX_Marshal",
      "File": "prompb/types.pb.go",
      "Line": 933,
      "Receiver": "ReadHints"
    },
    "ReadHints.XXX_Merge": {
      "Name": "ReadHints.XXX_Merge",
      "File": "prompb/types.pb.go",
      "Line": 945,
      "Receiver": "ReadHints"
    },
    "ReadHints.XXX_Size": {
      "Name": "ReadHints.XXX_Size",
      "File": "prompb/types.pb.go",
      "Line": 948,
      "Receiver": "ReadHints"
    },
    "ReadHints.XXX_Unmarshal": {
      "Name": "ReadHints.XXX_Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 930,
      "Receiver": "ReadHints"
    },
    "ReadLabels": {
      "Name": "ReadLabels",
      "File": "model/labels/test_utils.go",
      "Line": 45,
      "Receiver": ""
    },
    "ReadPostingsOffsetTable": {
      "Name": "ReadPostingsOffsetTable",
      "File": "tsdb/index/index.go",
      "Line": 1446,
      "Receiver": ""
    },
    "ReadRequest.Descriptor": {
      "Name": "ReadRequest.Descriptor",
      "File": "prompb/remote.pb.go",
      "Line": 138,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.GetAcceptedResponseTypes": {
      "Name": "ReadRequest.GetAcceptedResponseTypes",
      "File": "prompb/remote.pb.go",
      "Line": 175,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.GetQueries": {
      "Name": "ReadRequest.GetQueries",
      "File": "prompb/remote.pb.go",
      "Line": 168,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.Marshal": {
      "Name": "ReadRequest.Marshal",
      "File": "prompb/remote.pb.go",
      "Line": 512,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.MarshalTo": {
      "Name": "ReadRequest.MarshalTo",
      "File": "prompb/remote.pb.go",
      "Line": 522,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.MarshalToSizedBuffer": {
      "Name": "ReadRequest.MarshalToSizedBuffer",
      "File": "prompb/remote.pb.go",
      "Line": 527,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.ProtoMessage": {
      "Name": "ReadRequest.ProtoMessage",
      "File": "prompb/remote.pb.go",
      "Line": 137,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.Reset": {
      "Name": "ReadRequest.Reset",
      "File": "prompb/remote.pb.go",
      "Line": 135,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.Size": {
      "Name": "ReadRequest.Size",
      "File": "prompb/remote.pb.go",
      "Line": 797,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.String": {
      "Name": "ReadRequest.String",
      "File": "prompb/remote.pb.go",
      "Line": 136,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.Unmarshal": {
      "Name": "ReadRequest.Unmarshal",
      "File": "prompb/remote.pb.go",
      "Line": 1032,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.XXX_DiscardUnknown": {
      "Name": "ReadRequest.XXX_DiscardUnknown",
      "File": "prompb/remote.pb.go",
      "Line": 162,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.XXX_Marshal": {
      "Name": "ReadRequest.XXX_Marshal",
      "File": "prompb/remote.pb.go",
      "Line": 144,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.XXX_Merge": {
      "Name": "ReadRequest.XXX_Merge",
      "File": "prompb/remote.pb.go",
      "Line": 156,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.XXX_Size": {
      "Name": "ReadRequest.XXX_Size",
      "File": "prompb/remote.pb.go",
      "Line": 159,
      "Receiver": "ReadRequest"
    },
    "ReadRequest.XXX_Unmarshal": {
      "Name": "ReadRequest.XXX_Unmarshal",
      "File": "prompb/remote.pb.go",
      "Line": 141,
      "Receiver": "ReadRequest"
    },
    "ReadRequest_ResponseType.EnumDescriptor": {
      "Name": "ReadRequest_ResponseType.EnumDescriptor",
      "File": "prompb/remote.pb.go",
      "Line": 62,
      "Receiver": "ReadRequest_ResponseType"
    },
    "ReadRequest_ResponseType.String": {
      "Name": "ReadRequest_ResponseType.String",
      "File": "prompb/remote.pb.go",
      "Line": 58,
      "Receiver": "ReadRequest_ResponseType"
    },
    "ReadResponse.Descriptor": {
      "Name": "ReadResponse.Descriptor",
      "File": "prompb/remote.pb.go",
      "Line": 194,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.GetResults": {
      "Name": "ReadResponse.GetResults",
      "File": "prompb/remote.pb.go",
      "Line": 224,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.Marshal": {
      "Name": "ReadResponse.Marshal",
      "File": "prompb/remote.pb.go",
      "Line": 571,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.MarshalTo": {
      "Name": "ReadResponse.MarshalTo",
      "File": "prompb/remote.pb.go",
      "Line": 581,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.MarshalToSizedBuffer": {
      "Name": "ReadResponse.MarshalToSizedBuffer",
      "File": "prompb/remote.pb.go",
      "Line": 586,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.ProtoMessage": {
      "Name": "ReadResponse.ProtoMessage",
      "File": "prompb/remote.pb.go",
      "Line": 193,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.Reset": {
      "Name": "ReadResponse.Reset",
      "File": "prompb/remote.pb.go",
      "Line": 191,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.Size": {
      "Name": "ReadResponse.Size",
      "File": "prompb/remote.pb.go",
      "Line": 822,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.String": {
      "Name": "ReadResponse.String",
      "File": "prompb/remote.pb.go",
      "Line": 192,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.Unmarshal": {
      "Name": "ReadResponse.Unmarshal",
      "File": "prompb/remote.pb.go",
      "Line": 1186,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.XXX_DiscardUnknown": {
      "Name": "ReadResponse.XXX_DiscardUnknown",
      "File": "prompb/remote.pb.go",
      "Line": 218,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.XXX_Marshal": {
      "Name": "ReadResponse.XXX_Marshal",
      "File": "prompb/remote.pb.go",
      "Line": 200,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.XXX_Merge": {
      "Name": "ReadResponse.XXX_Merge",
      "File": "prompb/remote.pb.go",
      "Line": 212,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.XXX_Size": {
      "Name": "ReadResponse.XXX_Size",
      "File": "prompb/remote.pb.go",
      "Line": 215,
      "Receiver": "ReadResponse"
    },
    "ReadResponse.XXX_Unmarshal": {
      "Name": "ReadResponse.XXX_Unmarshal",
      "File": "prompb/remote.pb.go",
      "Line": 197,
      "Receiver": "ReadResponse"
    },
    "ReadTombstones": {
      "Name": "ReadTombstones",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 190,
      "Receiver": ""
    },
    "Reader.ChunkOrIterable": {
      "Name": "Reader.ChunkOrIterable",
      "File": "tsdb/chunks/chunks.go",
      "Line": 697,
      "Receiver": "Reader"
    },
    "Reader.Close": {
      "Name": "Reader.Close",
      "File": "tsdb/index/index.go",
      "Line": 1472,
      "Receiver": "Reader"
    },
    "Reader.Err": {
      "Name": "Reader.Err",
      "File": "tsdb/wlog/reader.go",
      "Line": 157,
      "Receiver": "Reader"
    },
    "Reader.LabelNames": {
      "Name": "Reader.LabelNames",
      "File": "tsdb/index/index.go",
      "Line": 1886,
      "Receiver": "Reader"
    },
    "Reader.LabelNamesFor": {
      "Name": "Reader.LabelNamesFor",
      "File": "tsdb/index/index.go",
      "Line": 1553,
      "Receiver": "Reader"
    },
    "Reader.LabelValueFor": {
      "Name": "Reader.LabelValueFor",
      "File": "tsdb/index/index.go",
      "Line": 1605,
      "Receiver": "Reader"
    },
    "Reader.LabelValues": {
      "Name": "Reader.LabelValues",
      "File": "tsdb/index/index.go",
      "Line": 1508,
      "Receiver": "Reader"
    },
    "Reader.Next": {
      "Name": "Reader.Next",
      "File": "tsdb/wlog/reader.go",
      "Line": 47,
      "Receiver": "Reader"
    },
    "Reader.Offset": {
      "Name": "Reader.Offset",
      "File": "tsdb/wlog/reader.go",
      "Line": 191,
      "Receiver": "Reader"
    },
    "Reader.Postings": {
      "Name": "Reader.Postings",
      "File": "tsdb/index/index.go",
      "Line": 1689,
      "Receiver": "Reader"
    },
    "Reader.PostingsForAllLabelValues": {
      "Name": "Reader.PostingsForAllLabelValues",
      "File": "tsdb/index/index.go",
      "Line": 1775,
      "Receiver": "Reader"
    },
    "Reader.PostingsForLabelMatching": {
      "Name": "Reader.PostingsForLabelMatching",
      "File": "tsdb/index/index.go",
      "Line": 1771,
      "Receiver": "Reader"
    },
    "Reader.PostingsRanges": {
      "Name": "Reader.PostingsRanges",
      "File": "tsdb/index/index.go",
      "Line": 1281,
      "Receiver": "Reader"
    },
    "Reader.Record": {
      "Name": "Reader.Record",
      "File": "tsdb/wlog/reader.go",
      "Line": 178,
      "Receiver": "Reader"
    },
    "Reader.Segment": {
      "Name": "Reader.Segment",
      "File": "tsdb/wlog/reader.go",
      "Line": 183,
      "Receiver": "Reader"
    },
    "Reader.Series": {
      "Name": "Reader.Series",
      "File": "tsdb/index/index.go",
      "Line": 1631,
      "Receiver": "Reader"
    },
    "Reader.ShardedPostings": {
      "Name": "Reader.ShardedPostings",
      "File": "tsdb/index/index.go",
      "Line": 1853,
      "Receiver": "Reader"
    },
    "Reader.Size": {
      "Name": "Reader.Size",
      "File": "tsdb/index/index.go",
      "Line": 1880,
      "Receiver": "Reader"
    },
    "Reader.SortedLabelValues": {
      "Name": "Reader.SortedLabelValues",
      "File": "tsdb/index/index.go",
      "Line": 1496,
      "Receiver": "Reader"
    },
    "Reader.SortedPostings": {
      "Name": "Reader.SortedPostings",
      "File": "tsdb/index/index.go",
      "Line": 1848,
      "Receiver": "Reader"
    },
    "Reader.SymbolTableSize": {
      "Name": "Reader.SymbolTableSize",
      "File": "tsdb/index/index.go",
      "Line": 1489,
      "Receiver": "Reader"
    },
    "Reader.Symbols": {
      "Name": "Reader.Symbols",
      "File": "tsdb/index/index.go",
      "Line": 1484,
      "Receiver": "Reader"
    },
    "Reader.Version": {
      "Name": "Reader.Version",
      "File": "tsdb/index/index.go",
      "Line": 1270,
      "Receiver": "Reader"
    },
    "Reader.lookupSymbol": {
      "Name": "Reader.lookupSymbol",
      "File": "tsdb/index/index.go",
      "Line": 1476,
      "Receiver": "Reader"
    },
    "Reader.nextNew": {
      "Name": "Reader.nextNew",
      "File": "tsdb/wlog/reader.go",
      "Line": 62,
      "Receiver": "Reader"
    },
    "Reader.postingsForLabelMatching": {
      "Name": "Reader.postingsForLabelMatching",
      "File": "tsdb/index/index.go",
      "Line": 1780,
      "Receiver": "Reader"
    },
    "Reader.postingsForLabelMatchingV1": {
      "Name": "Reader.postingsForLabelMatchingV1",
      "File": "tsdb/index/index.go",
      "Line": 1816,
      "Receiver": "Reader"
    },
    "Reader.traversePostingOffsets": {
      "Name": "Reader.traversePostingOffsets",
      "File": "tsdb/index/index.go",
      "Line": 1653,
      "Receiver": "Reader"
    },
    "RecordingRule.DependencyRules": {
      "Name": "RecordingRule.DependencyRules",
      "File": "rules/recording.go",
      "Line": 219,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.DependentRules": {
      "Name": "RecordingRule.DependentRules",
      "File": "rules/recording.go",
      "Line": 194,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.Eval": {
      "Name": "RecordingRule.Eval",
      "File": "rules/recording.go",
      "Line": 81,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.GetEvaluationDuration": {
      "Name": "RecordingRule.GetEvaluationDuration",
      "File": "rules/recording.go",
      "Line": 161,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.GetEvaluationTimestamp": {
      "Name": "RecordingRule.GetEvaluationTimestamp",
      "File": "rules/recording.go",
      "Line": 171,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.Health": {
      "Name": "RecordingRule.Health",
      "File": "rules/recording.go",
      "Line": 156,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.Labels": {
      "Name": "RecordingRule.Labels",
      "File": "rules/recording.go",
      "Line": 76,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.LastError": {
      "Name": "RecordingRule.LastError",
      "File": "rules/recording.go",
      "Line": 146,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.Name": {
      "Name": "RecordingRule.Name",
      "File": "rules/recording.go",
      "Line": 66,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.NoDependencyRules": {
      "Name": "RecordingRule.NoDependencyRules",
      "File": "rules/recording.go",
      "Line": 208,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.NoDependentRules": {
      "Name": "RecordingRule.NoDependentRules",
      "File": "rules/recording.go",
      "Line": 183,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.Query": {
      "Name": "RecordingRule.Query",
      "File": "rules/recording.go",
      "Line": 71,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.SetDependencyRules": {
      "Name": "RecordingRule.SetDependencyRules",
      "File": "rules/recording.go",
      "Line": 200,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.SetDependentRules": {
      "Name": "RecordingRule.SetDependentRules",
      "File": "rules/recording.go",
      "Line": 175,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.SetEvaluationDuration": {
      "Name": "RecordingRule.SetEvaluationDuration",
      "File": "rules/recording.go",
      "Line": 136,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.SetEvaluationTimestamp": {
      "Name": "RecordingRule.SetEvaluationTimestamp",
      "File": "rules/recording.go",
      "Line": 166,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.SetHealth": {
      "Name": "RecordingRule.SetHealth",
      "File": "rules/recording.go",
      "Line": 151,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.SetLastError": {
      "Name": "RecordingRule.SetLastError",
      "File": "rules/recording.go",
      "Line": 141,
      "Receiver": "RecordingRule"
    },
    "RecordingRule.String": {
      "Name": "RecordingRule.String",
      "File": "rules/recording.go",
      "Line": 120,
      "Receiver": "RecordingRule"
    },
    "RefreshMetricsVecs.Instantiate": {
      "Name": "RefreshMetricsVecs.Instantiate",
      "File": "discovery/metrics_refresh.go",
      "Line": 60,
      "Receiver": "RefreshMetricsVecs"
    },
    "RefreshMetricsVecs.Register": {
      "Name": "RefreshMetricsVecs.Register",
      "File": "discovery/metrics_refresh.go",
      "Line": 68,
      "Receiver": "RefreshMetricsVecs"
    },
    "RefreshMetricsVecs.Unregister": {
      "Name": "RefreshMetricsVecs.Unregister",
      "File": "discovery/metrics_refresh.go",
      "Line": 73,
      "Receiver": "RefreshMetricsVecs"
    },
    "Regexp.IsZero": {
      "Name": "Regexp.IsZero",
      "File": "model/relabel/relabel.go",
      "Line": 239,
      "Receiver": "Regexp"
    },
    "Regexp.MarshalJSON": {
      "Name": "Regexp.MarshalJSON",
      "File": "model/relabel/relabel.go",
      "Line": 234,
      "Receiver": "Regexp"
    },
    "Regexp.MarshalYAML": {
      "Name": "Regexp.MarshalYAML",
      "File": "model/relabel/relabel.go",
      "Line": 212,
      "Receiver": "Regexp"
    },
    "Regexp.String": {
      "Name": "Regexp.String",
      "File": "model/relabel/relabel.go",
      "Line": 244,
      "Receiver": "Regexp"
    },
    "Regexp.UnmarshalJSON": {
      "Name": "Regexp.UnmarshalJSON",
      "File": "model/relabel/relabel.go",
      "Line": 220,
      "Receiver": "Regexp"
    },
    "Regexp.UnmarshalYAML": {
      "Name": "Regexp.UnmarshalYAML",
      "File": "model/relabel/relabel.go",
      "Line": 198,
      "Receiver": "Regexp"
    },
    "RegisterConfig": {
      "Name": "RegisterConfig",
      "File": "discovery/registry.go",
      "Line": 50,
      "Receiver": ""
    },
    "RegisterK8sClientMetricsWithPrometheus": {
      "Name": "RegisterK8sClientMetricsWithPrometheus",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 142,
      "Receiver": ""
    },
    "RegisterSDMetrics": {
      "Name": "RegisterSDMetrics",
      "File": "discovery/registry.go",
      "Line": 266,
      "Receiver": ""
    },
    "RemoteReadConfig.SetDirectory": {
      "Name": "RemoteReadConfig.SetDirectory",
      "File": "config/config.go",
      "Line": 1483,
      "Receiver": "RemoteReadConfig"
    },
    "RemoteReadConfig.UnmarshalYAML": {
      "Name": "RemoteReadConfig.UnmarshalYAML",
      "File": "config/config.go",
      "Line": 1488,
      "Receiver": "RemoteReadConfig"
    },
    "RemoteWriteConfig.SetDirectory": {
      "Name": "RemoteWriteConfig.SetDirectory",
      "File": "config/config.go",
      "Line": 1328,
      "Receiver": "RemoteWriteConfig"
    },
    "RemoteWriteConfig.UnmarshalYAML": {
      "Name": "RemoteWriteConfig.UnmarshalYAML",
      "File": "config/config.go",
      "Line": 1333,
      "Receiver": "RemoteWriteConfig"
    },
    "RemoteWriteProtoMsg.Validate": {
      "Name": "RemoteWriteProtoMsg.Validate",
      "File": "config/config.go",
      "Line": 1264,
      "Receiver": "RemoteWriteProtoMsg"
    },
    "RemoteWriteProtoMsgs.String": {
      "Name": "RemoteWriteProtoMsgs.String",
      "File": "config/config.go",
      "Line": 1283,
      "Receiver": "RemoteWriteProtoMsgs"
    },
    "RemoteWriteProtoMsgs.Strings": {
      "Name": "RemoteWriteProtoMsgs.Strings",
      "File": "config/config.go",
      "Line": 1275,
      "Receiver": "RemoteWriteProtoMsgs"
    },
    "Rename": {
      "Name": "Rename",
      "File": "tsdb/fileutil/fileutil.go",
      "Line": 93,
      "Receiver": ""
    },
    "Replace": {
      "Name": "Replace",
      "File": "tsdb/fileutil/fileutil.go",
      "Line": 113,
      "Receiver": ""
    },
    "Request.Descriptor": {
      "Name": "Request.Descriptor",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 132,
      "Receiver": "Request"
    },
    "Request.GetSymbols": {
      "Name": "Request.GetSymbols",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 162,
      "Receiver": "Request"
    },
    "Request.GetTimeseries": {
      "Name": "Request.GetTimeseries",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 169,
      "Receiver": "Request"
    },
    "Request.Marshal": {
      "Name": "Request.Marshal",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 925,
      "Receiver": "Request"
    },
    "Request.MarshalTo": {
      "Name": "Request.MarshalTo",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 935,
      "Receiver": "Request"
    },
    "Request.MarshalToSizedBuffer": {
      "Name": "Request.MarshalToSizedBuffer",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 940,
      "Receiver": "Request"
    },
    "Request.OptimizedMarshal": {
      "Name": "Request.OptimizedMarshal",
      "File": "prompb/io/prometheus/write/v2/custom.go",
      "Line": 23,
      "Receiver": "Request"
    },
    "Request.OptimizedMarshalToSizedBuffer": {
      "Name": "Request.OptimizedMarshalToSizedBuffer",
      "File": "prompb/io/prometheus/write/v2/custom.go",
      "Line": 37,
      "Receiver": "Request"
    },
    "Request.ProtoMessage": {
      "Name": "Request.ProtoMessage",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 131,
      "Receiver": "Request"
    },
    "Request.Reset": {
      "Name": "Request.Reset",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 129,
      "Receiver": "Request"
    },
    "Request.Size": {
      "Name": "Request.Size",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 1481,
      "Receiver": "Request"
    },
    "Request.String": {
      "Name": "Request.String",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 130,
      "Receiver": "Request"
    },
    "Request.Unmarshal": {
      "Name": "Request.Unmarshal",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 1739,
      "Receiver": "Request"
    },
    "Request.XXX_DiscardUnknown": {
      "Name": "Request.XXX_DiscardUnknown",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 156,
      "Receiver": "Request"
    },
    "Request.XXX_Marshal": {
      "Name": "Request.XXX_Marshal",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 138,
      "Receiver": "Request"
    },
    "Request.XXX_Merge": {
      "Name": "Request.XXX_Merge",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 150,
      "Receiver": "Request"
    },
    "Request.XXX_Size": {
      "Name": "Request.XXX_Size",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 153,
      "Receiver": "Request"
    },
    "Request.XXX_Unmarshal": {
      "Name": "Request.XXX_Unmarshal",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 135,
      "Receiver": "Request"
    },
    "RequireEqual": {
      "Name": "RequireEqual",
      "File": "util/testutil/cmp.go",
      "Line": 28,
      "Receiver": ""
    },
    "RequireEqualWithOptions": {
      "Name": "RequireEqualWithOptions",
      "File": "util/testutil/cmp.go",
      "Line": 34,
      "Receiver": ""
    },
    "Result.Matrix": {
      "Name": "Result.Matrix",
      "File": "promql/value.go",
      "Line": 366,
      "Receiver": "Result"
    },
    "Result.Scalar": {
      "Name": "Result.Scalar",
      "File": "promql/value.go",
      "Line": 379,
      "Receiver": "Result"
    },
    "Result.String": {
      "Name": "Result.String",
      "File": "promql/value.go",
      "Line": 390,
      "Receiver": "Result"
    },
    "Result.Vector": {
      "Name": "Result.Vector",
      "File": "promql/value.go",
      "Line": 353,
      "Receiver": "Result"
    },
    "Retry": {
      "Name": "Retry",
      "File": "util/runutil/runutil.go",
      "Line": 22,
      "Receiver": ""
    },
    "Role.String": {
      "Name": "Role.String",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 95,
      "Receiver": "Role"
    },
    "Role.UnmarshalYAML": {
      "Name": "Role.UnmarshalYAML",
      "File": "discovery/openstack/openstack.go",
      "Line": 106,
      "Receiver": "Role"
    },
    "Rule.Validate": {
      "Name": "Rule.Validate",
      "File": "model/rulefmt/rulefmt.go",
      "Line": 195,
      "Receiver": "Rule"
    },
    "RuleGroups.Validate": {
      "Name": "RuleGroups.Validate",
      "File": "model/rulefmt/rulefmt.go",
      "Line": 99,
      "Receiver": "RuleGroups"
    },
    "RulesUnitTest": {
      "Name": "RulesUnitTest",
      "File": "cmd/promtool/unittest.go",
      "Line": 49,
      "Receiver": ""
    },
    "RulesUnitTestResult": {
      "Name": "RulesUnitTestResult",
      "File": "cmd/promtool/unittest.go",
      "Line": 53,
      "Receiver": ""
    },
    "RunBuiltinTests": {
      "Name": "RunBuiltinTests",
      "File": "promql/promqltest/test.go",
      "Line": 114,
      "Receiver": ""
    },
    "RunBuiltinTestsWithStorage": {
      "Name": "RunBuiltinTestsWithStorage",
      "File": "promql/promqltest/test.go",
      "Line": 119,
      "Receiver": ""
    },
    "RunTest": {
      "Name": "RunTest",
      "File": "promql/promqltest/test.go",
      "Line": 140,
      "Receiver": ""
    },
    "RunTestWithStorage": {
      "Name": "RunTestWithStorage",
      "File": "promql/promqltest/test.go",
      "Line": 145,
      "Receiver": ""
    },
    "RuntimeConfig.isZero": {
      "Name": "RuntimeConfig.isZero",
      "File": "config/config.go",
      "Line": 678,
      "Receiver": "RuntimeConfig"
    },
    "SDConfig.Name": {
      "Name": "SDConfig.Name",
      "File": "discovery/vultr/vultr.go",
      "Line": 85,
      "Receiver": "SDConfig"
    },
    "SDConfig.NewDiscoverer": {
      "Name": "SDConfig.NewDiscoverer",
      "File": "discovery/vultr/vultr.go",
      "Line": 88,
      "Receiver": "SDConfig"
    },
    "SDConfig.NewDiscovererMetrics": {
      "Name": "SDConfig.NewDiscovererMetrics",
      "File": "discovery/vultr/vultr.go",
      "Line": 78,
      "Receiver": "SDConfig"
    },
    "SDConfig.SetDirectory": {
      "Name": "SDConfig.SetDirectory",
      "File": "discovery/vultr/vultr.go",
      "Line": 93,
      "Receiver": "SDConfig"
    },
    "SDConfig.UnmarshalYAML": {
      "Name": "SDConfig.UnmarshalYAML",
      "File": "discovery/vultr/vultr.go",
      "Line": 98,
      "Receiver": "SDConfig"
    },
    "SDConfig.secretKeyForConfig": {
      "Name": "SDConfig.secretKeyForConfig",
      "File": "discovery/scaleway/scaleway.go",
      "Line": 120,
      "Receiver": "SDConfig"
    },
    "SDMock.Endpoint": {
      "Name": "SDMock.Endpoint",
      "File": "discovery/vultr/mock_test.go",
      "Line": 38,
      "Receiver": "SDMock"
    },
    "SDMock.HandleAuthSuccessfully": {
      "Name": "SDMock.HandleAuthSuccessfully",
      "File": "discovery/openstack/mock_test.go",
      "Line": 92,
      "Receiver": "SDMock"
    },
    "SDMock.HandleDropletsList": {
      "Name": "SDMock.HandleDropletsList",
      "File": "discovery/digitalocean/mock_test.go",
      "Line": 57,
      "Receiver": "SDMock"
    },
    "SDMock.HandleFloatingIPListSuccessfully": {
      "Name": "SDMock.HandleFloatingIPListSuccessfully",
      "File": "discovery/openstack/mock_test.go",
      "Line": 790,
      "Receiver": "SDMock"
    },
    "SDMock.HandleHcloudNetworks": {
      "Name": "SDMock.HandleHcloudNetworks",
      "File": "discovery/hetzner/mock_test.go",
      "Line": 433,
      "Receiver": "SDMock"
    },
    "SDMock.HandleHcloudServers": {
      "Name": "SDMock.HandleHcloudServers",
      "File": "discovery/hetzner/mock_test.go",
      "Line": 57,
      "Receiver": "SDMock"
    },
    "SDMock.HandleHypervisorListSuccessfully": {
      "Name": "SDMock.HandleHypervisorListSuccessfully",
      "File": "discovery/openstack/mock_test.go",
      "Line": 265,
      "Receiver": "SDMock"
    },
    "SDMock.HandleInstanceList": {
      "Name": "SDMock.HandleInstanceList",
      "File": "discovery/vultr/mock_test.go",
      "Line": 56,
      "Receiver": "SDMock"
    },
    "SDMock.HandleListenersListSuccessfully": {
      "Name": "SDMock.HandleListenersListSuccessfully",
      "File": "discovery/openstack/mock_test.go",
      "Line": 1395,
      "Receiver": "SDMock"
    },
    "SDMock.HandleLoadBalancerListSuccessfully": {
      "Name": "SDMock.HandleLoadBalancerListSuccessfully",
      "File": "discovery/openstack/mock_test.go",
      "Line": 1057,
      "Receiver": "SDMock"
    },
    "SDMock.HandlePortsListSuccessfully": {
      "Name": "SDMock.HandlePortsListSuccessfully",
      "File": "discovery/openstack/mock_test.go",
      "Line": 927,
      "Receiver": "SDMock"
    },
    "SDMock.HandleRobotServers": {
      "Name": "SDMock.HandleRobotServers",
      "File": "discovery/hetzner/mock_test.go",
      "Line": 498,
      "Receiver": "SDMock"
    },
    "SDMock.HandleServerListSuccessfully": {
      "Name": "SDMock.HandleServerListSuccessfully",
      "File": "discovery/openstack/mock_test.go",
      "Line": 647,
      "Receiver": "SDMock"
    },
    "SDMock.HandleServers": {
      "Name": "SDMock.HandleServers",
      "File": "discovery/stackit/mock_test.go",
      "Line": 62,
      "Receiver": "SDMock"
    },
    "SDMock.HandleServiceHashiCupsGet": {
      "Name": "SDMock.HandleServiceHashiCupsGet",
      "File": "discovery/nomad/nomad_test.go",
      "Line": 101,
      "Receiver": "SDMock"
    },
    "SDMock.HandleServicesList": {
      "Name": "SDMock.HandleServicesList",
      "File": "discovery/nomad/nomad_test.go",
      "Line": 78,
      "Receiver": "SDMock"
    },
    "SDMock.HandleVersionsSuccessfully": {
      "Name": "SDMock.HandleVersionsSuccessfully",
      "File": "discovery/openstack/mock_test.go",
      "Line": 64,
      "Receiver": "SDMock"
    },
    "SDMock.Setup": {
      "Name": "SDMock.Setup",
      "File": "discovery/vultr/mock_test.go",
      "Line": 43,
      "Receiver": "SDMock"
    },
    "SDMock.SetupHandlers": {
      "Name": "SDMock.SetupHandlers",
      "File": "discovery/moby/mock_test.go",
      "Line": 64,
      "Receiver": "SDMock"
    },
    "SDMock.ShutdownServer": {
      "Name": "SDMock.ShutdownServer",
      "File": "discovery/vultr/mock_test.go",
      "Line": 49,
      "Receiver": "SDMock"
    },
    "Sample.Descriptor": {
      "Name": "Sample.Descriptor",
      "File": "prompb/types.pb.go",
      "Line": 251,
      "Receiver": "Sample"
    },
    "Sample.GetTimestamp": {
      "Name": "Sample.GetTimestamp",
      "File": "prompb/types.pb.go",
      "Line": 288,
      "Receiver": "Sample"
    },
    "Sample.GetValue": {
      "Name": "Sample.GetValue",
      "File": "prompb/types.pb.go",
      "Line": 281,
      "Receiver": "Sample"
    },
    "Sample.Marshal": {
      "Name": "Sample.Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1285,
      "Receiver": "Sample"
    },
    "Sample.MarshalJSON": {
      "Name": "Sample.MarshalJSON",
      "File": "promql/value.go",
      "Line": 220,
      "Receiver": "Sample"
    },
    "Sample.MarshalTo": {
      "Name": "Sample.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1295,
      "Receiver": "Sample"
    },
    "Sample.MarshalToSizedBuffer": {
      "Name": "Sample.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1300,
      "Receiver": "Sample"
    },
    "Sample.ProtoMessage": {
      "Name": "Sample.ProtoMessage",
      "File": "prompb/types.pb.go",
      "Line": 250,
      "Receiver": "Sample"
    },
    "Sample.Reset": {
      "Name": "Sample.Reset",
      "File": "prompb/types.pb.go",
      "Line": 248,
      "Receiver": "Sample"
    },
    "Sample.Size": {
      "Name": "Sample.Size",
      "File": "prompb/types.pb.go",
      "Line": 2058,
      "Receiver": "Sample"
    },
    "Sample.String": {
      "Name": "Sample.String",
      "File": "promql/value.go",
      "Line": 206,
      "Receiver": "Sample"
    },
    "Sample.T": {
      "Name": "Sample.T",
      "File": "prompb/io/prometheus/write/v2/custom.go",
      "Line": 20,
      "Receiver": "Sample"
    },
    "Sample.Unmarshal": {
      "Name": "Sample.Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 2577,
      "Receiver": "Sample"
    },
    "Sample.V": {
      "Name": "Sample.V",
      "File": "prompb/io/prometheus/write/v2/custom.go",
      "Line": 21,
      "Receiver": "Sample"
    },
    "Sample.XXX_DiscardUnknown": {
      "Name": "Sample.XXX_DiscardUnknown",
      "File": "prompb/types.pb.go",
      "Line": 275,
      "Receiver": "Sample"
    },
    "Sample.XXX_Marshal": {
      "Name": "Sample.XXX_Marshal",
      "File": "prompb/types.pb.go",
      "Line": 257,
      "Receiver": "Sample"
    },
    "Sample.XXX_Merge": {
      "Name": "Sample.XXX_Merge",
      "File": "prompb/types.pb.go",
      "Line": 269,
      "Receiver": "Sample"
    },
    "Sample.XXX_Size": {
      "Name": "Sample.XXX_Size",
      "File": "prompb/types.pb.go",
      "Line": 272,
      "Receiver": "Sample"
    },
    "Sample.XXX_Unmarshal": {
      "Name": "Sample.XXX_Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 254,
      "Receiver": "Sample"
    },
    "SampleRingIterator.At": {
      "Name": "SampleRingIterator.At",
      "File": "storage/buffer.go",
      "Line": 385,
      "Receiver": "SampleRingIterator"
    },
    "SampleRingIterator.AtFloatHistogram": {
      "Name": "SampleRingIterator.AtFloatHistogram",
      "File": "storage/buffer.go",
      "Line": 398,
      "Receiver": "SampleRingIterator"
    },
    "SampleRingIterator.AtHistogram": {
      "Name": "SampleRingIterator.AtHistogram",
      "File": "storage/buffer.go",
      "Line": 390,
      "Receiver": "SampleRingIterator"
    },
    "SampleRingIterator.AtT": {
      "Name": "SampleRingIterator.AtT",
      "File": "storage/buffer.go",
      "Line": 409,
      "Receiver": "SampleRingIterator"
    },
    "SampleRingIterator.Next": {
      "Name": "SampleRingIterator.Next",
      "File": "storage/buffer.go",
      "Line": 345,
      "Receiver": "SampleRingIterator"
    },
    "SampleRingIterator.reset": {
      "Name": "SampleRingIterator.reset",
      "File": "storage/buffer.go",
      "Line": 338,
      "Receiver": "SampleRingIterator"
    },
    "SampleSlice.Get": {
      "Name": "SampleSlice.Get",
      "File": "tsdb/chunks/samples.go",
      "Line": 37,
      "Receiver": "SampleSlice"
    },
    "SampleSlice.Len": {
      "Name": "SampleSlice.Len",
      "File": "tsdb/chunks/samples.go",
      "Line": 38,
      "Receiver": "SampleSlice"
    },
    "SanitizeFullLabelName": {
      "Name": "SanitizeFullLabelName",
      "File": "util/strutil/strconv.go",
      "Line": 51,
      "Receiver": ""
    },
    "SanitizeLabelName": {
      "Name": "SanitizeLabelName",
      "File": "util/strutil/strconv.go",
      "Line": 45,
      "Receiver": ""
    },
    "Scalar.MarshalJSON": {
      "Name": "Scalar.MarshalJSON",
      "File": "promql/value.go",
      "Line": 62,
      "Receiver": "Scalar"
    },
    "Scalar.String": {
      "Name": "Scalar.String",
      "File": "promql/value.go",
      "Line": 57,
      "Receiver": "Scalar"
    },
    "Scalar.Type": {
      "Name": "Scalar.Type",
      "File": "promql/value.go",
      "Line": 34,
      "Receiver": "Scalar"
    },
    "ScrapeConfig.AlwaysScrapeClassicHistogramsEnabled": {
      "Name": "ScrapeConfig.AlwaysScrapeClassicHistogramsEnabled",
      "File": "config/config.go",
      "Line": 965,
      "Receiver": "ScrapeConfig"
    },
    "ScrapeConfig.ConvertClassicHistogramsToNHCBEnabled": {
      "Name": "ScrapeConfig.ConvertClassicHistogramsToNHCBEnabled",
      "File": "config/config.go",
      "Line": 960,
      "Receiver": "ScrapeConfig"
    },
    "ScrapeConfig.MarshalYAML": {
      "Name": "ScrapeConfig.MarshalYAML",
      "File": "config/config.go",
      "Line": 936,
      "Receiver": "ScrapeConfig"
    },
    "ScrapeConfig.SetDirectory": {
      "Name": "ScrapeConfig.SetDirectory",
      "File": "config/config.go",
      "Line": 772,
      "Receiver": "ScrapeConfig"
    },
    "ScrapeConfig.UnmarshalYAML": {
      "Name": "ScrapeConfig.UnmarshalYAML",
      "File": "config/config.go",
      "Line": 779,
      "Receiver": "ScrapeConfig"
    },
    "ScrapeConfig.Validate": {
      "Name": "ScrapeConfig.Validate",
      "File": "config/config.go",
      "Line": 817,
      "Receiver": "ScrapeConfig"
    },
    "ScrapeProtocol.HeaderMediaType": {
      "Name": "ScrapeProtocol.HeaderMediaType",
      "File": "config/config.go",
      "Line": 515,
      "Receiver": "ScrapeProtocol"
    },
    "ScrapeProtocol.Validate": {
      "Name": "ScrapeProtocol.Validate",
      "File": "config/config.go",
      "Line": 500,
      "Receiver": "ScrapeProtocol"
    },
    "ScratchBuilder.Add": {
      "Name": "ScratchBuilder.Add",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 617,
      "Receiver": "ScratchBuilder"
    },
    "ScratchBuilder.Assign": {
      "Name": "ScratchBuilder.Assign",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 633,
      "Receiver": "ScratchBuilder"
    },
    "ScratchBuilder.Labels": {
      "Name": "ScratchBuilder.Labels",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 639,
      "Receiver": "ScratchBuilder"
    },
    "ScratchBuilder.Overwrite": {
      "Name": "ScratchBuilder.Overwrite",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 651,
      "Receiver": "ScratchBuilder"
    },
    "ScratchBuilder.Reset": {
      "Name": "ScratchBuilder.Reset",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 610,
      "Receiver": "ScratchBuilder"
    },
    "ScratchBuilder.SetSymbolTable": {
      "Name": "ScratchBuilder.SetSymbolTable",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 679,
      "Receiver": "ScratchBuilder"
    },
    "ScratchBuilder.Sort": {
      "Name": "ScratchBuilder.Sort",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 628,
      "Receiver": "ScratchBuilder"
    },
    "ScratchBuilder.UnsafeAddBytes": {
      "Name": "ScratchBuilder.UnsafeAddBytes",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 623,
      "Receiver": "ScratchBuilder"
    },
    "ScratchBuilderForBenchmark": {
      "Name": "ScratchBuilderForBenchmark",
      "File": "model/labels/labels_test.go",
      "Line": 579,
      "Receiver": ""
    },
    "Segment.Dir": {
      "Name": "Segment.Dir",
      "File": "tsdb/wlog/wlog.go",
      "Line": 100,
      "Receiver": "Segment"
    },
    "Segment.Index": {
      "Name": "Segment.Index",
      "File": "tsdb/wlog/wlog.go",
      "Line": 95,
      "Receiver": "Segment"
    },
    "SegmentName": {
      "Name": "SegmentName",
      "File": "tsdb/wlog/wlog.go",
      "Line": 508,
      "Receiver": ""
    },
    "Segments": {
      "Name": "Segments",
      "File": "tsdb/wlog/wlog.go",
      "Line": 877,
      "Receiver": ""
    },
    "Selector.Matches": {
      "Name": "Selector.Matches",
      "File": "model/labels/test_utils.go",
      "Line": 34,
      "Receiver": "Selector"
    },
    "SendAlerts": {
      "Name": "SendAlerts",
      "File": "rules/manager.go",
      "Line": 432,
      "Receiver": ""
    },
    "SequenceValue.String": {
      "Name": "SequenceValue.String",
      "File": "promql/parser/parse.go",
      "Line": 248,
      "Receiver": "SequenceValue"
    },
    "Series.String": {
      "Name": "Series.String",
      "File": "promql/value.go",
      "Line": 77,
      "Receiver": "Series"
    },
    "SeriesEntry.Iterator": {
      "Name": "SeriesEntry.Iterator",
      "File": "storage/series.go",
      "Line": 33,
      "Receiver": "SeriesEntry"
    },
    "SeriesEntry.Labels": {
      "Name": "SeriesEntry.Labels",
      "File": "storage/series.go",
      "Line": 32,
      "Receiver": "SeriesEntry"
    },
    "ServersetSDConfig.Name": {
      "Name": "ServersetSDConfig.Name",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 67,
      "Receiver": "ServersetSDConfig"
    },
    "ServersetSDConfig.NewDiscoverer": {
      "Name": "ServersetSDConfig.NewDiscoverer",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 70,
      "Receiver": "ServersetSDConfig"
    },
    "ServersetSDConfig.NewDiscovererMetrics": {
      "Name": "ServersetSDConfig.NewDiscovererMetrics",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 62,
      "Receiver": "ServersetSDConfig"
    },
    "ServersetSDConfig.UnmarshalYAML": {
      "Name": "ServersetSDConfig.UnmarshalYAML",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 75,
      "Receiver": "ServersetSDConfig"
    },
    "Service.Run": {
      "Name": "Service.Run",
      "File": "discovery/kubernetes/service.go",
      "Line": 89,
      "Receiver": "Service"
    },
    "Service.buildService": {
      "Name": "Service.buildService",
      "File": "discovery/kubernetes/service.go",
      "Line": 172,
      "Receiver": "Service"
    },
    "Service.enqueue": {
      "Name": "Service.enqueue",
      "File": "discovery/kubernetes/service.go",
      "Line": 79,
      "Receiver": "Service"
    },
    "Service.hasSynced": {
      "Name": "Service.hasSynced",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 270,
      "Receiver": "Service"
    },
    "Service.process": {
      "Name": "Service.process",
      "File": "discovery/kubernetes/service.go",
      "Line": 108,
      "Receiver": "Service"
    },
    "SetCORS": {
      "Name": "SetCORS",
      "File": "util/httputil/cors.go",
      "Line": 29,
      "Receiver": ""
    },
    "SetFloatHistogramCounterReset": {
      "Name": "SetFloatHistogramCounterReset",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 185,
      "Receiver": ""
    },
    "SetFloatHistogramNotCounterReset": {
      "Name": "SetFloatHistogramNotCounterReset",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 180,
      "Receiver": ""
    },
    "SetHistogramCounterReset": {
      "Name": "SetHistogramCounterReset",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 175,
      "Receiver": ""
    },
    "SetHistogramNotCounterReset": {
      "Name": "SetHistogramNotCounterReset",
      "File": "tsdb/tsdbutil/histogram.go",
      "Line": 170,
      "Receiver": ""
    },
    "SharedLimitListener": {
      "Name": "SharedLimitListener",
      "File": "util/netconnlimit/netconnlimit.go",
      "Line": 33,
      "Receiver": ""
    },
    "SizeOfLabels": {
      "Name": "SizeOfLabels",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 684,
      "Receiver": ""
    },
    "Slice.Len": {
      "Name": "Slice.Len",
      "File": "model/labels/test_utils.go",
      "Line": 26,
      "Receiver": "Slice"
    },
    "Slice.Less": {
      "Name": "Slice.Less",
      "File": "model/labels/test_utils.go",
      "Line": 28,
      "Receiver": "Slice"
    },
    "Slice.Swap": {
      "Name": "Slice.Swap",
      "File": "model/labels/test_utils.go",
      "Line": 27,
      "Receiver": "Slice"
    },
    "SpanTimer.Finish": {
      "Name": "SpanTimer.Finish",
      "File": "util/stats/query_stats.go",
      "Line": 210,
      "Receiver": "SpanTimer"
    },
    "StableHash": {
      "Name": "StableHash",
      "File": "model/labels/sharding_stringlabels.go",
      "Line": 24,
      "Receiver": ""
    },
    "Statfs": {
      "Name": "Statfs",
      "File": "util/runtime/statfs_uint32.go",
      "Line": 24,
      "Receiver": ""
    },
    "StaticConfig.Name": {
      "Name": "StaticConfig.Name",
      "File": "discovery/discovery.go",
      "Line": 142,
      "Receiver": "StaticConfig"
    },
    "StaticConfig.NewDiscoverer": {
      "Name": "StaticConfig.NewDiscoverer",
      "File": "discovery/discovery.go",
      "Line": 145,
      "Receiver": "StaticConfig"
    },
    "StaticConfig.NewDiscovererMetrics": {
      "Name": "StaticConfig.NewDiscovererMetrics",
      "File": "discovery/discovery.go",
      "Line": 151,
      "Receiver": "StaticConfig"
    },
    "StepInvariantExpr.PositionRange": {
      "Name": "StepInvariantExpr.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 201,
      "Receiver": "StepInvariantExpr"
    },
    "StepInvariantExpr.Pretty": {
      "Name": "StepInvariantExpr.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 130,
      "Receiver": "StepInvariantExpr"
    },
    "StepInvariantExpr.PromQLExpr": {
      "Name": "StepInvariantExpr.PromQLExpr",
      "File": "promql/parser/ast.go",
      "Line": 274,
      "Receiver": "StepInvariantExpr"
    },
    "StepInvariantExpr.String": {
      "Name": "StepInvariantExpr.String",
      "File": "promql/parser/ast.go",
      "Line": 199,
      "Receiver": "StepInvariantExpr"
    },
    "StepInvariantExpr.Type": {
      "Name": "StepInvariantExpr.Type",
      "File": "promql/parser/ast.go",
      "Line": 261,
      "Receiver": "StepInvariantExpr"
    },
    "Storage.Appender": {
      "Name": "Storage.Appender",
      "File": "storage/remote/storage.go",
      "Line": 192,
      "Receiver": "Storage"
    },
    "Storage.ApplyConfig": {
      "Name": "Storage.ApplyConfig",
      "File": "storage/remote/storage.go",
      "Line": 88,
      "Receiver": "Storage"
    },
    "Storage.ChunkQuerier": {
      "Name": "Storage.ChunkQuerier",
      "File": "storage/remote/storage.go",
      "Line": 175,
      "Receiver": "Storage"
    },
    "Storage.Close": {
      "Name": "Storage.Close",
      "File": "storage/remote/storage.go",
      "Line": 202,
      "Receiver": "Storage"
    },
    "Storage.LowestSentTimestamp": {
      "Name": "Storage.LowestSentTimestamp",
      "File": "storage/remote/storage.go",
      "Line": 197,
      "Receiver": "Storage"
    },
    "Storage.Notify": {
      "Name": "Storage.Notify",
      "File": "storage/remote/storage.go",
      "Line": 83,
      "Receiver": "Storage"
    },
    "Storage.Querier": {
      "Name": "Storage.Querier",
      "File": "storage/remote/storage.go",
      "Line": 157,
      "Receiver": "Storage"
    },
    "Storage.StartTime": {
      "Name": "Storage.StartTime",
      "File": "storage/remote/storage.go",
      "Line": 148,
      "Receiver": "Storage"
    },
    "StorageSeries.Iterator": {
      "Name": "StorageSeries.Iterator",
      "File": "promql/value.go",
      "Line": 418,
      "Receiver": "StorageSeries"
    },
    "StorageSeries.Labels": {
      "Name": "StorageSeries.Labels",
      "File": "promql/value.go",
      "Line": 412,
      "Receiver": "StorageSeries"
    },
    "StreamChunkedReadResponses": {
      "Name": "StreamChunkedReadResponses",
      "File": "storage/remote/codec.go",
      "Line": 220,
      "Receiver": ""
    },
    "String.MarshalJSON": {
      "Name": "String.MarshalJSON",
      "File": "promql/value.go",
      "Line": 47,
      "Receiver": "String"
    },
    "String.String": {
      "Name": "String.String",
      "File": "promql/value.go",
      "Line": 43,
      "Receiver": "String"
    },
    "String.Type": {
      "Name": "String.Type",
      "File": "promql/value.go",
      "Line": 35,
      "Receiver": "String"
    },
    "StringLiteral.PositionRange": {
      "Name": "StringLiteral.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 521,
      "Receiver": "StringLiteral"
    },
    "StringLiteral.Pretty": {
      "Name": "StringLiteral.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 153,
      "Receiver": "StringLiteral"
    },
    "StringLiteral.PromQLExpr": {
      "Name": "StringLiteral.PromQLExpr",
      "File": "promql/parser/ast.go",
      "Line": 271,
      "Receiver": "StringLiteral"
    },
    "StringLiteral.String": {
      "Name": "StringLiteral.String",
      "File": "promql/parser/printer.go",
      "Line": 300,
      "Receiver": "StringLiteral"
    },
    "StringLiteral.Type": {
      "Name": "StringLiteral.Type",
      "File": "promql/parser/ast.go",
      "Line": 252,
      "Receiver": "StringLiteral"
    },
    "SubqueryExpr.PositionRange": {
      "Name": "SubqueryExpr.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 506,
      "Receiver": "SubqueryExpr"
    },
    "SubqueryExpr.Pretty": {
      "Name": "SubqueryExpr.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 138,
      "Receiver": "SubqueryExpr"
    },
    "SubqueryExpr.PromQLExpr": {
      "Name": "SubqueryExpr.PromQLExpr",
      "File": "promql/parser/ast.go",
      "Line": 268,
      "Receiver": "SubqueryExpr"
    },
    "SubqueryExpr.ShortString": {
      "Name": "SubqueryExpr.ShortString",
      "File": "promql/parser/printer.go",
      "Line": 249,
      "Receiver": "SubqueryExpr"
    },
    "SubqueryExpr.String": {
      "Name": "SubqueryExpr.String",
      "File": "promql/parser/printer.go",
      "Line": 245,
      "Receiver": "SubqueryExpr"
    },
    "SubqueryExpr.Type": {
      "Name": "SubqueryExpr.Type",
      "File": "promql/parser/ast.go",
      "Line": 249,
      "Receiver": "SubqueryExpr"
    },
    "SubqueryExpr.getSubqueryTimeSuffix": {
      "Name": "SubqueryExpr.getSubqueryTimeSuffix",
      "File": "promql/parser/printer.go",
      "Line": 254,
      "Receiver": "SubqueryExpr"
    },
    "Summary.Descriptor": {
      "Name": "Summary.Descriptor",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 305,
      "Receiver": "Summary"
    },
    "Summary.GetCreatedTimestamp": {
      "Name": "Summary.GetCreatedTimestamp",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 356,
      "Receiver": "Summary"
    },
    "Summary.GetQuantile": {
      "Name": "Summary.GetQuantile",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 349,
      "Receiver": "Summary"
    },
    "Summary.GetSampleCount": {
      "Name": "Summary.GetSampleCount",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 335,
      "Receiver": "Summary"
    },
    "Summary.GetSampleSum": {
      "Name": "Summary.GetSampleSum",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 342,
      "Receiver": "Summary"
    },
    "Summary.Marshal": {
      "Name": "Summary.Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1220,
      "Receiver": "Summary"
    },
    "Summary.MarshalTo": {
      "Name": "Summary.MarshalTo",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1230,
      "Receiver": "Summary"
    },
    "Summary.MarshalToSizedBuffer": {
      "Name": "Summary.MarshalToSizedBuffer",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1235,
      "Receiver": "Summary"
    },
    "Summary.ProtoMessage": {
      "Name": "Summary.ProtoMessage",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 304,
      "Receiver": "Summary"
    },
    "Summary.Reset": {
      "Name": "Summary.Reset",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 302,
      "Receiver": "Summary"
    },
    "Summary.Size": {
      "Name": "Summary.Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1923,
      "Receiver": "Summary"
    },
    "Summary.String": {
      "Name": "Summary.String",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 303,
      "Receiver": "Summary"
    },
    "Summary.Unmarshal": {
      "Name": "Summary.Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 2579,
      "Receiver": "Summary"
    },
    "Summary.XXX_DiscardUnknown": {
      "Name": "Summary.XXX_DiscardUnknown",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 329,
      "Receiver": "Summary"
    },
    "Summary.XXX_Marshal": {
      "Name": "Summary.XXX_Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 311,
      "Receiver": "Summary"
    },
    "Summary.XXX_Merge": {
      "Name": "Summary.XXX_Merge",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 323,
      "Receiver": "Summary"
    },
    "Summary.XXX_Size": {
      "Name": "Summary.XXX_Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 326,
      "Receiver": "Summary"
    },
    "Summary.XXX_Unmarshal": {
      "Name": "Summary.XXX_Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 308,
      "Receiver": "Summary"
    },
    "SymbolTable.Len": {
      "Name": "SymbolTable.Len",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 667,
      "Receiver": "SymbolTable"
    },
    "SymbolTable.ToNum": {
      "Name": "SymbolTable.ToNum",
      "File": "model/labels/labels_dedupelabels.go",
      "Line": 71,
      "Receiver": "SymbolTable"
    },
    "SymbolTable.checkNum": {
      "Name": "SymbolTable.checkNum",
      "File": "model/labels/labels_dedupelabels.go",
      "Line": 95,
      "Receiver": "SymbolTable"
    },
    "SymbolTable.toNumUnlocked": {
      "Name": "SymbolTable.toNumUnlocked",
      "File": "model/labels/labels_dedupelabels.go",
      "Line": 77,
      "Receiver": "SymbolTable"
    },
    "Symbols.Iter": {
      "Name": "Symbols.Iter",
      "File": "tsdb/index/index.go",
      "Line": 1408,
      "Receiver": "Symbols"
    },
    "Symbols.Lookup": {
      "Name": "Symbols.Lookup",
      "File": "tsdb/index/index.go",
      "Line": 1337,
      "Receiver": "Symbols"
    },
    "Symbols.ReverseLookup": {
      "Name": "Symbols.ReverseLookup",
      "File": "tsdb/index/index.go",
      "Line": 1361,
      "Receiver": "Symbols"
    },
    "Symbols.Size": {
      "Name": "Symbols.Size",
      "File": "tsdb/index/index.go",
      "Line": 1404,
      "Receiver": "Symbols"
    },
    "SymbolsTable.Reset": {
      "Name": "SymbolsTable.Reset",
      "File": "prompb/io/prometheus/write/v2/symbols.go",
      "Line": 64,
      "Receiver": "SymbolsTable"
    },
    "SymbolsTable.Symbolize": {
      "Name": "SymbolsTable.Symbolize",
      "File": "prompb/io/prometheus/write/v2/symbols.go",
      "Line": 35,
      "Receiver": "SymbolsTable"
    },
    "SymbolsTable.SymbolizeLabels": {
      "Name": "SymbolsTable.SymbolizeLabels",
      "File": "prompb/io/prometheus/write/v2/symbols.go",
      "Line": 46,
      "Receiver": "SymbolsTable"
    },
    "SymbolsTable.Symbols": {
      "Name": "SymbolsTable.Symbols",
      "File": "prompb/io/prometheus/write/v2/symbols.go",
      "Line": 59,
      "Receiver": "SymbolsTable"
    },
    "TSDBConfig.UnmarshalYAML": {
      "Name": "TSDBConfig.UnmarshalYAML",
      "File": "config/config.go",
      "Line": 990,
      "Receiver": "TSDBConfig"
    },
    "TSDBStatsFromIndexStats": {
      "Name": "TSDBStatsFromIndexStats",
      "File": "web/api/v1/api.go",
      "Line": 1739,
      "Receiver": ""
    },
    "TableLinkForExpression": {
      "Name": "TableLinkForExpression",
      "File": "util/strutil/strconv.go",
      "Line": 28,
      "Receiver": ""
    },
    "TagValue.MarshalJSON": {
      "Name": "TagValue.MarshalJSON",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/opentsdb/tagvalue.go",
      "Line": 64,
      "Receiver": "TagValue"
    },
    "TagValue.UnmarshalJSON": {
      "Name": "TagValue.UnmarshalJSON",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/opentsdb/tagvalue.go",
      "Line": 90,
      "Receiver": "TagValue"
    },
    "Target.DiscoveredLabels": {
      "Name": "Target.DiscoveredLabels",
      "File": "scrape/target.go",
      "Line": 192,
      "Receiver": "Target"
    },
    "Target.GetMetadata": {
      "Name": "Target.GetMetadata",
      "File": "scrape/target.go",
      "Line": 127,
      "Receiver": "Target"
    },
    "Target.GetValue": {
      "Name": "Target.GetValue",
      "File": "scrape/target.go",
      "Line": 310,
      "Receiver": "Target"
    },
    "Target.Health": {
      "Name": "Target.Health",
      "File": "scrape/target.go",
      "Line": 282,
      "Receiver": "Target"
    },
    "Target.Labels": {
      "Name": "Target.Labels",
      "File": "scrape/target.go",
      "Line": 172,
      "Receiver": "Target"
    },
    "Target.LabelsRange": {
      "Name": "Target.LabelsRange",
      "File": "scrape/target.go",
      "Line": 183,
      "Receiver": "Target"
    },
    "Target.LastError": {
      "Name": "Target.LastError",
      "File": "scrape/target.go",
      "Line": 258,
      "Receiver": "Target"
    },
    "Target.LastScrape": {
      "Name": "Target.LastScrape",
      "File": "scrape/target.go",
      "Line": 266,
      "Receiver": "Target"
    },
    "Target.LastScrapeDuration": {
      "Name": "Target.LastScrapeDuration",
      "File": "scrape/target.go",
      "Line": 274,
      "Receiver": "Target"
    },
    "Target.LengthMetadata": {
      "Name": "Target.LengthMetadata",
      "File": "scrape/target.go",
      "Line": 115,
      "Receiver": "Target"
    },
    "Target.ListMetadata": {
      "Name": "Target.ListMetadata",
      "File": "scrape/target.go",
      "Line": 94,
      "Receiver": "Target"
    },
    "Target.Report": {
      "Name": "Target.Report",
      "File": "scrape/target.go",
      "Line": 242,
      "Receiver": "Target"
    },
    "Target.SetMetadataStore": {
      "Name": "Target.SetMetadataStore",
      "File": "scrape/target.go",
      "Line": 137,
      "Receiver": "Target"
    },
    "Target.SetScrapeConfig": {
      "Name": "Target.SetScrapeConfig",
      "File": "scrape/target.go",
      "Line": 201,
      "Receiver": "Target"
    },
    "Target.SizeMetadata": {
      "Name": "Target.SizeMetadata",
      "File": "scrape/target.go",
      "Line": 104,
      "Receiver": "Target"
    },
    "Target.String": {
      "Name": "Target.String",
      "File": "scrape/target.go",
      "Line": 74,
      "Receiver": "Target"
    },
    "Target.URL": {
      "Name": "Target.URL",
      "File": "scrape/target.go",
      "Line": 210,
      "Receiver": "Target"
    },
    "Target.hash": {
      "Name": "Target.hash",
      "File": "scrape/target.go",
      "Line": 144,
      "Receiver": "Target"
    },
    "Target.intervalAndTimeout": {
      "Name": "Target.intervalAndTimeout",
      "File": "scrape/target.go",
      "Line": 291,
      "Receiver": "Target"
    },
    "Target.offset": {
      "Name": "Target.offset",
      "File": "scrape/target.go",
      "Line": 155,
      "Receiver": "Target"
    },
    "TargetFromContext": {
      "Name": "TargetFromContext",
      "File": "scrape/scrape.go",
      "Line": 2252,
      "Receiver": ""
    },
    "Targets.Len": {
      "Name": "Targets.Len",
      "File": "scrape/target.go",
      "Line": 317,
      "Receiver": "Targets"
    },
    "Targets.Less": {
      "Name": "Targets.Less",
      "File": "scrape/target.go",
      "Line": 318,
      "Receiver": "Targets"
    },
    "Targets.Swap": {
      "Name": "Targets.Swap",
      "File": "scrape/target.go",
      "Line": 319,
      "Receiver": "Targets"
    },
    "TargetsFromGroup": {
      "Name": "TargetsFromGroup",
      "File": "scrape/target.go",
      "Line": 537,
      "Receiver": ""
    },
    "TempHistogram.Convert": {
      "Name": "TempHistogram.Convert",
      "File": "util/convertnhcb/convertnhcb.go",
      "Line": 137,
      "Receiver": "TempHistogram"
    },
    "TempHistogram.Err": {
      "Name": "TempHistogram.Err",
      "File": "util/convertnhcb/convertnhcb.go",
      "Line": 58,
      "Receiver": "TempHistogram"
    },
    "TempHistogram.Reset": {
      "Name": "TempHistogram.Reset",
      "File": "util/convertnhcb/convertnhcb.go",
      "Line": 62,
      "Receiver": "TempHistogram"
    },
    "TempHistogram.SetBucketCount": {
      "Name": "TempHistogram.SetBucketCount",
      "File": "util/convertnhcb/convertnhcb.go",
      "Line": 70,
      "Receiver": "TempHistogram"
    },
    "TempHistogram.SetCount": {
      "Name": "TempHistogram.SetCount",
      "File": "util/convertnhcb/convertnhcb.go",
      "Line": 116,
      "Receiver": "TempHistogram"
    },
    "TempHistogram.SetSum": {
      "Name": "TempHistogram.SetSum",
      "File": "util/convertnhcb/convertnhcb.go",
      "Line": 129,
      "Receiver": "TempHistogram"
    },
    "TempHistogram.convertToFloatHistogram": {
      "Name": "TempHistogram.convertToFloatHistogram",
      "File": "util/convertnhcb/convertnhcb.go",
      "Line": 202,
      "Receiver": "TempHistogram"
    },
    "TempHistogram.convertToIntegerHistogram": {
      "Name": "TempHistogram.convertToIntegerHistogram",
      "File": "util/convertnhcb/convertnhcb.go",
      "Line": 168,
      "Receiver": "TempHistogram"
    },
    "Test": {
      "Name": "Test",
      "File": "tsdb/goversion/goversion_test.go",
      "Line": 27,
      "Receiver": ""
    },
    "Test500ErrorHttpResponse": {
      "Name": "Test500ErrorHttpResponse",
      "File": "discovery/eureka/client_test.go",
      "Line": 200,
      "Receiver": ""
    },
    "Test500ErrorHttpResponseWithValidJSONBody": {
      "Name": "Test500ErrorHttpResponseWithValidJSONBody",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 244,
      "Receiver": ""
    },
    "TestAbortBlockCompactions": {
      "Name": "TestAbortBlockCompactions",
      "File": "tsdb/db_test.go",
      "Line": 9221,
      "Receiver": ""
    },
    "TestAcceptHeader": {
      "Name": "TestAcceptHeader",
      "File": "scrape/scrape_test.go",
      "Line": 3074,
      "Receiver": ""
    },
    "TestAddDuplicateLabelName": {
      "Name": "TestAddDuplicateLabelName",
      "File": "tsdb/head_test.go",
      "Line": 2632,
      "Receiver": ""
    },
    "TestAddExemplar": {
      "Name": "TestAddExemplar",
      "File": "tsdb/exemplar_test.go",
      "Line": 79,
      "Receiver": ""
    },
    "TestAddingNewIntervals": {
      "Name": "TestAddingNewIntervals",
      "File": "tsdb/tombstones/tombstones_test.go",
      "Line": 139,
      "Receiver": ""
    },
    "TestAdminEndpoints": {
      "Name": "TestAdminEndpoints",
      "File": "web/api/v1/api_test.go",
      "Line": 3823,
      "Receiver": ""
    },
    "TestAgentAPIEndPoints": {
      "Name": "TestAgentAPIEndPoints",
      "File": "web/web_test.go",
      "Line": 510,
      "Receiver": ""
    },
    "TestAgentFailedStartupWithInvalidConfig": {
      "Name": "TestAgentFailedStartupWithInvalidConfig",
      "File": "cmd/prometheus/main_test.go",
      "Line": 466,
      "Receiver": ""
    },
    "TestAgentFailedStartupWithServerFlag": {
      "Name": "TestAgentFailedStartupWithServerFlag",
      "File": "cmd/prometheus/main_test.go",
      "Line": 437,
      "Receiver": ""
    },
    "TestAgentMode": {
      "Name": "TestAgentMode",
      "File": "config/config_test.go",
      "Line": 2531,
      "Receiver": ""
    },
    "TestAgentSuccessfulStartup": {
      "Name": "TestAgentSuccessfulStartup",
      "File": "cmd/prometheus/main_test.go",
      "Line": 417,
      "Receiver": ""
    },
    "TestAggregateExprPretty": {
      "Name": "TestAggregateExprPretty",
      "File": "promql/parser/prettier_test.go",
      "Line": 23,
      "Receiver": ""
    },
    "TestAlertingEvalWithOrigin": {
      "Name": "TestAlertingEvalWithOrigin",
      "File": "rules/alerting_test.go",
      "Line": 964,
      "Receiver": ""
    },
    "TestAlertingRule": {
      "Name": "TestAlertingRule",
      "File": "rules/manager_test.go",
      "Line": 57,
      "Receiver": ""
    },
    "TestAlertingRuleDuplicate": {
      "Name": "TestAlertingRuleDuplicate",
      "File": "rules/alerting_test.go",
      "Line": 583,
      "Receiver": ""
    },
    "TestAlertingRuleEmptyLabelFromTemplate": {
      "Name": "TestAlertingRuleEmptyLabelFromTemplate",
      "File": "rules/alerting_test.go",
      "Line": 450,
      "Receiver": ""
    },
    "TestAlertingRuleExternalLabelsInTemplate": {
      "Name": "TestAlertingRuleExternalLabelsInTemplate",
      "File": "rules/alerting_test.go",
      "Line": 260,
      "Receiver": ""
    },
    "TestAlertingRuleExternalURLInTemplate": {
      "Name": "TestAlertingRuleExternalURLInTemplate",
      "File": "rules/alerting_test.go",
      "Line": 355,
      "Receiver": ""
    },
    "TestAlertingRuleLabelsUpdate": {
      "Name": "TestAlertingRuleLabelsUpdate",
      "File": "rules/alerting_test.go",
      "Line": 154,
      "Receiver": ""
    },
    "TestAlertingRuleLimit": {
      "Name": "TestAlertingRuleLimit",
      "File": "rules/alerting_test.go",
      "Line": 617,
      "Receiver": ""
    },
    "TestAlertingRuleQueryInTemplate": {
      "Name": "TestAlertingRuleQueryInTemplate",
      "File": "rules/alerting_test.go",
      "Line": 506,
      "Receiver": ""
    },
    "TestAlertingRuleState": {
      "Name": "TestAlertingRuleState",
      "File": "rules/alerting_test.go",
      "Line": 53,
      "Receiver": ""
    },
    "TestAlertingRuleTemplateWithHistogram": {
      "Name": "TestAlertingRuleTemplateWithHistogram",
      "File": "rules/alerting_test.go",
      "Line": 93,
      "Receiver": ""
    },
    "TestAlertingRule_ActiveAlertsCount": {
      "Name": "TestAlertingRule_ActiveAlertsCount",
      "File": "rules/alerting_test.go",
      "Line": 1051,
      "Receiver": ""
    },
    "TestAlertingRule_SetDependencyRules": {
      "Name": "TestAlertingRule_SetDependencyRules",
      "File": "rules/alerting_test.go",
      "Line": 1026,
      "Receiver": ""
    },
    "TestAlertingRule_SetDependentRules": {
      "Name": "TestAlertingRule_SetDependentRules",
      "File": "rules/alerting_test.go",
      "Line": 1001,
      "Receiver": ""
    },
    "TestAlignedBloc": {
      "Name": "TestAlignedBloc",
      "File": "tsdb/fileutil/direct_io_writer_test.go",
      "Line": 63,
      "Receiver": ""
    },
    "TestAlignedBlockEarlyPanic": {
      "Name": "TestAlignedBlockEarlyPanic",
      "File": "tsdb/fileutil/direct_io_writer_test.go",
      "Line": 44,
      "Receiver": ""
    },
    "TestAllFloatBucketIterator": {
      "Name": "TestAllFloatBucketIterator",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 2700,
      "Receiver": ""
    },
    "TestAllOptions": {
      "Name": "TestAllOptions",
      "File": "discovery/consul/consul_test.go",
      "Line": 351,
      "Receiver": ""
    },
    "TestAllReverseFloatBucketIterator": {
      "Name": "TestAllReverseFloatBucketIterator",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 2926,
      "Receiver": ""
    },
    "TestAllServices": {
      "Name": "TestAllServices",
      "File": "discovery/consul/consul_test.go",
      "Line": 296,
      "Receiver": ""
    },
    "TestAmendHistogramDatapointCausesError": {
      "Name": "TestAmendHistogramDatapointCausesError",
      "File": "tsdb/db_test.go",
      "Line": 490,
      "Receiver": ""
    },
    "TestApiStatusCodes": {
      "Name": "TestApiStatusCodes",
      "File": "web/api/v1/errors_test.go",
      "Line": 42,
      "Receiver": ""
    },
    "TestAppendEmptyLabelsIgnored": {
      "Name": "TestAppendEmptyLabelsIgnored",
      "File": "tsdb/db_test.go",
      "Line": 376,
      "Receiver": ""
    },
    "TestAppendHistogram": {
      "Name": "TestAppendHistogram",
      "File": "tsdb/head_test.go",
      "Line": 3891,
      "Receiver": ""
    },
    "TestAppendingDifferentEncodingToSameSeries": {
      "Name": "TestAppendingDifferentEncodingToSameSeries",
      "File": "tsdb/head_test.go",
      "Line": 5058,
      "Receiver": ""
    },
    "TestApplyConfig": {
      "Name": "TestApplyConfig",
      "File": "notifier/manager_test.go",
      "Line": 1023,
      "Receiver": ""
    },
    "TestApplyConfigDoesNotModifyStaticTargets": {
      "Name": "TestApplyConfigDoesNotModifyStaticTargets",
      "File": "discovery/manager_test.go",
      "Line": 1130,
      "Receiver": ""
    },
    "TestAssertMatrixSorted": {
      "Name": "TestAssertMatrixSorted",
      "File": "promql/promqltest/test_test.go",
      "Line": 966,
      "Receiver": ""
    },
    "TestAsyncRuleEvaluation": {
      "Name": "TestAsyncRuleEvaluation",
      "File": "rules/manager_test.go",
      "Line": 1973,
      "Receiver": ""
    },
    "TestAtFloatHistogram": {
      "Name": "TestAtFloatHistogram",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 1047,
      "Receiver": ""
    },
    "TestAtModifier": {
      "Name": "TestAtModifier",
      "File": "promql/engine_test.go",
      "Line": 1516,
      "Receiver": ""
    },
    "TestAuthorizationConfig": {
      "Name": "TestAuthorizationConfig",
      "File": "cmd/promtool/main_test.go",
      "Line": 337,
      "Receiver": ""
    },
    "TestAutoReloadConfig_ValidToInvalidToValid": {
      "Name": "TestAutoReloadConfig_ValidToInvalidToValid",
      "File": "cmd/prometheus/reload_test.go",
      "Line": 72,
      "Receiver": ""
    },
    "TestAutoReloadConfig_ValidToValid": {
      "Name": "TestAutoReloadConfig_ValidToValid",
      "File": "cmd/prometheus/reload_test.go",
      "Line": 37,
      "Receiver": ""
    },
    "TestAzureAd": {
      "Name": "TestAzureAd",
      "File": "storage/remote/azuread/azuread_test.go",
      "Line": 63,
      "Receiver": ""
    },
    "TestAzureAdConfig": {
      "Name": "TestAzureAdConfig",
      "File": "storage/remote/azuread/azuread_test.go",
      "Line": 140,
      "Receiver": ""
    },
    "TestAzureRefresh": {
      "Name": "TestAzureRefresh",
      "File": "discovery/azure/azure_test.go",
      "Line": 493,
      "Receiver": ""
    },
    "TestBackfill": {
      "Name": "TestBackfill",
      "File": "cmd/promtool/backfill_test.go",
      "Line": 88,
      "Receiver": ""
    },
    "TestBackfillLabels": {
      "Name": "TestBackfillLabels",
      "File": "cmd/promtool/rules_test.go",
      "Line": 214,
      "Receiver": ""
    },
    "TestBackfillRuleIntegration": {
      "Name": "TestBackfillRuleIntegration",
      "File": "cmd/promtool/rules_test.go",
      "Line": 45,
      "Receiver": ""
    },
    "TestBadConfigs": {
      "Name": "TestBadConfigs",
      "File": "config/config_test.go",
      "Line": 2492,
      "Receiver": ""
    },
    "TestBadStaticConfigsYML": {
      "Name": "TestBadStaticConfigsYML",
      "File": "config/config_test.go",
      "Line": 2500,
      "Receiver": ""
    },
    "TestBasicContentNegotiation": {
      "Name": "TestBasicContentNegotiation",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 70,
      "Receiver": ""
    },
    "TestBigEndian": {
      "Name": "TestBigEndian",
      "File": "tsdb/index/postings_test.go",
      "Line": 749,
      "Receiver": ""
    },
    "TestBinaryExprPretty": {
      "Name": "TestBinaryExprPretty",
      "File": "promql/parser/prettier_test.go",
      "Line": 124,
      "Receiver": ""
    },
    "TestBlockBaseSeriesSet": {
      "Name": "TestBlockBaseSeriesSet",
      "File": "tsdb/querier_test.go",
      "Line": 3399,
      "Receiver": ""
    },
    "TestBlockClosingBlockedDuringRemoteRead": {
      "Name": "TestBlockClosingBlockedDuringRemoteRead",
      "File": "tsdb/db_test.go",
      "Line": 9443,
      "Receiver": ""
    },
    "TestBlockIndexReader_PostingsForLabelMatching": {
      "Name": "TestBlockIndexReader_PostingsForLabelMatching",
      "File": "tsdb/block_test.go",
      "Line": 542,
      "Receiver": ""
    },
    "TestBlockMetaMustNeverBeVersion2": {
      "Name": "TestBlockMetaMustNeverBeVersion2",
      "File": "tsdb/block_test.go",
      "Line": 47,
      "Receiver": ""
    },
    "TestBlockQuerier": {
      "Name": "TestBlockQuerier",
      "File": "tsdb/querier_test.go",
      "Line": 284,
      "Receiver": ""
    },
    "TestBlockQuerierAndBlockChunkQuerier": {
      "Name": "TestBlockQuerierAndBlockChunkQuerier",
      "File": "tsdb/db_test.go",
      "Line": 9296,
      "Receiver": ""
    },
    "TestBlockQuerierDelete": {
      "Name": "TestBlockQuerierDelete",
      "File": "tsdb/querier_test.go",
      "Line": 596,
      "Receiver": ""
    },
    "TestBlockQuerierReturnsSortedLabelValues": {
      "Name": "TestBlockQuerierReturnsSortedLabelValues",
      "File": "tsdb/block_test.go",
      "Line": 314,
      "Receiver": ""
    },
    "TestBlockQuerier_AgainstHeadWithOpenChunks": {
      "Name": "TestBlockQuerier_AgainstHeadWithOpenChunks",
      "File": "tsdb/querier_test.go",
      "Line": 420,
      "Receiver": ""
    },
    "TestBlockQuerier_TrimmingDoesNotModifyOriginalTombstoneIntervals": {
      "Name": "TestBlockQuerier_TrimmingDoesNotModifyOriginalTombstoneIntervals",
      "File": "tsdb/querier_test.go",
      "Line": 531,
      "Receiver": ""
    },
    "TestBlockRanges": {
      "Name": "TestBlockRanges",
      "File": "tsdb/db_test.go",
      "Line": 2297,
      "Receiver": ""
    },
    "TestBlockSize": {
      "Name": "TestBlockSize",
      "File": "tsdb/block_test.go",
      "Line": 342,
      "Receiver": ""
    },
    "TestBlockWriter": {
      "Name": "TestBlockWriter",
      "File": "tsdb/blockwriter_test.go",
      "Line": 29,
      "Receiver": ""
    },
    "TestBlockingWriteClient.Endpoint": {
      "Name": "TestBlockingWriteClient.Endpoint",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1264,
      "Receiver": "TestBlockingWriteClient"
    },
    "TestBlockingWriteClient.Name": {
      "Name": "TestBlockingWriteClient.Name",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1260,
      "Receiver": "TestBlockingWriteClient"
    },
    "TestBlockingWriteClient.NumCalls": {
      "Name": "TestBlockingWriteClient.NumCalls",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1256,
      "Receiver": "TestBlockingWriteClient"
    },
    "TestBlockingWriteClient.Store": {
      "Name": "TestBlockingWriteClient.Store",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1250,
      "Receiver": "TestBlockingWriteClient"
    },
    "TestBoundedRuleEvalConcurrency": {
      "Name": "TestBoundedRuleEvalConcurrency",
      "File": "rules/manager_test.go",
      "Line": 2407,
      "Receiver": ""
    },
    "TestBstreamReader": {
      "Name": "TestBstreamReader",
      "File": "tsdb/chunkenc/bstream_test.go",
      "Line": 35,
      "Receiver": ""
    },
    "TestBstream_Reset": {
      "Name": "TestBstream_Reset",
      "File": "tsdb/chunkenc/bstream_test.go",
      "Line": 22,
      "Receiver": ""
    },
    "TestBucketIterator": {
      "Name": "TestBucketIterator",
      "File": "tsdb/chunkenc/histogram_meta_test.go",
      "Line": 36,
      "Receiver": ""
    },
    "TestBucketLimitAppender": {
      "Name": "TestBucketLimitAppender",
      "File": "scrape/target_test.go",
      "Line": 523,
      "Receiver": ""
    },
    "TestBucketQuantile_ForcedMonotonicity": {
      "Name": "TestBucketQuantile_ForcedMonotonicity",
      "File": "promql/quantile_test.go",
      "Line": 23,
      "Receiver": ""
    },
    "TestBufferedSeriesIterator": {
      "Name": "TestBufferedSeriesIterator",
      "File": "storage/buffer_test.go",
      "Line": 204,
      "Receiver": ""
    },
    "TestBufferedSeriesIteratorMixedFloatsAndHistograms": {
      "Name": "TestBufferedSeriesIteratorMixedFloatsAndHistograms",
      "File": "storage/buffer_test.go",
      "Line": 317,
      "Receiver": ""
    },
    "TestBufferedSeriesIteratorMixedHistograms": {
      "Name": "TestBufferedSeriesIteratorMixedHistograms",
      "File": "storage/buffer_test.go",
      "Line": 295,
      "Receiver": ""
    },
    "TestBufferedSeriesIteratorNoBadAt": {
      "Name": "TestBufferedSeriesIteratorNoBadAt",
      "File": "storage/buffer_test.go",
      "Line": 271,
      "Receiver": ""
    },
    "TestBuildTimeSeries": {
      "Name": "TestBuildTimeSeries",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 2103,
      "Receiver": ""
    },
    "TestBuilder": {
      "Name": "TestBuilder",
      "File": "model/labels/labels_test.go",
      "Line": 736,
      "Receiver": ""
    },
    "TestByteSize": {
      "Name": "TestByteSize",
      "File": "model/labels/labels_test.go",
      "Line": 77,
      "Receiver": ""
    },
    "TestCORSHandler": {
      "Name": "TestCORSHandler",
      "File": "util/httputil/cors_test.go",
      "Line": 33,
      "Receiver": ""
    },
    "TestCTParseFailures": {
      "Name": "TestCTParseFailures",
      "File": "model/textparse/openmetricsparse_test.go",
      "Line": 1114,
      "Receiver": ""
    },
    "TestCalcClassicBucketStatistics": {
      "Name": "TestCalcClassicBucketStatistics",
      "File": "cmd/promtool/analyze_test.go",
      "Line": 148,
      "Receiver": ""
    },
    "TestCalculateDesiredShards": {
      "Name": "TestCalculateDesiredShards",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1506,
      "Receiver": ""
    },
    "TestCalculateDesiredShardsDetail": {
      "Name": "TestCalculateDesiredShardsDetail",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1577,
      "Receiver": ""
    },
    "TestCalculateDuration": {
      "Name": "TestCalculateDuration",
      "File": "promql/durations_test.go",
      "Line": 101,
      "Receiver": ""
    },
    "TestCallExprPretty": {
      "Name": "TestCallExprPretty",
      "File": "promql/parser/prettier_test.go",
      "Line": 196,
      "Receiver": ""
    },
    "TestCancelCompactions": {
      "Name": "TestCancelCompactions",
      "File": "tsdb/compact_test.go",
      "Line": 1312,
      "Receiver": ""
    },
    "TestChainSampleIterator": {
      "Name": "TestChainSampleIterator",
      "File": "storage/merge_test.go",
      "Line": 1060,
      "Receiver": ""
    },
    "TestChainSampleIteratorHistogramCounterResetHint": {
      "Name": "TestChainSampleIteratorHistogramCounterResetHint",
      "File": "storage/merge_test.go",
      "Line": 1115,
      "Receiver": ""
    },
    "TestChainSampleIteratorNextImmediatelyFailingIterator": {
      "Name": "TestChainSampleIteratorNextImmediatelyFailingIterator",
      "File": "storage/merge_test.go",
      "Line": 1254,
      "Receiver": ""
    },
    "TestChainSampleIteratorSeek": {
      "Name": "TestChainSampleIteratorSeek",
      "File": "storage/merge_test.go",
      "Line": 1177,
      "Receiver": ""
    },
    "TestChainSampleIteratorSeekFailingIterator": {
      "Name": "TestChainSampleIteratorSeekFailingIterator",
      "File": "storage/merge_test.go",
      "Line": 1244,
      "Receiver": ""
    },
    "TestChainSampleIteratorSeekHistogramCounterResetHint": {
      "Name": "TestChainSampleIteratorSeekHistogramCounterResetHint",
      "File": "storage/merge_test.go",
      "Line": 1273,
      "Receiver": ""
    },
    "TestCheckAddError": {
      "Name": "TestCheckAddError",
      "File": "scrape/scrape_test.go",
      "Line": 3863,
      "Receiver": ""
    },
    "TestCheckConfigSyntax": {
      "Name": "TestCheckConfigSyntax",
      "File": "cmd/promtool/main_test.go",
      "Line": 248,
      "Receiver": ""
    },
    "TestCheckDuplicates": {
      "Name": "TestCheckDuplicates",
      "File": "cmd/promtool/main_test.go",
      "Line": 162,
      "Receiver": ""
    },
    "TestCheckMetricsExtended": {
      "Name": "TestCheckMetricsExtended",
      "File": "cmd/promtool/main_test.go",
      "Line": 369,
      "Receiver": ""
    },
    "TestCheckRules": {
      "Name": "TestCheckRules",
      "File": "cmd/promtool/main_test.go",
      "Line": 493,
      "Receiver": ""
    },
    "TestCheckRulesWithFeatureFlag": {
      "Name": "TestCheckRulesWithFeatureFlag",
      "File": "cmd/promtool/main_test.go",
      "Line": 561,
      "Receiver": ""
    },
    "TestCheckRulesWithRuleFiles": {
      "Name": "TestCheckRulesWithRuleFiles",
      "File": "cmd/promtool/main_test.go",
      "Line": 571,
      "Receiver": ""
    },
    "TestCheckSDFile": {
      "Name": "TestCheckSDFile",
      "File": "cmd/promtool/main_test.go",
      "Line": 119,
      "Receiver": ""
    },
    "TestCheckScrapeConfigs": {
      "Name": "TestCheckScrapeConfigs",
      "File": "cmd/promtool/main_test.go",
      "Line": 591,
      "Receiver": ""
    },
    "TestCheckTargetConfig": {
      "Name": "TestCheckTargetConfig",
      "File": "cmd/promtool/main_test.go",
      "Line": 207,
      "Receiver": ""
    },
    "TestCheckpoint": {
      "Name": "TestCheckpoint",
      "File": "tsdb/wlog/checkpoint_test.go",
      "Line": 115,
      "Receiver": ""
    },
    "TestCheckpointNoTmpFolderAfterError": {
      "Name": "TestCheckpointNoTmpFolderAfterError",
      "File": "tsdb/wlog/checkpoint_test.go",
      "Line": 385,
      "Receiver": ""
    },
    "TestCheckpointSeriesReset": {
      "Name": "TestCheckpointSeriesReset",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 587,
      "Receiver": ""
    },
    "TestChunk": {
      "Name": "TestChunk",
      "File": "tsdb/chunkenc/chunk_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "TestChunkAtBlockBoundary": {
      "Name": "TestChunkAtBlockBoundary",
      "File": "tsdb/db_test.go",
      "Line": 1837,
      "Receiver": ""
    },
    "TestChunkDiskMapper_Truncate": {
      "Name": "TestChunkDiskMapper_Truncate",
      "File": "tsdb/chunks/head_chunks_test.go",
      "Line": 183,
      "Receiver": ""
    },
    "TestChunkDiskMapper_Truncate_PreservesFileSequence": {
      "Name": "TestChunkDiskMapper_Truncate_PreservesFileSequence",
      "File": "tsdb/chunks/head_chunks_test.go",
      "Line": 277,
      "Receiver": ""
    },
    "TestChunkDiskMapper_Truncate_WriteQueueRaceCondition": {
      "Name": "TestChunkDiskMapper_Truncate_WriteQueueRaceCondition",
      "File": "tsdb/chunks/head_chunks_test.go",
      "Line": 361,
      "Receiver": ""
    },
    "TestChunkDiskMapper_WriteChunk_Chunk_IterateChunks": {
      "Name": "TestChunkDiskMapper_WriteChunk_Chunk_IterateChunks",
      "File": "tsdb/chunks/head_chunks_test.go",
      "Line": 47,
      "Receiver": ""
    },
    "TestChunkNotFoundHeadGCRace": {
      "Name": "TestChunkNotFoundHeadGCRace",
      "File": "tsdb/head_test.go",
      "Line": 3548,
      "Receiver": ""
    },
    "TestChunkQuerierOOOQuery": {
      "Name": "TestChunkQuerierOOOQuery",
      "File": "tsdb/db_test.go",
      "Line": 5836,
      "Receiver": ""
    },
    "TestChunkQuerierReadWriteRace": {
      "Name": "TestChunkQuerierReadWriteRace",
      "File": "tsdb/db_test.go",
      "Line": 9133,
      "Receiver": ""
    },
    "TestChunkQuerier_ShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks": {
      "Name": "TestChunkQuerier_ShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks",
      "File": "tsdb/db_test.go",
      "Line": 3552,
      "Receiver": ""
    },
    "TestChunkQueryOOOHeadDuringTruncate": {
      "Name": "TestChunkQueryOOOHeadDuringTruncate",
      "File": "tsdb/head_test.go",
      "Line": 3787,
      "Receiver": ""
    },
    "TestChunkReader_ConcurrentReads": {
      "Name": "TestChunkReader_ConcurrentReads",
      "File": "tsdb/db_test.go",
      "Line": 3005,
      "Receiver": ""
    },
    "TestChunkSeriesSetToSeriesSet": {
      "Name": "TestChunkSeriesSetToSeriesSet",
      "File": "storage/series_test.go",
      "Line": 76,
      "Receiver": ""
    },
    "TestChunkSnapshot": {
      "Name": "TestChunkSnapshot",
      "File": "tsdb/head_test.go",
      "Line": 4178,
      "Receiver": ""
    },
    "TestChunkSnapshotReplayBug": {
      "Name": "TestChunkSnapshotReplayBug",
      "File": "tsdb/head_test.go",
      "Line": 5209,
      "Receiver": ""
    },
    "TestChunkSnapshotTakenAfterIncompleteSnapshot": {
      "Name": "TestChunkSnapshotTakenAfterIncompleteSnapshot",
      "File": "tsdb/head_test.go",
      "Line": 5276,
      "Receiver": ""
    },
    "TestChunkWriteQueue_GettingChunkFromQueue": {
      "Name": "TestChunkWriteQueue_GettingChunkFromQueue",
      "File": "tsdb/chunks/chunk_write_queue_test.go",
      "Line": 29,
      "Receiver": ""
    },
    "TestChunkWriteQueue_HandlerErrorViaCallback": {
      "Name": "TestChunkWriteQueue_HandlerErrorViaCallback",
      "File": "tsdb/chunks/chunk_write_queue_test.go",
      "Line": 185,
      "Receiver": ""
    },
    "TestChunkWriteQueue_WrappingAroundSizeLimit": {
      "Name": "TestChunkWriteQueue_WrappingAroundSizeLimit",
      "File": "tsdb/chunks/chunk_write_queue_test.go",
      "Line": 99,
      "Receiver": ""
    },
    "TestChunkWriteQueue_WritingThroughQueue": {
      "Name": "TestChunkWriteQueue_WritingThroughQueue",
      "File": "tsdb/chunks/chunk_write_queue_test.go",
      "Line": 57,
      "Receiver": ""
    },
    "TestChunkWriter_ReadAfterWrite": {
      "Name": "TestChunkWriter_ReadAfterWrite",
      "File": "tsdb/db_test.go",
      "Line": 2801,
      "Receiver": ""
    },
    "TestChunkedReaderCanReadFromChunkedWriter": {
      "Name": "TestChunkedReaderCanReadFromChunkedWriter",
      "File": "storage/remote/chunked_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "TestChunkedReader_CorruptedFrame": {
      "Name": "TestChunkedReader_CorruptedFrame",
      "File": "storage/remote/chunked_test.go",
      "Line": 92,
      "Receiver": ""
    },
    "TestChunkedReader_Overflow": {
      "Name": "TestChunkedReader_Overflow",
      "File": "storage/remote/chunked_test.go",
      "Line": 75,
      "Receiver": ""
    },
    "TestChunkedSeries": {
      "Name": "TestChunkedSeries",
      "File": "storage/remote/codec_test.go",
      "Line": 862,
      "Receiver": ""
    },
    "TestChunkedSeriesIterator": {
      "Name": "TestChunkedSeriesIterator",
      "File": "storage/remote/codec_test.go",
      "Line": 755,
      "Receiver": ""
    },
    "TestChunkedSeriesSet": {
      "Name": "TestChunkedSeriesSet",
      "File": "storage/remote/codec_test.go",
      "Line": 890,
      "Receiver": ""
    },
    "TestChunksRefOrdering": {
      "Name": "TestChunksRefOrdering",
      "File": "tsdb/index/index_test.go",
      "Line": 568,
      "Receiver": ""
    },
    "TestChunksTimeOrdering": {
      "Name": "TestChunksTimeOrdering",
      "File": "tsdb/index/index_test.go",
      "Line": 588,
      "Receiver": ""
    },
    "TestCircularExemplarStorage_Concurrent_AddExemplar_Resize": {
      "Name": "TestCircularExemplarStorage_Concurrent_AddExemplar_Resize",
      "File": "tsdb/exemplar_test.go",
      "Line": 506,
      "Receiver": ""
    },
    "TestClient": {
      "Name": "TestClient",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client_test.go",
      "Line": 28,
      "Receiver": ""
    },
    "TestClientCustomHeaders": {
      "Name": "TestClientCustomHeaders",
      "File": "storage/remote/client_test.go",
      "Line": 178,
      "Receiver": ""
    },
    "TestClientRetryAfter": {
      "Name": "TestClientRetryAfter",
      "File": "storage/remote/client_test.go",
      "Line": 93,
      "Receiver": ""
    },
    "TestClose": {
      "Name": "TestClose",
      "File": "tsdb/wlog/wlog_test.go",
      "Line": 338,
      "Receiver": ""
    },
    "TestCommit": {
      "Name": "TestCommit",
      "File": "tsdb/agent/db_test.go",
      "Line": 124,
      "Receiver": ""
    },
    "TestCommitErr_V1Message": {
      "Name": "TestCommitErr_V1Message",
      "File": "storage/remote/write_handler_test.go",
      "Line": 698,
      "Receiver": ""
    },
    "TestCommitErr_V2Message": {
      "Name": "TestCommitErr_V2Message",
      "File": "storage/remote/write_handler_test.go",
      "Line": 718,
      "Receiver": ""
    },
    "TestCompactBlockMetas": {
      "Name": "TestCompactBlockMetas",
      "File": "tsdb/compact_test.go",
      "Line": 1883,
      "Receiver": ""
    },
    "TestCompactEmptyResultBlockWithTombstone": {
      "Name": "TestCompactEmptyResultBlockWithTombstone",
      "File": "tsdb/compact_test.go",
      "Line": 1918,
      "Receiver": ""
    },
    "TestCompactHead": {
      "Name": "TestCompactHead",
      "File": "tsdb/db_test.go",
      "Line": 3051,
      "Receiver": ""
    },
    "TestCompactHeadWithDeletion": {
      "Name": "TestCompactHeadWithDeletion",
      "File": "tsdb/db_test.go",
      "Line": 3110,
      "Receiver": ""
    },
    "TestCompactingChunkSeriesMerger": {
      "Name": "TestCompactingChunkSeriesMerger",
      "File": "storage/merge_test.go",
      "Line": 407,
      "Receiver": ""
    },
    "TestCompactingChunkSeriesMergerHistogramCounterResetHint": {
      "Name": "TestCompactingChunkSeriesMergerHistogramCounterResetHint",
      "File": "storage/merge_test.go",
      "Line": 604,
      "Receiver": ""
    },
    "TestCompactionFailWillCleanUpTempDir": {
      "Name": "TestCompactionFailWillCleanUpTempDir",
      "File": "tsdb/compact_test.go",
      "Line": 436,
      "Receiver": ""
    },
    "TestCompaction_populateBlock": {
      "Name": "TestCompaction_populateBlock",
      "File": "tsdb/compact_test.go",
      "Line": 492,
      "Receiver": ""
    },
    "TestCompareSpansAndInsert": {
      "Name": "TestCompareSpansAndInsert",
      "File": "tsdb/chunkenc/histogram_meta_test.go",
      "Line": 114,
      "Receiver": ""
    },
    "TestCompression": {
      "Name": "TestCompression",
      "File": "tsdb/wlog/wlog_test.go",
      "Line": 371,
      "Receiver": ""
    },
    "TestCompressionHandler_Deflate": {
      "Name": "TestCompressionHandler_Deflate",
      "File": "util/httputil/compression_test.go",
      "Line": 122,
      "Receiver": ""
    },
    "TestCompressionHandler_Gzip": {
      "Name": "TestCompressionHandler_Gzip",
      "File": "util/httputil/compression_test.go",
      "Line": 87,
      "Receiver": ""
    },
    "TestCompressionHandler_PlainText": {
      "Name": "TestCompressionHandler_PlainText",
      "File": "util/httputil/compression_test.go",
      "Line": 52,
      "Receiver": ""
    },
    "TestComputeChunkEndTime": {
      "Name": "TestComputeChunkEndTime",
      "File": "tsdb/head_test.go",
      "Line": 1898,
      "Receiver": ""
    },
    "TestComputeExternalURL": {
      "Name": "TestComputeExternalURL",
      "File": "cmd/prometheus/main_test.go",
      "Line": 79,
      "Receiver": ""
    },
    "TestConcatenatingChunkIterator": {
      "Name": "TestConcatenatingChunkIterator",
      "File": "storage/merge_test.go",
      "Line": 855,
      "Receiver": ""
    },
    "TestConcatenatingChunkSeriesMerger": {
      "Name": "TestConcatenatingChunkSeriesMerger",
      "File": "storage/merge_test.go",
      "Line": 721,
      "Receiver": ""
    },
    "TestConcreteSeriesClonesLabels": {
      "Name": "TestConcreteSeriesClonesLabels",
      "File": "storage/remote/codec_test.go",
      "Line": 328,
      "Receiver": ""
    },
    "TestConcreteSeriesIterator_FloatAndHistogramSamples": {
      "Name": "TestConcreteSeriesIterator_FloatAndHistogramSamples",
      "File": "storage/remote/codec_test.go",
      "Line": 447,
      "Receiver": ""
    },
    "TestConcreteSeriesIterator_FloatSamples": {
      "Name": "TestConcreteSeriesIterator_FloatSamples",
      "File": "storage/remote/codec_test.go",
      "Line": 343,
      "Receiver": ""
    },
    "TestConcreteSeriesIterator_HistogramSamples": {
      "Name": "TestConcreteSeriesIterator_HistogramSamples",
      "File": "storage/remote/codec_test.go",
      "Line": 392,
      "Receiver": ""
    },
    "TestConcreteSeriesSet": {
      "Name": "TestConcreteSeriesSet",
      "File": "storage/remote/codec_test.go",
      "Line": 309,
      "Receiver": ""
    },
    "TestConcurrentRangeQueries": {
      "Name": "TestConcurrentRangeQueries",
      "File": "promql/promql_test.go",
      "Line": 40,
      "Receiver": ""
    },
    "TestConfigReloadAndShutdownRace": {
      "Name": "TestConfigReloadAndShutdownRace",
      "File": "discovery/manager_test.go",
      "Line": 1568,
      "Receiver": ""
    },
    "TestConfig_UnmarshalThenMarshal": {
      "Name": "TestConfig_UnmarshalThenMarshal",
      "File": "model/relabel/relabel_test.go",
      "Line": 1041,
      "Receiver": ""
    },
    "TestConfigsCustomUnMarshalMarshal": {
      "Name": "TestConfigsCustomUnMarshalMarshal",
      "File": "discovery/discovery_test.go",
      "Line": 23,
      "Receiver": ""
    },
    "TestConfiguredService": {
      "Name": "TestConfiguredService",
      "File": "discovery/nomad/nomad_test.go",
      "Line": 129,
      "Receiver": ""
    },
    "TestConfiguredServiceWithTag": {
      "Name": "TestConfiguredServiceWithTag",
      "File": "discovery/consul/consul_test.go",
      "Line": 66,
      "Receiver": ""
    },
    "TestConfiguredServiceWithTags": {
      "Name": "TestConfiguredServiceWithTags",
      "File": "discovery/consul/consul_test.go",
      "Line": 89,
      "Receiver": ""
    },
    "TestContainsInOrder": {
      "Name": "TestContainsInOrder",
      "File": "model/labels/regexp_test.go",
      "Line": 1308,
      "Receiver": ""
    },
    "TestContentTypeRegex": {
      "Name": "TestContentTypeRegex",
      "File": "discovery/http/http_test.go",
      "Line": 155,
      "Receiver": ""
    },
    "TestConvertBucketsLayout": {
      "Name": "TestConvertBucketsLayout",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms_test.go",
      "Line": 39,
      "Receiver": ""
    },
    "TestConvertClassicHistogramsToNHCB": {
      "Name": "TestConvertClassicHistogramsToNHCB",
      "File": "scrape/scrape_test.go",
      "Line": 4279,
      "Receiver": ""
    },
    "TestConvertExplicitHistogramBucketsToNHCBLayout": {
      "Name": "TestConvertExplicitHistogramBucketsToNHCBLayout",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms_test.go",
      "Line": 872,
      "Receiver": ""
    },
    "TestCoordinationWithReceiver": {
      "Name": "TestCoordinationWithReceiver",
      "File": "discovery/manager_test.go",
      "Line": 1232,
      "Receiver": ""
    },
    "TestCopyState": {
      "Name": "TestCopyState",
      "File": "rules/manager_test.go",
      "Line": 670,
      "Receiver": ""
    },
    "TestCorrectNumTombstones": {
      "Name": "TestCorrectNumTombstones",
      "File": "tsdb/db_test.go",
      "Line": 2247,
      "Receiver": ""
    },
    "TestCorruptAndCarryOn": {
      "Name": "TestCorruptAndCarryOn",
      "File": "tsdb/wlog/wlog_test.go",
      "Line": 214,
      "Receiver": ""
    },
    "TestCorruptedChunk": {
      "Name": "TestCorruptedChunk",
      "File": "tsdb/block_test.go",
      "Line": 94,
      "Receiver": ""
    },
    "TestCreateAttributes": {
      "Name": "TestCreateAttributes",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper_test.go",
      "Line": 34,
      "Receiver": ""
    },
    "TestCreateBlock": {
      "Name": "TestCreateBlock",
      "File": "tsdb/block_test.go",
      "Line": 75,
      "Receiver": ""
    },
    "TestCreateNewHTTPResourceClient": {
      "Name": "TestCreateNewHTTPResourceClient",
      "File": "discovery/xds/client_test.go",
      "Line": 72,
      "Receiver": ""
    },
    "TestCumulativeBucketIterator": {
      "Name": "TestCumulativeBucketIterator",
      "File": "model/histogram/histogram_test.go",
      "Line": 97,
      "Receiver": ""
    },
    "TestCustomBucketsHistogramToFloat": {
      "Name": "TestCustomBucketsHistogramToFloat",
      "File": "model/histogram/histogram_test.go",
      "Line": 555,
      "Receiver": ""
    },
    "TestCustomDo": {
      "Name": "TestCustomDo",
      "File": "notifier/manager_test.go",
      "Line": 357,
      "Receiver": ""
    },
    "TestCuttingNewHeadChunks": {
      "Name": "TestCuttingNewHeadChunks",
      "File": "tsdb/head_test.go",
      "Line": 6086,
      "Receiver": ""
    },
    "TestDBAllowOOOSamples": {
      "Name": "TestDBAllowOOOSamples",
      "File": "tsdb/agent/db_test.go",
      "Line": 910,
      "Receiver": ""
    },
    "TestDBAppenderAddRef": {
      "Name": "TestDBAppenderAddRef",
      "File": "tsdb/db_test.go",
      "Line": 318,
      "Receiver": ""
    },
    "TestDBCannotSeePartialCommits": {
      "Name": "TestDBCannotSeePartialCommits",
      "File": "tsdb/db_test.go",
      "Line": 2655,
      "Receiver": ""
    },
    "TestDBCreatedTimestampSamplesIngestion": {
      "Name": "TestDBCreatedTimestampSamplesIngestion",
      "File": "tsdb/agent/db_test.go",
      "Line": 1145,
      "Receiver": ""
    },
    "TestDBOutOfOrderTimeWindow": {
      "Name": "TestDBOutOfOrderTimeWindow",
      "File": "tsdb/agent/db_test.go",
      "Line": 1087,
      "Receiver": ""
    },
    "TestDBPanicOnMmappingHeadChunk": {
      "Name": "TestDBPanicOnMmappingHeadChunk",
      "File": "tsdb/db_test.go",
      "Line": 4532,
      "Receiver": ""
    },
    "TestDBQueryDoesntSeeAppendsAfterCreation": {
      "Name": "TestDBQueryDoesntSeeAppendsAfterCreation",
      "File": "tsdb/db_test.go",
      "Line": 2726,
      "Receiver": ""
    },
    "TestDBReadOnly": {
      "Name": "TestDBReadOnly",
      "File": "tsdb/db_test.go",
      "Line": 2380,
      "Receiver": ""
    },
    "TestDBReadOnlyClosing": {
      "Name": "TestDBReadOnlyClosing",
      "File": "tsdb/db_test.go",
      "Line": 2499,
      "Receiver": ""
    },
    "TestDBReadOnly_FlushWAL": {
      "Name": "TestDBReadOnly_FlushWAL",
      "File": "tsdb/db_test.go",
      "Line": 2515,
      "Receiver": ""
    },
    "TestDBReadOnly_Querier_NoAlteration": {
      "Name": "TestDBReadOnly_Querier_NoAlteration",
      "File": "tsdb/db_test.go",
      "Line": 2580,
      "Receiver": ""
    },
    "TestDB_InvalidSeries": {
      "Name": "TestDB_InvalidSeries",
      "File": "tsdb/agent/db_test.go",
      "Line": 46,
      "Receiver": ""
    },
    "TestDB_LabelNames": {
      "Name": "TestDB_LabelNames",
      "File": "tsdb/db_test.go",
      "Line": 2142,
      "Receiver": ""
    },
    "TestDB_Snapshot": {
      "Name": "TestDB_Snapshot",
      "File": "tsdb/db_test.go",
      "Line": 641,
      "Receiver": ""
    },
    "TestDB_SnapshotWithDelete": {
      "Name": "TestDB_SnapshotWithDelete",
      "File": "tsdb/db_test.go",
      "Line": 736,
      "Receiver": ""
    },
    "TestDB_Snapshot_ChunksOutsideOfCompactedRange": {
      "Name": "TestDB_Snapshot_ChunksOutsideOfCompactedRange",
      "File": "tsdb/db_test.go",
      "Line": 688,
      "Receiver": ""
    },
    "TestDB_e2e": {
      "Name": "TestDB_e2e",
      "File": "tsdb/db_test.go",
      "Line": 824,
      "Receiver": ""
    },
    "TestDB_reloadOrder": {
      "Name": "TestDB_reloadOrder",
      "File": "tsdb/db_test.go",
      "Line": 184,
      "Receiver": ""
    },
    "TestDNS": {
      "Name": "TestDNS",
      "File": "discovery/dns/dns_test.go",
      "Line": 39,
      "Receiver": ""
    },
    "TestDataAvailableOnlyAfterCommit": {
      "Name": "TestDataAvailableOnlyAfterCommit",
      "File": "tsdb/db_test.go",
      "Line": 210,
      "Receiver": ""
    },
    "TestDataMissingOnQueryDuringCompaction": {
      "Name": "TestDataMissingOnQueryDuringCompaction",
      "File": "tsdb/head_test.go",
      "Line": 3614,
      "Receiver": ""
    },
    "TestDataNotAvailableAfterRollback": {
      "Name": "TestDataNotAvailableAfterRollback",
      "File": "tsdb/db_test.go",
      "Line": 296,
      "Receiver": ""
    },
    "TestDebugHandler": {
      "Name": "TestDebugHandler",
      "File": "web/web_test.go",
      "Line": 287,
      "Receiver": ""
    },
    "TestDecbufUvarintWithInvalidBuffer": {
      "Name": "TestDecbufUvarintWithInvalidBuffer",
      "File": "tsdb/index/index_test.go",
      "Line": 462,
      "Receiver": ""
    },
    "TestDecodeWriteRequest": {
      "Name": "TestDecodeWriteRequest",
      "File": "storage/remote/codec_test.go",
      "Line": 620,
      "Receiver": ""
    },
    "TestDecodeWriteV2Request": {
      "Name": "TestDecodeWriteV2Request",
      "File": "storage/remote/codec_test.go",
      "Line": 629,
      "Receiver": ""
    },
    "TestDecoder_Postings_WrongInput": {
      "Name": "TestDecoder_Postings_WrongInput",
      "File": "tsdb/index/index_test.go",
      "Line": 562,
      "Receiver": ""
    },
    "TestDedupe": {
      "Name": "TestDedupe",
      "File": "util/logging/dedupe_test.go",
      "Line": 27,
      "Receiver": ""
    },
    "TestDedupeConcurrent": {
      "Name": "TestDedupeConcurrent",
      "File": "util/logging/dedupe_test.go",
      "Line": 60,
      "Receiver": ""
    },
    "TestDelayedCompaction": {
      "Name": "TestDelayedCompaction",
      "File": "tsdb/compact_test.go",
      "Line": 1937,
      "Receiver": ""
    },
    "TestDelayedCompactionDoesNotBlockUnrelatedOps": {
      "Name": "TestDelayedCompactionDoesNotBlockUnrelatedOps",
      "File": "tsdb/compact_test.go",
      "Line": 2103,
      "Receiver": ""
    },
    "TestDeleteCheckpoints": {
      "Name": "TestDeleteCheckpoints",
      "File": "tsdb/wlog/checkpoint_test.go",
      "Line": 80,
      "Receiver": ""
    },
    "TestDeleteCompactionBlockAfterFailedReload": {
      "Name": "TestDeleteCompactionBlockAfterFailedReload",
      "File": "tsdb/compact_test.go",
      "Line": 1381,
      "Receiver": ""
    },
    "TestDeleteSimple": {
      "Name": "TestDeleteSimple",
      "File": "tsdb/db_test.go",
      "Line": 399,
      "Receiver": ""
    },
    "TestDeleteUntilCurMax": {
      "Name": "TestDeleteUntilCurMax",
      "File": "tsdb/head_test.go",
      "Line": 1613,
      "Receiver": ""
    },
    "TestDelete_e2e": {
      "Name": "TestDelete_e2e",
      "File": "tsdb/head_test.go",
      "Line": 1707,
      "Receiver": ""
    },
    "TestDeletedIterator": {
      "Name": "TestDeletedIterator",
      "File": "tsdb/querier_test.go",
      "Line": 2089,
      "Receiver": ""
    },
    "TestDeletedIterator_WithSeek": {
      "Name": "TestDeletedIterator_WithSeek",
      "File": "tsdb/querier_test.go",
      "Line": 2149,
      "Receiver": ""
    },
    "TestDeletedRuleMarkedStale": {
      "Name": "TestDeletedRuleMarkedStale",
      "File": "rules/manager_test.go",
      "Line": 725,
      "Receiver": ""
    },
    "TestDeletedSamplesAndSeriesStillInWALAfterCheckpoint": {
      "Name": "TestDeletedSamplesAndSeriesStillInWALAfterCheckpoint",
      "File": "tsdb/head_test.go",
      "Line": 1663,
      "Receiver": ""
    },
    "TestDeletingTombstones": {
      "Name": "TestDeletingTombstones",
      "File": "tsdb/tombstones/tombstones_test.go",
      "Line": 63,
      "Receiver": ""
    },
    "TestDependenciesEdgeCases": {
      "Name": "TestDependenciesEdgeCases",
      "File": "rules/manager_test.go",
      "Line": 1661,
      "Receiver": ""
    },
    "TestDependencyMap": {
      "Name": "TestDependencyMap",
      "File": "rules/manager_test.go",
      "Line": 1580,
      "Receiver": ""
    },
    "TestDependencyMapUpdatesOnGroupUpdate": {
      "Name": "TestDependencyMapUpdatesOnGroupUpdate",
      "File": "rules/manager_test.go",
      "Line": 1909,
      "Receiver": ""
    },
    "TestDependentRulesWithNonMetricExpression": {
      "Name": "TestDependentRulesWithNonMetricExpression",
      "File": "rules/manager_test.go",
      "Line": 1848,
      "Receiver": ""
    },
    "TestDeriv": {
      "Name": "TestDeriv",
      "File": "promql/functions_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "TestDialContextWithRandomConnections": {
      "Name": "TestDialContextWithRandomConnections",
      "File": "storage/remote/dial_context_test.go",
      "Line": 99,
      "Receiver": ""
    },
    "TestDigitalOceanSDRefresh": {
      "Name": "TestDigitalOceanSDRefresh",
      "File": "discovery/digitalocean/digitalocean_test.go",
      "Line": 45,
      "Receiver": ""
    },
    "TestDirLockerUsage": {
      "Name": "TestDirLockerUsage",
      "File": "tsdb/tsdbutil/dir_locker_testutil.go",
      "Line": 31,
      "Receiver": ""
    },
    "TestDirectIOFile": {
      "Name": "TestDirectIOFile",
      "File": "tsdb/fileutil/direct_io_writer_test.go",
      "Line": 35,
      "Receiver": ""
    },
    "TestDirectIOWriter": {
      "Name": "TestDirectIOWriter",
      "File": "tsdb/fileutil/direct_io_writer_test.go",
      "Line": 71,
      "Receiver": ""
    },
    "TestDisableAutoCompactions": {
      "Name": "TestDisableAutoCompactions",
      "File": "tsdb/compact_test.go",
      "Line": 1259,
      "Receiver": ""
    },
    "TestDisableReshardOnRetry": {
      "Name": "TestDisableReshardOnRetry",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 750,
      "Receiver": ""
    },
    "TestDiscoveredLabelsUpdate": {
      "Name": "TestDiscoveredLabelsUpdate",
      "File": "scrape/scrape_test.go",
      "Line": 368,
      "Receiver": ""
    },
    "TestDiscoverer": {
      "Name": "TestDiscoverer",
      "File": "discovery/ovhcloud/ovhcloud_test.go",
      "Line": 122,
      "Receiver": ""
    },
    "TestDiscovererConfigs": {
      "Name": "TestDiscovererConfigs",
      "File": "discovery/manager_test.go",
      "Line": 1018,
      "Receiver": ""
    },
    "TestDiskFillingUpAfterDisablingOOO": {
      "Name": "TestDiskFillingUpAfterDisablingOOO",
      "File": "tsdb/db_test.go",
      "Line": 8413,
      "Receiver": ""
    },
    "TestDockerSDRefresh": {
      "Name": "TestDockerSDRefresh",
      "File": "discovery/moby/docker_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "TestDockerSDRefreshMatchAllNetworks": {
      "Name": "TestDockerSDRefreshMatchAllNetworks",
      "File": "discovery/moby/docker_test.go",
      "Line": 209,
      "Receiver": ""
    },
    "TestDockerSwarmNodesSDRefresh": {
      "Name": "TestDockerSwarmNodesSDRefresh",
      "File": "discovery/moby/nodes_test.go",
      "Line": 30,
      "Receiver": ""
    },
    "TestDockerSwarmSDServicesRefresh": {
      "Name": "TestDockerSwarmSDServicesRefresh",
      "File": "discovery/moby/services_test.go",
      "Line": 30,
      "Receiver": ""
    },
    "TestDockerSwarmSDServicesRefreshWithFilters": {
      "Name": "TestDockerSwarmSDServicesRefreshWithFilters",
      "File": "discovery/moby/services_test.go",
      "Line": 328,
      "Receiver": ""
    },
    "TestDockerSwarmTasksSDRefresh": {
      "Name": "TestDockerSwarmTasksSDRefresh",
      "File": "discovery/moby/tasks_test.go",
      "Line": 30,
      "Receiver": ""
    },
    "TestDocumentation": {
      "Name": "TestDocumentation",
      "File": "cmd/promtool/main_test.go",
      "Line": 465,
      "Receiver": ""
    },
    "TestDropOldTimeSeries": {
      "Name": "TestDropOldTimeSeries",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1933,
      "Receiver": ""
    },
    "TestDroppedAlertmanagers": {
      "Name": "TestDroppedAlertmanagers",
      "File": "notifier/manager_test.go",
      "Line": 639,
      "Receiver": ""
    },
    "TestDroppedTargetsList": {
      "Name": "TestDroppedTargetsList",
      "File": "scrape/scrape_test.go",
      "Line": 324,
      "Receiver": ""
    },
    "TestDuplicateNaNDatapointNoAmendError": {
      "Name": "TestDuplicateNaNDatapointNoAmendError",
      "File": "tsdb/db_test.go",
      "Line": 551,
      "Receiver": ""
    },
    "TestDurationExprPretty": {
      "Name": "TestDurationExprPretty",
      "File": "promql/parser/prettier_test.go",
      "Line": 672,
      "Receiver": ""
    },
    "TestDurationVisitor": {
      "Name": "TestDurationVisitor",
      "File": "promql/durations_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestEC2DiscoveryRefresh": {
      "Name": "TestEC2DiscoveryRefresh",
      "File": "discovery/aws/ec2_test.go",
      "Line": 106,
      "Receiver": ""
    },
    "TestEC2DiscoveryRefreshAZIDs": {
      "Name": "TestEC2DiscoveryRefreshAZIDs",
      "File": "discovery/aws/ec2_test.go",
      "Line": 62,
      "Receiver": ""
    },
    "TestElideSecrets": {
      "Name": "TestElideSecrets",
      "File": "config/config_test.go",
      "Line": 1968,
      "Receiver": ""
    },
    "TestEmptyConfig": {
      "Name": "TestEmptyConfig",
      "File": "config/config_test.go",
      "Line": 2508,
      "Receiver": ""
    },
    "TestEmptyGlobalBlock": {
      "Name": "TestEmptyGlobalBlock",
      "File": "config/config_test.go",
      "Line": 2558,
      "Receiver": ""
    },
    "TestEmptyLabelsetCausesError": {
      "Name": "TestEmptyLabelsetCausesError",
      "File": "tsdb/db_test.go",
      "Line": 585,
      "Receiver": ""
    },
    "TestEncodeDecode": {
      "Name": "TestEncodeDecode",
      "File": "util/compression/compression_test.go",
      "Line": 43,
      "Receiver": ""
    },
    "TestEndpointSliceDiscoveryAdd": {
      "Name": "TestEndpointSliceDiscoveryAdd",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 198,
      "Receiver": ""
    },
    "TestEndpointSliceDiscoveryBeforeRun": {
      "Name": "TestEndpointSliceDiscoveryBeforeRun",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 116,
      "Receiver": ""
    },
    "TestEndpointSliceDiscoveryDelete": {
      "Name": "TestEndpointSliceDiscoveryDelete",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 326,
      "Receiver": ""
    },
    "TestEndpointSliceDiscoveryEmptyEndpoints": {
      "Name": "TestEndpointSliceDiscoveryEmptyEndpoints",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 402,
      "Receiver": ""
    },
    "TestEndpointSliceDiscoveryEmptyPodStatus": {
      "Name": "TestEndpointSliceDiscoveryEmptyPodStatus",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 1136,
      "Receiver": ""
    },
    "TestEndpointSliceDiscoveryNamespaces": {
      "Name": "TestEndpointSliceDiscoveryNamespaces",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 838,
      "Receiver": ""
    },
    "TestEndpointSliceDiscoveryOwnNamespace": {
      "Name": "TestEndpointSliceDiscoveryOwnNamespace",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 1015,
      "Receiver": ""
    },
    "TestEndpointSliceDiscoverySidecarContainer": {
      "Name": "TestEndpointSliceDiscoverySidecarContainer",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 1221,
      "Receiver": ""
    },
    "TestEndpointSliceDiscoveryUpdate": {
      "Name": "TestEndpointSliceDiscoveryUpdate",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 345,
      "Receiver": ""
    },
    "TestEndpointSliceDiscoveryWithService": {
      "Name": "TestEndpointSliceDiscoveryWithService",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 431,
      "Receiver": ""
    },
    "TestEndpointSliceDiscoveryWithServiceUpdate": {
      "Name": "TestEndpointSliceDiscoveryWithServiceUpdate",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 524,
      "Receiver": ""
    },
    "TestEndpointSliceInfIndexersCount": {
      "Name": "TestEndpointSliceInfIndexersCount",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 1183,
      "Receiver": ""
    },
    "TestEndpoints": {
      "Name": "TestEndpoints",
      "File": "web/api/v1/api_test.go",
      "Line": 378,
      "Receiver": ""
    },
    "TestEndpointsDiscoveryAdd": {
      "Name": "TestEndpointsDiscoveryAdd",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 154,
      "Receiver": ""
    },
    "TestEndpointsDiscoveryBeforeRun": {
      "Name": "TestEndpointsDiscoveryBeforeRun",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 99,
      "Receiver": ""
    },
    "TestEndpointsDiscoveryDelete": {
      "Name": "TestEndpointsDiscoveryDelete",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 280,
      "Receiver": ""
    },
    "TestEndpointsDiscoveryEmptyPodStatus": {
      "Name": "TestEndpointsDiscoveryEmptyPodStatus",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 946,
      "Receiver": ""
    },
    "TestEndpointsDiscoveryEmptySubsets": {
      "Name": "TestEndpointsDiscoveryEmptySubsets",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 371,
      "Receiver": ""
    },
    "TestEndpointsDiscoveryNamespaces": {
      "Name": "TestEndpointsDiscoveryNamespaces",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 699,
      "Receiver": ""
    },
    "TestEndpointsDiscoveryOwnNamespace": {
      "Name": "TestEndpointsDiscoveryOwnNamespace",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 851,
      "Receiver": ""
    },
    "TestEndpointsDiscoverySidecarContainer": {
      "Name": "TestEndpointsDiscoverySidecarContainer",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 1112,
      "Receiver": ""
    },
    "TestEndpointsDiscoveryUpdate": {
      "Name": "TestEndpointsDiscoveryUpdate",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 299,
      "Receiver": ""
    },
    "TestEndpointsDiscoveryUpdatePod": {
      "Name": "TestEndpointsDiscoveryUpdatePod",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 992,
      "Receiver": ""
    },
    "TestEndpointsDiscoveryWithNodeMetadata": {
      "Name": "TestEndpointsDiscoveryWithNodeMetadata",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 547,
      "Receiver": ""
    },
    "TestEndpointsDiscoveryWithService": {
      "Name": "TestEndpointsDiscoveryWithService",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 400,
      "Receiver": ""
    },
    "TestEndpointsDiscoveryWithServiceUpdate": {
      "Name": "TestEndpointsDiscoveryWithServiceUpdate",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 466,
      "Receiver": ""
    },
    "TestEndpointsDiscoveryWithUpdatedNodeMetadata": {
      "Name": "TestEndpointsDiscoveryWithUpdatedNodeMetadata",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 621,
      "Receiver": ""
    },
    "TestEndpointsSlicesDiscoveryWithNodeMetadata": {
      "Name": "TestEndpointsSlicesDiscoveryWithNodeMetadata",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 632,
      "Receiver": ""
    },
    "TestEndpointsSlicesDiscoveryWithUpdatedNodeMetadata": {
      "Name": "TestEndpointsSlicesDiscoveryWithUpdatedNodeMetadata",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 732,
      "Receiver": ""
    },
    "TestEngineEvalStmtTimestamps": {
      "Name": "TestEngineEvalStmtTimestamps",
      "File": "promql/engine_test.go",
      "Line": 677,
      "Receiver": ""
    },
    "TestEngineOptsValidation": {
      "Name": "TestEngineOptsValidation",
      "File": "promql/engine_test.go",
      "Line": 3101,
      "Receiver": ""
    },
    "TestEngineShutdown": {
      "Name": "TestEngineShutdown",
      "File": "promql/engine_test.go",
      "Line": 623,
      "Receiver": ""
    },
    "TestEngine_Close": {
      "Name": "TestEngine_Close",
      "File": "promql/engine_test.go",
      "Line": 3173,
      "Receiver": ""
    },
    "TestEqual": {
      "Name": "TestEqual",
      "File": "util/almost/almost_test.go",
      "Line": 24,
      "Receiver": ""
    },
    "TestEqualMultiStringMapMatcher_addPrefix": {
      "Name": "TestEqualMultiStringMapMatcher_addPrefix",
      "File": "model/labels/regexp_test.go",
      "Line": 865,
      "Receiver": ""
    },
    "TestEqualMultiStringMatcher_Matches": {
      "Name": "TestEqualMultiStringMatcher_Matches",
      "File": "model/labels/regexp_test.go",
      "Line": 887,
      "Receiver": ""
    },
    "TestErrDuplicateSampleForTimestamp": {
      "Name": "TestErrDuplicateSampleForTimestamp",
      "File": "storage/errors_test.go",
      "Line": 23,
      "Receiver": ""
    },
    "TestErrReuseAppender": {
      "Name": "TestErrReuseAppender",
      "File": "tsdb/head_test.go",
      "Line": 3357,
      "Receiver": ""
    },
    "TestError": {
      "Name": "TestError",
      "File": "model/rulefmt/rulefmt_test.go",
      "Line": 244,
      "Receiver": ""
    },
    "TestErrorInitClient": {
      "Name": "TestErrorInitClient",
      "File": "discovery/ovhcloud/ovhcloud_test.go",
      "Line": 59,
      "Receiver": ""
    },
    "TestErrorUnwrap": {
      "Name": "TestErrorUnwrap",
      "File": "model/rulefmt/rulefmt_test.go",
      "Line": 355,
      "Receiver": ""
    },
    "TestEscape": {
      "Name": "TestEscape",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/graphite/client_test.go",
      "Line": 29,
      "Receiver": ""
    },
    "TestEurekaSDEmptyList": {
      "Name": "TestEurekaSDEmptyList",
      "File": "discovery/eureka/eureka_test.go",
      "Line": 73,
      "Receiver": ""
    },
    "TestEurekaSDHandleError": {
      "Name": "TestEurekaSDHandleError",
      "File": "discovery/eureka/eureka_test.go",
      "Line": 58,
      "Receiver": ""
    },
    "TestEurekaSDSendGroup": {
      "Name": "TestEurekaSDSendGroup",
      "File": "discovery/eureka/eureka_test.go",
      "Line": 90,
      "Receiver": ""
    },
    "TestEvaluationWithDelayedNameRemovalDisabled": {
      "Name": "TestEvaluationWithDelayedNameRemovalDisabled",
      "File": "promql/engine_test.go",
      "Line": 3832,
      "Receiver": ""
    },
    "TestEvaluations": {
      "Name": "TestEvaluations",
      "File": "promql/promql_test.go",
      "Line": 35,
      "Receiver": ""
    },
    "TestEveryNTimes": {
      "Name": "TestEveryNTimes",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/context_test.go",
      "Line": 22,
      "Receiver": ""
    },
    "TestExitCodes": {
      "Name": "TestExitCodes",
      "File": "cmd/promtool/main_test.go",
      "Line": 406,
      "Receiver": ""
    },
    "TestExpandExternalLabels": {
      "Name": "TestExpandExternalLabels",
      "File": "config/config_test.go",
      "Line": 2517,
      "Receiver": ""
    },
    "TestExponentialToNativeHistogram": {
      "Name": "TestExponentialToNativeHistogram",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms_test.go",
      "Line": 417,
      "Receiver": ""
    },
    "TestExprPretty": {
      "Name": "TestExprPretty",
      "File": "promql/parser/prettier_test.go",
      "Line": 344,
      "Receiver": ""
    },
    "TestExprString": {
      "Name": "TestExprString",
      "File": "promql/parser/printer_test.go",
      "Line": 24,
      "Receiver": ""
    },
    "TestExternalLabels": {
      "Name": "TestExternalLabels",
      "File": "notifier/manager_test.go",
      "Line": 384,
      "Receiver": ""
    },
    "TestExternalLabelsQuerierAddExternalLabels": {
      "Name": "TestExternalLabelsQuerierAddExternalLabels",
      "File": "storage/remote/read_test.go",
      "Line": 110,
      "Receiver": ""
    },
    "TestExtractQueryOpts": {
      "Name": "TestExtractQueryOpts",
      "File": "web/api/v1/api_test.go",
      "Line": 4602,
      "Receiver": ""
    },
    "TestExtractSelectors": {
      "Name": "TestExtractSelectors",
      "File": "promql/parser/parse_test.go",
      "Line": 5546,
      "Receiver": ""
    },
    "TestFailedStartupExitCode": {
      "Name": "TestFailedStartupExitCode",
      "File": "cmd/prometheus/main_test.go",
      "Line": 129,
      "Receiver": ""
    },
    "TestFailuresCountMetric": {
      "Name": "TestFailuresCountMetric",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 290,
      "Receiver": ""
    },
    "TestFanoutErrors": {
      "Name": "TestFanoutErrors",
      "File": "storage/fanout_test.go",
      "Line": 135,
      "Receiver": ""
    },
    "TestFanout_SelectSorted": {
      "Name": "TestFanout_SelectSorted",
      "File": "storage/fanout_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "TestFastRegexMatcher_MatchString": {
      "Name": "TestFastRegexMatcher_MatchString",
      "File": "model/labels/regexp_test.go",
      "Line": 111,
      "Receiver": ""
    },
    "TestFastRegexMatcher_SetMatches_ShouldReturnACopy": {
      "Name": "TestFastRegexMatcher_SetMatches_ShouldReturnACopy",
      "File": "model/labels/regexp_test.go",
      "Line": 268,
      "Receiver": ""
    },
    "TestFederation": {
      "Name": "TestFederation",
      "File": "web/federate_test.go",
      "Line": 205,
      "Receiver": ""
    },
    "TestFederationWithNativeHistograms": {
      "Name": "TestFederationWithNativeHistograms",
      "File": "web/federate_test.go",
      "Line": 304,
      "Receiver": ""
    },
    "TestFederation_NotReady": {
      "Name": "TestFederation_NotReady",
      "File": "web/federate_test.go",
      "Line": 256,
      "Receiver": ""
    },
    "TestFetchApps": {
      "Name": "TestFetchApps",
      "File": "discovery/eureka/client_test.go",
      "Line": 26,
      "Receiver": ""
    },
    "TestFileUpdate": {
      "Name": "TestFileUpdate",
      "File": "discovery/file/file_test.go",
      "Line": 390,
      "Receiver": ""
    },
    "TestFilterExternalLabels": {
      "Name": "TestFilterExternalLabels",
      "File": "storage/remote/storage_test.go",
      "Line": 77,
      "Receiver": ""
    },
    "TestFilterOption": {
      "Name": "TestFilterOption",
      "File": "discovery/consul/consul_test.go",
      "Line": 375,
      "Receiver": ""
    },
    "TestFindEqualOrPrefixStringMatchers": {
      "Name": "TestFindEqualOrPrefixStringMatchers",
      "File": "model/labels/regexp_test.go",
      "Line": 979,
      "Receiver": ""
    },
    "TestFindIntersectingPostings": {
      "Name": "TestFindIntersectingPostings",
      "File": "tsdb/index/postings_test.go",
      "Line": 1105,
      "Receiver": ""
    },
    "TestFindSetMatches": {
      "Name": "TestFindSetMatches",
      "File": "model/labels/regexp_test.go",
      "Line": 181,
      "Receiver": ""
    },
    "TestFirstFloatHistogramExplicitCounterReset": {
      "Name": "TestFirstFloatHistogramExplicitCounterReset",
      "File": "tsdb/chunkenc/float_histogram_test.go",
      "Line": 30,
      "Receiver": ""
    },
    "TestFirstHistogramExplicitCounterReset": {
      "Name": "TestFirstHistogramExplicitCounterReset",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "TestFloatBucketIteratorTargetSchema": {
      "Name": "TestFloatBucketIteratorTargetSchema",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 3152,
      "Receiver": ""
    },
    "TestFloatCustomBucketsIterators": {
      "Name": "TestFloatCustomBucketsIterators",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 3199,
      "Receiver": ""
    },
    "TestFloatHistogramAdd": {
      "Name": "TestFloatHistogramAdd",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 1642,
      "Receiver": ""
    },
    "TestFloatHistogramAppendOnlyErrors": {
      "Name": "TestFloatHistogramAppendOnlyErrors",
      "File": "tsdb/chunkenc/float_histogram_test.go",
      "Line": 1251,
      "Receiver": ""
    },
    "TestFloatHistogramChunkAppendable": {
      "Name": "TestFloatHistogramChunkAppendable",
      "File": "tsdb/chunkenc/float_histogram_test.go",
      "Line": 290,
      "Receiver": ""
    },
    "TestFloatHistogramChunkAppendableGauge": {
      "Name": "TestFloatHistogramChunkAppendableGauge",
      "File": "tsdb/chunkenc/float_histogram_test.go",
      "Line": 977,
      "Receiver": ""
    },
    "TestFloatHistogramChunkAppendableWithEmptySpan": {
      "Name": "TestFloatHistogramChunkAppendableWithEmptySpan",
      "File": "tsdb/chunkenc/float_histogram_test.go",
      "Line": 759,
      "Receiver": ""
    },
    "TestFloatHistogramChunkBucketChanges": {
      "Name": "TestFloatHistogramChunkBucketChanges",
      "File": "tsdb/chunkenc/float_histogram_test.go",
      "Line": 199,
      "Receiver": ""
    },
    "TestFloatHistogramChunkSameBuckets": {
      "Name": "TestFloatHistogramChunkSameBuckets",
      "File": "tsdb/chunkenc/float_histogram_test.go",
      "Line": 76,
      "Receiver": ""
    },
    "TestFloatHistogramCompact": {
      "Name": "TestFloatHistogramCompact",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 1283,
      "Receiver": ""
    },
    "TestFloatHistogramCopy": {
      "Name": "TestFloatHistogramCopy",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 233,
      "Receiver": ""
    },
    "TestFloatHistogramCopyTo": {
      "Name": "TestFloatHistogramCopyTo",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 298,
      "Receiver": ""
    },
    "TestFloatHistogramCopyToSchema": {
      "Name": "TestFloatHistogramCopyToSchema",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 2549,
      "Receiver": ""
    },
    "TestFloatHistogramDetectReset": {
      "Name": "TestFloatHistogramDetectReset",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 555,
      "Receiver": ""
    },
    "TestFloatHistogramDiv": {
      "Name": "TestFloatHistogramDiv",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 375,
      "Receiver": ""
    },
    "TestFloatHistogramEquals": {
      "Name": "TestFloatHistogramEquals",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 3305,
      "Receiver": ""
    },
    "TestFloatHistogramMul": {
      "Name": "TestFloatHistogramMul",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestFloatHistogramReduceResolution": {
      "Name": "TestFloatHistogramReduceResolution",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 3563,
      "Receiver": ""
    },
    "TestFloatHistogramSize": {
      "Name": "TestFloatHistogramSize",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 3389,
      "Receiver": ""
    },
    "TestFloatHistogramString": {
      "Name": "TestFloatHistogramString",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 3463,
      "Receiver": ""
    },
    "TestFloatHistogramSub": {
      "Name": "TestFloatHistogramSub",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 2351,
      "Receiver": ""
    },
    "TestFloatHistogramUniqueCustomValuesAfterNext": {
      "Name": "TestFloatHistogramUniqueCustomValuesAfterNext",
      "File": "tsdb/chunkenc/float_histogram_test.go",
      "Line": 1371,
      "Receiver": ""
    },
    "TestFloatHistogramUniqueSpansAfterNext": {
      "Name": "TestFloatHistogramUniqueSpansAfterNext",
      "File": "tsdb/chunkenc/float_histogram_test.go",
      "Line": 1320,
      "Receiver": ""
    },
    "TestForStateAddSamples": {
      "Name": "TestForStateAddSamples",
      "File": "rules/manager_test.go",
      "Line": 198,
      "Receiver": ""
    },
    "TestForStateRestore": {
      "Name": "TestForStateRestore",
      "File": "rules/manager_test.go",
      "Line": 360,
      "Receiver": ""
    },
    "TestFromFloatToFloatHistogram": {
      "Name": "TestFromFloatToFloatHistogram",
      "File": "prompb/rwcommon/codec_test.go",
      "Line": 223,
      "Receiver": ""
    },
    "TestFromIntOrFloatHistogram_ResetHint": {
      "Name": "TestFromIntOrFloatHistogram_ResetHint",
      "File": "prompb/rwcommon/codec_test.go",
      "Line": 246,
      "Receiver": ""
    },
    "TestFromIntToFloatOrIntHistogram": {
      "Name": "TestFromIntToFloatOrIntHistogram",
      "File": "prompb/rwcommon/codec_test.go",
      "Line": 197,
      "Receiver": ""
    },
    "TestFromMetadataType": {
      "Name": "TestFromMetadataType",
      "File": "prompb/rwcommon/codec_test.go",
      "Line": 48,
      "Receiver": ""
    },
    "TestFromMetrics": {
      "Name": "TestFromMetrics",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 37,
      "Receiver": ""
    },
    "TestFromOriginContext": {
      "Name": "TestFromOriginContext",
      "File": "rules/origin_test.go",
      "Line": 60,
      "Receiver": ""
    },
    "TestFromQueryResultWithDuplicates": {
      "Name": "TestFromQueryResultWithDuplicates",
      "File": "storage/remote/codec_test.go",
      "Line": 551,
      "Receiver": ""
    },
    "TestFullTruncateWAL": {
      "Name": "TestFullTruncateWAL",
      "File": "tsdb/agent/db_test.go",
      "Line": 396,
      "Receiver": ""
    },
    "TestFunctionList": {
      "Name": "TestFunctionList",
      "File": "promql/functions_test.go",
      "Line": 72,
      "Receiver": ""
    },
    "TestGCChunkAccess": {
      "Name": "TestGCChunkAccess",
      "File": "tsdb/head_test.go",
      "Line": 2124,
      "Receiver": ""
    },
    "TestGCSeriesAccess": {
      "Name": "TestGCSeriesAccess",
      "File": "tsdb/head_test.go",
      "Line": 2183,
      "Receiver": ""
    },
    "TestGaugeFailedConfigs": {
      "Name": "TestGaugeFailedConfigs",
      "File": "discovery/manager_test.go",
      "Line": 1197,
      "Receiver": ""
    },
    "TestGaugeFloatHistogramWALAndChunkHeader": {
      "Name": "TestGaugeFloatHistogramWALAndChunkHeader",
      "File": "tsdb/head_test.go",
      "Line": 5931,
      "Receiver": ""
    },
    "TestGaugeHistogramWALAndChunkHeader": {
      "Name": "TestGaugeHistogramWALAndChunkHeader",
      "File": "tsdb/head_test.go",
      "Line": 5855,
      "Receiver": ""
    },
    "TestGenerateBucket": {
      "Name": "TestGenerateBucket",
      "File": "cmd/promtool/tsdb_test.go",
      "Line": 34,
      "Receiver": ""
    },
    "TestGenerateChecksum": {
      "Name": "TestGenerateChecksum",
      "File": "config/reload_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestGenerateCompactionDelay": {
      "Name": "TestGenerateCompactionDelay",
      "File": "tsdb/db_test.go",
      "Line": 9371,
      "Receiver": ""
    },
    "TestGenerateTargetGroups": {
      "Name": "TestGenerateTargetGroups",
      "File": "documentation/examples/custom-sd/adapter/adapter_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "TestGetBoundExponential": {
      "Name": "TestGetBoundExponential",
      "File": "model/histogram/generic_test.go",
      "Line": 24,
      "Receiver": ""
    },
    "TestGetBucketCountsAtTime": {
      "Name": "TestGetBucketCountsAtTime",
      "File": "cmd/promtool/analyze_test.go",
      "Line": 110,
      "Receiver": ""
    },
    "TestGetDatacenterShouldReturnError": {
      "Name": "TestGetDatacenterShouldReturnError",
      "File": "discovery/consul/consul_test.go",
      "Line": 395,
      "Receiver": ""
    },
    "TestGetGlobalURL": {
      "Name": "TestGetGlobalURL",
      "File": "web/api/v1/api_test.go",
      "Line": 4477,
      "Receiver": ""
    },
    "TestGetPromExemplars": {
      "Name": "TestGetPromExemplars",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper_test.go",
      "Line": 935,
      "Receiver": ""
    },
    "TestGetScrapeConfigs": {
      "Name": "TestGetScrapeConfigs",
      "File": "config/config_test.go",
      "Line": 2575,
      "Receiver": ""
    },
    "TestGetScrapeConfigs_Loaded": {
      "Name": "TestGetScrapeConfigs_Loaded",
      "File": "config/config_test.go",
      "Line": 2947,
      "Receiver": ""
    },
    "TestGetSeries": {
      "Name": "TestGetSeries",
      "File": "web/api/v1/api_test.go",
      "Line": 542,
      "Receiver": ""
    },
    "TestGroupHasAlertingRules": {
      "Name": "TestGroupHasAlertingRules",
      "File": "rules/manager_test.go",
      "Line": 1244,
      "Receiver": ""
    },
    "TestGroupStalenessOnRemoval": {
      "Name": "TestGroupStalenessOnRemoval",
      "File": "rules/manager_test.go",
      "Line": 1050,
      "Receiver": ""
    },
    "TestGroup_Equals": {
      "Name": "TestGroup_Equals",
      "File": "rules/group_test.go",
      "Line": 23,
      "Receiver": ""
    },
    "TestGroup_Eval_RaceConditionOnStoppingGroupEvaluationWhileRulesAreEvaluatedConcurrently": {
      "Name": "TestGroup_Eval_RaceConditionOnStoppingGroupEvaluationWhileRulesAreEvaluatedConcurrently",
      "File": "rules/manager_test.go",
      "Line": 2464,
      "Receiver": ""
    },
    "TestGroup_QueryOffset": {
      "Name": "TestGroup_QueryOffset",
      "File": "rules/manager_test.go",
      "Line": 630,
      "Receiver": ""
    },
    "TestHCloudSDRefresh": {
      "Name": "TestHCloudSDRefresh",
      "File": "discovery/hetzner/hcloud_test.go",
      "Line": 38,
      "Receiver": ""
    },
    "TestHTTPInvalidCode": {
      "Name": "TestHTTPInvalidCode",
      "File": "discovery/http/http_test.go",
      "Line": 77,
      "Receiver": ""
    },
    "TestHTTPInvalidFormat": {
      "Name": "TestHTTPInvalidFormat",
      "File": "discovery/http/http_test.go",
      "Line": 106,
      "Receiver": ""
    },
    "TestHTTPMetrics": {
      "Name": "TestHTTPMetrics",
      "File": "web/web_test.go",
      "Line": 324,
      "Receiver": ""
    },
    "TestHTTPResourceClientFetchEmptyResponse": {
      "Name": "TestHTTPResourceClientFetchEmptyResponse",
      "File": "discovery/xds/client_test.go",
      "Line": 108,
      "Receiver": ""
    },
    "TestHTTPResourceClientFetchFullResponse": {
      "Name": "TestHTTPResourceClientFetchFullResponse",
      "File": "discovery/xds/client_test.go",
      "Line": 119,
      "Receiver": ""
    },
    "TestHTTPResourceClientServerError": {
      "Name": "TestHTTPResourceClientServerError",
      "File": "discovery/xds/client_test.go",
      "Line": 148,
      "Receiver": ""
    },
    "TestHTTPValidRefresh": {
      "Name": "TestHTTPValidRefresh",
      "File": "discovery/http/http_test.go",
      "Line": 35,
      "Receiver": ""
    },
    "TestHandleMultipleQuitRequests": {
      "Name": "TestHandleMultipleQuitRequests",
      "File": "web/web_test.go",
      "Line": 447,
      "Receiver": ""
    },
    "TestHandlerNextBatch": {
      "Name": "TestHandlerNextBatch",
      "File": "notifier/manager_test.go",
      "Line": 47,
      "Receiver": ""
    },
    "TestHandlerQueuing": {
      "Name": "TestHandlerQueuing",
      "File": "notifier/manager_test.go",
      "Line": 456,
      "Receiver": ""
    },
    "TestHandlerRelabel": {
      "Name": "TestHandlerRelabel",
      "File": "notifier/manager_test.go",
      "Line": 419,
      "Receiver": ""
    },
    "TestHandlerSendAll": {
      "Name": "TestHandlerSendAll",
      "File": "notifier/manager_test.go",
      "Line": 111,
      "Receiver": ""
    },
    "TestHandlerSendAllRemapPerAm": {
      "Name": "TestHandlerSendAllRemapPerAm",
      "File": "notifier/manager_test.go",
      "Line": 217,
      "Receiver": ""
    },
    "TestHangingNotifier": {
      "Name": "TestHangingNotifier",
      "File": "notifier/manager_test.go",
      "Line": 709,
      "Receiver": ""
    },
    "TestHasPrefixCaseInsensitive": {
      "Name": "TestHasPrefixCaseInsensitive",
      "File": "model/labels/regexp_test.go",
      "Line": 1289,
      "Receiver": ""
    },
    "TestHasSuffixCaseInsensitive": {
      "Name": "TestHasSuffixCaseInsensitive",
      "File": "model/labels/regexp_test.go",
      "Line": 1300,
      "Receiver": ""
    },
    "TestHeadAppendHistogramAndCommitConcurrency": {
      "Name": "TestHeadAppendHistogramAndCommitConcurrency",
      "File": "tsdb/head_test.go",
      "Line": 6814,
      "Receiver": ""
    },
    "TestHeadAppender_AppendCT": {
      "Name": "TestHeadAppender_AppendCT",
      "File": "tsdb/head_test.go",
      "Line": 6499,
      "Receiver": ""
    },
    "TestHeadAppender_AppendFloatWithSameTimestampAsPreviousHistogram": {
      "Name": "TestHeadAppender_AppendFloatWithSameTimestampAsPreviousHistogram",
      "File": "tsdb/head_test.go",
      "Line": 6470,
      "Receiver": ""
    },
    "TestHeadAppender_AppendHistogramCTZeroSample": {
      "Name": "TestHeadAppender_AppendHistogramCTZeroSample",
      "File": "tsdb/head_test.go",
      "Line": 6720,
      "Receiver": ""
    },
    "TestHeadCompactableDoesNotCompactEmptyHead": {
      "Name": "TestHeadCompactableDoesNotCompactEmptyHead",
      "File": "tsdb/head_test.go",
      "Line": 6789,
      "Receiver": ""
    },
    "TestHeadCompactionWhileAppendAndCommitExemplar": {
      "Name": "TestHeadCompactionWhileAppendAndCommitExemplar",
      "File": "tsdb/head_test.go",
      "Line": 6357,
      "Receiver": ""
    },
    "TestHeadCompactionWhileScraping": {
      "Name": "TestHeadCompactionWhileScraping",
      "File": "cmd/prometheus/main_test.go",
      "Line": 814,
      "Receiver": ""
    },
    "TestHeadCompactionWithHistograms": {
      "Name": "TestHeadCompactionWithHistograms",
      "File": "tsdb/compact_test.go",
      "Line": 1454,
      "Receiver": ""
    },
    "TestHeadDeleteSeriesWithoutSamples": {
      "Name": "TestHeadDeleteSeriesWithoutSamples",
      "File": "tsdb/head_test.go",
      "Line": 1451,
      "Receiver": ""
    },
    "TestHeadDeleteSimple": {
      "Name": "TestHeadDeleteSimple",
      "File": "tsdb/head_test.go",
      "Line": 1481,
      "Receiver": ""
    },
    "TestHeadDetectsDuplicateSampleAtSizeLimit": {
      "Name": "TestHeadDetectsDuplicateSampleAtSizeLimit",
      "File": "tsdb/head_test.go",
      "Line": 6250,
      "Receiver": ""
    },
    "TestHeadExemplars": {
      "Name": "TestHeadExemplars",
      "File": "tsdb/head_test.go",
      "Line": 3426,
      "Receiver": ""
    },
    "TestHeadIndexReader_PostingsForLabelMatching": {
      "Name": "TestHeadIndexReader_PostingsForLabelMatching",
      "File": "tsdb/head_read_test.go",
      "Line": 412,
      "Receiver": ""
    },
    "TestHeadInit_DiscardChunksWithUnsupportedEncoding": {
      "Name": "TestHeadInit_DiscardChunksWithUnsupportedEncoding",
      "File": "tsdb/head_test.go",
      "Line": 5497,
      "Receiver": ""
    },
    "TestHeadLabelNamesValuesWithMinMaxRange": {
      "Name": "TestHeadLabelNamesValuesWithMinMaxRange",
      "File": "tsdb/head_test.go",
      "Line": 3087,
      "Receiver": ""
    },
    "TestHeadLabelNamesWithMatchers": {
      "Name": "TestHeadLabelNamesWithMatchers",
      "File": "tsdb/head_test.go",
      "Line": 3224,
      "Receiver": ""
    },
    "TestHeadLabelValuesWithMatchers": {
      "Name": "TestHeadLabelValuesWithMatchers",
      "File": "tsdb/head_test.go",
      "Line": 3148,
      "Receiver": ""
    },
    "TestHeadMinOOOTimeUpdate": {
      "Name": "TestHeadMinOOOTimeUpdate",
      "File": "tsdb/head_test.go",
      "Line": 5799,
      "Receiver": ""
    },
    "TestHeadMintAfterTruncation": {
      "Name": "TestHeadMintAfterTruncation",
      "File": "tsdb/head_test.go",
      "Line": 3392,
      "Receiver": ""
    },
    "TestHeadReadWriterRepair": {
      "Name": "TestHeadReadWriterRepair",
      "File": "tsdb/head_test.go",
      "Line": 2526,
      "Receiver": ""
    },
    "TestHeadReadWriter_ReadRepairOnEmptyLastFile": {
      "Name": "TestHeadReadWriter_ReadRepairOnEmptyLastFile",
      "File": "tsdb/chunks/head_chunks_test.go",
      "Line": 444,
      "Receiver": ""
    },
    "TestHeadReadWriter_TruncateAfterFailedIterateChunks": {
      "Name": "TestHeadReadWriter_TruncateAfterFailedIterateChunks",
      "File": "tsdb/chunks/head_chunks_test.go",
      "Line": 413,
      "Receiver": ""
    },
    "TestHeadSeriesChunkRace": {
      "Name": "TestHeadSeriesChunkRace",
      "File": "tsdb/head_test.go",
      "Line": 2919,
      "Receiver": ""
    },
    "TestHeadShardedPostings": {
      "Name": "TestHeadShardedPostings",
      "File": "tsdb/head_test.go",
      "Line": 3292,
      "Receiver": ""
    },
    "TestHead_ActiveAppenders": {
      "Name": "TestHead_ActiveAppenders",
      "File": "tsdb/head_test.go",
      "Line": 947,
      "Receiver": ""
    },
    "TestHead_CanGarbagecollectSeriesCreatedWithoutSamples": {
      "Name": "TestHead_CanGarbagecollectSeriesCreatedWithoutSamples",
      "File": "tsdb/head_test.go",
      "Line": 1017,
      "Receiver": ""
    },
    "TestHead_HighConcurrencyReadAndWrite": {
      "Name": "TestHead_HighConcurrencyReadAndWrite",
      "File": "tsdb/head_test.go",
      "Line": 512,
      "Receiver": ""
    },
    "TestHead_KeepSeriesInWALCheckpoint": {
      "Name": "TestHead_KeepSeriesInWALCheckpoint",
      "File": "tsdb/head_test.go",
      "Line": 889,
      "Receiver": ""
    },
    "TestHead_LogRollback": {
      "Name": "TestHead_LogRollback",
      "File": "tsdb/head_test.go",
      "Line": 2305,
      "Receiver": ""
    },
    "TestHead_RaceBetweenSeriesCreationAndGC": {
      "Name": "TestHead_RaceBetweenSeriesCreationAndGC",
      "File": "tsdb/head_test.go",
      "Line": 980,
      "Receiver": ""
    },
    "TestHead_ReadWAL": {
      "Name": "TestHead_ReadWAL",
      "File": "tsdb/head_test.go",
      "Line": 702,
      "Receiver": ""
    },
    "TestHead_ReturnsSortedLabelValues": {
      "Name": "TestHead_ReturnsSortedLabelValues",
      "File": "tsdb/head_test.go",
      "Line": 2329,
      "Receiver": ""
    },
    "TestHead_Truncate": {
      "Name": "TestHead_Truncate",
      "File": "tsdb/head_test.go",
      "Line": 1141,
      "Receiver": ""
    },
    "TestHead_UnknownWALRecord": {
      "Name": "TestHead_UnknownWALRecord",
      "File": "tsdb/head_test.go",
      "Line": 1060,
      "Receiver": ""
    },
    "TestHead_WALMultiRef": {
      "Name": "TestHead_WALMultiRef",
      "File": "tsdb/head_test.go",
      "Line": 829,
      "Receiver": ""
    },
    "TestHistogramAppendAndQuery": {
      "Name": "TestHistogramAppendAndQuery",
      "File": "tsdb/db_test.go",
      "Line": 8508,
      "Receiver": ""
    },
    "TestHistogramAppendOnlyErrors": {
      "Name": "TestHistogramAppendOnlyErrors",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 1463,
      "Receiver": ""
    },
    "TestHistogramChunkAppendable": {
      "Name": "TestHistogramChunkAppendable",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 304,
      "Receiver": ""
    },
    "TestHistogramChunkAppendableGauge": {
      "Name": "TestHistogramChunkAppendableGauge",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 1188,
      "Receiver": ""
    },
    "TestHistogramChunkAppendableWithEmptySpan": {
      "Name": "TestHistogramChunkAppendableWithEmptySpan",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 829,
      "Receiver": ""
    },
    "TestHistogramChunkBucketChanges": {
      "Name": "TestHistogramChunkBucketChanges",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 210,
      "Receiver": ""
    },
    "TestHistogramChunkSameBuckets": {
      "Name": "TestHistogramChunkSameBuckets",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 77,
      "Receiver": ""
    },
    "TestHistogramCompact": {
      "Name": "TestHistogramCompact",
      "File": "model/histogram/histogram_test.go",
      "Line": 968,
      "Receiver": ""
    },
    "TestHistogramCopy": {
      "Name": "TestHistogramCopy",
      "File": "model/histogram/histogram_test.go",
      "Line": 816,
      "Receiver": ""
    },
    "TestHistogramCopyFromIteratorRegression": {
      "Name": "TestHistogramCopyFromIteratorRegression",
      "File": "promql/engine_test.go",
      "Line": 3369,
      "Receiver": ""
    },
    "TestHistogramCopyTo": {
      "Name": "TestHistogramCopyTo",
      "File": "model/histogram/histogram_test.go",
      "Line": 881,
      "Receiver": ""
    },
    "TestHistogramCounterResetHeader": {
      "Name": "TestHistogramCounterResetHeader",
      "File": "tsdb/head_test.go",
      "Line": 4777,
      "Receiver": ""
    },
    "TestHistogramCustomValuesInternedAfterNextWithAtFloatHistogram": {
      "Name": "TestHistogramCustomValuesInternedAfterNextWithAtFloatHistogram",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 1680,
      "Receiver": ""
    },
    "TestHistogramCustomValuesInternedAfterNextWithAtHistogram": {
      "Name": "TestHistogramCustomValuesInternedAfterNextWithAtHistogram",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 1634,
      "Receiver": ""
    },
    "TestHistogramEquals": {
      "Name": "TestHistogramEquals",
      "File": "model/histogram/histogram_test.go",
      "Line": 626,
      "Receiver": ""
    },
    "TestHistogramFixtureValid": {
      "Name": "TestHistogramFixtureValid",
      "File": "storage/remote/codec_test.go",
      "Line": 148,
      "Receiver": ""
    },
    "TestHistogramInWALAndMmapChunk": {
      "Name": "TestHistogramInWALAndMmapChunk",
      "File": "tsdb/head_test.go",
      "Line": 3998,
      "Receiver": ""
    },
    "TestHistogramMetrics": {
      "Name": "TestHistogramMetrics",
      "File": "tsdb/head_test.go",
      "Line": 4575,
      "Receiver": ""
    },
    "TestHistogramQuantileAnnotations": {
      "Name": "TestHistogramQuantileAnnotations",
      "File": "promql/engine_test.go",
      "Line": 3645,
      "Receiver": ""
    },
    "TestHistogramRateWithFloatStaleness": {
      "Name": "TestHistogramRateWithFloatStaleness",
      "File": "promql/engine_test.go",
      "Line": 3720,
      "Receiver": ""
    },
    "TestHistogramReduceResolution": {
      "Name": "TestHistogramReduceResolution",
      "File": "model/histogram/histogram_test.go",
      "Line": 1599,
      "Receiver": ""
    },
    "TestHistogramSeriesToChunks": {
      "Name": "TestHistogramSeriesToChunks",
      "File": "storage/series_test.go",
      "Line": 132,
      "Receiver": ""
    },
    "TestHistogramStaleSample": {
      "Name": "TestHistogramStaleSample",
      "File": "tsdb/head_test.go",
      "Line": 4616,
      "Receiver": ""
    },
    "TestHistogramStatsDecoding": {
      "Name": "TestHistogramStatsDecoding",
      "File": "promql/histogram_stats_iterator_test.go",
      "Line": 29,
      "Receiver": ""
    },
    "TestHistogramStatsMixedUse": {
      "Name": "TestHistogramStatsMixedUse",
      "File": "promql/histogram_stats_iterator_test.go",
      "Line": 179,
      "Receiver": ""
    },
    "TestHistogramString": {
      "Name": "TestHistogramString",
      "File": "model/histogram/histogram_test.go",
      "Line": 26,
      "Receiver": ""
    },
    "TestHistogramTestExpression": {
      "Name": "TestHistogramTestExpression",
      "File": "promql/parser/parse_test.go",
      "Line": 5435,
      "Receiver": ""
    },
    "TestHistogramToCustomBucketsHistogram": {
      "Name": "TestHistogramToCustomBucketsHistogram",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms_test.go",
      "Line": 1006,
      "Receiver": ""
    },
    "TestHistogramToFloat": {
      "Name": "TestHistogramToFloat",
      "File": "model/histogram/histogram_test.go",
      "Line": 482,
      "Receiver": ""
    },
    "TestHistogramUniqueSpansAfterNextWithAtFloatHistogram": {
      "Name": "TestHistogramUniqueSpansAfterNextWithAtFloatHistogram",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 1583,
      "Receiver": ""
    },
    "TestHistogramUniqueSpansAfterNextWithAtHistogram": {
      "Name": "TestHistogramUniqueSpansAfterNextWithAtHistogram",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 1532,
      "Receiver": ""
    },
    "TestHistogramValidation": {
      "Name": "TestHistogramValidation",
      "File": "model/histogram/histogram_test.go",
      "Line": 1304,
      "Receiver": ""
    },
    "TestIONOSServerRefresh": {
      "Name": "TestIONOSServerRefresh",
      "File": "discovery/ionos/server_test.go",
      "Line": 35,
      "Receiver": ""
    },
    "TestIdenticalConfigurationsAreCoalesced": {
      "Name": "TestIdenticalConfigurationsAreCoalesced",
      "File": "discovery/manager_test.go",
      "Line": 1097,
      "Receiver": ""
    },
    "TestIgnoreExternalLabels": {
      "Name": "TestIgnoreExternalLabels",
      "File": "storage/remote/storage_test.go",
      "Line": 102,
      "Receiver": ""
    },
    "TestIgnoreOverriddenMetadataLabelsScratchBuilder": {
      "Name": "TestIgnoreOverriddenMetadataLabelsScratchBuilder",
      "File": "schema/labels_test.go",
      "Line": 99,
      "Receiver": ""
    },
    "TestInconsistentHistogramCount": {
      "Name": "TestInconsistentHistogramCount",
      "File": "promql/engine_test.go",
      "Line": 3898,
      "Receiver": ""
    },
    "TestIndexOverwrite": {
      "Name": "TestIndexOverwrite",
      "File": "tsdb/exemplar_test.go",
      "Line": 288,
      "Receiver": ""
    },
    "TestIndexRW_Create_Open": {
      "Name": "TestIndexRW_Create_Open",
      "File": "tsdb/index/index_test.go",
      "Line": 139,
      "Receiver": ""
    },
    "TestIndexRW_Postings": {
      "Name": "TestIndexRW_Postings",
      "File": "tsdb/index/index_test.go",
      "Line": 164,
      "Receiver": ""
    },
    "TestIndexReuse": {
      "Name": "TestIndexReuse",
      "File": "promql/query_logger_test.go",
      "Line": 70,
      "Receiver": ""
    },
    "TestInfo": {
      "Name": "TestInfo",
      "File": "promql/info_test.go",
      "Line": 23,
      "Receiver": ""
    },
    "TestIngressDiscoveryAdd": {
      "Name": "TestIngressDiscoveryAdd",
      "File": "discovery/kubernetes/ingress_test.go",
      "Line": 146,
      "Receiver": ""
    },
    "TestIngressDiscoveryAddMixed": {
      "Name": "TestIngressDiscoveryAddMixed",
      "File": "discovery/kubernetes/ingress_test.go",
      "Line": 176,
      "Receiver": ""
    },
    "TestIngressDiscoveryAddTLS": {
      "Name": "TestIngressDiscoveryAddTLS",
      "File": "discovery/kubernetes/ingress_test.go",
      "Line": 161,
      "Receiver": ""
    },
    "TestIngressDiscoveryNamespaces": {
      "Name": "TestIngressDiscoveryNamespaces",
      "File": "discovery/kubernetes/ingress_test.go",
      "Line": 191,
      "Receiver": ""
    },
    "TestIngressDiscoveryOwnNamespace": {
      "Name": "TestIngressDiscoveryOwnNamespace",
      "File": "discovery/kubernetes/ingress_test.go",
      "Line": 213,
      "Receiver": ""
    },
    "TestInitialUpdate": {
      "Name": "TestInitialUpdate",
      "File": "discovery/file/file_test.go",
      "Line": 322,
      "Receiver": ""
    },
    "TestInitializeHeadTimestamp": {
      "Name": "TestInitializeHeadTimestamp",
      "File": "tsdb/db_test.go",
      "Line": 1937,
      "Receiver": ""
    },
    "TestInstallingNewTracerProvider": {
      "Name": "TestInstallingNewTracerProvider",
      "File": "tracing/tracing_test.go",
      "Line": 28,
      "Receiver": ""
    },
    "TestInstantQueryWithRangeVectorSelector": {
      "Name": "TestInstantQueryWithRangeVectorSelector",
      "File": "promql/engine_test.go",
      "Line": 3196,
      "Receiver": ""
    },
    "TestInterleavedInOrderAndOOOHistogramCompactionWithCounterResets": {
      "Name": "TestInterleavedInOrderAndOOOHistogramCompactionWithCounterResets",
      "File": "tsdb/db_test.go",
      "Line": 7399,
      "Receiver": ""
    },
    "TestIntern": {
      "Name": "TestIntern",
      "File": "storage/remote/intern_test.go",
      "Line": 27,
      "Receiver": ""
    },
    "TestIntern_DeleteRef": {
      "Name": "TestIntern_DeleteRef",
      "File": "storage/remote/intern_test.go",
      "Line": 54,
      "Receiver": ""
    },
    "TestIntern_MultiRef": {
      "Name": "TestIntern_MultiRef",
      "File": "storage/remote/intern_test.go",
      "Line": 37,
      "Receiver": ""
    },
    "TestIntern_MultiRef_Concurrent": {
      "Name": "TestIntern_MultiRef_Concurrent",
      "File": "storage/remote/intern_test.go",
      "Line": 69,
      "Receiver": ""
    },
    "TestInteropV1UnmarshalWithV2_DeterministicEmpty": {
      "Name": "TestInteropV1UnmarshalWithV2_DeterministicEmpty",
      "File": "prompb/io/prometheus/write/v2/types_test.go",
      "Line": 64,
      "Receiver": ""
    },
    "TestInteropV2UnmarshalWithV1_DeterministicEmpty": {
      "Name": "TestInteropV2UnmarshalWithV1_DeterministicEmpty",
      "File": "prompb/io/prometheus/write/v2/types_test.go",
      "Line": 26,
      "Receiver": ""
    },
    "TestIntersect": {
      "Name": "TestIntersect",
      "File": "tsdb/index/postings_test.go",
      "Line": 126,
      "Receiver": ""
    },
    "TestIntersectWithMerge": {
      "Name": "TestIntersectWithMerge",
      "File": "tsdb/index/postings_test.go",
      "Line": 823,
      "Receiver": ""
    },
    "TestInvalidFile": {
      "Name": "TestInvalidFile",
      "File": "discovery/file/file_test.go",
      "Line": 346,
      "Receiver": ""
    },
    "TestInvalidFileUpdate": {
      "Name": "TestInvalidFileUpdate",
      "File": "discovery/file/file_test.go",
      "Line": 411,
      "Receiver": ""
    },
    "TestInverse": {
      "Name": "TestInverse",
      "File": "model/labels/matcher_test.go",
      "Line": 108,
      "Receiver": ""
    },
    "TestIsQuerierCollidingWithTruncation": {
      "Name": "TestIsQuerierCollidingWithTruncation",
      "File": "tsdb/head_test.go",
      "Line": 3662,
      "Receiver": ""
    },
    "TestIsRegexOptimized": {
      "Name": "TestIsRegexOptimized",
      "File": "model/labels/matcher_test.go",
      "Line": 190,
      "Receiver": ""
    },
    "TestIsSampleOld": {
      "Name": "TestIsSampleOld",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1961,
      "Receiver": ""
    },
    "TestIsSeriesPartOfFamily": {
      "Name": "TestIsSeriesPartOfFamily",
      "File": "scrape/scrape_test.go",
      "Line": 276,
      "Receiver": ""
    },
    "TestIsolation": {
      "Name": "TestIsolation",
      "File": "tsdb/isolation_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestIsolationAppendIDZeroIsNoop": {
      "Name": "TestIsolationAppendIDZeroIsNoop",
      "File": "tsdb/head_test.go",
      "Line": 2894,
      "Receiver": ""
    },
    "TestIsolationLowWatermarkMonotonous": {
      "Name": "TestIsolationLowWatermarkMonotonous",
      "File": "tsdb/head_test.go",
      "Line": 2857,
      "Receiver": ""
    },
    "TestIsolationRollback": {
      "Name": "TestIsolationRollback",
      "File": "tsdb/head_test.go",
      "Line": 2825,
      "Receiver": ""
    },
    "TestIsolationWithoutAdd": {
      "Name": "TestIsolationWithoutAdd",
      "File": "tsdb/head_test.go",
      "Line": 2925,
      "Receiver": ""
    },
    "TestIteratorSeekIntoBuffer": {
      "Name": "TestIteratorSeekIntoBuffer",
      "File": "tsdb/head_test.go",
      "Line": 3481,
      "Receiver": ""
    },
    "TestJSONFileLogger_basic": {
      "Name": "TestJSONFileLogger_basic",
      "File": "util/logging/file_test.go",
      "Line": 39,
      "Receiver": ""
    },
    "TestJSONFileLogger_parallel": {
      "Name": "TestJSONFileLogger_parallel",
      "File": "util/logging/file_test.go",
      "Line": 68,
      "Receiver": ""
    },
    "TestJsonCodec_Encode": {
      "Name": "TestJsonCodec_Encode",
      "File": "web/api/v1/json_codec_test.go",
      "Line": 27,
      "Receiver": ""
    },
    "TestJunitOutput": {
      "Name": "TestJunitOutput",
      "File": "util/junitxml/junitxml_test.go",
      "Line": 23,
      "Receiver": ""
    },
    "TestKahanSumInc": {
      "Name": "TestKahanSumInc",
      "File": "promql/functions_internal_test.go",
      "Line": 24,
      "Receiver": ""
    },
    "TestKeepFiringFor": {
      "Name": "TestKeepFiringFor",
      "File": "rules/alerting_test.go",
      "Line": 799,
      "Receiver": ""
    },
    "TestKubernetesEmptyAPIServer": {
      "Name": "TestKubernetesEmptyAPIServer",
      "File": "config/config_test.go",
      "Line": 1991,
      "Receiver": ""
    },
    "TestKubernetesSelectors": {
      "Name": "TestKubernetesSelectors",
      "File": "config/config_test.go",
      "Line": 2001,
      "Receiver": ""
    },
    "TestKubernetesWithKubeConfig": {
      "Name": "TestKubernetesWithKubeConfig",
      "File": "config/config_test.go",
      "Line": 1996,
      "Receiver": ""
    },
    "TestKumaHTTPDiscoveryRefresh": {
      "Name": "TestKumaHTTPDiscoveryRefresh",
      "File": "discovery/xds/kuma_test.go",
      "Line": 223,
      "Receiver": ""
    },
    "TestKumaMadsV1ResourceParserEmptySlice": {
      "Name": "TestKumaMadsV1ResourceParserEmptySlice",
      "File": "discovery/xds/kuma_test.go",
      "Line": 140,
      "Receiver": ""
    },
    "TestKumaMadsV1ResourceParserInvalidResources": {
      "Name": "TestKumaMadsV1ResourceParserInvalidResources",
      "File": "discovery/xds/kuma_test.go",
      "Line": 194,
      "Receiver": ""
    },
    "TestKumaMadsV1ResourceParserInvalidTypeURL": {
      "Name": "TestKumaMadsV1ResourceParserInvalidTypeURL",
      "File": "discovery/xds/kuma_test.go",
      "Line": 133,
      "Receiver": ""
    },
    "TestKumaMadsV1ResourceParserValidResources": {
      "Name": "TestKumaMadsV1ResourceParserValidResources",
      "File": "discovery/xds/kuma_test.go",
      "Line": 147,
      "Receiver": ""
    },
    "TestLabelNames": {
      "Name": "TestLabelNames",
      "File": "web/api/v1/api_test.go",
      "Line": 765,
      "Receiver": ""
    },
    "TestLabelNamesWithMatchers": {
      "Name": "TestLabelNamesWithMatchers",
      "File": "tsdb/block_test.go",
      "Line": 468,
      "Receiver": ""
    },
    "TestLabelSetNotReused": {
      "Name": "TestLabelSetNotReused",
      "File": "notifier/alertmanager_test.go",
      "Line": 54,
      "Receiver": ""
    },
    "TestLabelValuesWithMatchers": {
      "Name": "TestLabelValuesWithMatchers",
      "File": "tsdb/block_test.go",
      "Line": 230,
      "Receiver": ""
    },
    "TestLabelsToOpenAPILabelSet": {
      "Name": "TestLabelsToOpenAPILabelSet",
      "File": "notifier/util_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestLabels_BytesWithLabels": {
      "Name": "TestLabels_BytesWithLabels",
      "File": "model/labels/labels_test.go",
      "Line": 725,
      "Receiver": ""
    },
    "TestLabels_BytesWithoutLabels": {
      "Name": "TestLabels_BytesWithoutLabels",
      "File": "model/labels/labels_test.go",
      "Line": 730,
      "Receiver": ""
    },
    "TestLabels_Compare": {
      "Name": "TestLabels_Compare",
      "File": "model/labels/labels_test.go",
      "Line": 436,
      "Receiver": ""
    },
    "TestLabels_Copy": {
      "Name": "TestLabels_Copy",
      "File": "model/labels/labels_test.go",
      "Line": 717,
      "Receiver": ""
    },
    "TestLabels_DropMetricName": {
      "Name": "TestLabels_DropMetricName",
      "File": "model/labels/labels_test.go",
      "Line": 555,
      "Receiver": ""
    },
    "TestLabels_DropReserved": {
      "Name": "TestLabels_DropReserved",
      "File": "model/labels/labels_test.go",
      "Line": 565,
      "Receiver": ""
    },
    "TestLabels_Equal": {
      "Name": "TestLabels_Equal",
      "File": "model/labels/labels_test.go",
      "Line": 376,
      "Receiver": ""
    },
    "TestLabels_FromMaps": {
      "Name": "TestLabels_FromMaps",
      "File": "rules/manager_test.go",
      "Line": 2538,
      "Receiver": ""
    },
    "TestLabels_FromStrings": {
      "Name": "TestLabels_FromStrings",
      "File": "model/labels/labels_test.go",
      "Line": 418,
      "Receiver": ""
    },
    "TestLabels_Get": {
      "Name": "TestLabels_Get",
      "File": "model/labels/labels_test.go",
      "Line": 549,
      "Receiver": ""
    },
    "TestLabels_Has": {
      "Name": "TestLabels_Has",
      "File": "model/labels/labels_test.go",
      "Line": 524,
      "Receiver": ""
    },
    "TestLabels_HasDuplicateLabelNames": {
      "Name": "TestLabels_HasDuplicateLabelNames",
      "File": "model/labels/labels_test.go",
      "Line": 179,
      "Receiver": ""
    },
    "TestLabels_Hash": {
      "Name": "TestLabels_Hash",
      "File": "model/labels/labels_test.go",
      "Line": 891,
      "Receiver": ""
    },
    "TestLabels_IsValid": {
      "Name": "TestLabels_IsValid",
      "File": "model/labels/labels_test.go",
      "Line": 273,
      "Receiver": ""
    },
    "TestLabels_Map": {
      "Name": "TestLabels_Map",
      "File": "model/labels/labels_test.go",
      "Line": 721,
      "Receiver": ""
    },
    "TestLabels_MatchLabels": {
      "Name": "TestLabels_MatchLabels",
      "File": "model/labels/labels_test.go",
      "Line": 104,
      "Receiver": ""
    },
    "TestLabels_String": {
      "Name": "TestLabels_String",
      "File": "model/labels/labels_test.go",
      "Line": 43,
      "Receiver": ""
    },
    "TestLabels_ValidationModes": {
      "Name": "TestLabels_ValidationModes",
      "File": "model/labels/labels_test.go",
      "Line": 329,
      "Receiver": ""
    },
    "TestLabels_WithoutEmpty": {
      "Name": "TestLabels_WithoutEmpty",
      "File": "model/labels/labels_test.go",
      "Line": 202,
      "Receiver": ""
    },
    "TestLastCheckpoint": {
      "Name": "TestLastCheckpoint",
      "File": "tsdb/wlog/checkpoint_test.go",
      "Line": 37,
      "Receiver": ""
    },
    "TestLazyLoader_WithSamplesTill": {
      "Name": "TestLazyLoader_WithSamplesTill",
      "File": "promql/promqltest/test_test.go",
      "Line": 28,
      "Receiver": ""
    },
    "TestLeQuantileReLabel": {
      "Name": "TestLeQuantileReLabel",
      "File": "scrape/scrape_test.go",
      "Line": 4161,
      "Receiver": ""
    },
    "TestLeveledCompactor_plan": {
      "Name": "TestLeveledCompactor_plan",
      "File": "tsdb/compact_test.go",
      "Line": 176,
      "Receiver": ""
    },
    "TestLexer": {
      "Name": "TestLexer",
      "File": "promql/parser/lex_test.go",
      "Line": 964,
      "Receiver": ""
    },
    "TestLink": {
      "Name": "TestLink",
      "File": "util/strutil/strconv_test.go",
      "Line": 41,
      "Receiver": ""
    },
    "TestLinodeSDRefresh": {
      "Name": "TestLinodeSDRefresh",
      "File": "discovery/linode/linode_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "TestListPostings": {
      "Name": "TestListPostings",
      "File": "tsdb/index/postings_test.go",
      "Line": 1244,
      "Receiver": ""
    },
    "TestListSeriesIterator": {
      "Name": "TestListSeriesIterator",
      "File": "storage/series_test.go",
      "Line": 29,
      "Receiver": ""
    },
    "TestLiteralPrefixInsensitiveStringMatcher": {
      "Name": "TestLiteralPrefixInsensitiveStringMatcher",
      "File": "model/labels/regexp_test.go",
      "Line": 1253,
      "Receiver": ""
    },
    "TestLiteralPrefixSensitiveStringMatcher": {
      "Name": "TestLiteralPrefixSensitiveStringMatcher",
      "File": "model/labels/regexp_test.go",
      "Line": 1238,
      "Receiver": ""
    },
    "TestLiteralSuffixStringMatcher": {
      "Name": "TestLiteralSuffixStringMatcher",
      "File": "model/labels/regexp_test.go",
      "Line": 1261,
      "Receiver": ""
    },
    "TestLiveReaderCorrupt_RecordTooLongAndShort": {
      "Name": "TestLiveReaderCorrupt_RecordTooLongAndShort",
      "File": "tsdb/wlog/reader_test.go",
      "Line": 482,
      "Receiver": ""
    },
    "TestLiveReaderCorrupt_ShortFile": {
      "Name": "TestLiveReaderCorrupt_ShortFile",
      "File": "tsdb/wlog/reader_test.go",
      "Line": 441,
      "Receiver": ""
    },
    "TestLoadConfig": {
      "Name": "TestLoadConfig",
      "File": "config/config_test.go",
      "Line": 1946,
      "Receiver": ""
    },
    "TestLoadConfigRuleFilesAbsolutePath": {
      "Name": "TestLoadConfigRuleFilesAbsolutePath",
      "File": "config/config_test.go",
      "Line": 1984,
      "Receiver": ""
    },
    "TestLockfile": {
      "Name": "TestLockfile",
      "File": "tsdb/tsdbutil/dir_locker_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestLocking": {
      "Name": "TestLocking",
      "File": "tsdb/fileutil/flock_test.go",
      "Line": 26,
      "Receiver": ""
    },
    "TestLogPartialWrite": {
      "Name": "TestLogPartialWrite",
      "File": "tsdb/wlog/wlog_test.go",
      "Line": 416,
      "Receiver": ""
    },
    "TestMIMEType_Satisfies": {
      "Name": "TestMIMEType_Satisfies",
      "File": "web/api/v1/codec_test.go",
      "Line": 29,
      "Receiver": ""
    },
    "TestMIMEType_String": {
      "Name": "TestMIMEType_String",
      "File": "web/api/v1/codec_test.go",
      "Line": 23,
      "Receiver": ""
    },
    "TestMMapFile": {
      "Name": "TestMMapFile",
      "File": "promql/query_logger_test.go",
      "Line": 107,
      "Receiver": ""
    },
    "TestMain": {
      "Name": "TestMain",
      "File": "web/web_test.go",
      "Line": 45,
      "Receiver": ""
    },
    "TestMakeXDSResourceHttpEndpoint": {
      "Name": "TestMakeXDSResourceHttpEndpoint",
      "File": "discovery/xds/client_test.go",
      "Line": 65,
      "Receiver": ""
    },
    "TestMakeXDSResourceHttpEndpointEmptyServerURLHost": {
      "Name": "TestMakeXDSResourceHttpEndpointEmptyServerURLHost",
      "File": "discovery/xds/client_test.go",
      "Line": 58,
      "Receiver": ""
    },
    "TestMakeXDSResourceHttpEndpointEmptyServerURLScheme": {
      "Name": "TestMakeXDSResourceHttpEndpointEmptyServerURLScheme",
      "File": "discovery/xds/client_test.go",
      "Line": 51,
      "Receiver": ""
    },
    "TestManagerApplyConfig": {
      "Name": "TestManagerApplyConfig",
      "File": "scrape/manager_test.go",
      "Line": 481,
      "Receiver": ""
    },
    "TestManagerCTZeroIngestion": {
      "Name": "TestManagerCTZeroIngestion",
      "File": "scrape/manager_test.go",
      "Line": 747,
      "Receiver": ""
    },
    "TestManagerCTZeroIngestionHistogram": {
      "Name": "TestManagerCTZeroIngestionHistogram",
      "File": "scrape/manager_test.go",
      "Line": 919,
      "Receiver": ""
    },
    "TestManagerScrapePools": {
      "Name": "TestManagerScrapePools",
      "File": "scrape/manager_test.go",
      "Line": 655,
      "Receiver": ""
    },
    "TestManagerTargetsUpdates": {
      "Name": "TestManagerTargetsUpdates",
      "File": "scrape/manager_test.go",
      "Line": 580,
      "Receiver": ""
    },
    "TestManager_LoadGroups_ShouldCheckWhetherEachRuleHasDependentsAndDependencies": {
      "Name": "TestManager_LoadGroups_ShouldCheckWhetherEachRuleHasDependentsAndDependencies",
      "File": "rules/manager_test.go",
      "Line": 1520,
      "Receiver": ""
    },
    "TestMapFromVMScaleSetVMWithEmptyOSType": {
      "Name": "TestMapFromVMScaleSetVMWithEmptyOSType",
      "File": "discovery/azure/azure_test.go",
      "Line": 353,
      "Receiver": ""
    },
    "TestMapFromVMScaleSetVMWithEmptyTags": {
      "Name": "TestMapFromVMScaleSetVMWithEmptyTags",
      "File": "discovery/azure/azure_test.go",
      "Line": 295,
      "Receiver": ""
    },
    "TestMapFromVMScaleSetVMWithTags": {
      "Name": "TestMapFromVMScaleSetVMWithTags",
      "File": "discovery/azure/azure_test.go",
      "Line": 405,
      "Receiver": ""
    },
    "TestMapFromVMWithEmptyOSType": {
      "Name": "TestMapFromVMWithEmptyOSType",
      "File": "discovery/azure/azure_test.go",
      "Line": 190,
      "Receiver": ""
    },
    "TestMapFromVMWithEmptyTags": {
      "Name": "TestMapFromVMWithEmptyTags",
      "File": "discovery/azure/azure_test.go",
      "Line": 52,
      "Receiver": ""
    },
    "TestMapFromVMWithTags": {
      "Name": "TestMapFromVMWithTags",
      "File": "discovery/azure/azure_test.go",
      "Line": 239,
      "Receiver": ""
    },
    "TestMarathonSDEmptyList": {
      "Name": "TestMarathonSDEmptyList",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 76,
      "Receiver": ""
    },
    "TestMarathonSDHandleError": {
      "Name": "TestMarathonSDHandleError",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 64,
      "Receiver": ""
    },
    "TestMarathonSDRemoveApp": {
      "Name": "TestMarathonSDRemoveApp",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 126,
      "Receiver": ""
    },
    "TestMarathonSDSendGroup": {
      "Name": "TestMarathonSDSendGroup",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 109,
      "Receiver": ""
    },
    "TestMarathonSDSendGroupWithContainerNetworkAndPortMapping": {
      "Name": "TestMarathonSDSendGroupWithContainerNetworkAndPortMapping",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 562,
      "Receiver": ""
    },
    "TestMarathonSDSendGroupWithContainerPortMappings": {
      "Name": "TestMarathonSDSendGroupWithContainerPortMappings",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 446,
      "Receiver": ""
    },
    "TestMarathonSDSendGroupWithDockerContainerPortMappings": {
      "Name": "TestMarathonSDSendGroupWithDockerContainerPortMappings",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 502,
      "Receiver": ""
    },
    "TestMarathonSDSendGroupWithMultiplePort": {
      "Name": "TestMarathonSDSendGroupWithMultiplePort",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 186,
      "Receiver": ""
    },
    "TestMarathonSDSendGroupWithPortDefinitions": {
      "Name": "TestMarathonSDSendGroupWithPortDefinitions",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 289,
      "Receiver": ""
    },
    "TestMarathonSDSendGroupWithPortDefinitionsRequirePorts": {
      "Name": "TestMarathonSDSendGroupWithPortDefinitionsRequirePorts",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 343,
      "Receiver": ""
    },
    "TestMarathonSDSendGroupWithPorts": {
      "Name": "TestMarathonSDSendGroupWithPorts",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 390,
      "Receiver": ""
    },
    "TestMarathonZeroTaskPorts": {
      "Name": "TestMarathonZeroTaskPorts",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 231,
      "Receiver": ""
    },
    "TestMarshalStoreSamplesRequest": {
      "Name": "TestMarshalStoreSamplesRequest",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/opentsdb/client_test.go",
      "Line": 39,
      "Receiver": ""
    },
    "TestMarshaling": {
      "Name": "TestMarshaling",
      "File": "model/labels/labels_test.go",
      "Line": 986,
      "Receiver": ""
    },
    "TestMatcher": {
      "Name": "TestMatcher",
      "File": "model/labels/matcher_test.go",
      "Line": 30,
      "Receiver": ""
    },
    "TestMatrix_ContainsSameLabelset": {
      "Name": "TestMatrix_ContainsSameLabelset",
      "File": "promql/value_test.go",
      "Line": 69,
      "Receiver": ""
    },
    "TestMaxBlockChunkSegmentSizeBounds": {
      "Name": "TestMaxBlockChunkSegmentSizeBounds",
      "File": "cmd/prometheus/main_test.go",
      "Line": 292,
      "Receiver": ""
    },
    "TestMaxQuerySamples": {
      "Name": "TestMaxQuerySamples",
      "File": "promql/engine_test.go",
      "Line": 1338,
      "Receiver": ""
    },
    "TestMaxSchemaAppender": {
      "Name": "TestMaxSchemaAppender",
      "File": "scrape/target_test.go",
      "Line": 647,
      "Receiver": ""
    },
    "TestMaxSubscribers": {
      "Name": "TestMaxSubscribers",
      "File": "util/notifications/notifications_test.go",
      "Line": 199,
      "Receiver": ""
    },
    "TestMemPostingsStats": {
      "Name": "TestMemPostingsStats",
      "File": "tsdb/index/postings_test.go",
      "Line": 946,
      "Receiver": ""
    },
    "TestMemPostings_Delete": {
      "Name": "TestMemPostings_Delete",
      "File": "tsdb/index/postings_test.go",
      "Line": 976,
      "Receiver": ""
    },
    "TestMemPostings_PostingsForAllLabelValues": {
      "Name": "TestMemPostings_PostingsForAllLabelValues",
      "File": "tsdb/index/postings_test.go",
      "Line": 1501,
      "Receiver": ""
    },
    "TestMemPostings_PostingsForLabelMatching": {
      "Name": "TestMemPostings_PostingsForLabelMatching",
      "File": "tsdb/index/postings_test.go",
      "Line": 1479,
      "Receiver": ""
    },
    "TestMemPostings_PostingsForLabelMatchingHonorsContextCancel": {
      "Name": "TestMemPostings_PostingsForLabelMatchingHonorsContextCancel",
      "File": "tsdb/index/postings_test.go",
      "Line": 1516,
      "Receiver": ""
    },
    "TestMemPostings_addFor": {
      "Name": "TestMemPostings_addFor",
      "File": "tsdb/index/postings_test.go",
      "Line": 37,
      "Receiver": ""
    },
    "TestMemPostings_ensureOrder": {
      "Name": "TestMemPostings_ensureOrder",
      "File": "tsdb/index/postings_test.go",
      "Line": 47,
      "Receiver": ""
    },
    "TestMemSeriesIsolation": {
      "Name": "TestMemSeriesIsolation",
      "File": "tsdb/head_test.go",
      "Line": 2649,
      "Receiver": ""
    },
    "TestMemSeries_append": {
      "Name": "TestMemSeries_append",
      "File": "tsdb/head_test.go",
      "Line": 1952,
      "Receiver": ""
    },
    "TestMemSeries_appendHistogram": {
      "Name": "TestMemSeries_appendHistogram",
      "File": "tsdb/head_test.go",
      "Line": 2013,
      "Receiver": ""
    },
    "TestMemSeries_append_atVariableRate": {
      "Name": "TestMemSeries_append_atVariableRate",
      "File": "tsdb/head_test.go",
      "Line": 2074,
      "Receiver": ""
    },
    "TestMemSeries_chunk": {
      "Name": "TestMemSeries_chunk",
      "File": "tsdb/head_read_test.go",
      "Line": 30,
      "Receiver": ""
    },
    "TestMemSeries_truncateChunks": {
      "Name": "TestMemSeries_truncateChunks",
      "File": "tsdb/head_test.go",
      "Line": 1231,
      "Receiver": ""
    },
    "TestMemSeries_truncateChunks_scenarios": {
      "Name": "TestMemSeries_truncateChunks_scenarios",
      "File": "tsdb/head_test.go",
      "Line": 1282,
      "Receiver": ""
    },
    "TestMemTombstonesConcurrency": {
      "Name": "TestMemTombstonesConcurrency",
      "File": "tsdb/tombstones/tombstones_test.go",
      "Line": 259,
      "Receiver": ""
    },
    "TestMemoizedSeriesIterator": {
      "Name": "TestMemoizedSeriesIterator",
      "File": "storage/memoized_iterator_test.go",
      "Line": 26,
      "Receiver": ""
    },
    "TestMergeChunkQuerierWithNoVerticalChunkSeriesMerger": {
      "Name": "TestMergeChunkQuerierWithNoVerticalChunkSeriesMerger",
      "File": "storage/merge_test.go",
      "Line": 218,
      "Receiver": ""
    },
    "TestMergeLabels": {
      "Name": "TestMergeLabels",
      "File": "storage/remote/codec_test.go",
      "Line": 601,
      "Receiver": ""
    },
    "TestMergeQuerierConcurrentSelectMatchers": {
      "Name": "TestMergeQuerierConcurrentSelectMatchers",
      "File": "tsdb/querier_test.go",
      "Line": 3815,
      "Receiver": ""
    },
    "TestMergeQuerierWithChainMerger": {
      "Name": "TestMergeQuerierWithChainMerger",
      "File": "storage/merge_test.go",
      "Line": 35,
      "Receiver": ""
    },
    "TestMergeQuerierWithSecondaries_ErrorHandling": {
      "Name": "TestMergeQuerierWithSecondaries_ErrorHandling",
      "File": "storage/merge_test.go",
      "Line": 1449,
      "Receiver": ""
    },
    "TestMergedPostings": {
      "Name": "TestMergedPostings",
      "File": "tsdb/index/postings_test.go",
      "Line": 423,
      "Receiver": ""
    },
    "TestMergedPostingsSeek": {
      "Name": "TestMergedPostingsSeek",
      "File": "tsdb/index/postings_test.go",
      "Line": 525,
      "Receiver": ""
    },
    "TestMetaStore.GetMetadata": {
      "Name": "TestMetaStore.GetMetadata",
      "File": "storage/remote/metadata_watcher_test.go",
      "Line": 43,
      "Receiver": "TestMetaStore"
    },
    "TestMetaStore.LengthMetadata": {
      "Name": "TestMetaStore.LengthMetadata",
      "File": "storage/remote/metadata_watcher_test.go",
      "Line": 54,
      "Receiver": "TestMetaStore"
    },
    "TestMetaStore.ListMetadata": {
      "Name": "TestMetaStore.ListMetadata",
      "File": "storage/remote/metadata_watcher_test.go",
      "Line": 39,
      "Receiver": "TestMetaStore"
    },
    "TestMetaStore.SizeMetadata": {
      "Name": "TestMetaStore.SizeMetadata",
      "File": "storage/remote/metadata_watcher_test.go",
      "Line": 53,
      "Receiver": "TestMetaStore"
    },
    "TestMetadata": {
      "Name": "TestMetadata",
      "File": "schema/labels_test.go",
      "Line": 27,
      "Receiver": ""
    },
    "TestMetadataAssertInMemoryData": {
      "Name": "TestMetadataAssertInMemoryData",
      "File": "tsdb/db_test.go",
      "Line": 4759,
      "Receiver": ""
    },
    "TestMetadataCheckpointingOnlyKeepsLatestEntry": {
      "Name": "TestMetadataCheckpointingOnlyKeepsLatestEntry",
      "File": "tsdb/db_test.go",
      "Line": 4655,
      "Receiver": ""
    },
    "TestMetadataDelivery": {
      "Name": "TestMetadataDelivery",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 336,
      "Receiver": ""
    },
    "TestMetadataInWAL": {
      "Name": "TestMetadataInWAL",
      "File": "tsdb/db_test.go",
      "Line": 4590,
      "Receiver": ""
    },
    "TestMetricStreamingDecoder": {
      "Name": "TestMetricStreamingDecoder",
      "File": "prompb/io/prometheus/client/decoder_test.go",
      "Line": 93,
      "Receiver": ""
    },
    "TestMetricTextToWriteRequestErrorParsingFloatValue": {
      "Name": "TestMetricTextToWriteRequestErrorParsingFloatValue",
      "File": "util/fmtutil/format_test.go",
      "Line": 210,
      "Receiver": ""
    },
    "TestMetricTextToWriteRequestErrorParsingMetricType": {
      "Name": "TestMetricTextToWriteRequestErrorParsingMetricType",
      "File": "util/fmtutil/format_test.go",
      "Line": 223,
      "Receiver": ""
    },
    "TestMetricsStalenessOnManagerShutdown": {
      "Name": "TestMetricsStalenessOnManagerShutdown",
      "File": "rules/manager_test.go",
      "Line": 1128,
      "Receiver": ""
    },
    "TestMetricsUpdate": {
      "Name": "TestMetricsUpdate",
      "File": "rules/manager_test.go",
      "Line": 975,
      "Receiver": ""
    },
    "TestMigrateTestData_BasicMode": {
      "Name": "TestMigrateTestData_BasicMode",
      "File": "promql/promqltest/test_migrate_test.go",
      "Line": 49,
      "Receiver": ""
    },
    "TestMigrateTestData_StrictMode": {
      "Name": "TestMigrateTestData_StrictMode",
      "File": "promql/promqltest/test_migrate_test.go",
      "Line": 157,
      "Receiver": ""
    },
    "TestMigrateTestData_TolerantMode": {
      "Name": "TestMigrateTestData_TolerantMode",
      "File": "promql/promqltest/test_migrate_test.go",
      "Line": 278,
      "Receiver": ""
    },
    "TestMmapPanicAfterMmapReplayCorruption": {
      "Name": "TestMmapPanicAfterMmapReplayCorruption",
      "File": "tsdb/head_test.go",
      "Line": 5575,
      "Receiver": ""
    },
    "TestMockSeries": {
      "Name": "TestMockSeries",
      "File": "storage/interface_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestModeSpecificFlags": {
      "Name": "TestModeSpecificFlags",
      "File": "cmd/prometheus/main_test.go",
      "Line": 486,
      "Receiver": ""
    },
    "TestMultiError_As": {
      "Name": "TestMultiError_As",
      "File": "tsdb/errors/errors_test.go",
      "Line": 123,
      "Receiver": ""
    },
    "TestMultiError_Is": {
      "Name": "TestMultiError_Is",
      "File": "tsdb/errors/errors_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestMultiIntersect": {
      "Name": "TestMultiIntersect",
      "File": "tsdb/index/postings_test.go",
      "Line": 240,
      "Receiver": ""
    },
    "TestMultiMerge": {
      "Name": "TestMultiMerge",
      "File": "tsdb/index/postings_test.go",
      "Line": 413,
      "Receiver": ""
    },
    "TestMultipleEncodingsCommitOrder": {
      "Name": "TestMultipleEncodingsCommitOrder",
      "File": "tsdb/db_test.go",
      "Line": 4846,
      "Receiver": ""
    },
    "TestMultipleListenAddresses": {
      "Name": "TestMultipleListenAddresses",
      "File": "web/web_test.go",
      "Line": 632,
      "Receiver": ""
    },
    "TestMultipleSubscribers": {
      "Name": "TestMultipleSubscribers",
      "File": "util/notifications/notifications_test.go",
      "Line": 106,
      "Receiver": ""
    },
    "TestNHCBConvert": {
      "Name": "TestNHCBConvert",
      "File": "util/convertnhcb/convertnhcb_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestNHCBParserErrorHandling": {
      "Name": "TestNHCBParserErrorHandling",
      "File": "model/textparse/nhcbparse_test.go",
      "Line": 940,
      "Receiver": ""
    },
    "TestNHCBParserOMParser_MultipleHistograms": {
      "Name": "TestNHCBParserOMParser_MultipleHistograms",
      "File": "model/textparse/nhcbparse_test.go",
      "Line": 455,
      "Receiver": ""
    },
    "TestNHCBParserOnOMParser": {
      "Name": "TestNHCBParserOnOMParser",
      "File": "model/textparse/nhcbparse_test.go",
      "Line": 32,
      "Receiver": ""
    },
    "TestNHCBParserResetLastExponential": {
      "Name": "TestNHCBParserResetLastExponential",
      "File": "model/textparse/nhcbparse_test.go",
      "Line": 985,
      "Receiver": ""
    },
    "TestNHCBParser_NoNHCBWhenExponential": {
      "Name": "TestNHCBParser_NoNHCBWhenExponential",
      "File": "model/textparse/nhcbparse_test.go",
      "Line": 549,
      "Receiver": ""
    },
    "TestNaNExpression": {
      "Name": "TestNaNExpression",
      "File": "promql/parser/parse_test.go",
      "Line": 4991,
      "Receiver": ""
    },
    "TestNativeHistogramFlag": {
      "Name": "TestNativeHistogramFlag",
      "File": "tsdb/db_test.go",
      "Line": 8916,
      "Receiver": ""
    },
    "TestNativeHistogramMaxSchemaSet": {
      "Name": "TestNativeHistogramMaxSchemaSet",
      "File": "scrape/scrape_test.go",
      "Line": 5180,
      "Receiver": ""
    },
    "TestNativeHistogramsInRecordingRules": {
      "Name": "TestNativeHistogramsInRecordingRules",
      "File": "rules/manager_test.go",
      "Line": 1458,
      "Receiver": ""
    },
    "TestNegotiateResponseType": {
      "Name": "TestNegotiateResponseType",
      "File": "storage/remote/codec_test.go",
      "Line": 577,
      "Receiver": ""
    },
    "TestNewAzureResourceFromID": {
      "Name": "TestNewAzureResourceFromID",
      "File": "discovery/azure/azure_test.go",
      "Line": 466,
      "Receiver": ""
    },
    "TestNewClientWithBadTLSConfig": {
      "Name": "TestNewClientWithBadTLSConfig",
      "File": "scrape/target_test.go",
      "Line": 333,
      "Receiver": ""
    },
    "TestNewCompactorFunc": {
      "Name": "TestNewCompactorFunc",
      "File": "tsdb/db_test.go",
      "Line": 9262,
      "Receiver": ""
    },
    "TestNewDiscoveryError": {
      "Name": "TestNewDiscoveryError",
      "File": "discovery/zookeeper/zookeeper_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "TestNewEqualMultiStringMatcher": {
      "Name": "TestNewEqualMultiStringMatcher",
      "File": "model/labels/regexp_test.go",
      "Line": 794,
      "Receiver": ""
    },
    "TestNewFileReaderErrorNoOpenFiles": {
      "Name": "TestNewFileReaderErrorNoOpenFiles",
      "File": "tsdb/index/index_test.go",
      "Line": 477,
      "Receiver": ""
    },
    "TestNewHTTPBasicAuth": {
      "Name": "TestNewHTTPBasicAuth",
      "File": "scrape/target_test.go",
      "Line": 189,
      "Receiver": ""
    },
    "TestNewHTTPBearerToken": {
      "Name": "TestNewHTTPBearerToken",
      "File": "scrape/target_test.go",
      "Line": 147,
      "Receiver": ""
    },
    "TestNewHTTPBearerTokenFile": {
      "Name": "TestNewHTTPBearerTokenFile",
      "File": "scrape/target_test.go",
      "Line": 168,
      "Receiver": ""
    },
    "TestNewHTTPCACert": {
      "Name": "TestNewHTTPCACert",
      "File": "scrape/target_test.go",
      "Line": 214,
      "Receiver": ""
    },
    "TestNewHTTPClientCert": {
      "Name": "TestNewHTTPClientCert",
      "File": "scrape/target_test.go",
      "Line": 238,
      "Receiver": ""
    },
    "TestNewHTTPWithBadServerName": {
      "Name": "TestNewHTTPWithBadServerName",
      "File": "scrape/target_test.go",
      "Line": 292,
      "Receiver": ""
    },
    "TestNewHTTPWithServerName": {
      "Name": "TestNewHTTPWithServerName",
      "File": "scrape/target_test.go",
      "Line": 267,
      "Receiver": ""
    },
    "TestNewKumaHTTPDiscovery": {
      "Name": "TestNewKumaHTTPDiscovery",
      "File": "discovery/xds/kuma_test.go",
      "Line": 208,
      "Receiver": ""
    },
    "TestNewParser": {
      "Name": "TestNewParser",
      "File": "model/textparse/interface_test.go",
      "Line": 33,
      "Receiver": ""
    },
    "TestNewRuleDetail": {
      "Name": "TestNewRuleDetail",
      "File": "rules/origin_test.go",
      "Line": 73,
      "Receiver": ""
    },
    "TestNewRuleDetailPanics": {
      "Name": "TestNewRuleDetailPanics",
      "File": "rules/origin_test.go",
      "Line": 54,
      "Receiver": ""
    },
    "TestNewRuleGroupRestoration": {
      "Name": "TestNewRuleGroupRestoration",
      "File": "rules/manager_test.go",
      "Line": 2274,
      "Receiver": ""
    },
    "TestNewRuleGroupRestorationWithRestoreNewGroupOption": {
      "Name": "TestNewRuleGroupRestorationWithRestoreNewGroupOption",
      "File": "rules/manager_test.go",
      "Line": 2337,
      "Receiver": ""
    },
    "TestNewScrapePool": {
      "Name": "TestNewScrapePool",
      "File": "scrape/scrape_test.go",
      "Line": 83,
      "Receiver": ""
    },
    "TestNewWalSegmentOnTruncate": {
      "Name": "TestNewWalSegmentOnTruncate",
      "File": "tsdb/head_test.go",
      "Line": 2602,
      "Receiver": ""
    },
    "TestNoDeadlock": {
      "Name": "TestNoDeadlock",
      "File": "tsdb/agent/series_test.go",
      "Line": 29,
      "Receiver": ""
    },
    "TestNoDependency": {
      "Name": "TestNoDependency",
      "File": "rules/manager_test.go",
      "Line": 1638,
      "Receiver": ""
    },
    "TestNoDuplicateReadConfigs": {
      "Name": "TestNoDuplicateReadConfigs",
      "File": "storage/remote/read_test.go",
      "Line": 35,
      "Receiver": ""
    },
    "TestNoEmptyBlocks": {
      "Name": "TestNoEmptyBlocks",
      "File": "tsdb/db_test.go",
      "Line": 2039,
      "Receiver": ""
    },
    "TestNoGapAfterRestartWithOOO": {
      "Name": "TestNoGapAfterRestartWithOOO",
      "File": "tsdb/db_test.go",
      "Line": 8172,
      "Receiver": ""
    },
    "TestNoMetricSelector": {
      "Name": "TestNoMetricSelector",
      "File": "rules/manager_test.go",
      "Line": 1819,
      "Receiver": ""
    },
    "TestNoPanicAfterWALCorruption": {
      "Name": "TestNoPanicAfterWALCorruption",
      "File": "tsdb/db_test.go",
      "Line": 241,
      "Receiver": ""
    },
    "TestNoPanicFor0Tombstones": {
      "Name": "TestNoPanicFor0Tombstones",
      "File": "tsdb/compact_test.go",
      "Line": 152,
      "Receiver": ""
    },
    "TestNoPanicOnTSDBOpenError": {
      "Name": "TestNoPanicOnTSDBOpenError",
      "File": "tsdb/db_test.go",
      "Line": 3387,
      "Receiver": ""
    },
    "TestNoTargets": {
      "Name": "TestNoTargets",
      "File": "discovery/consul/consul_test.go",
      "Line": 315,
      "Receiver": ""
    },
    "TestNodeDiscoveryAdd": {
      "Name": "TestNodeDiscoveryAdd",
      "File": "discovery/kubernetes/node_test.go",
      "Line": 98,
      "Receiver": ""
    },
    "TestNodeDiscoveryBeforeStart": {
      "Name": "TestNodeDiscoveryBeforeStart",
      "File": "discovery/kubernetes/node_test.go",
      "Line": 58,
      "Receiver": ""
    },
    "TestNodeDiscoveryDelete": {
      "Name": "TestNodeDiscoveryDelete",
      "File": "discovery/kubernetes/node_test.go",
      "Line": 128,
      "Receiver": ""
    },
    "TestNodeDiscoveryUpdate": {
      "Name": "TestNodeDiscoveryUpdate",
      "File": "discovery/kubernetes/node_test.go",
      "Line": 147,
      "Receiver": ""
    },
    "TestNodeName": {
      "Name": "TestNodeName",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 327,
      "Receiver": ""
    },
    "TestNomadSDRefresh": {
      "Name": "TestNomadSDRefresh",
      "File": "discovery/nomad/nomad_test.go",
      "Line": 163,
      "Receiver": ""
    },
    "TestNonConfiguredService": {
      "Name": "TestNonConfiguredService",
      "File": "discovery/consul/consul_test.go",
      "Line": 176,
      "Receiver": ""
    },
    "TestNonDuplicateNaNDatapointsCausesAmendError": {
      "Name": "TestNonDuplicateNaNDatapointsCausesAmendError",
      "File": "tsdb/db_test.go",
      "Line": 568,
      "Receiver": ""
    },
    "TestNoopFileUpdate": {
      "Name": "TestNoopFileUpdate",
      "File": "discovery/file/file_test.go",
      "Line": 369,
      "Receiver": ""
    },
    "TestNotMatcherSelectsLabelsUnsetSeries": {
      "Name": "TestNotMatcherSelectsLabelsUnsetSeries",
      "File": "tsdb/db_test.go",
      "Line": 1650,
      "Receiver": ""
    },
    "TestNotificationLifecycle": {
      "Name": "TestNotificationLifecycle",
      "File": "util/notifications/notifications_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestNotify": {
      "Name": "TestNotify",
      "File": "rules/manager_test.go",
      "Line": 911,
      "Receiver": ""
    },
    "TestOMNullByteHandling": {
      "Name": "TestOMNullByteHandling",
      "File": "model/textparse/openmetricsparse_test.go",
      "Line": 1040,
      "Receiver": ""
    },
    "TestOOOAppendAndQuery": {
      "Name": "TestOOOAppendAndQuery",
      "File": "tsdb/db_test.go",
      "Line": 6637,
      "Receiver": ""
    },
    "TestOOOAppendWithNoSeries": {
      "Name": "TestOOOAppendWithNoSeries",
      "File": "tsdb/head_test.go",
      "Line": 5709,
      "Receiver": ""
    },
    "TestOOOChunks_ToEncodedChunks": {
      "Name": "TestOOOChunks_ToEncodedChunks",
      "File": "tsdb/ooo_head_test.go",
      "Line": 163,
      "Receiver": ""
    },
    "TestOOOCompaction": {
      "Name": "TestOOOCompaction",
      "File": "tsdb/db_test.go",
      "Line": 4997,
      "Receiver": ""
    },
    "TestOOOCompactionFailure": {
      "Name": "TestOOOCompactionFailure",
      "File": "tsdb/db_test.go",
      "Line": 7507,
      "Receiver": ""
    },
    "TestOOOCompactionWithDisabledWriteLog": {
      "Name": "TestOOOCompactionWithDisabledWriteLog",
      "File": "tsdb/db_test.go",
      "Line": 5311,
      "Receiver": ""
    },
    "TestOOOCompactionWithNormalCompaction": {
      "Name": "TestOOOCompactionWithNormalCompaction",
      "File": "tsdb/db_test.go",
      "Line": 5202,
      "Receiver": ""
    },
    "TestOOODisabled": {
      "Name": "TestOOODisabled",
      "File": "tsdb/db_test.go",
      "Line": 6771,
      "Receiver": ""
    },
    "TestOOOHeadChunkReader_Chunk": {
      "Name": "TestOOOHeadChunkReader_Chunk",
      "File": "tsdb/ooo_head_read_test.go",
      "Line": 483,
      "Receiver": ""
    },
    "TestOOOHeadChunkReader_Chunk_ConsistentQueryResponseDespiteOfHeadExpanding": {
      "Name": "TestOOOHeadChunkReader_Chunk_ConsistentQueryResponseDespiteOfHeadExpanding",
      "File": "tsdb/ooo_head_read_test.go",
      "Line": 893,
      "Receiver": ""
    },
    "TestOOOHeadChunkReader_LabelValues": {
      "Name": "TestOOOHeadChunkReader_LabelValues",
      "File": "tsdb/ooo_head_read_test.go",
      "Line": 380,
      "Receiver": ""
    },
    "TestOOOHeadIndexReader_Series": {
      "Name": "TestOOOHeadIndexReader_Series",
      "File": "tsdb/ooo_head_read_test.go",
      "Line": 67,
      "Receiver": ""
    },
    "TestOOOHistogramCompactionWithCounterResets": {
      "Name": "TestOOOHistogramCompactionWithCounterResets",
      "File": "tsdb/db_test.go",
      "Line": 7038,
      "Receiver": ""
    },
    "TestOOOHistogramCounterResetHeaders": {
      "Name": "TestOOOHistogramCounterResetHeaders",
      "File": "tsdb/head_test.go",
      "Line": 4898,
      "Receiver": ""
    },
    "TestOOOInsert": {
      "Name": "TestOOOInsert",
      "File": "tsdb/ooo_head_test.go",
      "Line": 46,
      "Receiver": ""
    },
    "TestOOOInsertDuplicate": {
      "Name": "TestOOOInsertDuplicate",
      "File": "tsdb/ooo_head_test.go",
      "Line": 110,
      "Receiver": ""
    },
    "TestOOOInterleavedImplicitCounterResets": {
      "Name": "TestOOOInterleavedImplicitCounterResets",
      "File": "tsdb/db_test.go",
      "Line": 6364,
      "Receiver": ""
    },
    "TestOOOIsolation": {
      "Name": "TestOOOIsolation",
      "File": "tsdb/ooo_isolation_test.go",
      "Line": 22,
      "Receiver": ""
    },
    "TestOOOMmapCorruption": {
      "Name": "TestOOOMmapCorruption",
      "File": "tsdb/db_test.go",
      "Line": 7800,
      "Receiver": ""
    },
    "TestOOOMmapReplay": {
      "Name": "TestOOOMmapReplay",
      "File": "tsdb/head_test.go",
      "Line": 5406,
      "Receiver": ""
    },
    "TestOOONativeHistogramsSettings": {
      "Name": "TestOOONativeHistogramsSettings",
      "File": "tsdb/db_test.go",
      "Line": 8969,
      "Receiver": ""
    },
    "TestOOONativeHistogramsWithCounterResets": {
      "Name": "TestOOONativeHistogramsWithCounterResets",
      "File": "tsdb/db_test.go",
      "Line": 6198,
      "Receiver": ""
    },
    "TestOOOQueryAfterRestartWithSnapshotAndRemovedWBL": {
      "Name": "TestOOOQueryAfterRestartWithSnapshotAndRemovedWBL",
      "File": "tsdb/db_test.go",
      "Line": 5422,
      "Receiver": ""
    },
    "TestOOOWALWrite": {
      "Name": "TestOOOWALWrite",
      "File": "tsdb/db_test.go",
      "Line": 3943,
      "Receiver": ""
    },
    "TestOTLPAllowServiceNameInTargetInfo": {
      "Name": "TestOTLPAllowServiceNameInTargetInfo",
      "File": "config/config_test.go",
      "Line": 1783,
      "Receiver": ""
    },
    "TestOTLPAllowUTF8": {
      "Name": "TestOTLPAllowUTF8",
      "File": "config/config_test.go",
      "Line": 1825,
      "Receiver": ""
    },
    "TestOTLPConvertHistogramsToNHCB": {
      "Name": "TestOTLPConvertHistogramsToNHCB",
      "File": "config/config_test.go",
      "Line": 1797,
      "Receiver": ""
    },
    "TestOTLPDelta": {
      "Name": "TestOTLPDelta",
      "File": "storage/remote/write_test.go",
      "Line": 623,
      "Receiver": ""
    },
    "TestOTLPPromoteScopeMetadata": {
      "Name": "TestOTLPPromoteScopeMetadata",
      "File": "config/config_test.go",
      "Line": 1811,
      "Receiver": ""
    },
    "TestOTLPSanitizeResourceAttributes": {
      "Name": "TestOTLPSanitizeResourceAttributes",
      "File": "config/config_test.go",
      "Line": 1703,
      "Receiver": ""
    },
    "TestOTLPWriteHandler": {
      "Name": "TestOTLPWriteHandler",
      "File": "storage/remote/write_test.go",
      "Line": 383,
      "Receiver": ""
    },
    "TestOneCheckpointPerCompactCall": {
      "Name": "TestOneCheckpointPerCompactCall",
      "File": "tsdb/db_test.go",
      "Line": 3268,
      "Receiver": ""
    },
    "TestOneService": {
      "Name": "TestOneService",
      "File": "discovery/consul/consul_test.go",
      "Line": 336,
      "Receiver": ""
    },
    "TestOnlyProviderStaleTargetsAreDropped": {
      "Name": "TestOnlyProviderStaleTargetsAreDropped",
      "File": "scrape/manager_test.go",
      "Line": 1258,
      "Receiver": ""
    },
    "TestOnlyStaleTargetsAreDropped": {
      "Name": "TestOnlyStaleTargetsAreDropped",
      "File": "scrape/manager_test.go",
      "Line": 1379,
      "Receiver": ""
    },
    "TestOpenMetricsParse": {
      "Name": "TestOpenMetricsParse",
      "File": "model/textparse/openmetricsparse_test.go",
      "Line": 30,
      "Receiver": ""
    },
    "TestOpenMetricsParseErrors": {
      "Name": "TestOpenMetricsParseErrors",
      "File": "model/textparse/openmetricsparse_test.go",
      "Line": 740,
      "Receiver": ""
    },
    "TestOpenMetricsParse_UTF8": {
      "Name": "TestOpenMetricsParse_UTF8",
      "File": "model/textparse/openmetricsparse_test.go",
      "Line": 654,
      "Receiver": ""
    },
    "TestOpen_VariousBlockStates": {
      "Name": "TestOpen_VariousBlockStates",
      "File": "tsdb/db_test.go",
      "Line": 3153,
      "Receiver": ""
    },
    "TestOpenstackSDHypervisorRefresh": {
      "Name": "TestOpenstackSDHypervisorRefresh",
      "File": "discovery/openstack/hypervisor_test.go",
      "Line": 49,
      "Receiver": ""
    },
    "TestOpenstackSDHypervisorRefreshWithDoneContext": {
      "Name": "TestOpenstackSDHypervisorRefreshWithDoneContext",
      "File": "discovery/openstack/hypervisor_test.go",
      "Line": 88,
      "Receiver": ""
    },
    "TestOpenstackSDInstanceRefresh": {
      "Name": "TestOpenstackSDInstanceRefresh",
      "File": "discovery/openstack/instance_test.go",
      "Line": 54,
      "Receiver": ""
    },
    "TestOpenstackSDInstanceRefreshWithDoneContext": {
      "Name": "TestOpenstackSDInstanceRefreshWithDoneContext",
      "File": "discovery/openstack/instance_test.go",
      "Line": 155,
      "Receiver": ""
    },
    "TestOpenstackSDLoadBalancerRefresh": {
      "Name": "TestOpenstackSDLoadBalancerRefresh",
      "File": "discovery/openstack/loadbalancer_test.go",
      "Line": 53,
      "Receiver": ""
    },
    "TestOpenstackSDLoadBalancerRefreshWithDoneContext": {
      "Name": "TestOpenstackSDLoadBalancerRefreshWithDoneContext",
      "File": "discovery/openstack/loadbalancer_test.go",
      "Line": 128,
      "Receiver": ""
    },
    "TestOptimizeConcatRegex": {
      "Name": "TestOptimizeConcatRegex",
      "File": "model/labels/regexp_test.go",
      "Line": 139,
      "Receiver": ""
    },
    "TestOptimizeEqualOrPrefixStringMatchers": {
      "Name": "TestOptimizeEqualOrPrefixStringMatchers",
      "File": "model/labels/regexp_test.go",
      "Line": 700,
      "Receiver": ""
    },
    "TestOptimizedMarshal": {
      "Name": "TestOptimizedMarshal",
      "File": "prompb/io/prometheus/write/v2/custom_test.go",
      "Line": 21,
      "Receiver": ""
    },
    "TestOptionsMethod": {
      "Name": "TestOptionsMethod",
      "File": "web/api/v1/api_test.go",
      "Line": 4321,
      "Receiver": ""
    },
    "TestOutOfOrderExemplar_V1Message": {
      "Name": "TestOutOfOrderExemplar_V1Message",
      "File": "storage/remote/write_handler_test.go",
      "Line": 593,
      "Receiver": ""
    },
    "TestOutOfOrderHistogram_V1Message": {
      "Name": "TestOutOfOrderHistogram_V1Message",
      "File": "storage/remote/write_handler_test.go",
      "Line": 633,
      "Receiver": ""
    },
    "TestOutOfOrderRuntimeConfig": {
      "Name": "TestOutOfOrderRuntimeConfig",
      "File": "tsdb/db_test.go",
      "Line": 7932,
      "Receiver": ""
    },
    "TestOutOfOrderSample_V1Message": {
      "Name": "TestOutOfOrderSample_V1Message",
      "File": "storage/remote/write_handler_test.go",
      "Line": 553,
      "Receiver": ""
    },
    "TestOutOfOrderSamplesMetric": {
      "Name": "TestOutOfOrderSamplesMetric",
      "File": "tsdb/head_test.go",
      "Line": 2946,
      "Receiver": ""
    },
    "TestOutOfOrderSamplesMetricNativeHistogramOOODisabled": {
      "Name": "TestOutOfOrderSamplesMetricNativeHistogramOOODisabled",
      "File": "tsdb/head_test.go",
      "Line": 2956,
      "Receiver": ""
    },
    "TestOverlappingBlocksDetectsAllOverlaps": {
      "Name": "TestOverlappingBlocksDetectsAllOverlaps",
      "File": "tsdb/db_test.go",
      "Line": 1744,
      "Receiver": ""
    },
    "TestOvhCloudVpsRefresh": {
      "Name": "TestOvhCloudVpsRefresh",
      "File": "discovery/ovhcloud/vps_test.go",
      "Line": 30,
      "Receiver": ""
    },
    "TestOvhcloudDedicatedServerRefresh": {
      "Name": "TestOvhcloudDedicatedServerRefresh",
      "File": "discovery/ovhcloud/dedicated_server_test.go",
      "Line": 30,
      "Receiver": ""
    },
    "TestPanicOnApplyConfig": {
      "Name": "TestPanicOnApplyConfig",
      "File": "tsdb/db_test.go",
      "Line": 8356,
      "Receiver": ""
    },
    "TestParenExprPretty": {
      "Name": "TestParenExprPretty",
      "File": "promql/parser/prettier_test.go",
      "Line": 272,
      "Receiver": ""
    },
    "TestParseAndPushMetricsTextAndFormat": {
      "Name": "TestParseAndPushMetricsTextAndFormat",
      "File": "util/fmtutil/format_test.go",
      "Line": 176,
      "Receiver": ""
    },
    "TestParseBrokenJSON": {
      "Name": "TestParseBrokenJSON",
      "File": "promql/query_logger_test.go",
      "Line": 130,
      "Receiver": ""
    },
    "TestParseCustomFunctions": {
      "Name": "TestParseCustomFunctions",
      "File": "promql/parser/parse_test.go",
      "Line": 5582,
      "Receiver": ""
    },
    "TestParseDuration": {
      "Name": "TestParseDuration",
      "File": "web/api/v1/api_test.go",
      "Line": 4272,
      "Receiver": ""
    },
    "TestParseExpressions": {
      "Name": "TestParseExpressions",
      "File": "promql/parser/parse_test.go",
      "Line": 4857,
      "Receiver": ""
    },
    "TestParseFileFailure": {
      "Name": "TestParseFileFailure",
      "File": "model/rulefmt/rulefmt_test.go",
      "Line": 63,
      "Receiver": ""
    },
    "TestParseFileSuccess": {
      "Name": "TestParseFileSuccess",
      "File": "model/rulefmt/rulefmt_test.go",
      "Line": 26,
      "Receiver": ""
    },
    "TestParseFileSuccessWithAliases": {
      "Name": "TestParseFileSuccessWithAliases",
      "File": "model/rulefmt/rulefmt_test.go",
      "Line": 36,
      "Receiver": ""
    },
    "TestParseFiles": {
      "Name": "TestParseFiles",
      "File": "rules/manager_test.go",
      "Line": 2553,
      "Receiver": ""
    },
    "TestParseHistogramSeries": {
      "Name": "TestParseHistogramSeries",
      "File": "promql/parser/parse_test.go",
      "Line": 5112,
      "Receiver": ""
    },
    "TestParseIPs": {
      "Name": "TestParseIPs",
      "File": "discovery/ovhcloud/ovhcloud_test.go",
      "Line": 72,
      "Receiver": ""
    },
    "TestParseSeries": {
      "Name": "TestParseSeries",
      "File": "promql/parser/parse_test.go",
      "Line": 5502,
      "Receiver": ""
    },
    "TestParseSeriesDesc": {
      "Name": "TestParseSeriesDesc",
      "File": "promql/parser/parse_test.go",
      "Line": 4920,
      "Receiver": ""
    },
    "TestParseTime": {
      "Name": "TestParseTime",
      "File": "web/api/v1/api_test.go",
      "Line": 4206,
      "Receiver": ""
    },
    "TestParseTimeParam": {
      "Name": "TestParseTimeParam",
      "File": "web/api/v1/api_test.go",
      "Line": 4144,
      "Receiver": ""
    },
    "TestPartialTruncateWAL": {
      "Name": "TestPartialTruncateWAL",
      "File": "tsdb/agent/db_test.go",
      "Line": 484,
      "Receiver": ""
    },
    "TestPathFromMetric": {
      "Name": "TestPathFromMetric",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/graphite/client_test.go",
      "Line": 43,
      "Receiver": ""
    },
    "TestPendingAndKeepFiringFor": {
      "Name": "TestPendingAndKeepFiringFor",
      "File": "rules/alerting_test.go",
      "Line": 910,
      "Receiver": ""
    },
    "TestPersistence_index_e2e": {
      "Name": "TestPersistence_index_e2e",
      "File": "tsdb/index/index_test.go",
      "Line": 338,
      "Receiver": ""
    },
    "TestPickSchema": {
      "Name": "TestPickSchema",
      "File": "scrape/scrape_test.go",
      "Line": 4996,
      "Receiver": ""
    },
    "TestPodDiscoveryAdd": {
      "Name": "TestPodDiscoveryAdd",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 333,
      "Receiver": ""
    },
    "TestPodDiscoveryBeforeRun": {
      "Name": "TestPodDiscoveryBeforeRun",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 241,
      "Receiver": ""
    },
    "TestPodDiscoveryDelete": {
      "Name": "TestPodDiscoveryDelete",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 348,
      "Receiver": ""
    },
    "TestPodDiscoveryInitContainer": {
      "Name": "TestPodDiscoveryInitContainer",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 305,
      "Receiver": ""
    },
    "TestPodDiscoveryNamespaces": {
      "Name": "TestPodDiscoveryNamespaces",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 435,
      "Receiver": ""
    },
    "TestPodDiscoveryOwnNamespace": {
      "Name": "TestPodDiscoveryOwnNamespace",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 457,
      "Receiver": ""
    },
    "TestPodDiscoveryUpdate": {
      "Name": "TestPodDiscoveryUpdate",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 368,
      "Receiver": ""
    },
    "TestPodDiscoveryUpdateEmptyPodIP": {
      "Name": "TestPodDiscoveryUpdateEmptyPodIP",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 410,
      "Receiver": ""
    },
    "TestPodDiscoveryWithNodeMetadata": {
      "Name": "TestPodDiscoveryWithNodeMetadata",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 476,
      "Receiver": ""
    },
    "TestPodDiscoveryWithNodeMetadataUpdateNode": {
      "Name": "TestPodDiscoveryWithNodeMetadataUpdateNode",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 496,
      "Receiver": ""
    },
    "TestPollingDisappearingTargets": {
      "Name": "TestPollingDisappearingTargets",
      "File": "discovery/xds/xds_test.go",
      "Line": 220,
      "Receiver": ""
    },
    "TestPollingRefreshAttachesGroupMetadata": {
      "Name": "TestPollingRefreshAttachesGroupMetadata",
      "File": "discovery/xds/xds_test.go",
      "Line": 164,
      "Receiver": ""
    },
    "TestPollingRefreshSkipUpdate": {
      "Name": "TestPollingRefreshSkipUpdate",
      "File": "discovery/xds/xds_test.go",
      "Line": 121,
      "Receiver": ""
    },
    "TestPool": {
      "Name": "TestPool",
      "File": "util/zeropool/pool_test.go",
      "Line": 27,
      "Receiver": ""
    },
    "TestPopulateLabels": {
      "Name": "TestPopulateLabels",
      "File": "scrape/manager_test.go",
      "Line": 57,
      "Receiver": ""
    },
    "TestPopulateWithDelSeriesIterator_DoubleSeek": {
      "Name": "TestPopulateWithDelSeriesIterator_DoubleSeek",
      "File": "tsdb/querier_test.go",
      "Line": 1836,
      "Receiver": ""
    },
    "TestPopulateWithDelSeriesIterator_NextWithMinTime": {
      "Name": "TestPopulateWithDelSeriesIterator_NextWithMinTime",
      "File": "tsdb/querier_test.go",
      "Line": 1983,
      "Receiver": ""
    },
    "TestPopulateWithDelSeriesIterator_SeekInCurrentChunk": {
      "Name": "TestPopulateWithDelSeriesIterator_SeekInCurrentChunk",
      "File": "tsdb/querier_test.go",
      "Line": 1889,
      "Receiver": ""
    },
    "TestPopulateWithDelSeriesIterator_SeekWithMinTime": {
      "Name": "TestPopulateWithDelSeriesIterator_SeekWithMinTime",
      "File": "tsdb/querier_test.go",
      "Line": 1940,
      "Receiver": ""
    },
    "TestPopulateWithTombSeriesIterators": {
      "Name": "TestPopulateWithTombSeriesIterators",
      "File": "tsdb/querier_test.go",
      "Line": 803,
      "Receiver": ""
    },
    "TestPostPath": {
      "Name": "TestPostPath",
      "File": "notifier/alertmanager_test.go",
      "Line": 24,
      "Receiver": ""
    },
    "TestPostingsCardinalityStats": {
      "Name": "TestPostingsCardinalityStats",
      "File": "tsdb/head_test.go",
      "Line": 6447,
      "Receiver": ""
    },
    "TestPostingsForMatcher": {
      "Name": "TestPostingsForMatcher",
      "File": "tsdb/querier_test.go",
      "Line": 3358,
      "Receiver": ""
    },
    "TestPostingsForMatchers": {
      "Name": "TestPostingsForMatchers",
      "File": "tsdb/querier_test.go",
      "Line": 2690,
      "Receiver": ""
    },
    "TestPostingsMany": {
      "Name": "TestPostingsMany",
      "File": "tsdb/index/index_test.go",
      "Line": 273,
      "Receiver": ""
    },
    "TestPostingsStats": {
      "Name": "TestPostingsStats",
      "File": "tsdb/index/postingsstats_test.go",
      "Line": 21,
      "Receiver": ""
    },
    "TestPostingsStats2": {
      "Name": "TestPostingsStats2",
      "File": "tsdb/index/postingsstats_test.go",
      "Line": 42,
      "Receiver": ""
    },
    "TestPostingsWithIndexHeap": {
      "Name": "TestPostingsWithIndexHeap",
      "File": "tsdb/index/postings_test.go",
      "Line": 1203,
      "Receiver": ""
    },
    "TestPrefix": {
      "Name": "TestPrefix",
      "File": "model/labels/matcher_test.go",
      "Line": 138,
      "Receiver": ""
    },
    "TestPreprocessAndWrapWithStepInvariantExpr": {
      "Name": "TestPreprocessAndWrapWithStepInvariantExpr",
      "File": "promql/engine_test.go",
      "Line": 2297,
      "Receiver": ""
    },
    "TestProcessExternalLabels": {
      "Name": "TestProcessExternalLabels",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1437,
      "Receiver": ""
    },
    "TestPromNullByteHandling": {
      "Name": "TestPromNullByteHandling",
      "File": "model/textparse/promparse_test.go",
      "Line": 553,
      "Receiver": ""
    },
    "TestPromParse": {
      "Name": "TestPromParse",
      "File": "model/textparse/promparse_test.go",
      "Line": 66,
      "Receiver": ""
    },
    "TestPromParseErrors": {
      "Name": "TestPromParseErrors",
      "File": "model/textparse/promparse_test.go",
      "Line": 468,
      "Receiver": ""
    },
    "TestPromTextToProto": {
      "Name": "TestPromTextToProto",
      "File": "scrape/scrape_test.go",
      "Line": 1467,
      "Receiver": ""
    },
    "TestPrometheusConverter_AddHistogramDataPoints": {
      "Name": "TestPrometheusConverter_AddHistogramDataPoints",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper_test.go",
      "Line": 736,
      "Receiver": ""
    },
    "TestPrometheusConverter_AddSummaryDataPoints": {
      "Name": "TestPrometheusConverter_AddSummaryDataPoints",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper_test.go",
      "Line": 536,
      "Receiver": ""
    },
    "TestPrometheusConverter_addCustomBucketsHistogramDataPoints": {
      "Name": "TestPrometheusConverter_addCustomBucketsHistogramDataPoints",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms_test.go",
      "Line": 1079,
      "Receiver": ""
    },
    "TestPrometheusConverter_addExponentialHistogramDataPoints": {
      "Name": "TestPrometheusConverter_addExponentialHistogramDataPoints",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms_test.go",
      "Line": 622,
      "Receiver": ""
    },
    "TestPrometheusConverter_addGaugeNumberDataPoints": {
      "Name": "TestPrometheusConverter_addGaugeNumberDataPoints",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/number_data_points_test.go",
      "Line": 32,
      "Receiver": ""
    },
    "TestPrometheusConverter_addSumNumberDataPoints": {
      "Name": "TestPrometheusConverter_addSumNumberDataPoints",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/number_data_points_test.go",
      "Line": 137,
      "Receiver": ""
    },
    "TestProtobufParse": {
      "Name": "TestProtobufParse",
      "File": "model/textparse/protobufparse_test.go",
      "Line": 826,
      "Receiver": ""
    },
    "TestProviderStaleTargetsAreDropped": {
      "Name": "TestProviderStaleTargetsAreDropped",
      "File": "scrape/manager_test.go",
      "Line": 1321,
      "Receiver": ""
    },
    "TestPuppetDBInvalidCode": {
      "Name": "TestPuppetDBInvalidCode",
      "File": "discovery/puppetdb/puppetdb_test.go",
      "Line": 186,
      "Receiver": ""
    },
    "TestPuppetDBInvalidFormat": {
      "Name": "TestPuppetDBInvalidFormat",
      "File": "discovery/puppetdb/puppetdb_test.go",
      "Line": 214,
      "Receiver": ""
    },
    "TestPuppetDBRefresh": {
      "Name": "TestPuppetDBRefresh",
      "File": "discovery/puppetdb/puppetdb_test.go",
      "Line": 81,
      "Receiver": ""
    },
    "TestPuppetDBRefreshWithParameters": {
      "Name": "TestPuppetDBRefreshWithParameters",
      "File": "discovery/puppetdb/puppetdb_test.go",
      "Line": 128,
      "Receiver": ""
    },
    "TestPuppetSlashInURL": {
      "Name": "TestPuppetSlashInURL",
      "File": "discovery/puppetdb/puppetdb_test.go",
      "Line": 51,
      "Receiver": ""
    },
    "TestQuerierIndexQueriesRace": {
      "Name": "TestQuerierIndexQueriesRace",
      "File": "tsdb/querier_test.go",
      "Line": 3072,
      "Receiver": ""
    },
    "TestQuerierOOOQuery": {
      "Name": "TestQuerierOOOQuery",
      "File": "tsdb/db_test.go",
      "Line": 5538,
      "Receiver": ""
    },
    "TestQuerierShouldNotFailIfOOOCompactionOccursAfterRetrievingIterators": {
      "Name": "TestQuerierShouldNotFailIfOOOCompactionOccursAfterRetrievingIterators",
      "File": "tsdb/db_test.go",
      "Line": 3850,
      "Receiver": ""
    },
    "TestQuerierShouldNotFailIfOOOCompactionOccursAfterRetrievingQuerier": {
      "Name": "TestQuerierShouldNotFailIfOOOCompactionOccursAfterRetrievingQuerier",
      "File": "tsdb/db_test.go",
      "Line": 3674,
      "Receiver": ""
    },
    "TestQuerierShouldNotFailIfOOOCompactionOccursAfterSelecting": {
      "Name": "TestQuerierShouldNotFailIfOOOCompactionOccursAfterSelecting",
      "File": "tsdb/db_test.go",
      "Line": 3768,
      "Receiver": ""
    },
    "TestQuerierWithBoundaryChunks": {
      "Name": "TestQuerierWithBoundaryChunks",
      "File": "tsdb/db_test.go",
      "Line": 1893,
      "Receiver": ""
    },
    "TestQuerier_ShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks": {
      "Name": "TestQuerier_ShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks",
      "File": "tsdb/db_test.go",
      "Line": 3416,
      "Receiver": ""
    },
    "TestQueryCancel": {
      "Name": "TestQueryCancel",
      "File": "promql/engine_test.go",
      "Line": 184,
      "Receiver": ""
    },
    "TestQueryConcurrency": {
      "Name": "TestQueryConcurrency",
      "File": "promql/engine_test.go",
      "Line": 60,
      "Receiver": ""
    },
    "TestQueryError": {
      "Name": "TestQueryError",
      "File": "promql/engine_test.go",
      "Line": 258,
      "Receiver": ""
    },
    "TestQueryExemplars": {
      "Name": "TestQueryExemplars",
      "File": "web/api/v1/api_test.go",
      "Line": 647,
      "Receiver": ""
    },
    "TestQueryForStateSeries": {
      "Name": "TestQueryForStateSeries",
      "File": "rules/alerting_test.go",
      "Line": 669,
      "Receiver": ""
    },
    "TestQueryHistogramFromBlocksWithCompaction": {
      "Name": "TestQueryHistogramFromBlocksWithCompaction",
      "File": "tsdb/db_test.go",
      "Line": 8782,
      "Receiver": ""
    },
    "TestQueryInstant": {
      "Name": "TestQueryInstant",
      "File": "cmd/promtool/main_test.go",
      "Line": 87,
      "Receiver": ""
    },
    "TestQueryLog": {
      "Name": "TestQueryLog",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 449,
      "Receiver": ""
    },
    "TestQueryLogger_basic": {
      "Name": "TestQueryLogger_basic",
      "File": "promql/engine_test.go",
      "Line": 2166,
      "Receiver": ""
    },
    "TestQueryLogger_error": {
      "Name": "TestQueryLogger_error",
      "File": "promql/engine_test.go",
      "Line": 2262,
      "Receiver": ""
    },
    "TestQueryLogger_fields": {
      "Name": "TestQueryLogger_fields",
      "File": "promql/engine_test.go",
      "Line": 2229,
      "Receiver": ""
    },
    "TestQueryLogging": {
      "Name": "TestQueryLogging",
      "File": "promql/query_logger_test.go",
      "Line": 26,
      "Receiver": ""
    },
    "TestQueryLookbackDelta": {
      "Name": "TestQueryLookbackDelta",
      "File": "promql/engine_test.go",
      "Line": 3279,
      "Receiver": ""
    },
    "TestQueryOOOHeadDuringTruncate": {
      "Name": "TestQueryOOOHeadDuringTruncate",
      "File": "tsdb/head_test.go",
      "Line": 3764,
      "Receiver": ""
    },
    "TestQueryRange": {
      "Name": "TestQueryRange",
      "File": "cmd/promtool/main_test.go",
      "Line": 63,
      "Receiver": ""
    },
    "TestQueryStatistics": {
      "Name": "TestQueryStatistics",
      "File": "promql/engine_test.go",
      "Line": 786,
      "Receiver": ""
    },
    "TestQueryStatsWithSpanTimers": {
      "Name": "TestQueryStatsWithSpanTimers",
      "File": "util/stats/stats_test.go",
      "Line": 67,
      "Receiver": ""
    },
    "TestQueryStatsWithTimersAndSamples": {
      "Name": "TestQueryStatsWithTimersAndSamples",
      "File": "util/stats/stats_test.go",
      "Line": 44,
      "Receiver": ""
    },
    "TestQueryTimeout": {
      "Name": "TestQueryTimeout",
      "File": "web/api/v1/api_test.go",
      "Line": 4660,
      "Receiver": ""
    },
    "TestQueryWithDeletedHistograms": {
      "Name": "TestQueryWithDeletedHistograms",
      "File": "tsdb/querier_test.go",
      "Line": 3592,
      "Receiver": ""
    },
    "TestQueryWithOneChunkCompletelyDeleted": {
      "Name": "TestQueryWithOneChunkCompletelyDeleted",
      "File": "tsdb/querier_test.go",
      "Line": 3668,
      "Receiver": ""
    },
    "TestQueueFilledDeadlock": {
      "Name": "TestQueueFilledDeadlock",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 641,
      "Receiver": ""
    },
    "TestQueueManagerMetrics": {
      "Name": "TestQueueManagerMetrics",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1749,
      "Receiver": ""
    },
    "TestQueuePopAfterCloseReturnsAllElements": {
      "Name": "TestQueuePopAfterCloseReturnsAllElements",
      "File": "tsdb/chunks/queue_test.go",
      "Line": 233,
      "Receiver": ""
    },
    "TestQueuePopBlocksOnEmptyQueue": {
      "Name": "TestQueuePopBlocksOnEmptyQueue",
      "File": "tsdb/chunks/queue_test.go",
      "Line": 154,
      "Receiver": ""
    },
    "TestQueuePopUnblocksOnClose": {
      "Name": "TestQueuePopUnblocksOnClose",
      "File": "tsdb/chunks/queue_test.go",
      "Line": 194,
      "Receiver": ""
    },
    "TestQueuePushBlocksOnFullQueue": {
      "Name": "TestQueuePushBlocksOnFullQueue",
      "File": "tsdb/chunks/queue_test.go",
      "Line": 117,
      "Receiver": ""
    },
    "TestQueuePushPopManyGoroutines": {
      "Name": "TestQueuePushPopManyGoroutines",
      "File": "tsdb/chunks/queue_test.go",
      "Line": 259,
      "Receiver": ""
    },
    "TestQueuePushPopSingleGoroutine": {
      "Name": "TestQueuePushPopSingleGoroutine",
      "File": "tsdb/chunks/queue_test.go",
      "Line": 64,
      "Receiver": ""
    },
    "TestQueueSegmentIsKeptEvenIfEmpty": {
      "Name": "TestQueueSegmentIsKeptEvenIfEmpty",
      "File": "tsdb/chunks/queue_test.go",
      "Line": 313,
      "Receiver": ""
    },
    "TestQueue_FlushAndShutdownDoesNotDeadlock": {
      "Name": "TestQueue_FlushAndShutdownDoesNotDeadlock",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1765,
      "Receiver": ""
    },
    "TestRangeForTimestamp": {
      "Name": "TestRangeForTimestamp",
      "File": "tsdb/db_test.go",
      "Line": 2981,
      "Receiver": ""
    },
    "TestRangeWithFailedCompactionWontGetSelected": {
      "Name": "TestRangeWithFailedCompactionWontGetSelected",
      "File": "tsdb/compact_test.go",
      "Line": 386,
      "Receiver": ""
    },
    "TestRateAnnotations": {
      "Name": "TestRateAnnotations",
      "File": "promql/engine_test.go",
      "Line": 3428,
      "Receiver": ""
    },
    "TestReadCheckpoint": {
      "Name": "TestReadCheckpoint",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 445,
      "Receiver": ""
    },
    "TestReadCheckpointMultipleSegments": {
      "Name": "TestReadCheckpointMultipleSegments",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 516,
      "Receiver": ""
    },
    "TestReadClient": {
      "Name": "TestReadClient",
      "File": "storage/remote/client_test.go",
      "Line": 218,
      "Receiver": ""
    },
    "TestReadIndexFormatV1": {
      "Name": "TestReadIndexFormatV1",
      "File": "tsdb/block_test.go",
      "Line": 393,
      "Receiver": ""
    },
    "TestReadToEndNoCheckpoint": {
      "Name": "TestReadToEndNoCheckpoint",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 289,
      "Receiver": ""
    },
    "TestReadToEndWithCheckpoint": {
      "Name": "TestReadToEndWithCheckpoint",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 355,
      "Receiver": ""
    },
    "TestReader": {
      "Name": "TestReader",
      "File": "tsdb/wlog/reader_test.go",
      "Line": 171,
      "Receiver": ""
    },
    "TestReaderData": {
      "Name": "TestReaderData",
      "File": "tsdb/wlog/reader_test.go",
      "Line": 526,
      "Receiver": ""
    },
    "TestReaderFuzz": {
      "Name": "TestReaderFuzz",
      "File": "tsdb/wlog/reader_test.go",
      "Line": 316,
      "Receiver": ""
    },
    "TestReaderFuzz_Live": {
      "Name": "TestReaderFuzz_Live",
      "File": "tsdb/wlog/reader_test.go",
      "Line": 355,
      "Receiver": ""
    },
    "TestReaderWithInvalidBuffer": {
      "Name": "TestReaderWithInvalidBuffer",
      "File": "tsdb/index/index_test.go",
      "Line": 469,
      "Receiver": ""
    },
    "TestReader_LabelNamesForHonorsContextCancel": {
      "Name": "TestReader_LabelNamesForHonorsContextCancel",
      "File": "tsdb/index/index_test.go",
      "Line": 684,
      "Receiver": ""
    },
    "TestReader_Live": {
      "Name": "TestReader_Live",
      "File": "tsdb/wlog/reader_test.go",
      "Line": 198,
      "Receiver": ""
    },
    "TestReader_PostingsForAllLabelValues": {
      "Name": "TestReader_PostingsForAllLabelValues",
      "File": "tsdb/index/index_test.go",
      "Line": 642,
      "Receiver": ""
    },
    "TestReader_PostingsForLabelMatching": {
      "Name": "TestReader_PostingsForLabelMatching",
      "File": "tsdb/index/index_test.go",
      "Line": 616,
      "Receiver": ""
    },
    "TestReader_PostingsForLabelMatchingHonorsContextCancel": {
      "Name": "TestReader_PostingsForLabelMatchingHonorsContextCancel",
      "File": "tsdb/querier_test.go",
      "Line": 3745,
      "Receiver": ""
    },
    "TestReadyAndHealthy": {
      "Name": "TestReadyAndHealthy",
      "File": "web/web_test.go",
      "Line": 63,
      "Receiver": ""
    },
    "TestRecord_Corrupted": {
      "Name": "TestRecord_Corrupted",
      "File": "tsdb/record/record_test.go",
      "Line": 229,
      "Receiver": ""
    },
    "TestRecord_EncodeDecode": {
      "Name": "TestRecord_EncodeDecode",
      "File": "tsdb/record/record_test.go",
      "Line": 33,
      "Receiver": ""
    },
    "TestRecord_MetadataDecodeUnknownExtraFields": {
      "Name": "TestRecord_MetadataDecodeUnknownExtraFields",
      "File": "tsdb/record/record_test.go",
      "Line": 404,
      "Receiver": ""
    },
    "TestRecord_Type": {
      "Name": "TestRecord_Type",
      "File": "tsdb/record/record_test.go",
      "Line": 336,
      "Receiver": ""
    },
    "TestRecordingEvalWithOrigin": {
      "Name": "TestRecordingEvalWithOrigin",
      "File": "rules/recording_test.go",
      "Line": 231,
      "Receiver": ""
    },
    "TestRecordingRuleLimit": {
      "Name": "TestRecordingRuleLimit",
      "File": "rules/recording_test.go",
      "Line": 183,
      "Receiver": ""
    },
    "TestRecordingRule_SetDependencyRules": {
      "Name": "TestRecordingRule_SetDependencyRules",
      "File": "rules/recording_test.go",
      "Line": 273,
      "Receiver": ""
    },
    "TestRecordingRule_SetDependentRules": {
      "Name": "TestRecordingRule_SetDependentRules",
      "File": "rules/recording_test.go",
      "Line": 258,
      "Receiver": ""
    },
    "TestRecoverEvaluatorError": {
      "Name": "TestRecoverEvaluatorError",
      "File": "promql/engine_internal_test.go",
      "Line": 48,
      "Receiver": ""
    },
    "TestRecoverEvaluatorErrorWithWarnings": {
      "Name": "TestRecoverEvaluatorErrorWithWarnings",
      "File": "promql/engine_internal_test.go",
      "Line": 62,
      "Receiver": ""
    },
    "TestRecoverEvaluatorRuntime": {
      "Name": "TestRecoverEvaluatorRuntime",
      "File": "promql/engine_internal_test.go",
      "Line": 28,
      "Receiver": ""
    },
    "TestRecoverParserError": {
      "Name": "TestRecoverParserError",
      "File": "promql/parser/parse_test.go",
      "Line": 5532,
      "Receiver": ""
    },
    "TestRecoverParserRuntime": {
      "Name": "TestRecoverParserRuntime",
      "File": "promql/parser/parse_test.go",
      "Line": 5519,
      "Receiver": ""
    },
    "TestReduceResolutionFloatHistogram": {
      "Name": "TestReduceResolutionFloatHistogram",
      "File": "model/histogram/generic_test.go",
      "Line": 163,
      "Receiver": ""
    },
    "TestReduceResolutionHistogram": {
      "Name": "TestReduceResolutionHistogram",
      "File": "model/histogram/generic_test.go",
      "Line": 115,
      "Receiver": ""
    },
    "TestRefresh": {
      "Name": "TestRefresh",
      "File": "discovery/refresh/refresh_test.go",
      "Line": 35,
      "Receiver": ""
    },
    "TestRegexp_JSONUnmarshalThenMarshal": {
      "Name": "TestRegexp_JSONUnmarshalThenMarshal",
      "File": "model/relabel/relabel_test.go",
      "Line": 1103,
      "Receiver": ""
    },
    "TestRegexp_ShouldMarshalAndUnmarshalZeroValue": {
      "Name": "TestRegexp_ShouldMarshalAndUnmarshalZeroValue",
      "File": "model/relabel/relabel_test.go",
      "Line": 1090,
      "Receiver": ""
    },
    "TestRegularBucketIterator": {
      "Name": "TestRegularBucketIterator",
      "File": "model/histogram/histogram_test.go",
      "Line": 260,
      "Receiver": ""
    },
    "TestReinstallingTracerProvider": {
      "Name": "TestReinstallingTracerProvider",
      "File": "tracing/tracing_test.go",
      "Line": 43,
      "Receiver": ""
    },
    "TestReinstallingTracerProviderWithTLS": {
      "Name": "TestReinstallingTracerProviderWithTLS",
      "File": "tracing/tracing_test.go",
      "Line": 78,
      "Receiver": ""
    },
    "TestRelabel": {
      "Name": "TestRelabel",
      "File": "model/relabel/relabel_test.go",
      "Line": 29,
      "Receiver": ""
    },
    "TestRelabelValidate": {
      "Name": "TestRelabelValidate",
      "File": "model/relabel/relabel_test.go",
      "Line": 761,
      "Receiver": ""
    },
    "TestReleaseNoninternedString": {
      "Name": "TestReleaseNoninternedString",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 681,
      "Receiver": ""
    },
    "TestReload": {
      "Name": "TestReload",
      "File": "notifier/manager_test.go",
      "Line": 592,
      "Receiver": ""
    },
    "TestRemoteWriteHandlerHeadersHandling_V1Message": {
      "Name": "TestRemoteWriteHandlerHeadersHandling_V1Message",
      "File": "storage/remote/write_handler_test.go",
      "Line": 48,
      "Receiver": ""
    },
    "TestRemoteWriteHandlerHeadersHandling_V2Message": {
      "Name": "TestRemoteWriteHandlerHeadersHandling_V2Message",
      "File": "storage/remote/write_handler_test.go",
      "Line": 147,
      "Receiver": ""
    },
    "TestRemoteWriteHandler_V1Message": {
      "Name": "TestRemoteWriteHandler_V1Message",
      "File": "storage/remote/write_handler_test.go",
      "Line": 248,
      "Receiver": ""
    },
    "TestRemoteWriteHandler_V2Message": {
      "Name": "TestRemoteWriteHandler_V2Message",
      "File": "storage/remote/write_handler_test.go",
      "Line": 305,
      "Receiver": ""
    },
    "TestRemoteWriteRetryOnRateLimit": {
      "Name": "TestRemoteWriteRetryOnRateLimit",
      "File": "config/config_test.go",
      "Line": 1689,
      "Receiver": ""
    },
    "TestRemoveFile": {
      "Name": "TestRemoveFile",
      "File": "discovery/file/file_test.go",
      "Line": 483,
      "Receiver": ""
    },
    "TestRemoveSeriesAfterRollbackAndTruncate": {
      "Name": "TestRemoveSeriesAfterRollbackAndTruncate",
      "File": "tsdb/head_test.go",
      "Line": 2274,
      "Receiver": ""
    },
    "TestRemovedNextStackoverflow": {
      "Name": "TestRemovedNextStackoverflow",
      "File": "tsdb/index/postings_test.go",
      "Line": 641,
      "Receiver": ""
    },
    "TestRemovedPostings": {
      "Name": "TestRemovedPostings",
      "File": "tsdb/index/postings_test.go",
      "Line": 589,
      "Receiver": ""
    },
    "TestRemovedPostingsSeek": {
      "Name": "TestRemovedPostingsSeek",
      "File": "tsdb/index/postings_test.go",
      "Line": 663,
      "Receiver": ""
    },
    "TestRepairBadIndexVersion": {
      "Name": "TestRepairBadIndexVersion",
      "File": "tsdb/repair_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "TestReplayAfterMmapReplayError": {
      "Name": "TestReplayAfterMmapReplayError",
      "File": "tsdb/head_test.go",
      "Line": 5630,
      "Receiver": ""
    },
    "TestReshard": {
      "Name": "TestReshard",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 520,
      "Receiver": ""
    },
    "TestReshardPartialBatch": {
      "Name": "TestReshardPartialBatch",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 596,
      "Receiver": ""
    },
    "TestReshardRaceWithStop": {
      "Name": "TestReshardRaceWithStop",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 558,
      "Receiver": ""
    },
    "TestResize": {
      "Name": "TestResize",
      "File": "tsdb/exemplar_test.go",
      "Line": 316,
      "Receiver": ""
    },
    "TestRespondError": {
      "Name": "TestRespondError",
      "File": "web/api/v1/api_test.go",
      "Line": 4125,
      "Receiver": ""
    },
    "TestRespondSuccess": {
      "Name": "TestRespondSuccess",
      "File": "web/api/v1/api_test.go",
      "Line": 4005,
      "Receiver": ""
    },
    "TestRespondSuccess_DefaultCodecCannotEncodeResponse": {
      "Name": "TestRespondSuccess_DefaultCodecCannotEncodeResponse",
      "File": "web/api/v1/api_test.go",
      "Line": 4097,
      "Receiver": ""
    },
    "TestRetentionDurationMetric": {
      "Name": "TestRetentionDurationMetric",
      "File": "tsdb/db_test.go",
      "Line": 1475,
      "Receiver": ""
    },
    "TestRetryAfterDuration": {
      "Name": "TestRetryAfterDuration",
      "File": "storage/remote/client_test.go",
      "Line": 151,
      "Receiver": ""
    },
    "TestRetryOnError": {
      "Name": "TestRetryOnError",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 274,
      "Receiver": ""
    },
    "TestReturnAPIError": {
      "Name": "TestReturnAPIError",
      "File": "web/api/v1/api_test.go",
      "Line": 4380,
      "Receiver": ""
    },
    "TestReusableConfig": {
      "Name": "TestReusableConfig",
      "File": "scrape/scrape_test.go",
      "Line": 3549,
      "Receiver": ""
    },
    "TestReuseCacheRace": {
      "Name": "TestReuseCacheRace",
      "File": "scrape/scrape_test.go",
      "Line": 3825,
      "Receiver": ""
    },
    "TestReuseScrapeCache": {
      "Name": "TestReuseScrapeCache",
      "File": "scrape/scrape_test.go",
      "Line": 3616,
      "Receiver": ""
    },
    "TestReverseFloatBucketIterator": {
      "Name": "TestReverseFloatBucketIterator",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 2639,
      "Receiver": ""
    },
    "TestRobotSDRefresh": {
      "Name": "TestRobotSDRefresh",
      "File": "discovery/hetzner/robot_test.go",
      "Line": 38,
      "Receiver": ""
    },
    "TestRobotSDRefreshHandleError": {
      "Name": "TestRobotSDRefreshHandleError",
      "File": "discovery/hetzner/robot_test.go",
      "Line": 88,
      "Receiver": ""
    },
    "TestRollback": {
      "Name": "TestRollback",
      "File": "tsdb/agent/db_test.go",
      "Line": 263,
      "Receiver": ""
    },
    "TestRoutePrefix": {
      "Name": "TestRoutePrefix",
      "File": "web/web_test.go",
      "Line": 188,
      "Receiver": ""
    },
    "TestRuleDependencyController_AnalyseRules": {
      "Name": "TestRuleDependencyController_AnalyseRules",
      "File": "rules/manager_test.go",
      "Line": 2564,
      "Receiver": ""
    },
    "TestRuleEval": {
      "Name": "TestRuleEval",
      "File": "rules/recording_test.go",
      "Line": 122,
      "Receiver": ""
    },
    "TestRuleEvalDuplicate": {
      "Name": "TestRuleEvalDuplicate",
      "File": "rules/recording_test.go",
      "Line": 159,
      "Receiver": ""
    },
    "TestRuleGroupEvalIterationFunc": {
      "Name": "TestRuleGroupEvalIterationFunc",
      "File": "rules/manager_test.go",
      "Line": 1340,
      "Receiver": ""
    },
    "TestRuleHealthUpdates": {
      "Name": "TestRuleHealthUpdates",
      "File": "rules/manager_test.go",
      "Line": 1283,
      "Receiver": ""
    },
    "TestRuleMovedBetweenGroups": {
      "Name": "TestRuleMovedBetweenGroups",
      "File": "rules/manager_test.go",
      "Line": 1197,
      "Receiver": ""
    },
    "TestRulesDependentOnMetaMetrics": {
      "Name": "TestRulesDependentOnMetaMetrics",
      "File": "rules/manager_test.go",
      "Line": 1880,
      "Receiver": ""
    },
    "TestRulesUnitTest": {
      "Name": "TestRulesUnitTest",
      "File": "cmd/promtool/unittest_test.go",
      "Line": 28,
      "Receiver": ""
    },
    "TestRulesUnitTestRun": {
      "Name": "TestRulesUnitTestRun",
      "File": "cmd/promtool/unittest_test.go",
      "Line": 190,
      "Receiver": ""
    },
    "TestRunTest": {
      "Name": "TestRunTest",
      "File": "promql/promqltest/test_test.go",
      "Line": 161,
      "Receiver": ""
    },
    "TestRun_AvoidNotifyWhenBehind": {
      "Name": "TestRun_AvoidNotifyWhenBehind",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 768,
      "Receiver": ""
    },
    "TestRun_StartupTime": {
      "Name": "TestRun_StartupTime",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 679,
      "Receiver": ""
    },
    "TestRuntimeGOGCConfig": {
      "Name": "TestRuntimeGOGCConfig",
      "File": "cmd/prometheus/main_test.go",
      "Line": 691,
      "Receiver": ""
    },
    "TestRwProtoMsgFlagParser": {
      "Name": "TestRwProtoMsgFlagParser",
      "File": "cmd/prometheus/main_test.go",
      "Line": 589,
      "Receiver": ""
    },
    "TestSDCheckResult": {
      "Name": "TestSDCheckResult",
      "File": "cmd/promtool/sd_test.go",
      "Line": 30,
      "Receiver": ""
    },
    "TestSDConfigUnmarshalYAML": {
      "Name": "TestSDConfigUnmarshalYAML",
      "File": "discovery/dns/dns_test.go",
      "Line": 276,
      "Receiver": ""
    },
    "TestSampleAndChunkQueryableClient": {
      "Name": "TestSampleAndChunkQueryableClient",
      "File": "storage/remote/read_test.go",
      "Line": 239,
      "Receiver": ""
    },
    "TestSampleDelivery": {
      "Name": "TestSampleDelivery",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 201,
      "Receiver": ""
    },
    "TestSampleDeliveryOrder": {
      "Name": "TestSampleDeliveryOrder",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 432,
      "Receiver": ""
    },
    "TestSampleDeliveryTimeout": {
      "Name": "TestSampleDeliveryTimeout",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 404,
      "Receiver": ""
    },
    "TestSampleRing": {
      "Name": "TestSampleRing",
      "File": "storage/buffer_test.go",
      "Line": 27,
      "Receiver": ""
    },
    "TestSampleRingAtFloatHistogram": {
      "Name": "TestSampleRingAtFloatHistogram",
      "File": "storage/buffer_test.go",
      "Line": 141,
      "Receiver": ""
    },
    "TestSampleRingMixed": {
      "Name": "TestSampleRingMixed",
      "File": "storage/buffer_test.go",
      "Line": 93,
      "Receiver": ""
    },
    "TestSampledReadEndpoint": {
      "Name": "TestSampledReadEndpoint",
      "File": "storage/remote/read_handler_test.go",
      "Line": 39,
      "Receiver": ""
    },
    "TestSanitizeFullLabelName": {
      "Name": "TestSanitizeFullLabelName",
      "File": "util/strutil/strconv_test.go",
      "Line": 63,
      "Receiver": ""
    },
    "TestSanitizeLabelName": {
      "Name": "TestSanitizeLabelName",
      "File": "util/strutil/strconv_test.go",
      "Line": 53,
      "Receiver": ""
    },
    "TestScalewayInstanceAuthToken": {
      "Name": "TestScalewayInstanceAuthToken",
      "File": "discovery/scaleway/instance_test.go",
      "Line": 190,
      "Receiver": ""
    },
    "TestScalewayInstanceRefresh": {
      "Name": "TestScalewayInstanceRefresh",
      "File": "discovery/scaleway/instance_test.go",
      "Line": 36,
      "Receiver": ""
    },
    "TestScrapeAddFast": {
      "Name": "TestScrapeAddFast",
      "File": "scrape/scrape_test.go",
      "Line": 3800,
      "Receiver": ""
    },
    "TestScrapeAppendMetadataUpdate": {
      "Name": "TestScrapeAppendMetadataUpdate",
      "File": "scrape/scrape_test.go",
      "Line": 197,
      "Receiver": ""
    },
    "TestScrapeAppendWithParseError": {
      "Name": "TestScrapeAppendWithParseError",
      "File": "scrape/scrape_test.go",
      "Line": 5538,
      "Receiver": ""
    },
    "TestScrapeConfigDisableCompression": {
      "Name": "TestScrapeConfigDisableCompression",
      "File": "config/config_test.go",
      "Line": 2788,
      "Receiver": ""
    },
    "TestScrapeConfigNameEscapingSettings": {
      "Name": "TestScrapeConfigNameEscapingSettings",
      "File": "config/config_test.go",
      "Line": 2845,
      "Receiver": ""
    },
    "TestScrapeConfigNameValidationSettings": {
      "Name": "TestScrapeConfigNameValidationSettings",
      "File": "config/config_test.go",
      "Line": 2801,
      "Receiver": ""
    },
    "TestScrapeFailureLogFile": {
      "Name": "TestScrapeFailureLogFile",
      "File": "cmd/prometheus/scrape_failure_log_test.go",
      "Line": 34,
      "Receiver": ""
    },
    "TestScrapeIntervalLarger": {
      "Name": "TestScrapeIntervalLarger",
      "File": "config/config_test.go",
      "Line": 1958,
      "Receiver": ""
    },
    "TestScrapeLoopAppend": {
      "Name": "TestScrapeLoopAppend",
      "File": "scrape/scrape_test.go",
      "Line": 1834,
      "Receiver": ""
    },
    "TestScrapeLoopAppendCacheEntryButErrNotFound": {
      "Name": "TestScrapeLoopAppendCacheEntryButErrNotFound",
      "File": "scrape/scrape_test.go",
      "Line": 2003,
      "Receiver": ""
    },
    "TestScrapeLoopAppendEmptyWithNoContentType": {
      "Name": "TestScrapeLoopAppendEmptyWithNoContentType",
      "File": "scrape/scrape_test.go",
      "Line": 2256,
      "Receiver": ""
    },
    "TestScrapeLoopAppendExemplar": {
      "Name": "TestScrapeLoopAppendExemplar",
      "File": "scrape/scrape_test.go",
      "Line": 2356,
      "Receiver": ""
    },
    "TestScrapeLoopAppendExemplarSeries": {
      "Name": "TestScrapeLoopAppendExemplarSeries",
      "File": "scrape/scrape_test.go",
      "Line": 2919,
      "Receiver": ""
    },
    "TestScrapeLoopAppendFailsWithNoContentType": {
      "Name": "TestScrapeLoopAppendFailsWithNoContentType",
      "File": "scrape/scrape_test.go",
      "Line": 2243,
      "Receiver": ""
    },
    "TestScrapeLoopAppendForConflictingPrefixedLabels": {
      "Name": "TestScrapeLoopAppendForConflictingPrefixedLabels",
      "File": "scrape/scrape_test.go",
      "Line": 1929,
      "Receiver": ""
    },
    "TestScrapeLoopAppendGracefullyIfAmendOrOutOfOrderOrOutOfBounds": {
      "Name": "TestScrapeLoopAppendGracefullyIfAmendOrOutOfOrderOrOutOfBounds",
      "File": "scrape/scrape_test.go",
      "Line": 3029,
      "Receiver": ""
    },
    "TestScrapeLoopAppendNoStalenessIfTimestamp": {
      "Name": "TestScrapeLoopAppendNoStalenessIfTimestamp",
      "File": "scrape/scrape_test.go",
      "Line": 2301,
      "Receiver": ""
    },
    "TestScrapeLoopAppendSampleLimit": {
      "Name": "TestScrapeLoopAppendSampleLimit",
      "File": "scrape/scrape_test.go",
      "Line": 2040,
      "Receiver": ""
    },
    "TestScrapeLoopAppendStaleness": {
      "Name": "TestScrapeLoopAppendStaleness",
      "File": "scrape/scrape_test.go",
      "Line": 2270,
      "Receiver": ""
    },
    "TestScrapeLoopAppendStalenessIfTrackTimestampStaleness": {
      "Name": "TestScrapeLoopAppendStalenessIfTrackTimestampStaleness",
      "File": "scrape/scrape_test.go",
      "Line": 2325,
      "Receiver": ""
    },
    "TestScrapeLoopCache": {
      "Name": "TestScrapeLoopCache",
      "File": "scrape/scrape_test.go",
      "Line": 1725,
      "Receiver": ""
    },
    "TestScrapeLoopCacheMemoryExhaustionProtection": {
      "Name": "TestScrapeLoopCacheMemoryExhaustionProtection",
      "File": "scrape/scrape_test.go",
      "Line": 1788,
      "Receiver": ""
    },
    "TestScrapeLoopCompression": {
      "Name": "TestScrapeLoopCompression",
      "File": "scrape/scrape_test.go",
      "Line": 4934,
      "Receiver": ""
    },
    "TestScrapeLoopDiscardDuplicateLabels": {
      "Name": "TestScrapeLoopDiscardDuplicateLabels",
      "File": "scrape/scrape_test.go",
      "Line": 3483,
      "Receiver": ""
    },
    "TestScrapeLoopDiscardUnnamedMetrics": {
      "Name": "TestScrapeLoopDiscardUnnamedMetrics",
      "File": "scrape/scrape_test.go",
      "Line": 3520,
      "Receiver": ""
    },
    "TestScrapeLoopFailLegacyUnderUTF8": {
      "Name": "TestScrapeLoopFailLegacyUnderUTF8",
      "File": "scrape/scrape_test.go",
      "Line": 1386,
      "Receiver": ""
    },
    "TestScrapeLoopFailWithInvalidLabelsAfterRelabel": {
      "Name": "TestScrapeLoopFailWithInvalidLabelsAfterRelabel",
      "File": "scrape/scrape_test.go",
      "Line": 1357,
      "Receiver": ""
    },
    "TestScrapeLoopForcedErr": {
      "Name": "TestScrapeLoopForcedErr",
      "File": "scrape/scrape_test.go",
      "Line": 1211,
      "Receiver": ""
    },
    "TestScrapeLoopLabelLimit": {
      "Name": "TestScrapeLoopLabelLimit",
      "File": "scrape/scrape_test.go",
      "Line": 4027,
      "Receiver": ""
    },
    "TestScrapeLoopMetadata": {
      "Name": "TestScrapeLoopMetadata",
      "File": "scrape/scrape_test.go",
      "Line": 1251,
      "Receiver": ""
    },
    "TestScrapeLoopOutOfBoundsTimeError": {
      "Name": "TestScrapeLoopOutOfBoundsTimeError",
      "File": "scrape/scrape_test.go",
      "Line": 3052,
      "Receiver": ""
    },
    "TestScrapeLoopRun": {
      "Name": "TestScrapeLoopRun",
      "File": "scrape/scrape_test.go",
      "Line": 1101,
      "Receiver": ""
    },
    "TestScrapeLoopRunCreatesStaleMarkersOnFailedScrape": {
      "Name": "TestScrapeLoopRunCreatesStaleMarkersOnFailedScrape",
      "File": "scrape/scrape_test.go",
      "Line": 1631,
      "Receiver": ""
    },
    "TestScrapeLoopRunCreatesStaleMarkersOnFailedScrapeForTimestampedMetrics": {
      "Name": "TestScrapeLoopRunCreatesStaleMarkersOnFailedScrapeForTimestampedMetrics",
      "File": "scrape/scrape_test.go",
      "Line": 4888,
      "Receiver": ""
    },
    "TestScrapeLoopRunCreatesStaleMarkersOnParseFailure": {
      "Name": "TestScrapeLoopRunCreatesStaleMarkersOnParseFailure",
      "File": "scrape/scrape_test.go",
      "Line": 1677,
      "Receiver": ""
    },
    "TestScrapeLoopRunReportsTargetDownOnInvalidUTF8": {
      "Name": "TestScrapeLoopRunReportsTargetDownOnInvalidUTF8",
      "File": "scrape/scrape_test.go",
      "Line": 2992,
      "Receiver": ""
    },
    "TestScrapeLoopRunReportsTargetDownOnScrapeError": {
      "Name": "TestScrapeLoopRunReportsTargetDownOnScrapeError",
      "File": "scrape/scrape_test.go",
      "Line": 2973,
      "Receiver": ""
    },
    "TestScrapeLoopSeriesAdded": {
      "Name": "TestScrapeLoopSeriesAdded",
      "File": "scrape/scrape_test.go",
      "Line": 1337,
      "Receiver": ""
    },
    "TestScrapeLoopSeriesAddedDuplicates": {
      "Name": "TestScrapeLoopSeriesAddedDuplicates",
      "File": "scrape/scrape_test.go",
      "Line": 5145,
      "Receiver": ""
    },
    "TestScrapeLoopStop": {
      "Name": "TestScrapeLoopStop",
      "File": "scrape/scrape_test.go",
      "Line": 1046,
      "Receiver": ""
    },
    "TestScrapeLoopStopBeforeRun": {
      "Name": "TestScrapeLoopStopBeforeRun",
      "File": "scrape/scrape_test.go",
      "Line": 997,
      "Receiver": ""
    },
    "TestScrapeLoop_ChangingMetricString": {
      "Name": "TestScrapeLoop_ChangingMetricString",
      "File": "scrape/scrape_test.go",
      "Line": 2207,
      "Receiver": ""
    },
    "TestScrapeLoop_DiscardTimestamps": {
      "Name": "TestScrapeLoop_DiscardTimestamps",
      "File": "scrape/scrape_test.go",
      "Line": 3456,
      "Receiver": ""
    },
    "TestScrapeLoop_HistogramBucketLimit": {
      "Name": "TestScrapeLoop_HistogramBucketLimit",
      "File": "scrape/scrape_test.go",
      "Line": 2099,
      "Receiver": ""
    },
    "TestScrapeLoop_RespectTimestamps": {
      "Name": "TestScrapeLoop_RespectTimestamps",
      "File": "scrape/scrape_test.go",
      "Line": 3432,
      "Receiver": ""
    },
    "TestScrapePoolAppender": {
      "Name": "TestScrapePoolAppender",
      "File": "scrape/scrape_test.go",
      "Line": 792,
      "Receiver": ""
    },
    "TestScrapePoolRaces": {
      "Name": "TestScrapePoolRaces",
      "File": "scrape/scrape_test.go",
      "Line": 865,
      "Receiver": ""
    },
    "TestScrapePoolReload": {
      "Name": "TestScrapePoolReload",
      "File": "scrape/scrape_test.go",
      "Line": 500,
      "Receiver": ""
    },
    "TestScrapePoolReloadPreserveRelabeledIntervalTimeout": {
      "Name": "TestScrapePoolReloadPreserveRelabeledIntervalTimeout",
      "File": "scrape/scrape_test.go",
      "Line": 599,
      "Receiver": ""
    },
    "TestScrapePoolScrapeAfterReload": {
      "Name": "TestScrapePoolScrapeAfterReload",
      "File": "scrape/scrape_test.go",
      "Line": 5493,
      "Receiver": ""
    },
    "TestScrapePoolScrapeLoopsStarted": {
      "Name": "TestScrapePoolScrapeLoopsStarted",
      "File": "scrape/scrape_test.go",
      "Line": 907,
      "Receiver": ""
    },
    "TestScrapePoolStop": {
      "Name": "TestScrapePoolStop",
      "File": "scrape/scrape_test.go",
      "Line": 441,
      "Receiver": ""
    },
    "TestScrapePoolTargetLimit": {
      "Name": "TestScrapePoolTargetLimit",
      "File": "scrape/scrape_test.go",
      "Line": 662,
      "Receiver": ""
    },
    "TestScrapeProtocolHeader": {
      "Name": "TestScrapeProtocolHeader",
      "File": "config/config_test.go",
      "Line": 2895,
      "Receiver": ""
    },
    "TestScrapeReportLimit": {
      "Name": "TestScrapeReportLimit",
      "File": "scrape/scrape_test.go",
      "Line": 3925,
      "Receiver": ""
    },
    "TestScrapeReportMetadataUpdate": {
      "Name": "TestScrapeReportMetadataUpdate",
      "File": "scrape/scrape_test.go",
      "Line": 258,
      "Receiver": ""
    },
    "TestScrapeReportSingleAppender": {
      "Name": "TestScrapeReportSingleAppender",
      "File": "scrape/scrape_test.go",
      "Line": 3870,
      "Receiver": ""
    },
    "TestScrapeUTF8": {
      "Name": "TestScrapeUTF8",
      "File": "scrape/scrape_test.go",
      "Line": 3982,
      "Receiver": ""
    },
    "TestScratchBuilder": {
      "Name": "TestScratchBuilder",
      "File": "model/labels/labels_test.go",
      "Line": 852,
      "Receiver": ""
    },
    "TestSegmentMetric": {
      "Name": "TestSegmentMetric",
      "File": "tsdb/wlog/wlog_test.go",
      "Line": 346,
      "Receiver": ""
    },
    "TestSelectExemplar": {
      "Name": "TestSelectExemplar",
      "File": "tsdb/exemplar_test.go",
      "Line": 154,
      "Receiver": ""
    },
    "TestSelectExemplar_DuplicateSeries": {
      "Name": "TestSelectExemplar_DuplicateSeries",
      "File": "tsdb/exemplar_test.go",
      "Line": 253,
      "Receiver": ""
    },
    "TestSelectExemplar_MultiSeries": {
      "Name": "TestSelectExemplar_MultiSeries",
      "File": "tsdb/exemplar_test.go",
      "Line": 181,
      "Receiver": ""
    },
    "TestSelectExemplar_TimeRange": {
      "Name": "TestSelectExemplar_TimeRange",
      "File": "tsdb/exemplar_test.go",
      "Line": 224,
      "Receiver": ""
    },
    "TestSelectHintsSetCorrectly": {
      "Name": "TestSelectHintsSetCorrectly",
      "File": "promql/engine_test.go",
      "Line": 307,
      "Receiver": ""
    },
    "TestSendAlerts": {
      "Name": "TestSendAlerts",
      "File": "cmd/prometheus/main_test.go",
      "Line": 154,
      "Receiver": ""
    },
    "TestSendAlertsDontAffectActiveAlerts": {
      "Name": "TestSendAlertsDontAffectActiveAlerts",
      "File": "rules/alerting_test.go",
      "Line": 749,
      "Receiver": ""
    },
    "TestSendSamplesWithBackoffWithSampleAgeLimit": {
      "Name": "TestSendSamplesWithBackoffWithSampleAgeLimit",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1968,
      "Receiver": ""
    },
    "TestSeriesReset": {
      "Name": "TestSeriesReset",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 499,
      "Receiver": ""
    },
    "TestSeriesSet": {
      "Name": "TestSeriesSet",
      "File": "storage/interface.go",
      "Line": 417,
      "Receiver": ""
    },
    "TestSeriesSetFilter": {
      "Name": "TestSeriesSetFilter",
      "File": "storage/remote/read_test.go",
      "Line": 165,
      "Receiver": ""
    },
    "TestServerSDRefresh": {
      "Name": "TestServerSDRefresh",
      "File": "discovery/stackit/server_test.go",
      "Line": 40,
      "Receiver": ""
    },
    "TestServiceDiscoveryAdd": {
      "Name": "TestServiceDiscoveryAdd",
      "File": "discovery/kubernetes/service_test.go",
      "Line": 120,
      "Receiver": ""
    },
    "TestServiceDiscoveryAllNamespaces": {
      "Name": "TestServiceDiscoveryAllNamespaces",
      "File": "discovery/kubernetes/service_test.go",
      "Line": 345,
      "Receiver": ""
    },
    "TestServiceDiscoveryDelete": {
      "Name": "TestServiceDiscoveryDelete",
      "File": "discovery/kubernetes/service_test.go",
      "Line": 192,
      "Receiver": ""
    },
    "TestServiceDiscoveryNamespaces": {
      "Name": "TestServiceDiscoveryNamespaces",
      "File": "discovery/kubernetes/service_test.go",
      "Line": 256,
      "Receiver": ""
    },
    "TestServiceDiscoveryOwnNamespace": {
      "Name": "TestServiceDiscoveryOwnNamespace",
      "File": "discovery/kubernetes/service_test.go",
      "Line": 309,
      "Receiver": ""
    },
    "TestServiceDiscoveryUpdate": {
      "Name": "TestServiceDiscoveryUpdate",
      "File": "discovery/kubernetes/service_test.go",
      "Line": 211,
      "Receiver": ""
    },
    "TestSetCompactionFailed": {
      "Name": "TestSetCompactionFailed",
      "File": "tsdb/block_test.go",
      "Line": 58,
      "Receiver": ""
    },
    "TestSetOffsetSeed": {
      "Name": "TestSetOffsetSeed",
      "File": "scrape/manager_test.go",
      "Line": 619,
      "Receiver": ""
    },
    "TestSetOptionsHandlingStaleness": {
      "Name": "TestSetOptionsHandlingStaleness",
      "File": "scrape/scrape_test.go",
      "Line": 1550,
      "Receiver": ""
    },
    "TestSharedLimitListenerClose": {
      "Name": "TestSharedLimitListenerClose",
      "File": "util/netconnlimit/netconnlimit_test.go",
      "Line": 108,
      "Receiver": ""
    },
    "TestSharedLimitListenerConcurrency": {
      "Name": "TestSharedLimitListenerConcurrency",
      "File": "util/netconnlimit/netconnlimit_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestShouldReshard": {
      "Name": "TestShouldReshard",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 703,
      "Receiver": ""
    },
    "TestShutdown": {
      "Name": "TestShutdown",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 465,
      "Receiver": ""
    },
    "TestShutdownWithStaleConnection": {
      "Name": "TestShutdownWithStaleConnection",
      "File": "web/web_test.go",
      "Line": 371,
      "Receiver": ""
    },
    "TestSizeOfLabels": {
      "Name": "TestSizeOfLabels",
      "File": "model/labels/labels_test.go",
      "Line": 66,
      "Receiver": ""
    },
    "TestSizeRetention": {
      "Name": "TestSizeRetention",
      "File": "tsdb/db_test.go",
      "Line": 1488,
      "Receiver": ""
    },
    "TestSizeRetentionMetric": {
      "Name": "TestSizeRetentionMetric",
      "File": "tsdb/db_test.go",
      "Line": 1627,
      "Receiver": ""
    },
    "TestSkippingInvalidValuesInSameTxn": {
      "Name": "TestSkippingInvalidValuesInSameTxn",
      "File": "tsdb/db_test.go",
      "Line": 598,
      "Receiver": ""
    },
    "TestSnapshotAheadOfWALError": {
      "Name": "TestSnapshotAheadOfWALError",
      "File": "tsdb/head_test.go",
      "Line": 6007,
      "Receiver": ""
    },
    "TestSnapshotError": {
      "Name": "TestSnapshotError",
      "File": "tsdb/head_test.go",
      "Line": 4465,
      "Receiver": ""
    },
    "TestSortMetaByMinTimeAndMinRef": {
      "Name": "TestSortMetaByMinTimeAndMinRef",
      "File": "tsdb/ooo_head_read_test.go",
      "Line": 1062,
      "Receiver": ""
    },
    "TestSourceDisappeared": {
      "Name": "TestSourceDisappeared",
      "File": "discovery/http/http_test.go",
      "Line": 213,
      "Receiver": ""
    },
    "TestSpansFromBidirectionalCompareSpans": {
      "Name": "TestSpansFromBidirectionalCompareSpans",
      "File": "tsdb/chunkenc/histogram_meta_test.go",
      "Line": 471,
      "Receiver": ""
    },
    "TestSparseHistogramSpaceSavings": {
      "Name": "TestSparseHistogramSpaceSavings",
      "File": "tsdb/compact_test.go",
      "Line": 1582,
      "Receiver": ""
    },
    "TestSplitByRange": {
      "Name": "TestSplitByRange",
      "File": "tsdb/compact_test.go",
      "Line": 48,
      "Receiver": ""
    },
    "TestStableHash": {
      "Name": "TestStableHash",
      "File": "model/labels/sharding_test.go",
      "Line": 24,
      "Receiver": ""
    },
    "TestStaleness": {
      "Name": "TestStaleness",
      "File": "rules/manager_test.go",
      "Line": 536,
      "Receiver": ""
    },
    "TestStartupInterrupt": {
      "Name": "TestStartupInterrupt",
      "File": "cmd/prometheus/main_unix_test.go",
      "Line": 33,
      "Receiver": ""
    },
    "TestStats": {
      "Name": "TestStats",
      "File": "web/api/v1/api_test.go",
      "Line": 877,
      "Receiver": ""
    },
    "TestStepInvariantExpr": {
      "Name": "TestStepInvariantExpr",
      "File": "promql/parser/prettier_test.go",
      "Line": 318,
      "Receiver": ""
    },
    "TestStmt.PositionRange": {
      "Name": "TestStmt.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 240,
      "Receiver": "TestStmt"
    },
    "TestStmt.Pretty": {
      "Name": "TestStmt.Pretty",
      "File": "promql/parser/ast.go",
      "Line": 238,
      "Receiver": "TestStmt"
    },
    "TestStmt.PromQLStmt": {
      "Name": "TestStmt.PromQLStmt",
      "File": "promql/parser/ast.go",
      "Line": 237,
      "Receiver": "TestStmt"
    },
    "TestStmt.String": {
      "Name": "TestStmt.String",
      "File": "promql/parser/ast.go",
      "Line": 236,
      "Receiver": "TestStmt"
    },
    "TestStop_DrainingDisabled": {
      "Name": "TestStop_DrainingDisabled",
      "File": "notifier/manager_test.go",
      "Line": 853,
      "Receiver": ""
    },
    "TestStop_DrainingEnabled": {
      "Name": "TestStop_DrainingEnabled",
      "File": "notifier/manager_test.go",
      "Line": 939,
      "Receiver": ""
    },
    "TestStorage.AppendExemplar": {
      "Name": "TestStorage.AppendExemplar",
      "File": "util/teststorage/storage.go",
      "Line": 97,
      "Receiver": "TestStorage"
    },
    "TestStorage.Close": {
      "Name": "TestStorage.Close",
      "File": "util/teststorage/storage.go",
      "Line": 82,
      "Receiver": "TestStorage"
    },
    "TestStorage.ExemplarAppender": {
      "Name": "TestStorage.ExemplarAppender",
      "File": "util/teststorage/storage.go",
      "Line": 89,
      "Receiver": "TestStorage"
    },
    "TestStorage.ExemplarQueryable": {
      "Name": "TestStorage.ExemplarQueryable",
      "File": "util/teststorage/storage.go",
      "Line": 93,
      "Receiver": "TestStorage"
    },
    "TestStorageHandlesOutOfOrderTimestamps": {
      "Name": "TestStorageHandlesOutOfOrderTimestamps",
      "File": "scrape/scrape_test.go",
      "Line": 101,
      "Receiver": ""
    },
    "TestStorageLifecycle": {
      "Name": "TestStorageLifecycle",
      "File": "storage/remote/storage_test.go",
      "Line": 29,
      "Receiver": ""
    },
    "TestStorageOverflow": {
      "Name": "TestStorageOverflow",
      "File": "tsdb/exemplar_test.go",
      "Line": 122,
      "Receiver": ""
    },
    "TestStorage_DuplicateExemplarsIgnored": {
      "Name": "TestStorage_DuplicateExemplarsIgnored",
      "File": "tsdb/agent/db_test.go",
      "Line": 858,
      "Receiver": ""
    },
    "TestStoreHTTPErrorHandling": {
      "Name": "TestStoreHTTPErrorHandling",
      "File": "storage/remote/client_test.go",
      "Line": 39,
      "Receiver": ""
    },
    "TestStreamReadEndpoint": {
      "Name": "TestStreamReadEndpoint",
      "File": "storage/remote/read_handler_test.go",
      "Line": 198,
      "Receiver": ""
    },
    "TestStreamResponse": {
      "Name": "TestStreamResponse",
      "File": "storage/remote/codec_test.go",
      "Line": 638,
      "Receiver": ""
    },
    "TestString": {
      "Name": "TestString",
      "File": "discovery/targetgroup/targetgroup_test.go",
      "Line": 177,
      "Receiver": ""
    },
    "TestStringMatcherFromRegexp": {
      "Name": "TestStringMatcherFromRegexp",
      "File": "model/labels/regexp_test.go",
      "Line": 347,
      "Receiver": ""
    },
    "TestStringMatcherFromRegexp_LiteralPrefix": {
      "Name": "TestStringMatcherFromRegexp_LiteralPrefix",
      "File": "model/labels/regexp_test.go",
      "Line": 430,
      "Receiver": ""
    },
    "TestStringMatcherFromRegexp_LiteralSuffix": {
      "Name": "TestStringMatcherFromRegexp_LiteralSuffix",
      "File": "model/labels/regexp_test.go",
      "Line": 516,
      "Receiver": ""
    },
    "TestStringMatcherFromRegexp_Quest": {
      "Name": "TestStringMatcherFromRegexp_Quest",
      "File": "model/labels/regexp_test.go",
      "Line": 591,
      "Receiver": ""
    },
    "TestStripeSeries_Get": {
      "Name": "TestStripeSeries_Get",
      "File": "tsdb/agent/series_test.go",
      "Line": 114,
      "Receiver": ""
    },
    "TestStripeSeries_gc": {
      "Name": "TestStripeSeries_gc",
      "File": "tsdb/head_test.go",
      "Line": 6434,
      "Receiver": ""
    },
    "TestStripeSeries_getOrSet": {
      "Name": "TestStripeSeries_getOrSet",
      "File": "tsdb/head_test.go",
      "Line": 6423,
      "Receiver": ""
    },
    "TestSubquerySelector": {
      "Name": "TestSubquerySelector",
      "File": "promql/engine_test.go",
      "Line": 1777,
      "Receiver": ""
    },
    "TestSubscriberReceivesNotifications": {
      "Name": "TestSubscriberReceivesNotifications",
      "File": "util/notifications/notifications_test.go",
      "Line": 49,
      "Receiver": ""
    },
    "TestSuite.Abort": {
      "Name": "TestSuite.Abort",
      "File": "util/junitxml/junitxml.go",
      "Line": 77,
      "Receiver": "TestSuite"
    },
    "TestSuite.Case": {
      "Name": "TestSuite.Case",
      "File": "util/junitxml/junitxml.go",
      "Line": 64,
      "Receiver": "TestSuite"
    },
    "TestSuite.Fail": {
      "Name": "TestSuite.Fail",
      "File": "util/junitxml/junitxml.go",
      "Line": 51,
      "Receiver": "TestSuite"
    },
    "TestSuite.Settime": {
      "Name": "TestSuite.Settime",
      "File": "util/junitxml/junitxml.go",
      "Line": 73,
      "Receiver": "TestSuite"
    },
    "TestSuite.lastCase": {
      "Name": "TestSuite.lastCase",
      "File": "util/junitxml/junitxml.go",
      "Line": 57,
      "Receiver": "TestSuite"
    },
    "TestSymbols": {
      "Name": "TestSymbols",
      "File": "tsdb/index/index_test.go",
      "Line": 491,
      "Receiver": ""
    },
    "TestSymbolsTable": {
      "Name": "TestSymbolsTable",
      "File": "prompb/io/prometheus/write/v2/symbols_test.go",
      "Line": 24,
      "Receiver": ""
    },
    "TestTSDBDump": {
      "Name": "TestTSDBDump",
      "File": "cmd/promtool/tsdb_test.go",
      "Line": 93,
      "Receiver": ""
    },
    "TestTSDBDumpCommand": {
      "Name": "TestTSDBDumpCommand",
      "File": "cmd/promtool/main_test.go",
      "Line": 634,
      "Receiver": ""
    },
    "TestTSDBDumpOpenMetrics": {
      "Name": "TestTSDBDumpOpenMetrics",
      "File": "cmd/promtool/tsdb_test.go",
      "Line": 179,
      "Receiver": ""
    },
    "TestTSDBDumpOpenMetricsRoundTrip": {
      "Name": "TestTSDBDumpOpenMetricsRoundTrip",
      "File": "cmd/promtool/tsdb_test.go",
      "Line": 210,
      "Receiver": ""
    },
    "TestTSDBDumpOpenMetricsRoundTripPipe": {
      "Name": "TestTSDBDumpOpenMetricsRoundTripPipe",
      "File": "cmd/promtool/tsdb_posix_test.go",
      "Line": 33,
      "Receiver": ""
    },
    "TestTSDBStatus": {
      "Name": "TestTSDBStatus",
      "File": "web/api/v1/api_test.go",
      "Line": 4337,
      "Receiver": ""
    },
    "TestTagValueMarshaling": {
      "Name": "TestTagValueMarshaling",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/opentsdb/tagvalue_test.go",
      "Line": 34,
      "Receiver": ""
    },
    "TestTagValueUnMarshaling": {
      "Name": "TestTagValueUnMarshaling",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/opentsdb/tagvalue_test.go",
      "Line": 42,
      "Receiver": ""
    },
    "TestTagsFromMetric": {
      "Name": "TestTagsFromMetric",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/opentsdb/client_test.go",
      "Line": 30,
      "Receiver": ""
    },
    "TestTailSamples": {
      "Name": "TestTailSamples",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 140,
      "Receiver": ""
    },
    "TestTargetDisappearsAfterProviderRemoved": {
      "Name": "TestTargetDisappearsAfterProviderRemoved",
      "File": "scrape/manager_test.go",
      "Line": 1158,
      "Receiver": ""
    },
    "TestTargetGroupJSONMarshal": {
      "Name": "TestTargetGroupJSONMarshal",
      "File": "discovery/targetgroup/targetgroup_test.go",
      "Line": 62,
      "Receiver": ""
    },
    "TestTargetGroupStrictJSONUnmarshal": {
      "Name": "TestTargetGroupStrictJSONUnmarshal",
      "File": "discovery/targetgroup/targetgroup_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestTargetGroupYamlMarshal": {
      "Name": "TestTargetGroupYamlMarshal",
      "File": "discovery/targetgroup/targetgroup_test.go",
      "Line": 95,
      "Receiver": ""
    },
    "TestTargetGroupYamlUnmarshal": {
      "Name": "TestTargetGroupYamlUnmarshal",
      "File": "discovery/targetgroup/targetgroup_test.go",
      "Line": 136,
      "Receiver": ""
    },
    "TestTargetLabelLegacyValidity": {
      "Name": "TestTargetLabelLegacyValidity",
      "File": "model/relabel/relabel_test.go",
      "Line": 829,
      "Receiver": ""
    },
    "TestTargetLabels": {
      "Name": "TestTargetLabels",
      "File": "scrape/target_test.go",
      "Line": 43,
      "Receiver": ""
    },
    "TestTargetOffset": {
      "Name": "TestTargetOffset",
      "File": "scrape/target_test.go",
      "Line": 62,
      "Receiver": ""
    },
    "TestTargetScrapeConfigWithLabels": {
      "Name": "TestTargetScrapeConfigWithLabels",
      "File": "scrape/scrape_test.go",
      "Line": 5315,
      "Receiver": ""
    },
    "TestTargetScrapeIntervalAndTimeoutRelabel": {
      "Name": "TestTargetScrapeIntervalAndTimeoutRelabel",
      "File": "scrape/scrape_test.go",
      "Line": 4121,
      "Receiver": ""
    },
    "TestTargetScrapeScrapeCancel": {
      "Name": "TestTargetScrapeScrapeCancel",
      "File": "scrape/scrape_test.go",
      "Line": 3235,
      "Receiver": ""
    },
    "TestTargetScrapeScrapeNotFound": {
      "Name": "TestTargetScrapeScrapeNotFound",
      "File": "scrape/scrape_test.go",
      "Line": 3293,
      "Receiver": ""
    },
    "TestTargetScraperBodySizeLimit": {
      "Name": "TestTargetScraperBodySizeLimit",
      "File": "scrape/scrape_test.go",
      "Line": 3324,
      "Receiver": ""
    },
    "TestTargetScraperScrapeOK": {
      "Name": "TestTargetScraperScrapeOK",
      "File": "scrape/scrape_test.go",
      "Line": 3115,
      "Receiver": ""
    },
    "TestTargetSetRecreatesEmptyStaticConfigs": {
      "Name": "TestTargetSetRecreatesEmptyStaticConfigs",
      "File": "discovery/manager_test.go",
      "Line": 1055,
      "Receiver": ""
    },
    "TestTargetSetRecreatesTargetGroupsOnConfigChange": {
      "Name": "TestTargetSetRecreatesTargetGroupsOnConfigChange",
      "File": "discovery/manager_test.go",
      "Line": 974,
      "Receiver": ""
    },
    "TestTargetSetTargetGroupsPresentOnConfigChange": {
      "Name": "TestTargetSetTargetGroupsPresentOnConfigChange",
      "File": "discovery/manager_test.go",
      "Line": 906,
      "Receiver": ""
    },
    "TestTargetSetTargetGroupsPresentOnConfigDuplicateAndDeleteOriginal": {
      "Name": "TestTargetSetTargetGroupsPresentOnConfigDuplicateAndDeleteOriginal",
      "File": "discovery/manager_test.go",
      "Line": 863,
      "Receiver": ""
    },
    "TestTargetSetTargetGroupsPresentOnConfigReload": {
      "Name": "TestTargetSetTargetGroupsPresentOnConfigReload",
      "File": "discovery/manager_test.go",
      "Line": 786,
      "Receiver": ""
    },
    "TestTargetSetTargetGroupsPresentOnConfigRename": {
      "Name": "TestTargetSetTargetGroupsPresentOnConfigRename",
      "File": "discovery/manager_test.go",
      "Line": 823,
      "Receiver": ""
    },
    "TestTargetSetTargetGroupsUpdateDuringApplyConfig": {
      "Name": "TestTargetSetTargetGroupsUpdateDuringApplyConfig",
      "File": "discovery/manager_test.go",
      "Line": 1449,
      "Receiver": ""
    },
    "TestTargetURL": {
      "Name": "TestTargetURL",
      "File": "scrape/target_test.go",
      "Line": 105,
      "Receiver": ""
    },
    "TestTargetUpdatesOrder": {
      "Name": "TestTargetUpdatesOrder",
      "File": "discovery/manager_test.go",
      "Line": 48,
      "Receiver": ""
    },
    "TestTargetsFromGroup": {
      "Name": "TestTargetsFromGroup",
      "File": "scrape/target_test.go",
      "Line": 345,
      "Receiver": ""
    },
    "TestTargetsFromGroupWithLabelKeepDrop": {
      "Name": "TestTargetsFromGroupWithLabelKeepDrop",
      "File": "scrape/target_test.go",
      "Line": 362,
      "Receiver": ""
    },
    "TestTemplateExpansion": {
      "Name": "TestTemplateExpansion",
      "File": "template/template_test.go",
      "Line": 32,
      "Receiver": ""
    },
    "TestTemplateExpansionAMD64": {
      "Name": "TestTemplateExpansionAMD64",
      "File": "template/template_amd64_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestTemplateParsing": {
      "Name": "TestTemplateParsing",
      "File": "model/rulefmt/rulefmt_test.go",
      "Line": 117,
      "Receiver": ""
    },
    "TestTemporality": {
      "Name": "TestTemporality",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 374,
      "Receiver": ""
    },
    "TestTimeMetrics": {
      "Name": "TestTimeMetrics",
      "File": "cmd/prometheus/main_test.go",
      "Line": 356,
      "Receiver": ""
    },
    "TestTimeRetention": {
      "Name": "TestTimeRetention",
      "File": "tsdb/db_test.go",
      "Line": 1412,
      "Receiver": ""
    },
    "TestTimerGroup": {
      "Name": "TestTimerGroup",
      "File": "util/stats/stats_test.go",
      "Line": 83,
      "Receiver": ""
    },
    "TestTimerGroupNewTimer": {
      "Name": "TestTimerGroupNewTimer",
      "File": "util/stats/stats_test.go",
      "Line": 28,
      "Receiver": ""
    },
    "TestToHistogram_Empty": {
      "Name": "TestToHistogram_Empty",
      "File": "prompb/rwcommon/codec_test.go",
      "Line": 136,
      "Receiver": ""
    },
    "TestToLabels": {
      "Name": "TestToLabels",
      "File": "prompb/rwcommon/codec_test.go",
      "Line": 29,
      "Receiver": ""
    },
    "TestToMetadata": {
      "Name": "TestToMetadata",
      "File": "prompb/rwcommon/codec_test.go",
      "Line": 85,
      "Receiver": ""
    },
    "TestToNormalisedLower": {
      "Name": "TestToNormalisedLower",
      "File": "model/labels/regexp_test.go",
      "Line": 1381,
      "Receiver": ""
    },
    "TestTokenProvider": {
      "Name": "TestTokenProvider",
      "File": "storage/remote/azuread/azuread_test.go",
      "Line": 217,
      "Receiver": ""
    },
    "TestTombstoneClean": {
      "Name": "TestTombstoneClean",
      "File": "tsdb/db_test.go",
      "Line": 1173,
      "Receiver": ""
    },
    "TestTombstoneCleanFail": {
      "Name": "TestTombstoneCleanFail",
      "File": "tsdb/db_test.go",
      "Line": 1311,
      "Receiver": ""
    },
    "TestTombstoneCleanResultEmptyBlock": {
      "Name": "TestTombstoneCleanResultEmptyBlock",
      "File": "tsdb/db_test.go",
      "Line": 1267,
      "Receiver": ""
    },
    "TestTombstonesGetWithCopy": {
      "Name": "TestTombstonesGetWithCopy",
      "File": "tsdb/tombstones/tombstones_test.go",
      "Line": 84,
      "Receiver": ""
    },
    "TestTracerProviderShutdown": {
      "Name": "TestTracerProviderShutdown",
      "File": "tracing/tracing_test.go",
      "Line": 120,
      "Receiver": ""
    },
    "TestTranslatorMetricFromOtelMetric": {
      "Name": "TestTranslatorMetricFromOtelMetric",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 829,
      "Receiver": ""
    },
    "TestTritonSDNew": {
      "Name": "TestTritonSDNew",
      "File": "discovery/triton/triton_test.go",
      "Line": 101,
      "Receiver": ""
    },
    "TestTritonSDNewBadConfig": {
      "Name": "TestTritonSDNewBadConfig",
      "File": "discovery/triton/triton_test.go",
      "Line": 115,
      "Receiver": ""
    },
    "TestTritonSDNewCNConfig": {
      "Name": "TestTritonSDNewCNConfig",
      "File": "discovery/triton/triton_test.go",
      "Line": 136,
      "Receiver": ""
    },
    "TestTritonSDNewGroupsConfig": {
      "Name": "TestTritonSDNewGroupsConfig",
      "File": "discovery/triton/triton_test.go",
      "Line": 121,
      "Receiver": ""
    },
    "TestTritonSDRefreshCNsUUIDOnly": {
      "Name": "TestTritonSDRefreshCNsUUIDOnly",
      "File": "discovery/triton/triton_test.go",
      "Line": 198,
      "Receiver": ""
    },
    "TestTritonSDRefreshCNsWithHostname": {
      "Name": "TestTritonSDRefreshCNsWithHostname",
      "File": "discovery/triton/triton_test.go",
      "Line": 213,
      "Receiver": ""
    },
    "TestTritonSDRefreshCancelled": {
      "Name": "TestTritonSDRefreshCancelled",
      "File": "discovery/triton/triton_test.go",
      "Line": 188,
      "Receiver": ""
    },
    "TestTritonSDRefreshMultipleTargets": {
      "Name": "TestTritonSDRefreshMultipleTargets",
      "File": "discovery/triton/triton_test.go",
      "Line": 156,
      "Receiver": ""
    },
    "TestTritonSDRefreshNoServer": {
      "Name": "TestTritonSDRefreshNoServer",
      "File": "discovery/triton/triton_test.go",
      "Line": 180,
      "Receiver": ""
    },
    "TestTritonSDRefreshNoTargets": {
      "Name": "TestTritonSDRefreshNoTargets",
      "File": "discovery/triton/triton_test.go",
      "Line": 151,
      "Receiver": ""
    },
    "TestTruncateBefore": {
      "Name": "TestTruncateBefore",
      "File": "tsdb/tombstones/tombstones_test.go",
      "Line": 100,
      "Receiver": ""
    },
    "TestTypeUnitReLabel": {
      "Name": "TestTypeUnitReLabel",
      "File": "scrape/scrape_test.go",
      "Line": 4803,
      "Receiver": ""
    },
    "TestUTF8PromParse": {
      "Name": "TestUTF8PromParse",
      "File": "model/textparse/promparse_test.go",
      "Line": 393,
      "Receiver": ""
    },
    "TestUnaryPretty": {
      "Name": "TestUnaryPretty",
      "File": "promql/parser/prettier_test.go",
      "Line": 603,
      "Receiver": ""
    },
    "TestUncommittedSamplesNotLostOnTruncate": {
      "Name": "TestUncommittedSamplesNotLostOnTruncate",
      "File": "tsdb/head_test.go",
      "Line": 2244,
      "Receiver": ""
    },
    "TestUninstallingTracerProvider": {
      "Name": "TestUninstallingTracerProvider",
      "File": "tracing/tracing_test.go",
      "Line": 98,
      "Receiver": ""
    },
    "TestUniqueErrorNodes": {
      "Name": "TestUniqueErrorNodes",
      "File": "model/rulefmt/rulefmt_test.go",
      "Line": 213,
      "Receiver": ""
    },
    "TestUnmarshalConfig": {
      "Name": "TestUnmarshalConfig",
      "File": "discovery/consul/consul_test.go",
      "Line": 439,
      "Receiver": ""
    },
    "TestUnquote": {
      "Name": "TestUnquote",
      "File": "util/strutil/quote_test.go",
      "Line": 146,
      "Receiver": ""
    },
    "TestUnregisterMetrics": {
      "Name": "TestUnregisterMetrics",
      "File": "tsdb/wlog/wlog_test.go",
      "Line": 567,
      "Receiver": ""
    },
    "TestUnsubscribe": {
      "Name": "TestUnsubscribe",
      "File": "util/notifications/notifications_test.go",
      "Line": 162,
      "Receiver": ""
    },
    "TestUnsupportedFunctions": {
      "Name": "TestUnsupportedFunctions",
      "File": "tsdb/agent/db_test.go",
      "Line": 104,
      "Receiver": ""
    },
    "TestUpdate": {
      "Name": "TestUpdate",
      "File": "rules/manager_test.go",
      "Line": 767,
      "Receiver": ""
    },
    "TestUpdateFileWithPartialWrites": {
      "Name": "TestUpdateFileWithPartialWrites",
      "File": "discovery/file/file_test.go",
      "Line": 436,
      "Receiver": ""
    },
    "TestUpdateRemoteReadConfigs": {
      "Name": "TestUpdateRemoteReadConfigs",
      "File": "storage/remote/storage_test.go",
      "Line": 56,
      "Receiver": ""
    },
    "TestUpdateWhenStopped": {
      "Name": "TestUpdateWhenStopped",
      "File": "rules/manager_test.go",
      "Line": 2447,
      "Receiver": ""
    },
    "TestUyuniSDHandleError": {
      "Name": "TestUyuniSDHandleError",
      "File": "discovery/uyuni/uyuni_test.go",
      "Line": 58,
      "Receiver": ""
    },
    "TestUyuniSDLogin": {
      "Name": "TestUyuniSDLogin",
      "File": "discovery/uyuni/uyuni_test.go",
      "Line": 73,
      "Receiver": ""
    },
    "TestUyuniSDSkipLogin": {
      "Name": "TestUyuniSDSkipLogin",
      "File": "discovery/uyuni/uyuni_test.go",
      "Line": 105,
      "Receiver": ""
    },
    "TestVMToLabelSet": {
      "Name": "TestVMToLabelSet",
      "File": "discovery/azure/azure_test.go",
      "Line": 105,
      "Receiver": ""
    },
    "TestValidateExemplar": {
      "Name": "TestValidateExemplar",
      "File": "tsdb/exemplar_test.go",
      "Line": 37,
      "Receiver": ""
    },
    "TestValidateLabelsAndMetricName": {
      "Name": "TestValidateLabelsAndMetricName",
      "File": "storage/remote/codec_test.go",
      "Line": 218,
      "Receiver": ""
    },
    "TestVarbitInt": {
      "Name": "TestVarbitInt",
      "File": "tsdb/chunkenc/varbit_test.go",
      "Line": 23,
      "Receiver": ""
    },
    "TestVarbitUint": {
      "Name": "TestVarbitUint",
      "File": "tsdb/chunkenc/varbit_test.go",
      "Line": 59,
      "Receiver": ""
    },
    "TestVarint": {
      "Name": "TestVarint",
      "File": "model/labels/labels_dedupelabels_test.go",
      "Line": 42,
      "Receiver": ""
    },
    "TestVectorSelector_String": {
      "Name": "TestVectorSelector_String",
      "File": "promql/parser/printer_test.go",
      "Line": 237,
      "Receiver": ""
    },
    "TestVector_ContainsSameLabelset": {
      "Name": "TestVector_ContainsSameLabelset",
      "File": "promql/value_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "TestVultrSDRefresh": {
      "Name": "TestVultrSDRefresh",
      "File": "discovery/vultr/vultr_test.go",
      "Line": 45,
      "Receiver": ""
    },
    "TestWALFlushedOnDBClose": {
      "Name": "TestWALFlushedOnDBClose",
      "File": "tsdb/db_test.go",
      "Line": 983,
      "Receiver": ""
    },
    "TestWALMetadataDelivery": {
      "Name": "TestWALMetadataDelivery",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 363,
      "Receiver": ""
    },
    "TestWALRepair_ReadingError": {
      "Name": "TestWALRepair_ReadingError",
      "File": "tsdb/wlog/wlog_test.go",
      "Line": 42,
      "Receiver": ""
    },
    "TestWALReplay": {
      "Name": "TestWALReplay",
      "File": "tsdb/agent/db_test.go",
      "Line": 637,
      "Receiver": ""
    },
    "TestWALReplayRaceOnSamplesLoggedBeforeSeries": {
      "Name": "TestWALReplayRaceOnSamplesLoggedBeforeSeries",
      "File": "tsdb/db_test.go",
      "Line": 1088,
      "Receiver": ""
    },
    "TestWALSampleAndExemplarOrder": {
      "Name": "TestWALSampleAndExemplarOrder",
      "File": "tsdb/head_test.go",
      "Line": 6293,
      "Receiver": ""
    },
    "TestWALSegmentSizeBounds": {
      "Name": "TestWALSegmentSizeBounds",
      "File": "cmd/prometheus/main_test.go",
      "Line": 216,
      "Receiver": ""
    },
    "TestWALSegmentSizeOptions": {
      "Name": "TestWALSegmentSizeOptions",
      "File": "tsdb/db_test.go",
      "Line": 1011,
      "Receiver": ""
    },
    "TestWBLAndMmapReplay": {
      "Name": "TestWBLAndMmapReplay",
      "File": "tsdb/db_test.go",
      "Line": 6845,
      "Receiver": ""
    },
    "TestWBLCorruption": {
      "Name": "TestWBLCorruption",
      "File": "tsdb/db_test.go",
      "Line": 7654,
      "Receiver": ""
    },
    "TestWBLReplay": {
      "Name": "TestWBLReplay",
      "File": "tsdb/head_test.go",
      "Line": 5313,
      "Receiver": ""
    },
    "TestWaitForPendingReadersInTimeRange": {
      "Name": "TestWaitForPendingReadersInTimeRange",
      "File": "tsdb/head_test.go",
      "Line": 3707,
      "Receiver": ""
    },
    "TestWalRepair_DecodingError": {
      "Name": "TestWalRepair_DecodingError",
      "File": "tsdb/head_test.go",
      "Line": 2361,
      "Receiver": ""
    },
    "TestWatchScrapeManager_NotReady": {
      "Name": "TestWatchScrapeManager_NotReady",
      "File": "storage/remote/metadata_watcher_test.go",
      "Line": 89,
      "Receiver": ""
    },
    "TestWatchScrapeManager_ReadyForCollection": {
      "Name": "TestWatchScrapeManager_ReadyForCollection",
      "File": "storage/remote/metadata_watcher_test.go",
      "Line": 103,
      "Receiver": ""
    },
    "TestWblRepair_DecodingError": {
      "Name": "TestWblRepair_DecodingError",
      "File": "tsdb/head_test.go",
      "Line": 2456,
      "Receiver": ""
    },
    "TestWblReplayAfterOOODisableAndRestart": {
      "Name": "TestWblReplayAfterOOODisableAndRestart",
      "File": "tsdb/db_test.go",
      "Line": 8288,
      "Receiver": ""
    },
    "TestWithoutPostings": {
      "Name": "TestWithoutPostings",
      "File": "tsdb/index/postings_test.go",
      "Line": 841,
      "Receiver": ""
    },
    "TestWrappedError": {
      "Name": "TestWrappedError",
      "File": "model/rulefmt/rulefmt_test.go",
      "Line": 307,
      "Receiver": ""
    },
    "TestWriteAndReadbackTombstones": {
      "Name": "TestWriteAndReadbackTombstones",
      "File": "tsdb/tombstones/tombstones_test.go",
      "Line": 34,
      "Receiver": ""
    },
    "TestWriteClient.Endpoint": {
      "Name": "TestWriteClient.Endpoint",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1189,
      "Receiver": "TestWriteClient"
    },
    "TestWriteClient.Name": {
      "Name": "TestWriteClient.Name",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1185,
      "Receiver": "TestWriteClient"
    },
    "TestWriteClient.SetReturnError": {
      "Name": "TestWriteClient.SetReturnError",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1106,
      "Receiver": "TestWriteClient"
    },
    "TestWriteClient.SetStoreWait": {
      "Name": "TestWriteClient.SetStoreWait",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1100,
      "Receiver": "TestWriteClient"
    },
    "TestWriteClient.Store": {
      "Name": "TestWriteClient.Store",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1112,
      "Receiver": "TestWriteClient"
    },
    "TestWriteClient.expectExemplars": {
      "Name": "TestWriteClient.expectExemplars",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1010,
      "Receiver": "TestWriteClient"
    },
    "TestWriteClient.expectFloatHistograms": {
      "Name": "TestWriteClient.expectFloatHistograms",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1041,
      "Receiver": "TestWriteClient"
    },
    "TestWriteClient.expectHistograms": {
      "Name": "TestWriteClient.expectHistograms",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1028,
      "Receiver": "TestWriteClient"
    },
    "TestWriteClient.expectSamples": {
      "Name": "TestWriteClient.expectSamples",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 994,
      "Receiver": "TestWriteClient"
    },
    "TestWriteClient.injectErrors": {
      "Name": "TestWriteClient.injectErrors",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 988,
      "Receiver": "TestWriteClient"
    },
    "TestWriteClient.waitForExpectedData": {
      "Name": "TestWriteClient.waitForExpectedData",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1064,
      "Receiver": "TestWriteClient"
    },
    "TestWriteOutput": {
      "Name": "TestWriteOutput",
      "File": "documentation/examples/custom-sd/adapter/adapter_test.go",
      "Line": 225,
      "Receiver": ""
    },
    "TestWriteReadHistogramChunkLayout": {
      "Name": "TestWriteReadHistogramChunkLayout",
      "File": "tsdb/chunkenc/histogram_meta_test.go",
      "Line": 371,
      "Receiver": ""
    },
    "TestWriteStorageApplyConfig_Idempotent": {
      "Name": "TestWriteStorageApplyConfig_Idempotent",
      "File": "storage/remote/write_test.go",
      "Line": 250,
      "Receiver": ""
    },
    "TestWriteStorageApplyConfig_Lifecycle": {
      "Name": "TestWriteStorageApplyConfig_Lifecycle",
      "File": "storage/remote/write_test.go",
      "Line": 206,
      "Receiver": ""
    },
    "TestWriteStorageApplyConfig_NoDuplicateWriteConfigs": {
      "Name": "TestWriteStorageApplyConfig_NoDuplicateWriteConfigs",
      "File": "storage/remote/write_test.go",
      "Line": 64,
      "Receiver": ""
    },
    "TestWriteStorageApplyConfig_PartialUpdate": {
      "Name": "TestWriteStorageApplyConfig_PartialUpdate",
      "File": "storage/remote/write_test.go",
      "Line": 274,
      "Receiver": ""
    },
    "TestWriteStorageApplyConfig_RestartOnNameChange": {
      "Name": "TestWriteStorageApplyConfig_RestartOnNameChange",
      "File": "storage/remote/write_test.go",
      "Line": 138,
      "Receiver": ""
    },
    "TestWriteStorageApplyConfig_UpdateExternalLabels": {
      "Name": "TestWriteStorageApplyConfig_UpdateExternalLabels",
      "File": "storage/remote/write_test.go",
      "Line": 222,
      "Receiver": ""
    },
    "TestWriteStorageApplyConfig_UpdateWithRegisterer": {
      "Name": "TestWriteStorageApplyConfig_UpdateWithRegisterer",
      "File": "storage/remote/write_test.go",
      "Line": 165,
      "Receiver": ""
    },
    "TestWriteStorageApplyConfigsDuringCommit": {
      "Name": "TestWriteStorageApplyConfigsDuringCommit",
      "File": "storage/remote/storage_test.go",
      "Line": 156,
      "Receiver": ""
    },
    "TestWriteV2RequestFixture": {
      "Name": "TestWriteV2RequestFixture",
      "File": "storage/remote/codec_test.go",
      "Line": 169,
      "Receiver": ""
    },
    "TestWriterWithDefaultSegmentSize": {
      "Name": "TestWriterWithDefaultSegmentSize",
      "File": "tsdb/chunks/chunks_test.go",
      "Line": 33,
      "Receiver": ""
    },
    "TestWriter_ShouldReturnErrorOnSeriesWithDuplicatedLabelNames": {
      "Name": "TestWriter_ShouldReturnErrorOnSeriesWithDuplicatedLabelNames",
      "File": "tsdb/index/index_test.go",
      "Line": 447,
      "Receiver": ""
    },
    "TestYAMLNotLongerSupportedAMApi": {
      "Name": "TestYAMLNotLongerSupportedAMApi",
      "File": "config/config_test.go",
      "Line": 1671,
      "Receiver": ""
    },
    "TestYAMLRoundtrip": {
      "Name": "TestYAMLRoundtrip",
      "File": "config/config_test.go",
      "Line": 1676,
      "Receiver": ""
    },
    "TestZeroOrOneCharacterStringMatcher": {
      "Name": "TestZeroOrOneCharacterStringMatcher",
      "File": "model/labels/regexp_test.go",
      "Line": 1150,
      "Receiver": ""
    },
    "Test_ExistingWAL_NextRef": {
      "Name": "Test_ExistingWAL_NextRef",
      "File": "tsdb/agent/db_test.go",
      "Line": 758,
      "Receiver": ""
    },
    "Test_convertTimeStamp": {
      "Name": "Test_convertTimeStamp",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper_test.go",
      "Line": 518,
      "Receiver": ""
    },
    "Test_floatToTime": {
      "Name": "Test_floatToTime",
      "File": "template/template_test.go",
      "Line": 633,
      "Receiver": ""
    },
    "Test_validateOptions": {
      "Name": "Test_validateOptions",
      "File": "tsdb/agent/db_test.go",
      "Line": 802,
      "Receiver": ""
    },
    "TestfuzzParseMetricWithContentTypePanicOnInvalid": {
      "Name": "TestfuzzParseMetricWithContentTypePanicOnInvalid",
      "File": "promql/fuzz_test.go",
      "Line": 25,
      "Receiver": ""
    },
    "Time": {
      "Name": "Time",
      "File": "model/timestamp/timestamp.go",
      "Line": 27,
      "Receiver": ""
    },
    "TimeSeries.Descriptor": {
      "Name": "TimeSeries.Descriptor",
      "File": "prompb/types.pb.go",
      "Line": 687,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.GetCreatedTimestamp": {
      "Name": "TimeSeries.GetCreatedTimestamp",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 287,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.GetExemplars": {
      "Name": "TimeSeries.GetExemplars",
      "File": "prompb/types.pb.go",
      "Line": 731,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.GetHistograms": {
      "Name": "TimeSeries.GetHistograms",
      "File": "prompb/types.pb.go",
      "Line": 738,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.GetLabels": {
      "Name": "TimeSeries.GetLabels",
      "File": "prompb/types.pb.go",
      "Line": 717,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.GetLabelsRefs": {
      "Name": "TimeSeries.GetLabelsRefs",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 252,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.GetMetadata": {
      "Name": "TimeSeries.GetMetadata",
      "File": "prompb/io/prometheus/write/v2/types.pb.go",
      "Line": 280,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.GetSamples": {
      "Name": "TimeSeries.GetSamples",
      "File": "prompb/types.pb.go",
      "Line": 724,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.Marshal": {
      "Name": "TimeSeries.Marshal",
      "File": "prompb/types.pb.go",
      "Line": 1632,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.MarshalTo": {
      "Name": "TimeSeries.MarshalTo",
      "File": "prompb/types.pb.go",
      "Line": 1642,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.MarshalToSizedBuffer": {
      "Name": "TimeSeries.MarshalToSizedBuffer",
      "File": "prompb/types.pb.go",
      "Line": 1647,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.OptimizedMarshalToSizedBuffer": {
      "Name": "TimeSeries.OptimizedMarshalToSizedBuffer",
      "File": "prompb/io/prometheus/write/v2/custom.go",
      "Line": 74,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.ProtoMessage": {
      "Name": "TimeSeries.ProtoMessage",
      "File": "prompb/types.pb.go",
      "Line": 686,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.Reset": {
      "Name": "TimeSeries.Reset",
      "File": "prompb/types.pb.go",
      "Line": 684,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.Size": {
      "Name": "TimeSeries.Size",
      "File": "prompb/types.pb.go",
      "Line": 2222,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.String": {
      "Name": "TimeSeries.String",
      "File": "prompb/types.pb.go",
      "Line": 685,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.ToLabels": {
      "Name": "TimeSeries.ToLabels",
      "File": "prompb/io/prometheus/write/v2/codec.go",
      "Line": 28,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.ToMetadata": {
      "Name": "TimeSeries.ToMetadata",
      "File": "prompb/io/prometheus/write/v2/codec.go",
      "Line": 33,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.Unmarshal": {
      "Name": "TimeSeries.Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 3444,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.XXX_DiscardUnknown": {
      "Name": "TimeSeries.XXX_DiscardUnknown",
      "File": "prompb/types.pb.go",
      "Line": 711,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.XXX_Marshal": {
      "Name": "TimeSeries.XXX_Marshal",
      "File": "prompb/types.pb.go",
      "Line": 693,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.XXX_Merge": {
      "Name": "TimeSeries.XXX_Merge",
      "File": "prompb/types.pb.go",
      "Line": 705,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.XXX_Size": {
      "Name": "TimeSeries.XXX_Size",
      "File": "prompb/types.pb.go",
      "Line": 708,
      "Receiver": "TimeSeries"
    },
    "TimeSeries.XXX_Unmarshal": {
      "Name": "TimeSeries.XXX_Unmarshal",
      "File": "prompb/types.pb.go",
      "Line": 690,
      "Receiver": "TimeSeries"
    },
    "Timer.Duration": {
      "Name": "Timer.Duration",
      "File": "util/stats/timer.go",
      "Line": 49,
      "Receiver": "Timer"
    },
    "Timer.ElapsedTime": {
      "Name": "Timer.ElapsedTime",
      "File": "util/stats/timer.go",
      "Line": 44,
      "Receiver": "Timer"
    },
    "Timer.Start": {
      "Name": "Timer.Start",
      "File": "util/stats/timer.go",
      "Line": 33,
      "Receiver": "Timer"
    },
    "Timer.Stop": {
      "Name": "Timer.Stop",
      "File": "util/stats/timer.go",
      "Line": 39,
      "Receiver": "Timer"
    },
    "Timer.String": {
      "Name": "Timer.String",
      "File": "util/stats/timer.go",
      "Line": 54,
      "Receiver": "Timer"
    },
    "TimerGroup.GetTimer": {
      "Name": "TimerGroup.GetTimer",
      "File": "util/stats/timer.go",
      "Line": 69,
      "Receiver": "TimerGroup"
    },
    "TimerGroup.String": {
      "Name": "TimerGroup.String",
      "File": "util/stats/timer.go",
      "Line": 82,
      "Receiver": "TimerGroup"
    },
    "TimestampCollector.Collect": {
      "Name": "TimestampCollector.Collect",
      "File": "discovery/file/file.go",
      "Line": 117,
      "Receiver": "TimestampCollector"
    },
    "TimestampCollector.Describe": {
      "Name": "TimestampCollector.Describe",
      "File": "discovery/file/file.go",
      "Line": 112,
      "Receiver": "TimestampCollector"
    },
    "TimestampCollector.addDiscoverer": {
      "Name": "TimestampCollector.addDiscoverer",
      "File": "discovery/file/file.go",
      "Line": 139,
      "Receiver": "TimestampCollector"
    },
    "TimestampCollector.removeDiscoverer": {
      "Name": "TimestampCollector.removeDiscoverer",
      "File": "discovery/file/file.go",
      "Line": 145,
      "Receiver": "TimestampCollector"
    },
    "ToEscapingScheme": {
      "Name": "ToEscapingScheme",
      "File": "config/config.go",
      "Line": 943,
      "Receiver": ""
    },
    "ToLabelMatchers": {
      "Name": "ToLabelMatchers",
      "File": "storage/remote/codec.go",
      "Line": 786,
      "Receiver": ""
    },
    "ToMetricType": {
      "Name": "ToMetricType",
      "File": "tsdb/record/record.go",
      "Line": 123,
      "Receiver": ""
    },
    "ToQuery": {
      "Name": "ToQuery",
      "File": "storage/remote/codec.go",
      "Line": 96,
      "Receiver": ""
    },
    "ToQueryResult": {
      "Name": "ToQueryResult",
      "File": "storage/remote/codec.go",
      "Line": 124,
      "Receiver": ""
    },
    "TokenProviderTestSuite.BeforeTest": {
      "Name": "TokenProviderTestSuite.BeforeTest",
      "File": "storage/remote/azuread/azuread_test.go",
      "Line": 213,
      "Receiver": "TokenProviderTestSuite"
    },
    "TokenProviderTestSuite.TestNewTokenProvider": {
      "Name": "TokenProviderTestSuite.TestNewTokenProvider",
      "File": "storage/remote/azuread/azuread_test.go",
      "Line": 221,
      "Receiver": "TokenProviderTestSuite"
    },
    "TolerantVerifyLeak": {
      "Name": "TolerantVerifyLeak",
      "File": "util/testutil/testing.go",
      "Line": 33,
      "Receiver": ""
    },
    "TracingClientType.UnmarshalYAML": {
      "Name": "TracingClientType.UnmarshalYAML",
      "File": "config/config.go",
      "Line": 1012,
      "Receiver": "TracingClientType"
    },
    "TracingConfig.SetDirectory": {
      "Name": "TracingConfig.SetDirectory",
      "File": "config/config.go",
      "Line": 1041,
      "Receiver": "TracingConfig"
    },
    "TracingConfig.UnmarshalYAML": {
      "Name": "TracingConfig.UnmarshalYAML",
      "File": "config/config.go",
      "Line": 1046,
      "Receiver": "TracingConfig"
    },
    "TranslatorMetricFromOtelMetric": {
      "Name": "TranslatorMetricFromOtelMetric",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw.go",
      "Line": 74,
      "Receiver": ""
    },
    "Tree": {
      "Name": "Tree",
      "File": "promql/parser/printer.go",
      "Line": 30,
      "Receiver": ""
    },
    "Type.String": {
      "Name": "Type.String",
      "File": "tsdb/record/record.go",
      "Line": 61,
      "Receiver": "Type"
    },
    "Types": {
      "Name": "Types",
      "File": "util/compression/compression.go",
      "Line": 37,
      "Receiver": ""
    },
    "Uname": {
      "Name": "Uname",
      "File": "util/runtime/uname_linux.go",
      "Line": 19,
      "Receiver": ""
    },
    "UnaryExpr.PositionRange": {
      "Name": "UnaryExpr.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 525,
      "Receiver": "UnaryExpr"
    },
    "UnaryExpr.Pretty": {
      "Name": "UnaryExpr.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 157,
      "Receiver": "UnaryExpr"
    },
    "UnaryExpr.PromQLExpr": {
      "Name": "UnaryExpr.PromQLExpr",
      "File": "promql/parser/ast.go",
      "Line": 272,
      "Receiver": "UnaryExpr"
    },
    "UnaryExpr.ShortString": {
      "Name": "UnaryExpr.ShortString",
      "File": "promql/parser/printer.go",
      "Line": 308,
      "Receiver": "UnaryExpr"
    },
    "UnaryExpr.String": {
      "Name": "UnaryExpr.String",
      "File": "promql/parser/printer.go",
      "Line": 304,
      "Receiver": "UnaryExpr"
    },
    "UnaryExpr.Type": {
      "Name": "UnaryExpr.Type",
      "File": "promql/parser/ast.go",
      "Line": 253,
      "Receiver": "UnaryExpr"
    },
    "UnmarshalYAMLWithInlineConfigs": {
      "Name": "UnmarshalYAMLWithInlineConfigs",
      "File": "discovery/registry.go",
      "Line": 113,
      "Receiver": ""
    },
    "Unquote": {
      "Name": "Unquote",
      "File": "util/strutil/quote.go",
      "Line": 66,
      "Receiver": ""
    },
    "Untyped.Descriptor": {
      "Name": "Untyped.Descriptor",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 373,
      "Receiver": "Untyped"
    },
    "Untyped.GetValue": {
      "Name": "Untyped.GetValue",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 403,
      "Receiver": "Untyped"
    },
    "Untyped.Marshal": {
      "Name": "Untyped.Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1284,
      "Receiver": "Untyped"
    },
    "Untyped.MarshalTo": {
      "Name": "Untyped.MarshalTo",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1294,
      "Receiver": "Untyped"
    },
    "Untyped.MarshalToSizedBuffer": {
      "Name": "Untyped.MarshalToSizedBuffer",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1299,
      "Receiver": "Untyped"
    },
    "Untyped.ProtoMessage": {
      "Name": "Untyped.ProtoMessage",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 372,
      "Receiver": "Untyped"
    },
    "Untyped.Reset": {
      "Name": "Untyped.Reset",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 370,
      "Receiver": "Untyped"
    },
    "Untyped.Size": {
      "Name": "Untyped.Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1951,
      "Receiver": "Untyped"
    },
    "Untyped.String": {
      "Name": "Untyped.String",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 371,
      "Receiver": "Untyped"
    },
    "Untyped.Unmarshal": {
      "Name": "Untyped.Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 2730,
      "Receiver": "Untyped"
    },
    "Untyped.XXX_DiscardUnknown": {
      "Name": "Untyped.XXX_DiscardUnknown",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 397,
      "Receiver": "Untyped"
    },
    "Untyped.XXX_Marshal": {
      "Name": "Untyped.XXX_Marshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 379,
      "Receiver": "Untyped"
    },
    "Untyped.XXX_Merge": {
      "Name": "Untyped.XXX_Merge",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 391,
      "Receiver": "Untyped"
    },
    "Untyped.XXX_Size": {
      "Name": "Untyped.XXX_Size",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 394,
      "Receiver": "Untyped"
    },
    "Untyped.XXX_Unmarshal": {
      "Name": "Untyped.XXX_Unmarshal",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 376,
      "Receiver": "Untyped"
    },
    "Updatert": {
      "Name": "Updatert",
      "File": "discovery/manager.go",
      "Line": 127,
      "Receiver": ""
    },
    "VMLimits": {
      "Name": "VMLimits",
      "File": "util/runtime/vmlimits_openbsd.go",
      "Line": 23,
      "Receiver": ""
    },
    "ValueType.ChunkEncoding": {
      "Name": "ValueType.ChunkEncoding",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 185,
      "Receiver": "ValueType"
    },
    "ValueType.NewChunk": {
      "Name": "ValueType.NewChunk",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 198,
      "Receiver": "ValueType"
    },
    "ValueType.String": {
      "Name": "ValueType.String",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 170,
      "Receiver": "ValueType"
    },
    "Vector.ContainsSameLabelset": {
      "Name": "Vector.ContainsSameLabelset",
      "File": "promql/value.go",
      "Line": 271,
      "Receiver": "Vector"
    },
    "Vector.String": {
      "Name": "Vector.String",
      "File": "promql/value.go",
      "Line": 245,
      "Receiver": "Vector"
    },
    "Vector.TotalSamples": {
      "Name": "Vector.TotalSamples",
      "File": "promql/value.go",
      "Line": 257,
      "Receiver": "Vector"
    },
    "Vector.Type": {
      "Name": "Vector.Type",
      "File": "promql/value.go",
      "Line": 33,
      "Receiver": "Vector"
    },
    "VectorMatchCardinality.String": {
      "Name": "VectorMatchCardinality.String",
      "File": "promql/parser/ast.go",
      "Line": 288,
      "Receiver": "VectorMatchCardinality"
    },
    "VectorSelector.PositionRange": {
      "Name": "VectorSelector.PositionRange",
      "File": "promql/parser/ast.go",
      "Line": 532,
      "Receiver": "VectorSelector"
    },
    "VectorSelector.Pretty": {
      "Name": "VectorSelector.Pretty",
      "File": "promql/parser/prettier.go",
      "Line": 145,
      "Receiver": "VectorSelector"
    },
    "VectorSelector.PromQLExpr": {
      "Name": "VectorSelector.PromQLExpr",
      "File": "promql/parser/ast.go",
      "Line": 273,
      "Receiver": "VectorSelector"
    },
    "VectorSelector.String": {
      "Name": "VectorSelector.String",
      "File": "promql/parser/printer.go",
      "Line": 312,
      "Receiver": "VectorSelector"
    },
    "VectorSelector.Type": {
      "Name": "VectorSelector.Type",
      "File": "promql/parser/ast.go",
      "Line": 254,
      "Receiver": "VectorSelector"
    },
    "VultrSDTestSuite.SetupTest": {
      "Name": "VultrSDTestSuite.SetupTest",
      "File": "discovery/vultr/vultr_test.go",
      "Line": 38,
      "Receiver": "VultrSDTestSuite"
    },
    "VultrSDTestSuite.TearDownSuite": {
      "Name": "VultrSDTestSuite.TearDownSuite",
      "File": "discovery/vultr/vultr_test.go",
      "Line": 34,
      "Receiver": "VultrSDTestSuite"
    },
    "WALReplayStatus.GetWALReplayStatus": {
      "Name": "WALReplayStatus.GetWALReplayStatus",
      "File": "tsdb/head.go",
      "Line": 626,
      "Receiver": "WALReplayStatus"
    },
    "WL.Close": {
      "Name": "WL.Close",
      "File": "tsdb/wlog/wlog.go",
      "Line": 837,
      "Receiver": "WL"
    },
    "WL.CompressionType": {
      "Name": "WL.CompressionType",
      "File": "tsdb/wlog/wlog.go",
      "Line": 367,
      "Receiver": "WL"
    },
    "WL.Dir": {
      "Name": "WL.Dir",
      "File": "tsdb/wlog/wlog.go",
      "Line": 372,
      "Receiver": "WL"
    },
    "WL.LastSegmentAndOffset": {
      "Name": "WL.LastSegmentAndOffset",
      "File": "tsdb/wlog/wlog.go",
      "Line": 785,
      "Receiver": "WL"
    },
    "WL.Log": {
      "Name": "WL.Log",
      "File": "tsdb/wlog/wlog.go",
      "Line": 657,
      "Receiver": "WL"
    },
    "WL.NextSegment": {
      "Name": "WL.NextSegment",
      "File": "tsdb/wlog/wlog.go",
      "Line": 514,
      "Receiver": "WL"
    },
    "WL.NextSegmentSync": {
      "Name": "WL.NextSegmentSync",
      "File": "tsdb/wlog/wlog.go",
      "Line": 522,
      "Receiver": "WL"
    },
    "WL.Repair": {
      "Name": "WL.Repair",
      "File": "tsdb/wlog/wlog.go",
      "Line": 400,
      "Receiver": "WL"
    },
    "WL.SetWriteNotified": {
      "Name": "WL.SetWriteNotified",
      "File": "tsdb/wlog/wlog.go",
      "Line": 376,
      "Receiver": "WL"
    },
    "WL.Size": {
      "Name": "WL.Size",
      "File": "tsdb/wlog/wlog.go",
      "Line": 1046,
      "Receiver": "WL"
    },
    "WL.Sync": {
      "Name": "WL.Sync",
      "File": "tsdb/wlog/wlog.go",
      "Line": 832,
      "Receiver": "WL"
    },
    "WL.Truncate": {
      "Name": "WL.Truncate",
      "File": "tsdb/wlog/wlog.go",
      "Line": 800,
      "Receiver": "WL"
    },
    "WL.flushPage": {
      "Name": "WL.flushPage",
      "File": "tsdb/wlog/wlog.go",
      "Line": 583,
      "Receiver": "WL"
    },
    "WL.fsync": {
      "Name": "WL.fsync",
      "File": "tsdb/wlog/wlog.go",
      "Line": 822,
      "Receiver": "WL"
    },
    "WL.log": {
      "Name": "WL.log",
      "File": "tsdb/wlog/wlog.go",
      "Line": 675,
      "Receiver": "WL"
    },
    "WL.nextSegment": {
      "Name": "WL.nextSegment",
      "File": "tsdb/wlog/wlog.go",
      "Line": 530,
      "Receiver": "WL"
    },
    "WL.pagesPerSegment": {
      "Name": "WL.pagesPerSegment",
      "File": "tsdb/wlog/wlog.go",
      "Line": 651,
      "Receiver": "WL"
    },
    "WL.run": {
      "Name": "WL.run",
      "File": "tsdb/wlog/wlog.go",
      "Line": 380,
      "Receiver": "WL"
    },
    "WL.setSegment": {
      "Name": "WL.setSegment",
      "File": "tsdb/wlog/wlog.go",
      "Line": 567,
      "Receiver": "WL"
    },
    "Walk": {
      "Name": "Walk",
      "File": "promql/parser/ast.go",
      "Line": 332,
      "Receiver": ""
    },
    "Watcher.Notify": {
      "Name": "Watcher.Notify",
      "File": "tsdb/wlog/watcher.go",
      "Line": 198,
      "Receiver": "Watcher"
    },
    "Watcher.Run": {
      "Name": "Watcher.Run",
      "File": "tsdb/wlog/watcher.go",
      "Line": 267,
      "Receiver": "Watcher"
    },
    "Watcher.SetMetrics": {
      "Name": "Watcher.SetMetrics",
      "File": "tsdb/wlog/watcher.go",
      "Line": 209,
      "Receiver": "Watcher"
    },
    "Watcher.SetStartTime": {
      "Name": "Watcher.SetStartTime",
      "File": "tsdb/wlog/watcher.go",
      "Line": 665,
      "Receiver": "Watcher"
    },
    "Watcher.Start": {
      "Name": "Watcher.Start",
      "File": "tsdb/wlog/watcher.go",
      "Line": 223,
      "Receiver": "Watcher"
    },
    "Watcher.Stop": {
      "Name": "Watcher.Stop",
      "File": "tsdb/wlog/watcher.go",
      "Line": 231,
      "Receiver": "Watcher"
    },
    "Watcher.findSegmentForIndex": {
      "Name": "Watcher.findSegmentForIndex",
      "File": "tsdb/wlog/watcher.go",
      "Line": 320,
      "Receiver": "Watcher"
    },
    "Watcher.garbageCollectSeries": {
      "Name": "Watcher.garbageCollectSeries",
      "File": "tsdb/wlog/watcher.go",
      "Line": 446,
      "Receiver": "Watcher"
    },
    "Watcher.loop": {
      "Name": "Watcher.loop",
      "File": "tsdb/wlog/watcher.go",
      "Line": 247,
      "Receiver": "Watcher"
    },
    "Watcher.readAndHandleError": {
      "Name": "Watcher.readAndHandleError",
      "File": "tsdb/wlog/watcher.go",
      "Line": 335,
      "Receiver": "Watcher"
    },
    "Watcher.readCheckpoint": {
      "Name": "Watcher.readCheckpoint",
      "File": "tsdb/wlog/watcher.go",
      "Line": 673,
      "Receiver": "Watcher"
    },
    "Watcher.readSegment": {
      "Name": "Watcher.readSegment",
      "File": "tsdb/wlog/watcher.go",
      "Line": 480,
      "Receiver": "Watcher"
    },
    "Watcher.readSegmentForGC": {
      "Name": "Watcher.readSegmentForGC",
      "File": "tsdb/wlog/watcher.go",
      "Line": 633,
      "Receiver": "Watcher"
    },
    "Watcher.watch": {
      "Name": "Watcher.watch",
      "File": "tsdb/wlog/watcher.go",
      "Line": 358,
      "Receiver": "Watcher"
    },
    "WithFunctions": {
      "Name": "WithFunctions",
      "File": "promql/parser/parse.go",
      "Line": 78,
      "Receiver": ""
    },
    "WithOMParserCTSeriesSkipped": {
      "Name": "WithOMParserCTSeriesSkipped",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 131,
      "Receiver": ""
    },
    "WithOMParserTypeAndUnitLabels": {
      "Name": "WithOMParserTypeAndUnitLabels",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 139,
      "Receiver": ""
    },
    "WithSegmentSize": {
      "Name": "WithSegmentSize",
      "File": "tsdb/chunks/chunks.go",
      "Line": 312,
      "Receiver": ""
    },
    "WithUncachedIO": {
      "Name": "WithUncachedIO",
      "File": "tsdb/chunks/chunks.go",
      "Line": 304,
      "Receiver": ""
    },
    "Without": {
      "Name": "Without",
      "File": "tsdb/index/postings.go",
      "Line": 733,
      "Receiver": ""
    },
    "WrappedError.Error": {
      "Name": "WrappedError.Error",
      "File": "model/rulefmt/rulefmt.go",
      "Line": 71,
      "Receiver": "WrappedError"
    },
    "WrappedError.Unwrap": {
      "Name": "WrappedError.Unwrap",
      "File": "model/rulefmt/rulefmt.go",
      "Line": 85,
      "Receiver": "WrappedError"
    },
    "WriteFile": {
      "Name": "WriteFile",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 77,
      "Receiver": ""
    },
    "WriteRequest.Descriptor": {
      "Name": "WriteRequest.Descriptor",
      "File": "prompb/remote.pb.go",
      "Line": 77,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.GetMetadata": {
      "Name": "WriteRequest.GetMetadata",
      "File": "prompb/remote.pb.go",
      "Line": 114,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.GetTimeseries": {
      "Name": "WriteRequest.GetTimeseries",
      "File": "prompb/remote.pb.go",
      "Line": 107,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.Marshal": {
      "Name": "WriteRequest.Marshal",
      "File": "prompb/remote.pb.go",
      "Line": 457,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.MarshalTo": {
      "Name": "WriteRequest.MarshalTo",
      "File": "prompb/remote.pb.go",
      "Line": 467,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.MarshalToSizedBuffer": {
      "Name": "WriteRequest.MarshalToSizedBuffer",
      "File": "prompb/remote.pb.go",
      "Line": 472,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.ProtoMessage": {
      "Name": "WriteRequest.ProtoMessage",
      "File": "prompb/remote.pb.go",
      "Line": 76,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.Reset": {
      "Name": "WriteRequest.Reset",
      "File": "prompb/remote.pb.go",
      "Line": 74,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.Size": {
      "Name": "WriteRequest.Size",
      "File": "prompb/remote.pb.go",
      "Line": 773,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.String": {
      "Name": "WriteRequest.String",
      "File": "prompb/remote.pb.go",
      "Line": 75,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.Unmarshal": {
      "Name": "WriteRequest.Unmarshal",
      "File": "prompb/remote.pb.go",
      "Line": 913,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.XXX_DiscardUnknown": {
      "Name": "WriteRequest.XXX_DiscardUnknown",
      "File": "prompb/remote.pb.go",
      "Line": 101,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.XXX_Marshal": {
      "Name": "WriteRequest.XXX_Marshal",
      "File": "prompb/remote.pb.go",
      "Line": 83,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.XXX_Merge": {
      "Name": "WriteRequest.XXX_Merge",
      "File": "prompb/remote.pb.go",
      "Line": 95,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.XXX_Size": {
      "Name": "WriteRequest.XXX_Size",
      "File": "prompb/remote.pb.go",
      "Line": 98,
      "Receiver": "WriteRequest"
    },
    "WriteRequest.XXX_Unmarshal": {
      "Name": "WriteRequest.XXX_Unmarshal",
      "File": "prompb/remote.pb.go",
      "Line": 80,
      "Receiver": "WriteRequest"
    },
    "WriteResponseStats.Add": {
      "Name": "WriteResponseStats.Add",
      "File": "storage/remote/stats.go",
      "Line": 55,
      "Receiver": "WriteResponseStats"
    },
    "WriteResponseStats.AllSamples": {
      "Name": "WriteResponseStats.AllSamples",
      "File": "storage/remote/stats.go",
      "Line": 50,
      "Receiver": "WriteResponseStats"
    },
    "WriteResponseStats.NoDataWritten": {
      "Name": "WriteResponseStats.NoDataWritten",
      "File": "storage/remote/stats.go",
      "Line": 45,
      "Receiver": "WriteResponseStats"
    },
    "WriteResponseStats.SetHeaders": {
      "Name": "WriteResponseStats.SetHeaders",
      "File": "storage/remote/stats.go",
      "Line": 65,
      "Receiver": "WriteResponseStats"
    },
    "WriteStorage.Appender": {
      "Name": "WriteStorage.Appender",
      "File": "storage/remote/write.go",
      "Line": 236,
      "Receiver": "WriteStorage"
    },
    "WriteStorage.ApplyConfig": {
      "Name": "WriteStorage.ApplyConfig",
      "File": "storage/remote/write.go",
      "Line": 137,
      "Receiver": "WriteStorage"
    },
    "WriteStorage.Close": {
      "Name": "WriteStorage.Close",
      "File": "storage/remote/write.go",
      "Line": 264,
      "Receiver": "WriteStorage"
    },
    "WriteStorage.LowestSentTimestamp": {
      "Name": "WriteStorage.LowestSentTimestamp",
      "File": "storage/remote/write.go",
      "Line": 244,
      "Receiver": "WriteStorage"
    },
    "WriteStorage.Notify": {
      "Name": "WriteStorage.Notify",
      "File": "storage/remote/write.go",
      "Line": 125,
      "Receiver": "WriteStorage"
    },
    "WriteStorage.run": {
      "Name": "WriteStorage.run",
      "File": "storage/remote/write.go",
      "Line": 112,
      "Receiver": "WriteStorage"
    },
    "Writer.AddSeries": {
      "Name": "Writer.AddSeries",
      "File": "tsdb/index/index.go",
      "Line": 432,
      "Receiver": "Writer"
    },
    "Writer.AddSymbol": {
      "Name": "Writer.AddSymbol",
      "File": "tsdb/index/index.go",
      "Line": 535,
      "Receiver": "Writer"
    },
    "Writer.Close": {
      "Name": "Writer.Close",
      "File": "tsdb/index/index.go",
      "Line": 1057,
      "Receiver": "Writer"
    },
    "Writer.WriteChunks": {
      "Name": "Writer.WriteChunks",
      "File": "tsdb/chunks/chunks.go",
      "Line": 491,
      "Receiver": "Writer"
    },
    "Writer.addPadding": {
      "Name": "Writer.addPadding",
      "File": "tsdb/index/index.go",
      "Line": 268,
      "Receiver": "Writer"
    },
    "Writer.cut": {
      "Name": "Writer.cut",
      "File": "tsdb/chunks/chunks.go",
      "Line": 384,
      "Receiver": "Writer"
    },
    "Writer.ensureStage": {
      "Name": "Writer.ensureStage",
      "File": "tsdb/index/index.go",
      "Line": 356,
      "Receiver": "Writer"
    },
    "Writer.finalizeTail": {
      "Name": "Writer.finalizeTail",
      "File": "tsdb/chunks/chunks.go",
      "Line": 358,
      "Receiver": "Writer"
    },
    "Writer.finishSymbols": {
      "Name": "Writer.finishSymbols",
      "File": "tsdb/index/index.go",
      "Line": 550,
      "Receiver": "Writer"
    },
    "Writer.seq": {
      "Name": "Writer.seq",
      "File": "tsdb/chunks/chunks.go",
      "Line": 590,
      "Receiver": "Writer"
    },
    "Writer.startSymbols": {
      "Name": "Writer.startSymbols",
      "File": "tsdb/index/index.go",
      "Line": 528,
      "Receiver": "Writer"
    },
    "Writer.tail": {
      "Name": "Writer.tail",
      "File": "tsdb/chunks/chunks.go",
      "Line": 349,
      "Receiver": "Writer"
    },
    "Writer.write": {
      "Name": "Writer.write",
      "File": "tsdb/index/index.go",
      "Line": 260,
      "Receiver": "Writer"
    },
    "Writer.writeAt": {
      "Name": "Writer.writeAt",
      "File": "tsdb/index/index.go",
      "Line": 264,
      "Receiver": "Writer"
    },
    "Writer.writeChunks": {
      "Name": "Writer.writeChunks",
      "File": "tsdb/chunks/chunks.go",
      "Line": 555,
      "Receiver": "Writer"
    },
    "Writer.writeLabelIndex": {
      "Name": "Writer.writeLabelIndex",
      "File": "tsdb/index/index.go",
      "Line": 648,
      "Receiver": "Writer"
    },
    "Writer.writeLabelIndexesOffsetTable": {
      "Name": "Writer.writeLabelIndexesOffsetTable",
      "File": "tsdb/index/index.go",
      "Line": 700,
      "Receiver": "Writer"
    },
    "Writer.writeLabelIndices": {
      "Name": "Writer.writeLabelIndices",
      "File": "tsdb/index/index.go",
      "Line": 595,
      "Receiver": "Writer"
    },
    "Writer.writeLengthAndHash": {
      "Name": "Writer.writeLengthAndHash",
      "File": "tsdb/index/index.go",
      "Line": 808,
      "Receiver": "Writer"
    },
    "Writer.writeMeta": {
      "Name": "Writer.writeMeta",
      "File": "tsdb/index/index.go",
      "Line": 423,
      "Receiver": "Writer"
    },
    "Writer.writePosting": {
      "Name": "Writer.writePosting",
      "File": "tsdb/index/index.go",
      "Line": 985,
      "Receiver": "Writer"
    },
    "Writer.writePostings": {
      "Name": "Writer.writePostings",
      "File": "tsdb/index/index.go",
      "Line": 1018,
      "Receiver": "Writer"
    },
    "Writer.writePostingsOffsetTable": {
      "Name": "Writer.writePostingsOffsetTable",
      "File": "tsdb/index/index.go",
      "Line": 737,
      "Receiver": "Writer"
    },
    "Writer.writePostingsToTmpFiles": {
      "Name": "Writer.writePostingsToTmpFiles",
      "File": "tsdb/index/index.go",
      "Line": 845,
      "Receiver": "Writer"
    },
    "Writer.writeTOC": {
      "Name": "Writer.writeTOC",
      "File": "tsdb/index/index.go",
      "Line": 830,
      "Receiver": "Writer"
    },
    "XORChunk.Appender": {
      "Name": "XORChunk.Appender",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 100,
      "Receiver": "XORChunk"
    },
    "XORChunk.Bytes": {
      "Name": "XORChunk.Bytes",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 79,
      "Receiver": "XORChunk"
    },
    "XORChunk.Compact": {
      "Name": "XORChunk.Compact",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 89,
      "Receiver": "XORChunk"
    },
    "XORChunk.Encoding": {
      "Name": "XORChunk.Encoding",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 74,
      "Receiver": "XORChunk"
    },
    "XORChunk.Iterator": {
      "Name": "XORChunk.Iterator",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 144,
      "Receiver": "XORChunk"
    },
    "XORChunk.NumSamples": {
      "Name": "XORChunk.NumSamples",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 84,
      "Receiver": "XORChunk"
    },
    "XORChunk.Reset": {
      "Name": "XORChunk.Reset",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 69,
      "Receiver": "XORChunk"
    },
    "XORChunk.iterator": {
      "Name": "XORChunk.iterator",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 126,
      "Receiver": "XORChunk"
    },
    "ZookeeperLogger.Printf": {
      "Name": "ZookeeperLogger.Printf",
      "File": "util/treecache/treecache.go",
      "Line": 60,
      "Receiver": "ZookeeperLogger"
    },
    "ZookeeperTreeCache.Stop": {
      "Name": "ZookeeperTreeCache.Stop",
      "File": "util/treecache/treecache.go",
      "Line": 114,
      "Receiver": "ZookeeperTreeCache"
    },
    "ZookeeperTreeCache.loop": {
      "Name": "ZookeeperTreeCache.loop",
      "File": "util/treecache/treecache.go",
      "Line": 130,
      "Receiver": "ZookeeperTreeCache"
    },
    "ZookeeperTreeCache.recursiveDelete": {
      "Name": "ZookeeperTreeCache.recursiveDelete",
      "File": "util/treecache/treecache.go",
      "Line": 295,
      "Receiver": "ZookeeperTreeCache"
    },
    "ZookeeperTreeCache.recursiveNodeUpdate": {
      "Name": "ZookeeperTreeCache.recursiveNodeUpdate",
      "File": "util/treecache/treecache.go",
      "Line": 214,
      "Receiver": "ZookeeperTreeCache"
    },
    "ZookeeperTreeCache.recursiveStop": {
      "Name": "ZookeeperTreeCache.recursiveStop",
      "File": "util/treecache/treecache.go",
      "Line": 309,
      "Receiver": "ZookeeperTreeCache"
    },
    "ZookeeperTreeCache.resyncState": {
      "Name": "ZookeeperTreeCache.resyncState",
      "File": "util/treecache/treecache.go",
      "Line": 285,
      "Receiver": "ZookeeperTreeCache"
    },
    "_newJSONEntry": {
      "Name": "_newJSONEntry",
      "File": "promql/query_logger.go",
      "Line": 176,
      "Receiver": ""
    },
    "acceptEncodingHeader": {
      "Name": "acceptEncodingHeader",
      "File": "scrape/scrape.go",
      "Line": 805,
      "Receiver": ""
    },
    "acceptHeader": {
      "Name": "acceptHeader",
      "File": "scrape/scrape.go",
      "Line": 787,
      "Receiver": ""
    },
    "acceptRemainingDuration": {
      "Name": "acceptRemainingDuration",
      "File": "promql/parser/lex.go",
      "Line": 943,
      "Receiver": ""
    },
    "addBuckets": {
      "Name": "addBuckets",
      "File": "model/histogram/float_histogram.go",
      "Line": 1205,
      "Receiver": ""
    },
    "addF": {
      "Name": "addF",
      "File": "storage/buffer.go",
      "Line": 591,
      "Receiver": ""
    },
    "addFH": {
      "Name": "addFH",
      "File": "storage/buffer.go",
      "Line": 674,
      "Receiver": ""
    },
    "addH": {
      "Name": "addH",
      "File": "storage/buffer.go",
      "Line": 630,
      "Receiver": ""
    },
    "addNativeHistogramsToTestSuite": {
      "Name": "addNativeHistogramsToTestSuite",
      "File": "storage/remote/read_handler_test.go",
      "Line": 434,
      "Receiver": ""
    },
    "addNodeLabels": {
      "Name": "addNodeLabels",
      "File": "discovery/kubernetes/endpoints.go",
      "Line": 484,
      "Receiver": ""
    },
    "addObjectMetaLabels": {
      "Name": "addObjectMetaLabels",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 786,
      "Receiver": ""
    },
    "addResourceTargetInfo": {
      "Name": "addResourceTargetInfo",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 596,
      "Receiver": ""
    },
    "addSample": {
      "Name": "addSample",
      "File": "storage/buffer.go",
      "Line": 552,
      "Receiver": ""
    },
    "addToSeries": {
      "Name": "addToSeries",
      "File": "promql/engine.go",
      "Line": 3600,
      "Receiver": ""
    },
    "adjustForInserts": {
      "Name": "adjustForInserts",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 576,
      "Receiver": ""
    },
    "agentOnlyFlag": {
      "Name": "agentOnlyFlag",
      "File": "cmd/prometheus/main.go",
      "Line": 168,
      "Receiver": ""
    },
    "agentOptions.ToAgentOptions": {
      "Name": "agentOptions.ToAgentOptions",
      "File": "cmd/prometheus/main.go",
      "Line": 1902,
      "Receiver": "agentOptions"
    },
    "aggrHistOverTime": {
      "Name": "aggrHistOverTime",
      "File": "promql/functions.go",
      "Line": 665,
      "Receiver": ""
    },
    "aggrOverTime": {
      "Name": "aggrOverTime",
      "File": "promql/functions.go",
      "Line": 659,
      "Receiver": ""
    },
    "aggregationTemporality": {
      "Name": "aggregationTemporality",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 234,
      "Receiver": ""
    },
    "alertmanagerLabels.url": {
      "Name": "alertmanagerLabels.url",
      "File": "notifier/alertmanager.go",
      "Line": 38,
      "Receiver": "alertmanagerLabels"
    },
    "alertmanagerMock.url": {
      "Name": "alertmanagerMock.url",
      "File": "notifier/manager_test.go",
      "Line": 584,
      "Receiver": "alertmanagerMock"
    },
    "alertmanagerSet.configHash": {
      "Name": "alertmanagerSet.configHash",
      "File": "notifier/alertmanagerset.go",
      "Line": 121,
      "Receiver": "alertmanagerSet"
    },
    "alertmanagerSet.sync": {
      "Name": "alertmanagerSet.sync",
      "File": "notifier/alertmanagerset.go",
      "Line": 72,
      "Receiver": "alertmanagerSet"
    },
    "alertsEqual": {
      "Name": "alertsEqual",
      "File": "notifier/manager_test.go",
      "Line": 64,
      "Receiver": ""
    },
    "alertsToOpenAPIAlerts": {
      "Name": "alertsToOpenAPIAlerts",
      "File": "notifier/util.go",
      "Line": 23,
      "Receiver": ""
    },
    "alignedBlock": {
      "Name": "alignedBlock",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 292,
      "Receiver": ""
    },
    "alignmentOffset": {
      "Name": "alignmentOffset",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 270,
      "Receiver": ""
    },
    "allEmptySpans": {
      "Name": "allEmptySpans",
      "File": "promql/promqltest/test.go",
      "Line": 1132,
      "Receiver": ""
    },
    "allFloatBucketIterator.At": {
      "Name": "allFloatBucketIterator.At",
      "File": "model/histogram/float_histogram.go",
      "Line": 1188,
      "Receiver": "allFloatBucketIterator"
    },
    "allFloatBucketIterator.Next": {
      "Name": "allFloatBucketIterator.Next",
      "File": "model/histogram/float_histogram.go",
      "Line": 1148,
      "Receiver": "allFloatBucketIterator"
    },
    "allSegments": {
      "Name": "allSegments",
      "File": "tsdb/wlog/reader_test.go",
      "Line": 293,
      "Receiver": ""
    },
    "analyzeBlock": {
      "Name": "analyzeBlock",
      "File": "cmd/promtool/tsdb.go",
      "Line": 414,
      "Receiver": ""
    },
    "analyzeCompaction": {
      "Name": "analyzeCompaction",
      "File": "cmd/promtool/tsdb.go",
      "Line": 613,
      "Receiver": ""
    },
    "annoErr.Error": {
      "Name": "annoErr.Error",
      "File": "util/annotations/annotations.go",
      "Line": 166,
      "Receiver": "annoErr"
    },
    "annoErr.Unwrap": {
      "Name": "annoErr.Unwrap",
      "File": "util/annotations/annotations.go",
      "Line": 173,
      "Receiver": "annoErr"
    },
    "anyNonEmptyStringMatcher.Matches": {
      "Name": "anyNonEmptyStringMatcher.Matches",
      "File": "model/labels/regexp.go",
      "Line": 911,
      "Receiver": "anyNonEmptyStringMatcher"
    },
    "anyStringWithoutNewlineMatcher.Matches": {
      "Name": "anyStringWithoutNewlineMatcher.Matches",
      "File": "model/labels/regexp.go",
      "Line": 900,
      "Receiver": "anyStringWithoutNewlineMatcher"
    },
    "apiError.Error": {
      "Name": "apiError.Error",
      "File": "web/api/v1/api.go",
      "Line": 97,
      "Receiver": "apiError"
    },
    "app.isContainerNet": {
      "Name": "app.isContainerNet",
      "File": "discovery/marathon/marathon.go",
      "Line": 328,
      "Receiver": "app"
    },
    "appendChunk": {
      "Name": "appendChunk",
      "File": "storage/series.go",
      "Line": 420,
      "Receiver": ""
    },
    "appendLabelTo": {
      "Name": "appendLabelTo",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 579,
      "Receiver": ""
    },
    "appendSample": {
      "Name": "appendSample",
      "File": "promql/promqltest/test.go",
      "Line": 674,
      "Receiver": ""
    },
    "appendSeries": {
      "Name": "appendSeries",
      "File": "tsdb/querier_test.go",
      "Line": 3125,
      "Receiver": ""
    },
    "appendSeriesChunks": {
      "Name": "appendSeriesChunks",
      "File": "tsdb/head_read.go",
      "Line": 204,
      "Receiver": ""
    },
    "appendWithExponentialGrowth": {
      "Name": "appendWithExponentialGrowth",
      "File": "tsdb/index/postings.go",
      "Line": 414,
      "Receiver": ""
    },
    "appender": {
      "Name": "appender",
      "File": "scrape/scrape.go",
      "Line": 725,
      "Receiver": ""
    },
    "appender.Append": {
      "Name": "appender.Append",
      "File": "tsdb/agent/db.go",
      "Line": 803,
      "Receiver": "appender"
    },
    "appender.AppendCTZeroSample": {
      "Name": "appender.AppendCTZeroSample",
      "File": "tsdb/agent/db.go",
      "Line": 1069,
      "Receiver": "appender"
    },
    "appender.AppendExemplar": {
      "Name": "appender.AppendExemplar",
      "File": "tsdb/agent/db.go",
      "Line": 866,
      "Receiver": "appender"
    },
    "appender.AppendHistogram": {
      "Name": "appender.AppendHistogram",
      "File": "tsdb/agent/db.go",
      "Line": 919,
      "Receiver": "appender"
    },
    "appender.AppendHistogramCTZeroSample": {
      "Name": "appender.AppendHistogramCTZeroSample",
      "File": "tsdb/agent/db.go",
      "Line": 996,
      "Receiver": "appender"
    },
    "appender.Commit": {
      "Name": "appender.Commit",
      "File": "tsdb/agent/db.go",
      "Line": 1125,
      "Receiver": "appender"
    },
    "appender.Rollback": {
      "Name": "appender.Rollback",
      "File": "tsdb/agent/db.go",
      "Line": 1245,
      "Receiver": "appender"
    },
    "appender.SetOptions": {
      "Name": "appender.SetOptions",
      "File": "tsdb/agent/db.go",
      "Line": 799,
      "Receiver": "appender"
    },
    "appender.UpdateMetadata": {
      "Name": "appender.UpdateMetadata",
      "File": "tsdb/agent/db.go",
      "Line": 991,
      "Receiver": "appender"
    },
    "appender.clearData": {
      "Name": "appender.clearData",
      "File": "tsdb/agent/db.go",
      "Line": 1234,
      "Receiver": "appender"
    },
    "appender.getOrCreate": {
      "Name": "appender.getOrCreate",
      "File": "tsdb/agent/db.go",
      "Line": 852,
      "Receiver": "appender"
    },
    "appender.log": {
      "Name": "appender.log",
      "File": "tsdb/agent/db.go",
      "Line": 1140,
      "Receiver": "appender"
    },
    "appender.logSeries": {
      "Name": "appender.logSeries",
      "File": "tsdb/agent/db.go",
      "Line": 1259,
      "Receiver": "appender"
    },
    "appender.minValidTime": {
      "Name": "appender.minValidTime",
      "File": "tsdb/agent/db.go",
      "Line": 1282,
      "Receiver": "appender"
    },
    "appenderCommitContext.collectOOORecords": {
      "Name": "appenderCommitContext.collectOOORecords",
      "File": "tsdb/head_append.go",
      "Line": 1058,
      "Receiver": "appenderCommitContext"
    },
    "applyConfig": {
      "Name": "applyConfig",
      "File": "scrape/manager_test.go",
      "Line": 1060,
      "Receiver": ""
    },
    "appsToTargetGroups": {
      "Name": "appsToTargetGroups",
      "File": "discovery/marathon/marathon.go",
      "Line": 383,
      "Receiver": ""
    },
    "askServerForName": {
      "Name": "askServerForName",
      "File": "discovery/dns/dns.go",
      "Line": 364,
      "Receiver": ""
    },
    "assertAPIError": {
      "Name": "assertAPIError",
      "File": "web/api/v1/api_test.go",
      "Line": 3759,
      "Receiver": ""
    },
    "assertAPIResponse": {
      "Name": "assertAPIResponse",
      "File": "web/api/v1/api_test.go",
      "Line": 3770,
      "Receiver": ""
    },
    "assertAPIResponseLength": {
      "Name": "assertAPIResponseLength",
      "File": "web/api/v1/api_test.go",
      "Line": 3776,
      "Receiver": ""
    },
    "assertAPIResponseMetadataLen": {
      "Name": "assertAPIResponseMetadataLen",
      "File": "web/api/v1/api_test.go",
      "Line": 3783,
      "Receiver": ""
    },
    "assertDeepCopyFHSpans": {
      "Name": "assertDeepCopyFHSpans",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 364,
      "Receiver": ""
    },
    "assertDeepCopyHSpans": {
      "Name": "assertDeepCopyHSpans",
      "File": "model/histogram/histogram_test.go",
      "Line": 947,
      "Receiver": ""
    },
    "assertEqualGroups": {
      "Name": "assertEqualGroups",
      "File": "discovery/manager_test.go",
      "Line": 710,
      "Receiver": ""
    },
    "assertFirstFloatHistogramSampleHint": {
      "Name": "assertFirstFloatHistogramSampleHint",
      "File": "tsdb/chunkenc/float_histogram_test.go",
      "Line": 1417,
      "Receiver": ""
    },
    "assertFirstIntHistogramSampleHint": {
      "Name": "assertFirstIntHistogramSampleHint",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 1773,
      "Receiver": ""
    },
    "assertMatrixSorted": {
      "Name": "assertMatrixSorted",
      "File": "promql/promqltest/test.go",
      "Line": 1445,
      "Receiver": ""
    },
    "assertMigration": {
      "Name": "assertMigration",
      "File": "promql/promqltest/test_migrate_test.go",
      "Line": 38,
      "Receiver": ""
    },
    "assertNewFloatHistogramChunkOnAppend": {
      "Name": "assertNewFloatHistogramChunkOnAppend",
      "File": "tsdb/chunkenc/float_histogram_test.go",
      "Line": 717,
      "Receiver": ""
    },
    "assertNewHistogramChunkOnAppend": {
      "Name": "assertNewHistogramChunkOnAppend",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 776,
      "Receiver": ""
    },
    "assertNoNewFloatHistogramChunkOnAppend": {
      "Name": "assertNoNewFloatHistogramChunkOnAppend",
      "File": "tsdb/chunkenc/float_histogram_test.go",
      "Line": 732,
      "Receiver": ""
    },
    "assertNoNewHistogramChunkOnAppend": {
      "Name": "assertNoNewHistogramChunkOnAppend",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 791,
      "Receiver": ""
    },
    "assertRecodedFloatHistogramChunkOnAppend": {
      "Name": "assertRecodedFloatHistogramChunkOnAppend",
      "File": "tsdb/chunkenc/float_histogram_test.go",
      "Line": 745,
      "Receiver": ""
    },
    "assertRecodedHistogramChunkOnAppend": {
      "Name": "assertRecodedHistogramChunkOnAppend",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 804,
      "Receiver": ""
    },
    "assertSampleCount": {
      "Name": "assertSampleCount",
      "File": "tsdb/chunkenc/histogram_test.go",
      "Line": 818,
      "Receiver": ""
    },
    "assureChunkFromSamples": {
      "Name": "assureChunkFromSamples",
      "File": "tsdb/db_test.go",
      "Line": 2793,
      "Receiver": ""
    },
    "atModifierTestCases": {
      "Name": "atModifierTestCases",
      "File": "promql/promqltest/test.go",
      "Line": 1207,
      "Receiver": ""
    },
    "authTokenFileRoundTripper.RoundTrip": {
      "Name": "authTokenFileRoundTripper.RoundTrip",
      "File": "discovery/scaleway/scaleway.go",
      "Line": 253,
      "Receiver": "authTokenFileRoundTripper"
    },
    "authTokenRoundTripper.RoundTrip": {
      "Name": "authTokenRoundTripper.RoundTrip",
      "File": "discovery/marathon/marathon.go",
      "Line": 191,
      "Receiver": "authTokenRoundTripper"
    },
    "azureADRoundTripper.RoundTrip": {
      "Name": "azureADRoundTripper.RoundTrip",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 209,
      "Receiver": "azureADRoundTripper"
    },
    "azureClient.getScaleSetVMs": {
      "Name": "azureClient.getScaleSetVMs",
      "File": "discovery/azure/azure.go",
      "Line": 564,
      "Receiver": "azureClient"
    },
    "azureClient.getScaleSets": {
      "Name": "azureClient.getScaleSets",
      "File": "discovery/azure/azure.go",
      "Line": 536,
      "Receiver": "azureClient"
    },
    "azureClient.getVMNetworkInterfaceByID": {
      "Name": "azureClient.getVMNetworkInterfaceByID",
      "File": "discovery/azure/azure.go",
      "Line": 681,
      "Receiver": "azureClient"
    },
    "azureClient.getVMScaleSetVMNetworkInterfaceByID": {
      "Name": "azureClient.getVMScaleSetVMNetworkInterfaceByID",
      "File": "discovery/azure/azure.go",
      "Line": 701,
      "Receiver": "azureClient"
    },
    "azureClient.getVMs": {
      "Name": "azureClient.getVMs",
      "File": "discovery/azure/azure.go",
      "Line": 508,
      "Receiver": "azureClient"
    },
    "azureMetrics.Register": {
      "Name": "azureMetrics.Register",
      "File": "discovery/azure/metrics.go",
      "Line": 57,
      "Receiver": "azureMetrics"
    },
    "azureMetrics.Unregister": {
      "Name": "azureMetrics.Unregister",
      "File": "discovery/azure/metrics.go",
      "Line": 62,
      "Receiver": "azureMetrics"
    },
    "backfill": {
      "Name": "backfill",
      "File": "cmd/promtool/backfill.go",
      "Line": 232,
      "Receiver": ""
    },
    "backfillOpenMetrics": {
      "Name": "backfillOpenMetrics",
      "File": "cmd/promtool/tsdb.go",
      "Line": 827,
      "Receiver": ""
    },
    "baremetalDiscovery.refresh": {
      "Name": "baremetalDiscovery.refresh",
      "File": "discovery/scaleway/baremetal.go",
      "Line": 106,
      "Receiver": "baremetalDiscovery"
    },
    "baseRemoteReadConfig": {
      "Name": "baseRemoteReadConfig",
      "File": "storage/remote/storage_test.go",
      "Line": 143,
      "Receiver": ""
    },
    "baseRemoteWriteConfig": {
      "Name": "baseRemoteWriteConfig",
      "File": "storage/remote/storage_test.go",
      "Line": 131,
      "Receiver": ""
    },
    "benchExpFmt": {
      "Name": "benchExpFmt",
      "File": "model/textparse/benchmark_test.go",
      "Line": 216,
      "Receiver": ""
    },
    "benchParse": {
      "Name": "benchParse",
      "File": "model/textparse/benchmark_test.go",
      "Line": 141,
      "Receiver": ""
    },
    "benchQuery": {
      "Name": "benchQuery",
      "File": "tsdb/querier_test.go",
      "Line": 3282,
      "Receiver": ""
    },
    "benchmarkAppender": {
      "Name": "benchmarkAppender",
      "File": "tsdb/chunkenc/chunk_test.go",
      "Line": 283,
      "Receiver": ""
    },
    "benchmarkDrain": {
      "Name": "benchmarkDrain",
      "File": "storage/merge_test.go",
      "Line": 1351,
      "Receiver": ""
    },
    "benchmarkIterator": {
      "Name": "benchmarkIterator",
      "File": "tsdb/chunkenc/chunk_test.go",
      "Line": 203,
      "Receiver": ""
    },
    "benchmarkLabelValuesWithMatchers": {
      "Name": "benchmarkLabelValuesWithMatchers",
      "File": "tsdb/querier_bench_test.go",
      "Line": 186,
      "Receiver": ""
    },
    "benchmarkPostingsForMatchers": {
      "Name": "benchmarkPostingsForMatchers",
      "File": "tsdb/querier_bench_test.go",
      "Line": 101,
      "Receiver": ""
    },
    "benchmarkSelect": {
      "Name": "benchmarkSelect",
      "File": "tsdb/querier_bench_test.go",
      "Line": 284,
      "Receiver": ""
    },
    "benchmarkWrite": {
      "Name": "benchmarkWrite",
      "File": "cmd/promtool/tsdb.go",
      "Line": 67,
      "Receiver": ""
    },
    "bigEndianPostings.At": {
      "Name": "bigEndianPostings.At",
      "File": "tsdb/index/postings.go",
      "Line": 884,
      "Receiver": "bigEndianPostings"
    },
    "bigEndianPostings.Err": {
      "Name": "bigEndianPostings.Err",
      "File": "tsdb/index/postings.go",
      "Line": 917,
      "Receiver": "bigEndianPostings"
    },
    "bigEndianPostings.Next": {
      "Name": "bigEndianPostings.Next",
      "File": "tsdb/index/postings.go",
      "Line": 888,
      "Receiver": "bigEndianPostings"
    },
    "bigEndianPostings.Seek": {
      "Name": "bigEndianPostings.Seek",
      "File": "tsdb/index/postings.go",
      "Line": 897,
      "Receiver": "bigEndianPostings"
    },
    "bitRange": {
      "Name": "bitRange",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 218,
      "Receiver": ""
    },
    "bitRangeUint": {
      "Name": "bitRangeUint",
      "File": "tsdb/chunkenc/varbit.go",
      "Line": 132,
      "Receiver": ""
    },
    "blockBaseQuerier.Close": {
      "Name": "blockBaseQuerier.Close",
      "File": "tsdb/querier.go",
      "Line": 90,
      "Receiver": "blockBaseQuerier"
    },
    "blockBaseQuerier.LabelNames": {
      "Name": "blockBaseQuerier.LabelNames",
      "File": "tsdb/querier.go",
      "Line": 85,
      "Receiver": "blockBaseQuerier"
    },
    "blockBaseQuerier.LabelValues": {
      "Name": "blockBaseQuerier.LabelValues",
      "File": "tsdb/querier.go",
      "Line": 80,
      "Receiver": "blockBaseQuerier"
    },
    "blockBaseSeriesSet.Err": {
      "Name": "blockBaseSeriesSet.Err",
      "File": "tsdb/querier.go",
      "Line": 584,
      "Receiver": "blockBaseSeriesSet"
    },
    "blockBaseSeriesSet.Next": {
      "Name": "blockBaseSeriesSet.Next",
      "File": "tsdb/querier.go",
      "Line": 503,
      "Receiver": "blockBaseSeriesSet"
    },
    "blockBaseSeriesSet.Warnings": {
      "Name": "blockBaseSeriesSet.Warnings",
      "File": "tsdb/querier.go",
      "Line": 591,
      "Receiver": "blockBaseSeriesSet"
    },
    "blockChunkQuerier.Select": {
      "Name": "blockChunkQuerier.Select",
      "File": "tsdb/querier.go",
      "Line": 165,
      "Receiver": "blockChunkQuerier"
    },
    "blockChunkReader.Close": {
      "Name": "blockChunkReader.Close",
      "File": "tsdb/block.go",
      "Line": 580,
      "Receiver": "blockChunkReader"
    },
    "blockChunkSeriesSet.At": {
      "Name": "blockChunkSeriesSet.At",
      "File": "tsdb/querier.go",
      "Line": 1119,
      "Receiver": "blockChunkSeriesSet"
    },
    "blockDirs": {
      "Name": "blockDirs",
      "File": "tsdb/db.go",
      "Line": 2329,
      "Receiver": ""
    },
    "blockIndexReader.Close": {
      "Name": "blockIndexReader.Close",
      "File": "tsdb/block.go",
      "Line": 549,
      "Receiver": "blockIndexReader"
    },
    "blockIndexReader.LabelNames": {
      "Name": "blockIndexReader.LabelNames",
      "File": "tsdb/block.go",
      "Line": 510,
      "Receiver": "blockIndexReader"
    },
    "blockIndexReader.LabelNamesFor": {
      "Name": "blockIndexReader.LabelNamesFor",
      "File": "tsdb/block.go",
      "Line": 561,
      "Receiver": "blockIndexReader"
    },
    "blockIndexReader.LabelValueFor": {
      "Name": "blockIndexReader.LabelValueFor",
      "File": "tsdb/block.go",
      "Line": 555,
      "Receiver": "blockIndexReader"
    },
    "blockIndexReader.LabelValues": {
      "Name": "blockIndexReader.LabelValues",
      "File": "tsdb/block.go",
      "Line": 498,
      "Receiver": "blockIndexReader"
    },
    "blockIndexReader.Postings": {
      "Name": "blockIndexReader.Postings",
      "File": "tsdb/block.go",
      "Line": 518,
      "Receiver": "blockIndexReader"
    },
    "blockIndexReader.PostingsForAllLabelValues": {
      "Name": "blockIndexReader.PostingsForAllLabelValues",
      "File": "tsdb/block.go",
      "Line": 530,
      "Receiver": "blockIndexReader"
    },
    "blockIndexReader.PostingsForLabelMatching": {
      "Name": "blockIndexReader.PostingsForLabelMatching",
      "File": "tsdb/block.go",
      "Line": 526,
      "Receiver": "blockIndexReader"
    },
    "blockIndexReader.Series": {
      "Name": "blockIndexReader.Series",
      "File": "tsdb/block.go",
      "Line": 542,
      "Receiver": "blockIndexReader"
    },
    "blockIndexReader.ShardedPostings": {
      "Name": "blockIndexReader.ShardedPostings",
      "File": "tsdb/block.go",
      "Line": 538,
      "Receiver": "blockIndexReader"
    },
    "blockIndexReader.SortedLabelValues": {
      "Name": "blockIndexReader.SortedLabelValues",
      "File": "tsdb/block.go",
      "Line": 480,
      "Receiver": "blockIndexReader"
    },
    "blockIndexReader.SortedPostings": {
      "Name": "blockIndexReader.SortedPostings",
      "File": "tsdb/block.go",
      "Line": 534,
      "Receiver": "blockIndexReader"
    },
    "blockIndexReader.Symbols": {
      "Name": "blockIndexReader.Symbols",
      "File": "tsdb/block.go",
      "Line": 476,
      "Receiver": "blockIndexReader"
    },
    "blockQuerier.Select": {
      "Name": "blockQuerier.Select",
      "File": "tsdb/querier.go",
      "Line": 117,
      "Receiver": "blockQuerier"
    },
    "blockSeriesEntry.Iterator": {
      "Name": "blockSeriesEntry.Iterator",
      "File": "tsdb/querier.go",
      "Line": 705,
      "Receiver": "blockSeriesEntry"
    },
    "blockSeriesSet.At": {
      "Name": "blockSeriesSet.At",
      "File": "tsdb/querier.go",
      "Line": 1088,
      "Receiver": "blockSeriesSet"
    },
    "blockTombstoneReader.Close": {
      "Name": "blockTombstoneReader.Close",
      "File": "tsdb/block.go",
      "Line": 570,
      "Receiver": "blockTombstoneReader"
    },
    "blockedResponseRecorder.Flush": {
      "Name": "blockedResponseRecorder.Flush",
      "File": "tsdb/db_test.go",
      "Line": 9438,
      "Receiver": "blockedResponseRecorder"
    },
    "blockedResponseRecorder.Header": {
      "Name": "blockedResponseRecorder.Header",
      "File": "tsdb/db_test.go",
      "Line": 9434,
      "Receiver": "blockedResponseRecorder"
    },
    "blockedResponseRecorder.Write": {
      "Name": "blockedResponseRecorder.Write",
      "File": "tsdb/db_test.go",
      "Line": 9423,
      "Receiver": "blockedResponseRecorder"
    },
    "blockedResponseRecorder.WriteHeader": {
      "Name": "blockedResponseRecorder.WriteHeader",
      "File": "tsdb/db_test.go",
      "Line": 9436,
      "Receiver": "blockedResponseRecorder"
    },
    "boolPtr": {
      "Name": "boolPtr",
      "File": "config/config_test.go",
      "Line": 73,
      "Receiver": ""
    },
    "boolptr": {
      "Name": "boolptr",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 35,
      "Receiver": ""
    },
    "boundedSamples": {
      "Name": "boundedSamples",
      "File": "tsdb/head_test.go",
      "Line": 1866,
      "Receiver": ""
    },
    "bstream.Reset": {
      "Name": "bstream.Reset",
      "File": "tsdb/chunkenc/bstream.go",
      "Line": 56,
      "Receiver": "bstream"
    },
    "bstream.bytes": {
      "Name": "bstream.bytes",
      "File": "tsdb/chunkenc/bstream.go",
      "Line": 61,
      "Receiver": "bstream"
    },
    "bstream.writeBit": {
      "Name": "bstream.writeBit",
      "File": "tsdb/chunkenc/bstream.go",
      "Line": 72,
      "Receiver": "bstream"
    },
    "bstream.writeBits": {
      "Name": "bstream.writeBits",
      "File": "tsdb/chunkenc/bstream.go",
      "Line": 104,
      "Receiver": "bstream"
    },
    "bstream.writeByte": {
      "Name": "bstream.writeByte",
      "File": "tsdb/chunkenc/bstream.go",
      "Line": 87,
      "Receiver": "bstream"
    },
    "bstreamReader.ReadByte": {
      "Name": "bstreamReader.ReadByte",
      "File": "tsdb/chunkenc/bstream.go",
      "Line": 210,
      "Receiver": "bstreamReader"
    },
    "bstreamReader.loadNextBuffer": {
      "Name": "bstreamReader.loadNextBuffer",
      "File": "tsdb/chunkenc/bstream.go",
      "Line": 221,
      "Receiver": "bstreamReader"
    },
    "bstreamReader.readBit": {
      "Name": "bstreamReader.readBit",
      "File": "tsdb/chunkenc/bstream.go",
      "Line": 141,
      "Receiver": "bstreamReader"
    },
    "bstreamReader.readBitFast": {
      "Name": "bstreamReader.readBitFast",
      "File": "tsdb/chunkenc/bstream.go",
      "Line": 155,
      "Receiver": "bstreamReader"
    },
    "bstreamReader.readBits": {
      "Name": "bstreamReader.readBits",
      "File": "tsdb/chunkenc/bstream.go",
      "Line": 167,
      "Receiver": "bstreamReader"
    },
    "bstreamReader.readBitsFast": {
      "Name": "bstreamReader.readBitsFast",
      "File": "tsdb/chunkenc/bstream.go",
      "Line": 199,
      "Receiver": "bstreamReader"
    },
    "btos": {
      "Name": "btos",
      "File": "promql/engine.go",
      "Line": 3686,
      "Receiver": ""
    },
    "bucketIterator.Next": {
      "Name": "bucketIterator.Next",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 250,
      "Receiver": "bucketIterator"
    },
    "bucketLimitAppender.AppendHistogram": {
      "Name": "bucketLimitAppender.AppendHistogram",
      "File": "scrape/target.go",
      "Line": 373,
      "Receiver": "bucketLimitAppender"
    },
    "buildClients": {
      "Name": "buildClients",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/main.go",
      "Line": 166,
      "Receiver": ""
    },
    "buildDependencyMap": {
      "Name": "buildDependencyMap",
      "File": "rules/group.go",
      "Line": 1104,
      "Receiver": ""
    },
    "buildTestChunks": {
      "Name": "buildTestChunks",
      "File": "storage/remote/codec_test.go",
      "Line": 1022,
      "Receiver": ""
    },
    "buildTimeSeries": {
      "Name": "buildTimeSeries",
      "File": "storage/remote/queue_manager.go",
      "Line": 2059,
      "Receiver": ""
    },
    "buildTracerProvider": {
      "Name": "buildTracerProvider",
      "File": "tracing/tracing.go",
      "Line": 131,
      "Receiver": ""
    },
    "buildV2TimeSeries": {
      "Name": "buildV2TimeSeries",
      "File": "storage/remote/queue_manager.go",
      "Line": 2171,
      "Receiver": ""
    },
    "buildV2WriteRequest": {
      "Name": "buildV2WriteRequest",
      "File": "storage/remote/queue_manager.go",
      "Line": 2142,
      "Receiver": ""
    },
    "buildWriteRequest": {
      "Name": "buildWriteRequest",
      "File": "storage/remote/queue_manager.go",
      "Line": 2113,
      "Receiver": ""
    },
    "byBucketBoundsData.Len": {
      "Name": "byBucketBoundsData.Len",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 72,
      "Receiver": "byBucketBoundsData"
    },
    "byBucketBoundsData.Less": {
      "Name": "byBucketBoundsData.Less",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 73,
      "Receiver": "byBucketBoundsData"
    },
    "byBucketBoundsData.Swap": {
      "Name": "byBucketBoundsData.Swap",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 74,
      "Receiver": "byBucketBoundsData"
    },
    "byGroupSource.Len": {
      "Name": "byGroupSource.Len",
      "File": "discovery/manager_test.go",
      "Line": 1431,
      "Receiver": "byGroupSource"
    },
    "byGroupSource.Less": {
      "Name": "byGroupSource.Less",
      "File": "discovery/manager_test.go",
      "Line": 1433,
      "Receiver": "byGroupSource"
    },
    "byGroupSource.Swap": {
      "Name": "byGroupSource.Swap",
      "File": "discovery/manager_test.go",
      "Line": 1432,
      "Receiver": "byGroupSource"
    },
    "byLabels.Len": {
      "Name": "byLabels.Len",
      "File": "web/api/v1/api_test.go",
      "Line": 538,
      "Receiver": "byLabels"
    },
    "byLabels.Less": {
      "Name": "byLabels.Less",
      "File": "web/api/v1/api_test.go",
      "Line": 540,
      "Receiver": "byLabels"
    },
    "byLabels.Swap": {
      "Name": "byLabels.Swap",
      "File": "web/api/v1/api_test.go",
      "Line": 539,
      "Receiver": "byLabels"
    },
    "calcClassicBucketStatistics": {
      "Name": "calcClassicBucketStatistics",
      "File": "cmd/promtool/analyze.go",
      "Line": 193,
      "Receiver": ""
    },
    "calcNativeBucketStatistics": {
      "Name": "calcNativeBucketStatistics",
      "File": "cmd/promtool/analyze.go",
      "Line": 282,
      "Receiver": ""
    },
    "calcTrendValue": {
      "Name": "calcTrendValue",
      "File": "promql/functions.go",
      "Line": 425,
      "Receiver": ""
    },
    "calculateChecksum": {
      "Name": "calculateChecksum",
      "File": "config/reload_test.go",
      "Line": 241,
      "Receiver": ""
    },
    "callbackCloser.Close": {
      "Name": "callbackCloser.Close",
      "File": "util/testutil/directory.go",
      "Line": 83,
      "Receiver": "callbackCloser"
    },
    "captureLogsToTLog": {
      "Name": "captureLogsToTLog",
      "File": "cmd/prometheus/reload_test.go",
      "Line": 191,
      "Receiver": ""
    },
    "chainSampleIterator.At": {
      "Name": "chainSampleIterator.At",
      "File": "storage/merge.go",
      "Line": 557,
      "Receiver": "chainSampleIterator"
    },
    "chainSampleIterator.AtFloatHistogram": {
      "Name": "chainSampleIterator.AtFloatHistogram",
      "File": "storage/merge.go",
      "Line": 581,
      "Receiver": "chainSampleIterator"
    },
    "chainSampleIterator.AtHistogram": {
      "Name": "chainSampleIterator.AtHistogram",
      "File": "storage/merge.go",
      "Line": 564,
      "Receiver": "chainSampleIterator"
    },
    "chainSampleIterator.AtT": {
      "Name": "chainSampleIterator.AtT",
      "File": "storage/merge.go",
      "Line": 598,
      "Receiver": "chainSampleIterator"
    },
    "chainSampleIterator.Err": {
      "Name": "chainSampleIterator.Err",
      "File": "storage/merge.go",
      "Line": 684,
      "Receiver": "chainSampleIterator"
    },
    "chainSampleIterator.Next": {
      "Name": "chainSampleIterator.Next",
      "File": "storage/merge.go",
      "Line": 605,
      "Receiver": "chainSampleIterator"
    },
    "chainSampleIterator.Seek": {
      "Name": "chainSampleIterator.Seek",
      "File": "storage/merge.go",
      "Line": 529,
      "Receiver": "chainSampleIterator"
    },
    "changesMetricSchema": {
      "Name": "changesMetricSchema",
      "File": "promql/engine.go",
      "Line": 3695,
      "Receiver": ""
    },
    "checkAndExpandSeriesSet": {
      "Name": "checkAndExpandSeriesSet",
      "File": "promql/engine.go",
      "Line": 1022,
      "Receiver": ""
    },
    "checkCRC32": {
      "Name": "checkCRC32",
      "File": "tsdb/chunks/chunks.go",
      "Line": 268,
      "Receiver": ""
    },
    "checkConfig": {
      "Name": "checkConfig",
      "File": "cmd/promtool/main.go",
      "Line": 642,
      "Receiver": ""
    },
    "checkCurrVal": {
      "Name": "checkCurrVal",
      "File": "tsdb/querier_test.go",
      "Line": 1814,
      "Receiver": ""
    },
    "checkDuplicates": {
      "Name": "checkDuplicates",
      "File": "cmd/promtool/main.go",
      "Line": 973,
      "Receiver": ""
    },
    "checkErr": {
      "Name": "checkErr",
      "File": "cmd/promtool/tsdb.go",
      "Line": 819,
      "Receiver": ""
    },
    "checkExperimental": {
      "Name": "checkExperimental",
      "File": "cmd/promtool/main.go",
      "Line": 461,
      "Receiver": ""
    },
    "checkFileExists": {
      "Name": "checkFileExists",
      "File": "cmd/promtool/main.go",
      "Line": 633,
      "Receiver": ""
    },
    "checkHistogramBuckets": {
      "Name": "checkHistogramBuckets",
      "File": "model/histogram/generic.go",
      "Line": 399,
      "Receiver": ""
    },
    "checkHistogramCustomBounds": {
      "Name": "checkHistogramCustomBounds",
      "File": "model/histogram/generic.go",
      "Line": 422,
      "Receiver": ""
    },
    "checkHistogramSpans": {
      "Name": "checkHistogramSpans",
      "File": "model/histogram/generic.go",
      "Line": 385,
      "Receiver": ""
    },
    "checkInitialUnalignedOffset": {
      "Name": "checkInitialUnalignedOffset",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 352,
      "Receiver": ""
    },
    "checkMetricsExtended": {
      "Name": "checkMetricsExtended",
      "File": "cmd/promtool/main.go",
      "Line": 1064,
      "Receiver": ""
    },
    "checkOneTarget": {
      "Name": "checkOneTarget",
      "File": "discovery/consul/consul_test.go",
      "Line": 284,
      "Receiver": ""
    },
    "checkRuleGroups": {
      "Name": "checkRuleGroups",
      "File": "cmd/promtool/main.go",
      "Line": 920,
      "Receiver": ""
    },
    "checkRules": {
      "Name": "checkRules",
      "File": "cmd/promtool/main.go",
      "Line": 886,
      "Receiver": ""
    },
    "checkRulesFromStdin": {
      "Name": "checkRulesFromStdin",
      "File": "cmd/promtool/main.go",
      "Line": 848,
      "Receiver": ""
    },
    "checkSDFile": {
      "Name": "checkSDFile",
      "File": "cmd/promtool/main.go",
      "Line": 791,
      "Receiver": ""
    },
    "checkStaticTargets": {
      "Name": "checkStaticTargets",
      "File": "config/config.go",
      "Line": 1233,
      "Receiver": ""
    },
    "checkTLSConfig": {
      "Name": "checkTLSConfig",
      "File": "cmd/promtool/main.go",
      "Line": 769,
      "Receiver": ""
    },
    "checkTargetGroupsForAlertmanager": {
      "Name": "checkTargetGroupsForAlertmanager",
      "File": "cmd/promtool/main.go",
      "Line": 1281,
      "Receiver": ""
    },
    "checkTargetGroupsForScrapeConfig": {
      "Name": "checkTargetGroupsForScrapeConfig",
      "File": "cmd/promtool/main.go",
      "Line": 1291,
      "Receiver": ""
    },
    "checkpointDir": {
      "Name": "checkpointDir",
      "File": "tsdb/wlog/checkpoint.go",
      "Line": 398,
      "Receiver": ""
    },
    "checkpointNum": {
      "Name": "checkpointNum",
      "File": "tsdb/wlog/watcher.go",
      "Line": 712,
      "Receiver": ""
    },
    "chunkBuffer.clear": {
      "Name": "chunkBuffer.clear",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 1135,
      "Receiver": "chunkBuffer"
    },
    "chunkBuffer.get": {
      "Name": "chunkBuffer.get",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 1126,
      "Receiver": "chunkBuffer"
    },
    "chunkBuffer.put": {
      "Name": "chunkBuffer.put",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 1118,
      "Receiver": "chunkBuffer"
    },
    "chunkDir": {
      "Name": "chunkDir",
      "File": "tsdb/block.go",
      "Line": 246,
      "Receiver": ""
    },
    "chunkIteratorHeap.Len": {
      "Name": "chunkIteratorHeap.Len",
      "File": "storage/merge.go",
      "Line": 837,
      "Receiver": "chunkIteratorHeap"
    },
    "chunkIteratorHeap.Less": {
      "Name": "chunkIteratorHeap.Less",
      "File": "storage/merge.go",
      "Line": 840,
      "Receiver": "chunkIteratorHeap"
    },
    "chunkIteratorHeap.Pop": {
      "Name": "chunkIteratorHeap.Pop",
      "File": "storage/merge.go",
      "Line": 853,
      "Receiver": "chunkIteratorHeap"
    },
    "chunkIteratorHeap.Push": {
      "Name": "chunkIteratorHeap.Push",
      "File": "storage/merge.go",
      "Line": 849,
      "Receiver": "chunkIteratorHeap"
    },
    "chunkIteratorHeap.Swap": {
      "Name": "chunkIteratorHeap.Swap",
      "File": "storage/merge.go",
      "Line": 838,
      "Receiver": "chunkIteratorHeap"
    },
    "chunkPos.bytesToWriteForChunk": {
      "Name": "chunkPos.bytesToWriteForChunk",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 175,
      "Receiver": "chunkPos"
    },
    "chunkPos.cutFileOnNextChunk": {
      "Name": "chunkPos.cutFileOnNextChunk",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 152,
      "Receiver": "chunkPos"
    },
    "chunkPos.getNextChunkRef": {
      "Name": "chunkPos.getNextChunkRef",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 128,
      "Receiver": "chunkPos"
    },
    "chunkPos.setSeq": {
      "Name": "chunkPos.setSeq",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 157,
      "Receiver": "chunkPos"
    },
    "chunkPos.shouldCutNewFile": {
      "Name": "chunkPos.shouldCutNewFile",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 163,
      "Receiver": "chunkPos"
    },
    "chunkPos.toNewFile": {
      "Name": "chunkPos.toNewFile",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 145,
      "Receiver": "chunkPos"
    },
    "chunkQuerier.Select": {
      "Name": "chunkQuerier.Select",
      "File": "storage/remote/read.go",
      "Line": 236,
      "Receiver": "chunkQuerier"
    },
    "chunkQuerierAdapter.Select": {
      "Name": "chunkQuerierAdapter.Select",
      "File": "storage/generic.go",
      "Line": 107,
      "Receiver": "chunkQuerierAdapter"
    },
    "chunkSeriesByLabel.Len": {
      "Name": "chunkSeriesByLabel.Len",
      "File": "storage/merge_test.go",
      "Line": 992,
      "Receiver": "chunkSeriesByLabel"
    },
    "chunkSeriesByLabel.Less": {
      "Name": "chunkSeriesByLabel.Less",
      "File": "storage/merge_test.go",
      "Line": 994,
      "Receiver": "chunkSeriesByLabel"
    },
    "chunkSeriesByLabel.Swap": {
      "Name": "chunkSeriesByLabel.Swap",
      "File": "storage/merge_test.go",
      "Line": 993,
      "Receiver": "chunkSeriesByLabel"
    },
    "chunkSeriesEntry.Iterator": {
      "Name": "chunkSeriesEntry.Iterator",
      "File": "tsdb/querier.go",
      "Line": 720,
      "Receiver": "chunkSeriesEntry"
    },
    "chunkSeriesMergerAdapter.Merge": {
      "Name": "chunkSeriesMergerAdapter.Merge",
      "File": "storage/generic.go",
      "Line": 127,
      "Receiver": "chunkSeriesMergerAdapter"
    },
    "chunkSeriesSetAdapter.At": {
      "Name": "chunkSeriesSetAdapter.At",
      "File": "storage/generic.go",
      "Line": 103,
      "Receiver": "chunkSeriesSetAdapter"
    },
    "chunkSetToSeriesSet.At": {
      "Name": "chunkSetToSeriesSet.At",
      "File": "storage/series.go",
      "Line": 263,
      "Receiver": "chunkSetToSeriesSet"
    },
    "chunkSetToSeriesSet.Err": {
      "Name": "chunkSetToSeriesSet.Err",
      "File": "storage/series.go",
      "Line": 268,
      "Receiver": "chunkSetToSeriesSet"
    },
    "chunkSetToSeriesSet.Next": {
      "Name": "chunkSetToSeriesSet.Next",
      "File": "storage/series.go",
      "Line": 241,
      "Receiver": "chunkSetToSeriesSet"
    },
    "chunkSnapshotDir": {
      "Name": "chunkSnapshotDir",
      "File": "tsdb/head_wal.go",
      "Line": 1404,
      "Receiver": ""
    },
    "chunkWriteQueue.addJob": {
      "Name": "chunkWriteQueue.addJob",
      "File": "tsdb/chunks/chunk_write_queue.go",
      "Line": 183,
      "Receiver": "chunkWriteQueue"
    },
    "chunkWriteQueue.get": {
      "Name": "chunkWriteQueue.get",
      "File": "tsdb/chunks/chunk_write_queue.go",
      "Line": 217,
      "Receiver": "chunkWriteQueue"
    },
    "chunkWriteQueue.processJob": {
      "Name": "chunkWriteQueue.processJob",
      "File": "tsdb/chunks/chunk_write_queue.go",
      "Line": 133,
      "Receiver": "chunkWriteQueue"
    },
    "chunkWriteQueue.queueIsEmpty": {
      "Name": "chunkWriteQueue.queueIsEmpty",
      "File": "tsdb/chunks/chunk_write_queue.go",
      "Line": 244,
      "Receiver": "chunkWriteQueue"
    },
    "chunkWriteQueue.queueIsFull": {
      "Name": "chunkWriteQueue.queueIsFull",
      "File": "tsdb/chunks/chunk_write_queue.go",
      "Line": 248,
      "Receiver": "chunkWriteQueue"
    },
    "chunkWriteQueue.queueSize": {
      "Name": "chunkWriteQueue.queueSize",
      "File": "tsdb/chunks/chunk_write_queue.go",
      "Line": 254,
      "Receiver": "chunkWriteQueue"
    },
    "chunkWriteQueue.shrinkChunkRefMap": {
      "Name": "chunkWriteQueue.shrinkChunkRefMap",
      "File": "tsdb/chunks/chunk_write_queue.go",
      "Line": 154,
      "Receiver": "chunkWriteQueue"
    },
    "chunkWriteQueue.start": {
      "Name": "chunkWriteQueue.start",
      "File": "tsdb/chunks/chunk_write_queue.go",
      "Line": 113,
      "Receiver": "chunkWriteQueue"
    },
    "chunkWriteQueue.stop": {
      "Name": "chunkWriteQueue.stop",
      "File": "tsdb/chunks/chunk_write_queue.go",
      "Line": 229,
      "Receiver": "chunkWriteQueue"
    },
    "chunkedSeries.Iterator": {
      "Name": "chunkedSeries.Iterator",
      "File": "storage/remote/codec.go",
      "Line": 626,
      "Receiver": "chunkedSeries"
    },
    "chunkedSeries.Labels": {
      "Name": "chunkedSeries.Labels",
      "File": "storage/remote/codec.go",
      "Line": 621,
      "Receiver": "chunkedSeries"
    },
    "chunkedSeriesIterator.At": {
      "Name": "chunkedSeriesIterator.At",
      "File": "storage/remote/codec.go",
      "Line": 745,
      "Receiver": "chunkedSeriesIterator"
    },
    "chunkedSeriesIterator.AtFloatHistogram": {
      "Name": "chunkedSeriesIterator.AtFloatHistogram",
      "File": "storage/remote/codec.go",
      "Line": 753,
      "Receiver": "chunkedSeriesIterator"
    },
    "chunkedSeriesIterator.AtHistogram": {
      "Name": "chunkedSeriesIterator.AtHistogram",
      "File": "storage/remote/codec.go",
      "Line": 749,
      "Receiver": "chunkedSeriesIterator"
    },
    "chunkedSeriesIterator.AtT": {
      "Name": "chunkedSeriesIterator.AtT",
      "File": "storage/remote/codec.go",
      "Line": 757,
      "Receiver": "chunkedSeriesIterator"
    },
    "chunkedSeriesIterator.Err": {
      "Name": "chunkedSeriesIterator.Err",
      "File": "storage/remote/codec.go",
      "Line": 761,
      "Receiver": "chunkedSeriesIterator"
    },
    "chunkedSeriesIterator.Next": {
      "Name": "chunkedSeriesIterator.Next",
      "File": "storage/remote/codec.go",
      "Line": 653,
      "Receiver": "chunkedSeriesIterator"
    },
    "chunkedSeriesIterator.Seek": {
      "Name": "chunkedSeriesIterator.Seek",
      "File": "storage/remote/codec.go",
      "Line": 683,
      "Receiver": "chunkedSeriesIterator"
    },
    "chunkedSeriesIterator.reset": {
      "Name": "chunkedSeriesIterator.reset",
      "File": "storage/remote/codec.go",
      "Line": 735,
      "Receiver": "chunkedSeriesIterator"
    },
    "chunkedSeriesIterator.resetIterator": {
      "Name": "chunkedSeriesIterator.resetIterator",
      "File": "storage/remote/codec.go",
      "Line": 719,
      "Receiver": "chunkedSeriesIterator"
    },
    "chunkedSeriesSet.At": {
      "Name": "chunkedSeriesSet.At",
      "File": "storage/remote/codec.go",
      "Line": 602,
      "Receiver": "chunkedSeriesSet"
    },
    "chunkedSeriesSet.Err": {
      "Name": "chunkedSeriesSet.Err",
      "File": "storage/remote/codec.go",
      "Line": 606,
      "Receiver": "chunkedSeriesSet"
    },
    "chunkedSeriesSet.Next": {
      "Name": "chunkedSeriesSet.Next",
      "File": "storage/remote/codec.go",
      "Line": 567,
      "Receiver": "chunkedSeriesSet"
    },
    "chunkedSeriesSet.Warnings": {
      "Name": "chunkedSeriesSet.Warnings",
      "File": "storage/remote/codec.go",
      "Line": 610,
      "Receiver": "chunkedSeriesSet"
    },
    "clamp": {
      "Name": "clamp",
      "File": "promql/functions.go",
      "Line": 576,
      "Receiver": ""
    },
    "clampInterval": {
      "Name": "clampInterval",
      "File": "tsdb/block.go",
      "Line": 732,
      "Receiver": ""
    },
    "classString": {
      "Name": "classString",
      "File": "discovery/kubernetes/ingress_test.go",
      "Line": 91,
      "Receiver": ""
    },
    "cleanupSnapshot": {
      "Name": "cleanupSnapshot",
      "File": "web/web_test.go",
      "Line": 618,
      "Receiver": ""
    },
    "cleanupTestResponse": {
      "Name": "cleanupTestResponse",
      "File": "web/web_test.go",
      "Line": 612,
      "Receiver": ""
    },
    "clearBeginEndText": {
      "Name": "clearBeginEndText",
      "File": "model/labels/regexp.go",
      "Line": 256,
      "Receiver": ""
    },
    "clearCapture": {
      "Name": "clearCapture",
      "File": "model/labels/regexp.go",
      "Line": 246,
      "Receiver": ""
    },
    "clearCmd.String": {
      "Name": "clearCmd.String",
      "File": "promql/promqltest/test.go",
      "Line": 1198,
      "Receiver": "clearCmd"
    },
    "clearCmd.testCmd": {
      "Name": "clearCmd.testCmd",
      "File": "promql/promqltest/test.go",
      "Line": 511,
      "Receiver": "clearCmd"
    },
    "clearIfNotNil": {
      "Name": "clearIfNotNil",
      "File": "model/histogram/generic.go",
      "Line": 781,
      "Receiver": ""
    },
    "clientGoMetrics": {
      "Name": "clientGoMetrics",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 129,
      "Receiver": ""
    },
    "clientGoRequestMetricAdapter.Increment": {
      "Name": "clientGoRequestMetricAdapter.Increment",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 164,
      "Receiver": "clientGoRequestMetricAdapter"
    },
    "clientGoRequestMetricAdapter.Observe": {
      "Name": "clientGoRequestMetricAdapter.Observe",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 168,
      "Receiver": "clientGoRequestMetricAdapter"
    },
    "clientGoRequestMetricAdapter.RegisterWithK8sGoClient": {
      "Name": "clientGoRequestMetricAdapter.RegisterWithK8sGoClient",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 155,
      "Receiver": "clientGoRequestMetricAdapter"
    },
    "clientGoWorkqueueMetricsProvider.NewAddsMetric": {
      "Name": "clientGoWorkqueueMetricsProvider.NewAddsMetric",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 183,
      "Receiver": "clientGoWorkqueueMetricsProvider"
    },
    "clientGoWorkqueueMetricsProvider.NewDepthMetric": {
      "Name": "clientGoWorkqueueMetricsProvider.NewDepthMetric",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 179,
      "Receiver": "clientGoWorkqueueMetricsProvider"
    },
    "clientGoWorkqueueMetricsProvider.NewLatencyMetric": {
      "Name": "clientGoWorkqueueMetricsProvider.NewLatencyMetric",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 187,
      "Receiver": "clientGoWorkqueueMetricsProvider"
    },
    "clientGoWorkqueueMetricsProvider.NewLongestRunningProcessorSecondsMetric": {
      "Name": "clientGoWorkqueueMetricsProvider.NewLongestRunningProcessorSecondsMetric",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 199,
      "Receiver": "clientGoWorkqueueMetricsProvider"
    },
    "clientGoWorkqueueMetricsProvider.NewRetriesMetric": {
      "Name": "clientGoWorkqueueMetricsProvider.NewRetriesMetric",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 203,
      "Receiver": "clientGoWorkqueueMetricsProvider"
    },
    "clientGoWorkqueueMetricsProvider.NewUnfinishedWorkSecondsMetric": {
      "Name": "clientGoWorkqueueMetricsProvider.NewUnfinishedWorkSecondsMetric",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 195,
      "Receiver": "clientGoWorkqueueMetricsProvider"
    },
    "clientGoWorkqueueMetricsProvider.NewWorkDurationMetric": {
      "Name": "clientGoWorkqueueMetricsProvider.NewWorkDurationMetric",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 191,
      "Receiver": "clientGoWorkqueueMetricsProvider"
    },
    "clientGoWorkqueueMetricsProvider.RegisterWithK8sGoClient": {
      "Name": "clientGoWorkqueueMetricsProvider.RegisterWithK8sGoClient",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 175,
      "Receiver": "clientGoWorkqueueMetricsProvider"
    },
    "closeAllFromMap": {
      "Name": "closeAllFromMap",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 1094,
      "Receiver": ""
    },
    "coalesceBuckets": {
      "Name": "coalesceBuckets",
      "File": "promql/quantile.go",
      "Line": 586,
      "Receiver": ""
    },
    "collectResultAppendable.Appender": {
      "Name": "collectResultAppendable.Appender",
      "File": "scrape/helpers_test.go",
      "Line": 118,
      "Receiver": "collectResultAppendable"
    },
    "collectResultAppender.Append": {
      "Name": "collectResultAppender.Append",
      "File": "scrape/helpers_test.go",
      "Line": 142,
      "Receiver": "collectResultAppender"
    },
    "collectResultAppender.AppendCTZeroSample": {
      "Name": "collectResultAppender.AppendCTZeroSample",
      "File": "scrape/helpers_test.go",
      "Line": 208,
      "Receiver": "collectResultAppender"
    },
    "collectResultAppender.AppendExemplar": {
      "Name": "collectResultAppender.AppendExemplar",
      "File": "scrape/helpers_test.go",
      "Line": 165,
      "Receiver": "collectResultAppender"
    },
    "collectResultAppender.AppendHistogram": {
      "Name": "collectResultAppender.AppendHistogram",
      "File": "scrape/helpers_test.go",
      "Line": 176,
      "Receiver": "collectResultAppender"
    },
    "collectResultAppender.AppendHistogramCTZeroSample": {
      "Name": "collectResultAppender.AppendHistogramCTZeroSample",
      "File": "scrape/helpers_test.go",
      "Line": 187,
      "Receiver": "collectResultAppender"
    },
    "collectResultAppender.Commit": {
      "Name": "collectResultAppender.Commit",
      "File": "scrape/helpers_test.go",
      "Line": 212,
      "Receiver": "collectResultAppender"
    },
    "collectResultAppender.Rollback": {
      "Name": "collectResultAppender.Rollback",
      "File": "scrape/helpers_test.go",
      "Line": 229,
      "Receiver": "collectResultAppender"
    },
    "collectResultAppender.SetOptions": {
      "Name": "collectResultAppender.SetOptions",
      "File": "scrape/helpers_test.go",
      "Line": 140,
      "Receiver": "collectResultAppender"
    },
    "collectResultAppender.String": {
      "Name": "collectResultAppender.String",
      "File": "scrape/helpers_test.go",
      "Line": 242,
      "Receiver": "collectResultAppender"
    },
    "collectResultAppender.UpdateMetadata": {
      "Name": "collectResultAppender.UpdateMetadata",
      "File": "scrape/helpers_test.go",
      "Line": 194,
      "Receiver": "collectResultAppender"
    },
    "compactBuckets": {
      "Name": "compactBuckets",
      "File": "model/histogram/generic.go",
      "Line": 179,
      "Receiver": ""
    },
    "compactChunkIterator.At": {
      "Name": "compactChunkIterator.At",
      "File": "storage/merge.go",
      "Line": 754,
      "Receiver": "compactChunkIterator"
    },
    "compactChunkIterator.Err": {
      "Name": "compactChunkIterator.Err",
      "File": "storage/merge.go",
      "Line": 826,
      "Receiver": "compactChunkIterator"
    },
    "compactChunkIterator.Next": {
      "Name": "compactChunkIterator.Next",
      "File": "storage/merge.go",
      "Line": 758,
      "Receiver": "compactChunkIterator"
    },
    "compare": {
      "Name": "compare",
      "File": "cmd/promtool/main.go",
      "Line": 965,
      "Receiver": ""
    },
    "compareNativeHistogram": {
      "Name": "compareNativeHistogram",
      "File": "promql/promqltest/test.go",
      "Line": 1028,
      "Receiver": ""
    },
    "compareOverTime": {
      "Name": "compareOverTime",
      "File": "promql/functions.go",
      "Line": 856,
      "Receiver": ""
    },
    "compareRuleTypes.Len": {
      "Name": "compareRuleTypes.Len",
      "File": "cmd/promtool/main.go",
      "Line": 961,
      "Receiver": "compareRuleTypes"
    },
    "compareRuleTypes.Less": {
      "Name": "compareRuleTypes.Less",
      "File": "cmd/promtool/main.go",
      "Line": 963,
      "Receiver": "compareRuleTypes"
    },
    "compareRuleTypes.Swap": {
      "Name": "compareRuleTypes.Swap",
      "File": "cmd/promtool/main.go",
      "Line": 962,
      "Receiver": "compareRuleTypes"
    },
    "compareSeries": {
      "Name": "compareSeries",
      "File": "tsdb/db_test.go",
      "Line": 9077,
      "Receiver": ""
    },
    "compileCORSRegexString": {
      "Name": "compileCORSRegexString",
      "File": "cmd/prometheus/main.go",
      "Line": 1560,
      "Receiver": ""
    },
    "compressedResponseWriter.Close": {
      "Name": "compressedResponseWriter.Close",
      "File": "util/httputil/compression.go",
      "Line": 45,
      "Receiver": "compressedResponseWriter"
    },
    "compressedResponseWriter.Write": {
      "Name": "compressedResponseWriter.Write",
      "File": "util/httputil/compression.go",
      "Line": 40,
      "Receiver": "compressedResponseWriter"
    },
    "computeAlignmentOffset": {
      "Name": "computeAlignmentOffset",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 274,
      "Receiver": ""
    },
    "computeChunkEndTime": {
      "Name": "computeChunkEndTime",
      "File": "tsdb/head_append.go",
      "Line": 1848,
      "Receiver": ""
    },
    "computeExternalURL": {
      "Name": "computeExternalURL",
      "File": "cmd/prometheus/main.go",
      "Line": 1570,
      "Receiver": ""
    },
    "concatLabels": {
      "Name": "concatLabels",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client.go",
      "Line": 251,
      "Receiver": ""
    },
    "concatenatingChunkIterator.At": {
      "Name": "concatenatingChunkIterator.At",
      "File": "storage/merge.go",
      "Line": 890,
      "Receiver": "concatenatingChunkIterator"
    },
    "concatenatingChunkIterator.Err": {
      "Name": "concatenatingChunkIterator.Err",
      "File": "storage/merge.go",
      "Line": 909,
      "Receiver": "concatenatingChunkIterator"
    },
    "concatenatingChunkIterator.Next": {
      "Name": "concatenatingChunkIterator.Next",
      "File": "storage/merge.go",
      "Line": 894,
      "Receiver": "concatenatingChunkIterator"
    },
    "concreteSeries.Iterator": {
      "Name": "concreteSeries.Iterator",
      "File": "storage/remote/codec.go",
      "Line": 377,
      "Receiver": "concreteSeries"
    },
    "concreteSeries.Labels": {
      "Name": "concreteSeries.Labels",
      "File": "storage/remote/codec.go",
      "Line": 373,
      "Receiver": "concreteSeries"
    },
    "concreteSeriesIterator.At": {
      "Name": "concreteSeriesIterator.At",
      "File": "storage/remote/codec.go",
      "Line": 469,
      "Receiver": "concreteSeriesIterator"
    },
    "concreteSeriesIterator.AtFloatHistogram": {
      "Name": "concreteSeriesIterator.AtFloatHistogram",
      "File": "storage/remote/codec.go",
      "Line": 487,
      "Receiver": "concreteSeriesIterator"
    },
    "concreteSeriesIterator.AtHistogram": {
      "Name": "concreteSeriesIterator.AtHistogram",
      "File": "storage/remote/codec.go",
      "Line": 478,
      "Receiver": "concreteSeriesIterator"
    },
    "concreteSeriesIterator.AtT": {
      "Name": "concreteSeriesIterator.AtT",
      "File": "storage/remote/codec.go",
      "Line": 496,
      "Receiver": "concreteSeriesIterator"
    },
    "concreteSeriesIterator.Err": {
      "Name": "concreteSeriesIterator.Err",
      "File": "storage/remote/codec.go",
      "Line": 539,
      "Receiver": "concreteSeriesIterator"
    },
    "concreteSeriesIterator.Next": {
      "Name": "concreteSeriesIterator.Next",
      "File": "storage/remote/codec.go",
      "Line": 506,
      "Receiver": "concreteSeriesIterator"
    },
    "concreteSeriesIterator.Seek": {
      "Name": "concreteSeriesIterator.Seek",
      "File": "storage/remote/codec.go",
      "Line": 410,
      "Receiver": "concreteSeriesIterator"
    },
    "concreteSeriesIterator.reset": {
      "Name": "concreteSeriesIterator.reset",
      "File": "storage/remote/codec.go",
      "Line": 402,
      "Receiver": "concreteSeriesIterator"
    },
    "concreteSeriesSet.At": {
      "Name": "concreteSeriesSet.At",
      "File": "storage/remote/codec.go",
      "Line": 356,
      "Receiver": "concreteSeriesSet"
    },
    "concreteSeriesSet.Err": {
      "Name": "concreteSeriesSet.Err",
      "File": "storage/remote/codec.go",
      "Line": 360,
      "Receiver": "concreteSeriesSet"
    },
    "concreteSeriesSet.Next": {
      "Name": "concreteSeriesSet.Next",
      "File": "storage/remote/codec.go",
      "Line": 351,
      "Receiver": "concreteSeriesSet"
    },
    "concreteSeriesSet.Warnings": {
      "Name": "concreteSeriesSet.Warnings",
      "File": "storage/remote/codec.go",
      "Line": 364,
      "Receiver": "concreteSeriesSet"
    },
    "concurrentDBuffer.get": {
      "Name": "concurrentDBuffer.get",
      "File": "util/compression/buffers.go",
      "Line": 138,
      "Receiver": "concurrentDBuffer"
    },
    "concurrentDBuffer.set": {
      "Name": "concurrentDBuffer.set",
      "File": "util/compression/buffers.go",
      "Line": 142,
      "Receiver": "concurrentDBuffer"
    },
    "concurrentDBuffer.zstdDecBuf": {
      "Name": "concurrentDBuffer.zstdDecBuf",
      "File": "util/compression/buffers.go",
      "Line": 130,
      "Receiver": "concurrentDBuffer"
    },
    "concurrentEBuffer.get": {
      "Name": "concurrentEBuffer.get",
      "File": "util/compression/buffers.go",
      "Line": 78,
      "Receiver": "concurrentEBuffer"
    },
    "concurrentEBuffer.set": {
      "Name": "concurrentEBuffer.set",
      "File": "util/compression/buffers.go",
      "Line": 82,
      "Receiver": "concurrentEBuffer"
    },
    "concurrentEBuffer.zstdEncBuf": {
      "Name": "concurrentEBuffer.zstdEncBuf",
      "File": "util/compression/buffers.go",
      "Line": 68,
      "Receiver": "concurrentEBuffer"
    },
    "concurrentRuleEvalController.Allow": {
      "Name": "concurrentRuleEvalController.Allow",
      "File": "rules/manager.go",
      "Line": 512,
      "Receiver": "concurrentRuleEvalController"
    },
    "concurrentRuleEvalController.Done": {
      "Name": "concurrentRuleEvalController.Done",
      "File": "rules/manager.go",
      "Line": 552,
      "Receiver": "concurrentRuleEvalController"
    },
    "concurrentRuleEvalController.SplitGroupIntoBatches": {
      "Name": "concurrentRuleEvalController.SplitGroupIntoBatches",
      "File": "rules/manager.go",
      "Line": 516,
      "Receiver": "concurrentRuleEvalController"
    },
    "constantResourceParser": {
      "Name": "constantResourceParser",
      "File": "discovery/xds/xds_test.go",
      "Line": 87,
      "Receiver": ""
    },
    "consulMetrics.Register": {
      "Name": "consulMetrics.Register",
      "File": "discovery/consul/metrics.go",
      "Line": 66,
      "Receiver": "consulMetrics"
    },
    "consulMetrics.Unregister": {
      "Name": "consulMetrics.Unregister",
      "File": "discovery/consul/metrics.go",
      "Line": 71,
      "Receiver": "consulMetrics"
    },
    "consulService.watch": {
      "Name": "consulService.watch",
      "File": "discovery/consul/consul.go",
      "Line": 494,
      "Receiver": "consulService"
    },
    "consumePostings": {
      "Name": "consumePostings",
      "File": "tsdb/index/postings_test.go",
      "Line": 281,
      "Receiver": ""
    },
    "contains": {
      "Name": "contains",
      "File": "util/strutil/quote.go",
      "Line": 235,
      "Receiver": ""
    },
    "containsInOrder": {
      "Name": "containsInOrder",
      "File": "model/labels/regexp.go",
      "Line": 1078,
      "Receiver": ""
    },
    "containsInOrderMulti": {
      "Name": "containsInOrderMulti",
      "File": "model/labels/regexp.go",
      "Line": 1087,
      "Receiver": ""
    },
    "containsStringMatcher.Matches": {
      "Name": "containsStringMatcher.Matches",
      "File": "model/labels/regexp.go",
      "Line": 586,
      "Receiver": "containsStringMatcher"
    },
    "contextDone": {
      "Name": "contextDone",
      "File": "promql/engine_test.go",
      "Line": 145,
      "Receiver": ""
    },
    "contextErr": {
      "Name": "contextErr",
      "File": "promql/engine.go",
      "Line": 257,
      "Receiver": ""
    },
    "convertBucketsLayout": {
      "Name": "convertBucketsLayout",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms.go",
      "Line": 167,
      "Receiver": ""
    },
    "convertKumaUserLabels": {
      "Name": "convertKumaUserLabels",
      "File": "discovery/xds/kuma.go",
      "Line": 132,
      "Receiver": ""
    },
    "convertKumaV1MonitoringAssignment": {
      "Name": "convertKumaV1MonitoringAssignment",
      "File": "discovery/xds/kuma.go",
      "Line": 109,
      "Receiver": ""
    },
    "convertTimeStamp": {
      "Name": "convertTimeStamp",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 667,
      "Receiver": ""
    },
    "convertToEndpoints": {
      "Name": "convertToEndpoints",
      "File": "discovery/kubernetes/endpoints.go",
      "Line": 273,
      "Receiver": ""
    },
    "convertToNode": {
      "Name": "convertToNode",
      "File": "discovery/kubernetes/node.go",
      "Line": 143,
      "Receiver": ""
    },
    "convertToPod": {
      "Name": "convertToPod",
      "File": "discovery/kubernetes/pod.go",
      "Line": 177,
      "Receiver": ""
    },
    "convertToService": {
      "Name": "convertToService",
      "File": "discovery/kubernetes/service.go",
      "Line": 138,
      "Receiver": ""
    },
    "copyChunk": {
      "Name": "copyChunk",
      "File": "tsdb/mocks_test.go",
      "Line": 30,
      "Receiver": ""
    },
    "copyFile": {
      "Name": "copyFile",
      "File": "tsdb/fileutil/fileutil.go",
      "Line": 61,
      "Receiver": ""
    },
    "copyWithCounterReset": {
      "Name": "copyWithCounterReset",
      "File": "tsdb/db_test.go",
      "Line": 7495,
      "Receiver": ""
    },
    "countLinesInFile": {
      "Name": "countLinesInFile",
      "File": "cmd/prometheus/scrape_failure_log_test.go",
      "Line": 180,
      "Receiver": ""
    },
    "countOpenReads": {
      "Name": "countOpenReads",
      "File": "tsdb/isolation_test.go",
      "Line": 73,
      "Receiver": ""
    },
    "countSeriesLifecycleCallback.PostCreation": {
      "Name": "countSeriesLifecycleCallback.PostCreation",
      "File": "tsdb/head_test.go",
      "Line": 6808,
      "Receiver": "countSeriesLifecycleCallback"
    },
    "countSeriesLifecycleCallback.PostDeletion": {
      "Name": "countSeriesLifecycleCallback.PostDeletion",
      "File": "tsdb/head_test.go",
      "Line": 6809,
      "Receiver": "countSeriesLifecycleCallback"
    },
    "countSeriesLifecycleCallback.PreCreation": {
      "Name": "countSeriesLifecycleCallback.PreCreation",
      "File": "tsdb/head_test.go",
      "Line": 6807,
      "Receiver": "countSeriesLifecycleCallback"
    },
    "countSpans": {
      "Name": "countSpans",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 158,
      "Receiver": ""
    },
    "countStaleNaN": {
      "Name": "countStaleNaN",
      "File": "rules/manager_test.go",
      "Line": 1172,
      "Receiver": ""
    },
    "counterAddNonZero": {
      "Name": "counterAddNonZero",
      "File": "tsdb/head_wal.go",
      "Line": 72,
      "Receiver": ""
    },
    "counterResetAsString": {
      "Name": "counterResetAsString",
      "File": "tsdb/testutil.go",
      "Line": 224,
      "Receiver": ""
    },
    "counterResetHint": {
      "Name": "counterResetHint",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 552,
      "Receiver": ""
    },
    "createArgRow": {
      "Name": "createArgRow",
      "File": "util/documentcli/documentcli.go",
      "Line": 108,
      "Receiver": ""
    },
    "createAttributes": {
      "Name": "createAttributes",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 120,
      "Receiver": ""
    },
    "createBlock": {
      "Name": "createBlock",
      "File": "tsdb/block_test.go",
      "Line": 623,
      "Receiver": ""
    },
    "createBlockFromHead": {
      "Name": "createBlockFromHead",
      "File": "tsdb/block_test.go",
      "Line": 629,
      "Receiver": ""
    },
    "createBlockFromOOOHead": {
      "Name": "createBlockFromOOOHead",
      "File": "tsdb/block_test.go",
      "Line": 643,
      "Receiver": ""
    },
    "createBlocks": {
      "Name": "createBlocks",
      "File": "cmd/promtool/backfill.go",
      "Line": 88,
      "Receiver": ""
    },
    "createChunk": {
      "Name": "createChunk",
      "File": "tsdb/chunks/head_chunks_test.go",
      "Line": 567,
      "Receiver": ""
    },
    "createChunkDiskMapper": {
      "Name": "createChunkDiskMapper",
      "File": "tsdb/chunks/head_chunks_test.go",
      "Line": 540,
      "Receiver": ""
    },
    "createClient": {
      "Name": "createClient",
      "File": "discovery/ovhcloud/ovhcloud.go",
      "Line": 98,
      "Receiver": ""
    },
    "createCmdRow": {
      "Name": "createCmdRow",
      "File": "util/documentcli/documentcli.go",
      "Line": 139,
      "Receiver": ""
    },
    "createDialContextWithRoundRobinDNS": {
      "Name": "createDialContextWithRoundRobinDNS",
      "File": "storage/remote/dial_context_test.go",
      "Line": 91,
      "Receiver": ""
    },
    "createDummyTimeSeries": {
      "Name": "createDummyTimeSeries",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1791,
      "Receiver": ""
    },
    "createExemplars": {
      "Name": "createExemplars",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 866,
      "Receiver": ""
    },
    "createExportRequest": {
      "Name": "createExportRequest",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 1020,
      "Receiver": ""
    },
    "createFakeReaderAndIterables": {
      "Name": "createFakeReaderAndIterables",
      "File": "tsdb/querier_test.go",
      "Line": 715,
      "Receiver": ""
    },
    "createFakeReaderAndNotPopulatedChunks": {
      "Name": "createFakeReaderAndNotPopulatedChunks",
      "File": "tsdb/querier_test.go",
      "Line": 694,
      "Receiver": ""
    },
    "createFileReader": {
      "Name": "createFileReader",
      "File": "tsdb/index/index_test.go",
      "Line": 711,
      "Receiver": ""
    },
    "createFlagRow": {
      "Name": "createFlagRow",
      "File": "util/documentcli/documentcli.go",
      "Line": 65,
      "Receiver": ""
    },
    "createHead": {
      "Name": "createHead",
      "File": "tsdb/block_test.go",
      "Line": 657,
      "Receiver": ""
    },
    "createHeadForBenchmarkSelect": {
      "Name": "createHeadForBenchmarkSelect",
      "File": "tsdb/querier_bench_test.go",
      "Line": 260,
      "Receiver": ""
    },
    "createHeadWithOOOSamples": {
      "Name": "createHeadWithOOOSamples",
      "File": "tsdb/block_test.go",
      "Line": 702,
      "Receiver": ""
    },
    "createHistograms": {
      "Name": "createHistograms",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 888,
      "Receiver": ""
    },
    "createIdxChkReaders": {
      "Name": "createIdxChkReaders",
      "File": "tsdb/querier_test.go",
      "Line": 107,
      "Receiver": ""
    },
    "createLabels": {
      "Name": "createLabels",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 529,
      "Receiver": ""
    },
    "createLabelsForAbsentFunction": {
      "Name": "createLabelsForAbsentFunction",
      "File": "promql/functions.go",
      "Line": 1913,
      "Receiver": ""
    },
    "createMockAzureClient": {
      "Name": "createMockAzureClient",
      "File": "discovery/azure/azure_test.go",
      "Line": 678,
      "Receiver": ""
    },
    "createMultiRuleTestFiles": {
      "Name": "createMultiRuleTestFiles",
      "File": "cmd/promtool/rules_test.go",
      "Line": 192,
      "Receiver": ""
    },
    "createOTelEmptyMetricForTranslator": {
      "Name": "createOTelEmptyMetricForTranslator",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 956,
      "Receiver": ""
    },
    "createOTelExponentialHistogramForTranslator": {
      "Name": "createOTelExponentialHistogramForTranslator",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 944,
      "Receiver": ""
    },
    "createOTelGaugeForTranslator": {
      "Name": "createOTelGaugeForTranslator",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 925,
      "Receiver": ""
    },
    "createOTelHistogramForTranslator": {
      "Name": "createOTelHistogramForTranslator",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 938,
      "Receiver": ""
    },
    "createOTelMetricForTranslator": {
      "Name": "createOTelMetricForTranslator",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 917,
      "Receiver": ""
    },
    "createOTelSumForTranslator": {
      "Name": "createOTelSumForTranslator",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 931,
      "Receiver": ""
    },
    "createOTelSummaryForTranslator": {
      "Name": "createOTelSummaryForTranslator",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 950,
      "Receiver": ""
    },
    "createOtelEmptyType": {
      "Name": "createOtelEmptyType",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 808,
      "Receiver": ""
    },
    "createOtelExplicitHistogram": {
      "Name": "createOtelExplicitHistogram",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 670,
      "Receiver": ""
    },
    "createOtelExponentialHistogram": {
      "Name": "createOtelExponentialHistogram",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 636,
      "Receiver": ""
    },
    "createOtelGauge": {
      "Name": "createOtelGauge",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 624,
      "Receiver": ""
    },
    "createOtelSum": {
      "Name": "createOtelSum",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 598,
      "Receiver": ""
    },
    "createOtelSummary": {
      "Name": "createOtelSummary",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 756,
      "Receiver": ""
    },
    "createPromClassicHistogramSeries": {
      "Name": "createPromClassicHistogramSeries",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 713,
      "Receiver": ""
    },
    "createPromFloatSeries": {
      "Name": "createPromFloatSeries",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 611,
      "Receiver": ""
    },
    "createPromNHCBSeries": {
      "Name": "createPromNHCBSeries",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 686,
      "Receiver": ""
    },
    "createPromNativeHistogramSeries": {
      "Name": "createPromNativeHistogramSeries",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 650,
      "Receiver": ""
    },
    "createPromSummarySeries": {
      "Name": "createPromSummarySeries",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 772,
      "Receiver": ""
    },
    "createPrometheusAPI": {
      "Name": "createPrometheusAPI",
      "File": "web/api/v1/errors_test.go",
      "Line": 104,
      "Receiver": ""
    },
    "createProtoTimeseriesWithOld": {
      "Name": "createProtoTimeseriesWithOld",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 842,
      "Receiver": ""
    },
    "createRandomFloatHistogram": {
      "Name": "createRandomFloatHistogram",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 3543,
      "Receiver": ""
    },
    "createRandomSpans": {
      "Name": "createRandomSpans",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 3550,
      "Receiver": ""
    },
    "createSeriesMetadata": {
      "Name": "createSeriesMetadata",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 934,
      "Receiver": ""
    },
    "createSingleRuleTestFiles": {
      "Name": "createSingleRuleTestFiles",
      "File": "cmd/promtool/rules_test.go",
      "Line": 180,
      "Receiver": ""
    },
    "createTargetGroup": {
      "Name": "createTargetGroup",
      "File": "discovery/marathon/marathon.go",
      "Line": 392,
      "Receiver": ""
    },
    "createTestAgentDB": {
      "Name": "createTestAgentDB",
      "File": "tsdb/agent/db_test.go",
      "Line": 90,
      "Receiver": ""
    },
    "createTestHTTPResourceClient": {
      "Name": "createTestHTTPResourceClient",
      "File": "discovery/xds/client_test.go",
      "Line": 94,
      "Receiver": ""
    },
    "createTestHTTPServer": {
      "Name": "createTestHTTPServer",
      "File": "discovery/xds/xds_test.go",
      "Line": 48,
      "Receiver": ""
    },
    "createTestOpenMetricsHistogram": {
      "Name": "createTestOpenMetricsHistogram",
      "File": "model/textparse/nhcbparse_test.go",
      "Line": 916,
      "Receiver": ""
    },
    "createTestPromHistogram": {
      "Name": "createTestPromHistogram",
      "File": "model/textparse/nhcbparse_test.go",
      "Line": 929,
      "Receiver": ""
    },
    "createTestProtoBuf": {
      "Name": "createTestProtoBuf",
      "File": "model/textparse/protobufparse_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "createTestProtoBufHistogram": {
      "Name": "createTestProtoBufHistogram",
      "File": "model/textparse/nhcbparse_test.go",
      "Line": 773,
      "Receiver": ""
    },
    "createTimeseries": {
      "Name": "createTimeseries",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 811,
      "Receiver": ""
    },
    "createTimeseriesWithOldSamples": {
      "Name": "createTimeseriesWithOldSamples",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 2059,
      "Receiver": ""
    },
    "createTimeseriesWithRandomLabelCount": {
      "Name": "createTimeseriesWithRandomLabelCount",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 2031,
      "Receiver": ""
    },
    "cumulativeBucketIterator.At": {
      "Name": "cumulativeBucketIterator.At",
      "File": "model/histogram/histogram.go",
      "Line": 596,
      "Receiver": "cumulativeBucketIterator"
    },
    "cumulativeBucketIterator.Next": {
      "Name": "cumulativeBucketIterator.Next",
      "File": "model/histogram/histogram.go",
      "Line": 542,
      "Receiver": "cumulativeBucketIterator"
    },
    "currentFileOffset": {
      "Name": "currentFileOffset",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 315,
      "Receiver": ""
    },
    "cutSegmentFile": {
      "Name": "cutSegmentFile",
      "File": "tsdb/chunks/chunks.go",
      "Line": 422,
      "Receiver": ""
    },
    "dateWrapper": {
      "Name": "dateWrapper",
      "File": "promql/functions.go",
      "Line": 1669,
      "Receiver": ""
    },
    "dbAdapter.Stats": {
      "Name": "dbAdapter.Stats",
      "File": "web/web_test.go",
      "Line": 55,
      "Receiver": "dbAdapter"
    },
    "dbAdapter.WALReplayStatus": {
      "Name": "dbAdapter.WALReplayStatus",
      "File": "web/web_test.go",
      "Line": 59,
      "Receiver": "dbAdapter"
    },
    "dbAppender.Commit": {
      "Name": "dbAppender.Commit",
      "File": "tsdb/db.go",
      "Line": 1210,
      "Receiver": "dbAppender"
    },
    "dbAppender.GetRef": {
      "Name": "dbAppender.GetRef",
      "File": "tsdb/db.go",
      "Line": 1203,
      "Receiver": "dbAppender"
    },
    "dbMetrics.Unregister": {
      "Name": "dbMetrics.Unregister",
      "File": "tsdb/agent/db.go",
      "Line": 203,
      "Receiver": "dbMetrics"
    },
    "debugAll": {
      "Name": "debugAll",
      "File": "cmd/promtool/main.go",
      "Line": 1173,
      "Receiver": ""
    },
    "debugMetrics": {
      "Name": "debugMetrics",
      "File": "cmd/promtool/main.go",
      "Line": 1161,
      "Receiver": ""
    },
    "debugPprof": {
      "Name": "debugPprof",
      "File": "cmd/promtool/main.go",
      "Line": 1149,
      "Receiver": ""
    },
    "debugWrite": {
      "Name": "debugWrite",
      "File": "cmd/promtool/debug.go",
      "Line": 28,
      "Receiver": ""
    },
    "decodeSeriesFromChunkSnapshot": {
      "Name": "decodeSeriesFromChunkSnapshot",
      "File": "tsdb/head_wal.go",
      "Line": 1150,
      "Receiver": ""
    },
    "decodeSize": {
      "Name": "decodeSize",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 35,
      "Receiver": ""
    },
    "decodeString": {
      "Name": "decodeString",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 48,
      "Receiver": ""
    },
    "decodeTombstonesSnapshotRecord": {
      "Name": "decodeTombstonesSnapshotRecord",
      "File": "tsdb/head_wal.go",
      "Line": 1221,
      "Receiver": ""
    },
    "decodeVarint": {
      "Name": "decodeVarint",
      "File": "model/labels/labels_dedupelabels.go",
      "Line": 110,
      "Receiver": ""
    },
    "decodeVarintRest": {
      "Name": "decodeVarintRest",
      "File": "model/labels/labels_dedupelabels.go",
      "Line": 119,
      "Receiver": ""
    },
    "dedicatedServerDiscovery.getService": {
      "Name": "dedicatedServerDiscovery.getService",
      "File": "discovery/ovhcloud/dedicated_server.go",
      "Line": 96,
      "Receiver": "dedicatedServerDiscovery"
    },
    "dedicatedServerDiscovery.getSource": {
      "Name": "dedicatedServerDiscovery.getSource",
      "File": "discovery/ovhcloud/dedicated_server.go",
      "Line": 100,
      "Receiver": "dedicatedServerDiscovery"
    },
    "dedicatedServerDiscovery.refresh": {
      "Name": "dedicatedServerDiscovery.refresh",
      "File": "discovery/ovhcloud/dedicated_server.go",
      "Line": 104,
      "Receiver": "dedicatedServerDiscovery"
    },
    "deepLen": {
      "Name": "deepLen",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1054,
      "Receiver": ""
    },
    "defaultDirectIORqmts": {
      "Name": "defaultDirectIORqmts",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 376,
      "Receiver": ""
    },
    "defaultMockInterfaceServer": {
      "Name": "defaultMockInterfaceServer",
      "File": "discovery/azure/azure_test.go",
      "Line": 724,
      "Receiver": ""
    },
    "defaultMockVMSSServer": {
      "Name": "defaultMockVMSSServer",
      "File": "discovery/azure/azure_test.go",
      "Line": 748,
      "Receiver": ""
    },
    "defaultMockVMSSVMServer": {
      "Name": "defaultMockVMSSVMServer",
      "File": "discovery/azure/azure_test.go",
      "Line": 759,
      "Receiver": ""
    },
    "defaultMockVMServer": {
      "Name": "defaultMockVMServer",
      "File": "discovery/azure/azure_test.go",
      "Line": 737,
      "Receiver": ""
    },
    "defaultVMSSVMWithIDAndName": {
      "Name": "defaultVMSSVMWithIDAndName",
      "File": "discovery/azure/azure_test.go",
      "Line": 814,
      "Receiver": ""
    },
    "defaultVMWithIDAndName": {
      "Name": "defaultVMWithIDAndName",
      "File": "discovery/azure/azure_test.go",
      "Line": 770,
      "Receiver": ""
    },
    "delayedResponseHTTPHandler": {
      "Name": "delayedResponseHTTPHandler",
      "File": "storage/remote/client_test.go",
      "Line": 465,
      "Receiver": ""
    },
    "deletableBlocks": {
      "Name": "deletableBlocks",
      "File": "tsdb/db.go",
      "Line": 1703,
      "Receiver": ""
    },
    "deleteNonBlocks": {
      "Name": "deleteNonBlocks",
      "File": "tsdb/db_test.go",
      "Line": 3129,
      "Receiver": ""
    },
    "deletedSamples": {
      "Name": "deletedSamples",
      "File": "tsdb/head_test.go",
      "Line": 1883,
      "Receiver": ""
    },
    "deltasToCounts": {
      "Name": "deltasToCounts",
      "File": "prompb/io/prometheus/write/v2/codec.go",
      "Line": 152,
      "Receiver": ""
    },
    "dependencyMap.dependencies": {
      "Name": "dependencyMap.dependencies",
      "File": "rules/group.go",
      "Line": 1068,
      "Receiver": "dependencyMap"
    },
    "dependencyMap.dependents": {
      "Name": "dependencyMap.dependents",
      "File": "rules/group.go",
      "Line": 1063,
      "Receiver": "dependencyMap"
    },
    "dependencyMap.isIndependent": {
      "Name": "dependencyMap.isIndependent",
      "File": "rules/group.go",
      "Line": 1085,
      "Receiver": "dependencyMap"
    },
    "describeAPIFunc": {
      "Name": "describeAPIFunc",
      "File": "web/api/v1/api_test.go",
      "Line": 3754,
      "Receiver": ""
    },
    "desymbolizeLabels": {
      "Name": "desymbolizeLabels",
      "File": "prompb/io/prometheus/write/v2/symbols.go",
      "Line": 76,
      "Receiver": ""
    },
    "detectHistogramStatsDecoding": {
      "Name": "detectHistogramStatsDecoding",
      "File": "promql/engine.go",
      "Line": 3880,
      "Receiver": ""
    },
    "detectReset": {
      "Name": "detectReset",
      "File": "model/histogram/float_histogram.go",
      "Line": 654,
      "Receiver": ""
    },
    "determineColumnsToRender": {
      "Name": "determineColumnsToRender",
      "File": "util/documentcli/documentcli.go",
      "Line": 208,
      "Receiver": ""
    },
    "dialContextWithRoundRobinDNS.dialContextFn": {
      "Name": "dialContextWithRoundRobinDNS.dialContextFn",
      "File": "storage/remote/dial_context.go",
      "Line": 47,
      "Receiver": "dialContextWithRoundRobinDNS"
    },
    "digitVal": {
      "Name": "digitVal",
      "File": "promql/parser/lex.go",
      "Line": 814,
      "Receiver": ""
    },
    "digitaloceanMetrics.Register": {
      "Name": "digitaloceanMetrics.Register",
      "File": "discovery/digitalocean/metrics.go",
      "Line": 27,
      "Receiver": "digitaloceanMetrics"
    },
    "digitaloceanMetrics.Unregister": {
      "Name": "digitaloceanMetrics.Unregister",
      "File": "discovery/digitalocean/metrics.go",
      "Line": 32,
      "Receiver": "digitaloceanMetrics"
    },
    "directIORqmtsForTest": {
      "Name": "directIORqmtsForTest",
      "File": "tsdb/fileutil/direct_io_writer_test.go",
      "Line": 27,
      "Receiver": ""
    },
    "directIOWriter.Available": {
      "Name": "directIOWriter.Available",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 85,
      "Receiver": "directIOWriter"
    },
    "directIOWriter.Buffered": {
      "Name": "directIOWriter.Buffered",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 87,
      "Receiver": "directIOWriter"
    },
    "directIOWriter.Flush": {
      "Name": "directIOWriter.Flush",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 220,
      "Receiver": "directIOWriter"
    },
    "directIOWriter.Reset": {
      "Name": "directIOWriter.Reset",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 230,
      "Receiver": "directIOWriter"
    },
    "directIOWriter.Write": {
      "Name": "directIOWriter.Write",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 145,
      "Receiver": "directIOWriter"
    },
    "directIOWriter.canDirectIOWrite": {
      "Name": "directIOWriter.canDirectIOWrite",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 141,
      "Receiver": "directIOWriter"
    },
    "directIOWriter.directIOWrite": {
      "Name": "directIOWriter.directIOWrite",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 114,
      "Receiver": "directIOWriter"
    },
    "directIOWriter.fillInitialOffsetGap": {
      "Name": "directIOWriter.fillInitialOffsetGap",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 92,
      "Receiver": "directIOWriter"
    },
    "directIOWriter.flush": {
      "Name": "directIOWriter.flush",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 185,
      "Receiver": "directIOWriter"
    },
    "discovery.Run": {
      "Name": "discovery.Run",
      "File": "documentation/examples/custom-sd/adapter-usage/main.go",
      "Line": 162,
      "Receiver": "discovery"
    },
    "discovery.parseServiceNodes": {
      "Name": "discovery.parseServiceNodes",
      "File": "documentation/examples/custom-sd/adapter-usage/main.go",
      "Line": 97,
      "Receiver": "discovery"
    },
    "displayHistogram": {
      "Name": "displayHistogram",
      "File": "cmd/promtool/tsdb.go",
      "Line": 855,
      "Receiver": ""
    },
    "distribution.String": {
      "Name": "distribution.String",
      "File": "cmd/promtool/analyze.go",
      "Line": 337,
      "Receiver": "distribution"
    },
    "distribution.update": {
      "Name": "distribution.update",
      "File": "cmd/promtool/analyze.go",
      "Line": 326,
      "Receiver": "distribution"
    },
    "dnsMetrics.Register": {
      "Name": "dnsMetrics.Register",
      "File": "discovery/dns/metrics.go",
      "Line": 59,
      "Receiver": "dnsMetrics"
    },
    "dnsMetrics.Unregister": {
      "Name": "dnsMetrics.Unregister",
      "File": "discovery/dns/metrics.go",
      "Line": 64,
      "Receiver": "dnsMetrics"
    },
    "do": {
      "Name": "do",
      "File": "notifier/manager.go",
      "Line": 87,
      "Receiver": ""
    },
    "dockerMetrics.Register": {
      "Name": "dockerMetrics.Register",
      "File": "discovery/moby/metrics_docker.go",
      "Line": 27,
      "Receiver": "dockerMetrics"
    },
    "dockerMetrics.Unregister": {
      "Name": "dockerMetrics.Unregister",
      "File": "discovery/moby/metrics_docker.go",
      "Line": 32,
      "Receiver": "dockerMetrics"
    },
    "dockerswarmMetrics.Register": {
      "Name": "dockerswarmMetrics.Register",
      "File": "discovery/moby/metrics_dockerswarm.go",
      "Line": 27,
      "Receiver": "dockerswarmMetrics"
    },
    "dockerswarmMetrics.Unregister": {
      "Name": "dockerswarmMetrics.Unregister",
      "File": "discovery/moby/metrics_dockerswarm.go",
      "Line": 32,
      "Receiver": "dockerswarmMetrics"
    },
    "dumpSamples": {
      "Name": "dumpSamples",
      "File": "cmd/promtool/tsdb.go",
      "Line": 712,
      "Receiver": ""
    },
    "durationMilliseconds": {
      "Name": "durationMilliseconds",
      "File": "promql/promqltest/test.go",
      "Line": 1651,
      "Receiver": ""
    },
    "durationToInt64Millis": {
      "Name": "durationToInt64Millis",
      "File": "cmd/prometheus/main.go",
      "Line": 1477,
      "Receiver": ""
    },
    "durationVisitor.Visit": {
      "Name": "durationVisitor.Visit",
      "File": "promql/durations.go",
      "Line": 38,
      "Receiver": "durationVisitor"
    },
    "durationVisitor.calculateDuration": {
      "Name": "durationVisitor.calculateDuration",
      "File": "promql/durations.go",
      "Line": 84,
      "Receiver": "durationVisitor"
    },
    "durationVisitor.evaluateDurationExpr": {
      "Name": "durationVisitor.evaluateDurationExpr",
      "File": "promql/durations.go",
      "Line": 99,
      "Receiver": "durationVisitor"
    },
    "ec2Metrics.Register": {
      "Name": "ec2Metrics.Register",
      "File": "discovery/aws/metrics_ec2.go",
      "Line": 27,
      "Receiver": "ec2Metrics"
    },
    "ec2Metrics.Unregister": {
      "Name": "ec2Metrics.Unregister",
      "File": "discovery/aws/metrics_ec2.go",
      "Line": 32,
      "Receiver": "ec2Metrics"
    },
    "emptyStringMatcher.Matches": {
      "Name": "emptyStringMatcher.Matches",
      "File": "model/labels/regexp.go",
      "Line": 698,
      "Receiver": "emptyStringMatcher"
    },
    "enableDirectIO": {
      "Name": "enableDirectIO",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 332,
      "Receiver": ""
    },
    "encodeSize": {
      "Name": "encodeSize",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 548,
      "Receiver": ""
    },
    "encodeTombstonesToSnapshotRecord": {
      "Name": "encodeTombstonesToSnapshotRecord",
      "File": "tsdb/head_wal.go",
      "Line": 1208,
      "Receiver": ""
    },
    "encodeVarint": {
      "Name": "encodeVarint",
      "File": "model/labels/labels_dedupelabels.go",
      "Line": 705,
      "Receiver": ""
    },
    "encodeVarintMetrics": {
      "Name": "encodeVarintMetrics",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 1836,
      "Receiver": ""
    },
    "encodeVarintRemote": {
      "Name": "encodeVarintRemote",
      "File": "prompb/remote.pb.go",
      "Line": 762,
      "Receiver": ""
    },
    "encodeVarintSlow": {
      "Name": "encodeVarintSlow",
      "File": "model/labels/labels_dedupelabels.go",
      "Line": 689,
      "Receiver": ""
    },
    "encodeVarintTypes": {
      "Name": "encodeVarintTypes",
      "File": "prompb/types.pb.go",
      "Line": 2020,
      "Receiver": ""
    },
    "encodedRecord": {
      "Name": "encodedRecord",
      "File": "tsdb/wlog/reader_test.go",
      "Line": 159,
      "Receiver": ""
    },
    "endpointSliceSource": {
      "Name": "endpointSliceSource",
      "File": "discovery/kubernetes/endpointslice.go",
      "Line": 238,
      "Receiver": ""
    },
    "endpointSliceSourceFromNamespaceAndName": {
      "Name": "endpointSliceSourceFromNamespaceAndName",
      "File": "discovery/kubernetes/endpointslice.go",
      "Line": 242,
      "Receiver": ""
    },
    "endpointsSource": {
      "Name": "endpointsSource",
      "File": "discovery/kubernetes/endpoints.go",
      "Line": 282,
      "Receiver": ""
    },
    "endpointsSourceFromNamespaceAndName": {
      "Name": "endpointsSourceFromNamespaceAndName",
      "File": "discovery/kubernetes/endpoints.go",
      "Line": 286,
      "Receiver": ""
    },
    "ensureMonotonicAndIgnoreSmallDeltas": {
      "Name": "ensureMonotonicAndIgnoreSmallDeltas",
      "File": "promql/quantile.go",
      "Line": 628,
      "Receiver": ""
    },
    "entry.String": {
      "Name": "entry.String",
      "File": "promql/promqltest/test.go",
      "Line": 767,
      "Receiver": "entry"
    },
    "equalFloatSamples": {
      "Name": "equalFloatSamples",
      "File": "scrape/helpers_test.go",
      "Line": 81,
      "Receiver": ""
    },
    "equalMultiStringMapMatcher.Matches": {
      "Name": "equalMultiStringMapMatcher.Matches",
      "File": "model/labels/regexp.go",
      "Line": 832,
      "Receiver": "equalMultiStringMapMatcher"
    },
    "equalMultiStringMapMatcher.add": {
      "Name": "equalMultiStringMapMatcher.add",
      "File": "model/labels/regexp.go",
      "Line": 793,
      "Receiver": "equalMultiStringMapMatcher"
    },
    "equalMultiStringMapMatcher.addPrefix": {
      "Name": "equalMultiStringMapMatcher.addPrefix",
      "File": "model/labels/regexp.go",
      "Line": 801,
      "Receiver": "equalMultiStringMapMatcher"
    },
    "equalMultiStringMapMatcher.setMatches": {
      "Name": "equalMultiStringMapMatcher.setMatches",
      "File": "model/labels/regexp.go",
      "Line": 820,
      "Receiver": "equalMultiStringMapMatcher"
    },
    "equalMultiStringSliceMatcher.Matches": {
      "Name": "equalMultiStringSliceMatcher.Matches",
      "File": "model/labels/regexp.go",
      "Line": 767,
      "Receiver": "equalMultiStringSliceMatcher"
    },
    "equalMultiStringSliceMatcher.add": {
      "Name": "equalMultiStringSliceMatcher.add",
      "File": "model/labels/regexp.go",
      "Line": 755,
      "Receiver": "equalMultiStringSliceMatcher"
    },
    "equalMultiStringSliceMatcher.addPrefix": {
      "Name": "equalMultiStringSliceMatcher.addPrefix",
      "File": "model/labels/regexp.go",
      "Line": 759,
      "Receiver": "equalMultiStringSliceMatcher"
    },
    "equalMultiStringSliceMatcher.setMatches": {
      "Name": "equalMultiStringSliceMatcher.setMatches",
      "File": "model/labels/regexp.go",
      "Line": 763,
      "Receiver": "equalMultiStringSliceMatcher"
    },
    "equalStringMatcher.Matches": {
      "Name": "equalStringMatcher.Matches",
      "File": "model/labels/regexp.go",
      "Line": 720,
      "Receiver": "equalStringMatcher"
    },
    "errChunkQuerier.Select": {
      "Name": "errChunkQuerier.Select",
      "File": "storage/fanout_test.go",
      "Line": 245,
      "Receiver": "errChunkQuerier"
    },
    "errChunkSeriesSet.At": {
      "Name": "errChunkSeriesSet.At",
      "File": "storage/interface.go",
      "Line": 447,
      "Receiver": "errChunkSeriesSet"
    },
    "errChunkSeriesSet.Err": {
      "Name": "errChunkSeriesSet.Err",
      "File": "storage/interface.go",
      "Line": 448,
      "Receiver": "errChunkSeriesSet"
    },
    "errChunkSeriesSet.Next": {
      "Name": "errChunkSeriesSet.Next",
      "File": "storage/interface.go",
      "Line": 446,
      "Receiver": "errChunkSeriesSet"
    },
    "errChunkSeriesSet.Warnings": {
      "Name": "errChunkSeriesSet.Warnings",
      "File": "storage/interface.go",
      "Line": 449,
      "Receiver": "errChunkSeriesSet"
    },
    "errChunksIterator.At": {
      "Name": "errChunksIterator.At",
      "File": "storage/series.go",
      "Line": 435,
      "Receiver": "errChunksIterator"
    },
    "errChunksIterator.Err": {
      "Name": "errChunksIterator.Err",
      "File": "storage/series.go",
      "Line": 437,
      "Receiver": "errChunksIterator"
    },
    "errChunksIterator.Next": {
      "Name": "errChunksIterator.Next",
      "File": "storage/series.go",
      "Line": 436,
      "Receiver": "errChunksIterator"
    },
    "errDuplicateSampleForTimestamp.Error": {
      "Name": "errDuplicateSampleForTimestamp.Error",
      "File": "storage/errors.go",
      "Line": 42,
      "Receiver": "errDuplicateSampleForTimestamp"
    },
    "errDuplicateSampleForTimestamp.Is": {
      "Name": "errDuplicateSampleForTimestamp.Is",
      "File": "storage/errors.go",
      "Line": 54,
      "Receiver": "errDuplicateSampleForTimestamp"
    },
    "errIterator.At": {
      "Name": "errIterator.At",
      "File": "storage/merge_test.go",
      "Line": 1703,
      "Receiver": "errIterator"
    },
    "errIterator.AtFloatHistogram": {
      "Name": "errIterator.AtFloatHistogram",
      "File": "storage/merge_test.go",
      "Line": 1711,
      "Receiver": "errIterator"
    },
    "errIterator.AtHistogram": {
      "Name": "errIterator.AtHistogram",
      "File": "storage/merge_test.go",
      "Line": 1707,
      "Receiver": "errIterator"
    },
    "errIterator.AtT": {
      "Name": "errIterator.AtT",
      "File": "storage/merge_test.go",
      "Line": 1715,
      "Receiver": "errIterator"
    },
    "errIterator.Err": {
      "Name": "errIterator.Err",
      "File": "storage/merge_test.go",
      "Line": 1719,
      "Receiver": "errIterator"
    },
    "errIterator.Next": {
      "Name": "errIterator.Next",
      "File": "storage/merge_test.go",
      "Line": 1695,
      "Receiver": "errIterator"
    },
    "errIterator.Seek": {
      "Name": "errIterator.Seek",
      "File": "storage/merge_test.go",
      "Line": 1699,
      "Receiver": "errIterator"
    },
    "errLoadWbl.Cause": {
      "Name": "errLoadWbl.Cause",
      "File": "tsdb/head_wal.go",
      "Line": 957,
      "Receiver": "errLoadWbl"
    },
    "errLoadWbl.Error": {
      "Name": "errLoadWbl.Error",
      "File": "tsdb/head_wal.go",
      "Line": 953,
      "Receiver": "errLoadWbl"
    },
    "errLoadWbl.Unwrap": {
      "Name": "errLoadWbl.Unwrap",
      "File": "tsdb/head_wal.go",
      "Line": 961,
      "Receiver": "errLoadWbl"
    },
    "errPostings.At": {
      "Name": "errPostings.At",
      "File": "tsdb/index/postings.go",
      "Line": 569,
      "Receiver": "errPostings"
    },
    "errPostings.Err": {
      "Name": "errPostings.Err",
      "File": "tsdb/index/postings.go",
      "Line": 570,
      "Receiver": "errPostings"
    },
    "errPostings.Next": {
      "Name": "errPostings.Next",
      "File": "tsdb/index/postings.go",
      "Line": 567,
      "Receiver": "errPostings"
    },
    "errPostings.Seek": {
      "Name": "errPostings.Seek",
      "File": "tsdb/index/postings.go",
      "Line": 568,
      "Receiver": "errPostings"
    },
    "errQuerier.Close": {
      "Name": "errQuerier.Close",
      "File": "storage/fanout_test.go",
      "Line": 243,
      "Receiver": "errQuerier"
    },
    "errQuerier.LabelNames": {
      "Name": "errQuerier.LabelNames",
      "File": "storage/fanout_test.go",
      "Line": 239,
      "Receiver": "errQuerier"
    },
    "errQuerier.LabelValues": {
      "Name": "errQuerier.LabelValues",
      "File": "storage/fanout_test.go",
      "Line": 235,
      "Receiver": "errQuerier"
    },
    "errQuerier.Select": {
      "Name": "errQuerier.Select",
      "File": "storage/fanout_test.go",
      "Line": 231,
      "Receiver": "errQuerier"
    },
    "errSeriesSet.At": {
      "Name": "errSeriesSet.At",
      "File": "storage/remote/codec.go",
      "Line": 335,
      "Receiver": "errSeriesSet"
    },
    "errSeriesSet.Err": {
      "Name": "errSeriesSet.Err",
      "File": "storage/remote/codec.go",
      "Line": 339,
      "Receiver": "errSeriesSet"
    },
    "errSeriesSet.Next": {
      "Name": "errSeriesSet.Next",
      "File": "storage/remote/codec.go",
      "Line": 331,
      "Receiver": "errSeriesSet"
    },
    "errSeriesSet.Warnings": {
      "Name": "errSeriesSet.Warnings",
      "File": "storage/remote/codec.go",
      "Line": 343,
      "Receiver": "errSeriesSet"
    },
    "errStorage.Appender": {
      "Name": "errStorage.Appender",
      "File": "storage/fanout_test.go",
      "Line": 227,
      "Receiver": "errStorage"
    },
    "errStorage.ChunkQuerier": {
      "Name": "errStorage.ChunkQuerier",
      "File": "storage/fanout_test.go",
      "Line": 224,
      "Receiver": "errStorage"
    },
    "errStorage.Close": {
      "Name": "errStorage.Close",
      "File": "storage/fanout_test.go",
      "Line": 229,
      "Receiver": "errStorage"
    },
    "errStorage.Querier": {
      "Name": "errStorage.Querier",
      "File": "storage/fanout_test.go",
      "Line": 218,
      "Receiver": "errStorage"
    },
    "errStorage.StartTime": {
      "Name": "errStorage.StartTime",
      "File": "storage/fanout_test.go",
      "Line": 228,
      "Receiver": "errStorage"
    },
    "errWithWarnings.Error": {
      "Name": "errWithWarnings.Error",
      "File": "promql/engine.go",
      "Line": 1062,
      "Receiver": "errWithWarnings"
    },
    "erringBReader.Chunks": {
      "Name": "erringBReader.Chunks",
      "File": "tsdb/compact_test.go",
      "Line": 467,
      "Receiver": "erringBReader"
    },
    "erringBReader.Index": {
      "Name": "erringBReader.Index",
      "File": "tsdb/compact_test.go",
      "Line": 466,
      "Receiver": "erringBReader"
    },
    "erringBReader.Meta": {
      "Name": "erringBReader.Meta",
      "File": "tsdb/compact_test.go",
      "Line": 469,
      "Receiver": "erringBReader"
    },
    "erringBReader.Size": {
      "Name": "erringBReader.Size",
      "File": "tsdb/compact_test.go",
      "Line": 470,
      "Receiver": "erringBReader"
    },
    "erringBReader.Tombstones": {
      "Name": "erringBReader.Tombstones",
      "File": "tsdb/compact_test.go",
      "Line": 468,
      "Receiver": "erringBReader"
    },
    "errorAppender.Append": {
      "Name": "errorAppender.Append",
      "File": "scrape/scrape_test.go",
      "Line": 3016,
      "Receiver": "errorAppender"
    },
    "errorConfig.Name": {
      "Name": "errorConfig.Name",
      "File": "discovery/manager_test.go",
      "Line": 1161,
      "Receiver": "errorConfig"
    },
    "errorConfig.NewDiscoverer": {
      "Name": "errorConfig.NewDiscoverer",
      "File": "discovery/manager_test.go",
      "Line": 1162,
      "Receiver": "errorConfig"
    },
    "errorConfig.NewDiscovererMetrics": {
      "Name": "errorConfig.NewDiscovererMetrics",
      "File": "discovery/manager_test.go",
      "Line": 1165,
      "Receiver": "errorConfig"
    },
    "errorOnlySeriesSet.At": {
      "Name": "errorOnlySeriesSet.At",
      "File": "storage/lazy.go",
      "Line": 69,
      "Receiver": "errorOnlySeriesSet"
    },
    "errorOnlySeriesSet.Err": {
      "Name": "errorOnlySeriesSet.Err",
      "File": "storage/lazy.go",
      "Line": 70,
      "Receiver": "errorOnlySeriesSet"
    },
    "errorOnlySeriesSet.Next": {
      "Name": "errorOnlySeriesSet.Next",
      "File": "storage/lazy.go",
      "Line": 68,
      "Receiver": "errorOnlySeriesSet"
    },
    "errorOnlySeriesSet.Warnings": {
      "Name": "errorOnlySeriesSet.Warnings",
      "File": "storage/lazy.go",
      "Line": 71,
      "Receiver": "errorOnlySeriesSet"
    },
    "errorTestQuerier.Close": {
      "Name": "errorTestQuerier.Close",
      "File": "web/api/v1/errors_test.go",
      "Line": 191,
      "Receiver": "errorTestQuerier"
    },
    "errorTestQuerier.LabelNames": {
      "Name": "errorTestQuerier.LabelNames",
      "File": "web/api/v1/errors_test.go",
      "Line": 187,
      "Receiver": "errorTestQuerier"
    },
    "errorTestQuerier.LabelValues": {
      "Name": "errorTestQuerier.LabelValues",
      "File": "web/api/v1/errors_test.go",
      "Line": 183,
      "Receiver": "errorTestQuerier"
    },
    "errorTestQuerier.Select": {
      "Name": "errorTestQuerier.Select",
      "File": "web/api/v1/errors_test.go",
      "Line": 195,
      "Receiver": "errorTestQuerier"
    },
    "errorTestQueryable.ChunkQuerier": {
      "Name": "errorTestQueryable.ChunkQuerier",
      "File": "web/api/v1/errors_test.go",
      "Line": 167,
      "Receiver": "errorTestQueryable"
    },
    "errorTestQueryable.ExemplarQuerier": {
      "Name": "errorTestQueryable.ExemplarQuerier",
      "File": "web/api/v1/errors_test.go",
      "Line": 163,
      "Receiver": "errorTestQueryable"
    },
    "errorTestQueryable.Querier": {
      "Name": "errorTestQueryable.Querier",
      "File": "web/api/v1/errors_test.go",
      "Line": 171,
      "Receiver": "errorTestQueryable"
    },
    "errorTestSeriesSet.At": {
      "Name": "errorTestSeriesSet.At",
      "File": "web/api/v1/errors_test.go",
      "Line": 210,
      "Receiver": "errorTestSeriesSet"
    },
    "errorTestSeriesSet.Err": {
      "Name": "errorTestSeriesSet.Err",
      "File": "web/api/v1/errors_test.go",
      "Line": 214,
      "Receiver": "errorTestSeriesSet"
    },
    "errorTestSeriesSet.Next": {
      "Name": "errorTestSeriesSet.Next",
      "File": "web/api/v1/errors_test.go",
      "Line": 206,
      "Receiver": "errorTestSeriesSet"
    },
    "errorTestSeriesSet.Warnings": {
      "Name": "errorTestSeriesSet.Warnings",
      "File": "web/api/v1/errors_test.go",
      "Line": 218,
      "Receiver": "errorTestSeriesSet"
    },
    "escape": {
      "Name": "escape",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/graphite/escape.go",
      "Line": 82,
      "Receiver": ""
    },
    "escapeSingleQuotes": {
      "Name": "escapeSingleQuotes",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client.go",
      "Line": 204,
      "Receiver": ""
    },
    "escapeSlashes": {
      "Name": "escapeSlashes",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client.go",
      "Line": 208,
      "Receiver": ""
    },
    "eurekaMetrics.Register": {
      "Name": "eurekaMetrics.Register",
      "File": "discovery/eureka/metrics.go",
      "Line": 27,
      "Receiver": "eurekaMetrics"
    },
    "eurekaMetrics.Unregister": {
      "Name": "eurekaMetrics.Unregister",
      "File": "discovery/eureka/metrics.go",
      "Line": 32,
      "Receiver": "eurekaMetrics"
    },
    "evalCmd.String": {
      "Name": "evalCmd.String",
      "File": "promql/promqltest/test.go",
      "Line": 798,
      "Receiver": "evalCmd"
    },
    "evalCmd.checkAnnotations": {
      "Name": "evalCmd.checkAnnotations",
      "File": "promql/promqltest/test.go",
      "Line": 851,
      "Receiver": "evalCmd"
    },
    "evalCmd.checkExpectedFailure": {
      "Name": "evalCmd.checkExpectedFailure",
      "File": "promql/promqltest/test.go",
      "Line": 1141,
      "Receiver": "evalCmd"
    },
    "evalCmd.compareResult": {
      "Name": "evalCmd.compareResult",
      "File": "promql/promqltest/test.go",
      "Line": 888,
      "Receiver": "evalCmd"
    },
    "evalCmd.expect": {
      "Name": "evalCmd.expect",
      "File": "promql/promqltest/test.go",
      "Line": 804,
      "Receiver": "evalCmd"
    },
    "evalCmd.expectMetric": {
      "Name": "evalCmd.expectMetric",
      "File": "promql/promqltest/test.go",
      "Line": 811,
      "Receiver": "evalCmd"
    },
    "evalCmd.isFail": {
      "Name": "evalCmd.isFail",
      "File": "promql/promqltest/test.go",
      "Line": 712,
      "Receiver": "evalCmd"
    },
    "evalCmd.isOrdered": {
      "Name": "evalCmd.isOrdered",
      "File": "promql/promqltest/test.go",
      "Line": 708,
      "Receiver": "evalCmd"
    },
    "evalCmd.testCmd": {
      "Name": "evalCmd.testCmd",
      "File": "promql/promqltest/test.go",
      "Line": 513,
      "Receiver": "evalCmd"
    },
    "evaluator.Eval": {
      "Name": "evaluator.Eval",
      "File": "promql/engine.go",
      "Line": 1119,
      "Receiver": "evaluator"
    },
    "evaluator.VectorAnd": {
      "Name": "evaluator.VectorAnd",
      "File": "promql/engine.go",
      "Line": 2569,
      "Receiver": "evaluator"
    },
    "evaluator.VectorBinop": {
      "Name": "evaluator.VectorBinop",
      "File": "promql/engine.go",
      "Line": 2645,
      "Receiver": "evaluator"
    },
    "evaluator.VectorOr": {
      "Name": "evaluator.VectorOr",
      "File": "promql/engine.go",
      "Line": 2593,
      "Receiver": "evaluator"
    },
    "evaluator.VectorUnless": {
      "Name": "evaluator.VectorUnless",
      "File": "promql/engine.go",
      "Line": 2620,
      "Receiver": "evaluator"
    },
    "evaluator.VectorscalarBinop": {
      "Name": "evaluator.VectorscalarBinop",
      "File": "promql/engine.go",
      "Line": 2831,
      "Receiver": "evaluator"
    },
    "evaluator.aggregation": {
      "Name": "evaluator.aggregation",
      "File": "promql/engine.go",
      "Line": 3015,
      "Receiver": "evaluator"
    },
    "evaluator.aggregationCountValues": {
      "Name": "evaluator.aggregationCountValues",
      "File": "promql/engine.go",
      "Line": 3530,
      "Receiver": "evaluator"
    },
    "evaluator.aggregationK": {
      "Name": "evaluator.aggregationK",
      "File": "promql/engine.go",
      "Line": 3305,
      "Receiver": "evaluator"
    },
    "evaluator.cleanupMetricLabels": {
      "Name": "evaluator.cleanupMetricLabels",
      "File": "promql/engine.go",
      "Line": 3576,
      "Receiver": "evaluator"
    },
    "evaluator.combineWithInfoSeries": {
      "Name": "evaluator.combineWithInfoSeries",
      "File": "promql/info.go",
      "Line": 200,
      "Receiver": "evaluator"
    },
    "evaluator.combineWithInfoVector": {
      "Name": "evaluator.combineWithInfoVector",
      "File": "promql/info.go",
      "Line": 334,
      "Receiver": "evaluator"
    },
    "evaluator.error": {
      "Name": "evaluator.error",
      "File": "promql/engine.go",
      "Line": 1090,
      "Receiver": "evaluator"
    },
    "evaluator.errorf": {
      "Name": "evaluator.errorf",
      "File": "promql/engine.go",
      "Line": 1085,
      "Receiver": "evaluator"
    },
    "evaluator.eval": {
      "Name": "evaluator.eval",
      "File": "promql/engine.go",
      "Line": 1649,
      "Receiver": "evaluator"
    },
    "evaluator.evalInfo": {
      "Name": "evaluator.evalInfo",
      "File": "promql/info.go",
      "Line": 38,
      "Receiver": "evaluator"
    },
    "evaluator.evalLabelJoin": {
      "Name": "evaluator.evalLabelJoin",
      "File": "promql/functions.go",
      "Line": 1624,
      "Receiver": "evaluator"
    },
    "evaluator.evalLabelReplace": {
      "Name": "evaluator.evalLabelReplace",
      "File": "promql/functions.go",
      "Line": 1572,
      "Receiver": "evaluator"
    },
    "evaluator.evalSeries": {
      "Name": "evaluator.evalSeries",
      "File": "promql/engine.go",
      "Line": 1525,
      "Receiver": "evaluator"
    },
    "evaluator.evalSubquery": {
      "Name": "evaluator.evalSubquery",
      "File": "promql/engine.go",
      "Line": 1596,
      "Receiver": "evaluator"
    },
    "evaluator.fetchInfoSeries": {
      "Name": "evaluator.fetchInfoSeries",
      "File": "promql/info.go",
      "Line": 124,
      "Receiver": "evaluator"
    },
    "evaluator.gatherVector": {
      "Name": "evaluator.gatherVector",
      "File": "promql/engine.go",
      "Line": 3984,
      "Receiver": "evaluator"
    },
    "evaluator.infoSelectHints": {
      "Name": "evaluator.infoSelectHints",
      "File": "promql/info.go",
      "Line": 83,
      "Receiver": "evaluator"
    },
    "evaluator.matrixIterSlice": {
      "Name": "evaluator.matrixIterSlice",
      "File": "promql/engine.go",
      "Line": 2408,
      "Receiver": "evaluator"
    },
    "evaluator.matrixSelector": {
      "Name": "evaluator.matrixSelector",
      "File": "promql/engine.go",
      "Line": 2358,
      "Receiver": "evaluator"
    },
    "evaluator.nextValues": {
      "Name": "evaluator.nextValues",
      "File": "promql/engine.go",
      "Line": 3614,
      "Receiver": "evaluator"
    },
    "evaluator.rangeEval": {
      "Name": "evaluator.rangeEval",
      "File": "promql/engine.go",
      "Line": 1231,
      "Receiver": "evaluator"
    },
    "evaluator.rangeEvalAgg": {
      "Name": "evaluator.rangeEvalAgg",
      "File": "promql/engine.go",
      "Line": 1383,
      "Receiver": "evaluator"
    },
    "evaluator.rangeEvalTimestampFunctionOverVectorSelector": {
      "Name": "evaluator.rangeEvalTimestampFunctionOverVectorSelector",
      "File": "promql/engine.go",
      "Line": 2210,
      "Receiver": "evaluator"
    },
    "evaluator.recover": {
      "Name": "evaluator.recover",
      "File": "promql/engine.go",
      "Line": 1095,
      "Receiver": "evaluator"
    },
    "evaluator.vectorSelectorSingle": {
      "Name": "evaluator.vectorSelectorSingle",
      "File": "promql/engine.go",
      "Line": 2257,
      "Receiver": "evaluator"
    },
    "everyNTimes.checkContext": {
      "Name": "everyNTimes.checkContext",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/context.go",
      "Line": 25,
      "Receiver": "everyNTimes"
    },
    "ewmaRate.incr": {
      "Name": "ewmaRate.incr",
      "File": "storage/remote/ewma.go",
      "Line": 68,
      "Receiver": "ewmaRate"
    },
    "ewmaRate.rate": {
      "Name": "ewmaRate.rate",
      "File": "storage/remote/ewma.go",
      "Line": 44,
      "Receiver": "ewmaRate"
    },
    "ewmaRate.tick": {
      "Name": "ewmaRate.tick",
      "File": "storage/remote/ewma.go",
      "Line": 51,
      "Receiver": "ewmaRate"
    },
    "exemplarsForEncoding": {
      "Name": "exemplarsForEncoding",
      "File": "tsdb/head_append.go",
      "Line": 994,
      "Receiver": ""
    },
    "expandFloatSpansAndBuckets": {
      "Name": "expandFloatSpansAndBuckets",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 350,
      "Receiver": ""
    },
    "expandIntSpansAndBuckets": {
      "Name": "expandIntSpansAndBuckets",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 381,
      "Receiver": ""
    },
    "expandSeriesSet": {
      "Name": "expandSeriesSet",
      "File": "tsdb/db_test.go",
      "Line": 1726,
      "Receiver": ""
    },
    "expandSpans": {
      "Name": "expandSpans",
      "File": "model/histogram/histogram_test.go",
      "Line": 958,
      "Receiver": ""
    },
    "expandSpansBothWays": {
      "Name": "expandSpansBothWays",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 382,
      "Receiver": ""
    },
    "expandSpansForward": {
      "Name": "expandSpansForward",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 329,
      "Receiver": ""
    },
    "expectCmd.CheckMatch": {
      "Name": "expectCmd.CheckMatch",
      "File": "promql/promqltest/test.go",
      "Line": 741,
      "Receiver": "expectCmd"
    },
    "expectCmd.String": {
      "Name": "expectCmd.String",
      "File": "promql/promqltest/test.go",
      "Line": 748,
      "Receiver": "expectCmd"
    },
    "expectCmd.Type": {
      "Name": "expectCmd.Type",
      "File": "promql/promqltest/test.go",
      "Line": 755,
      "Receiver": "expectCmd"
    },
    "expectHeaderValue": {
      "Name": "expectHeaderValue",
      "File": "storage/remote/write_handler_test.go",
      "Line": 296,
      "Receiver": ""
    },
    "expectedPodTargetGroups": {
      "Name": "expectedPodTargetGroups",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 197,
      "Receiver": ""
    },
    "expectedPodTargetGroupsWithNodeMeta": {
      "Name": "expectedPodTargetGroupsWithNodeMeta",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 228,
      "Receiver": ""
    },
    "expectedTargetGroups": {
      "Name": "expectedTargetGroups",
      "File": "discovery/kubernetes/ingress_test.go",
      "Line": 95,
      "Receiver": ""
    },
    "explicitHistogramToCustomBucketsHistogram": {
      "Name": "explicitHistogramToCustomBucketsHistogram",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms.go",
      "Line": 298,
      "Receiver": ""
    },
    "exponential": {
      "Name": "exponential",
      "File": "tsdb/db.go",
      "Line": 2344,
      "Receiver": ""
    },
    "exponentialToNativeHistogram": {
      "Name": "exponentialToNativeHistogram",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms.go",
      "Line": 81,
      "Receiver": ""
    },
    "extractFuncFromPath": {
      "Name": "extractFuncFromPath",
      "File": "promql/engine.go",
      "Line": 992,
      "Receiver": ""
    },
    "extractGroupsFromPath": {
      "Name": "extractGroupsFromPath",
      "File": "promql/engine.go",
      "Line": 1010,
      "Receiver": ""
    },
    "extractMediaType": {
      "Name": "extractMediaType",
      "File": "model/textparse/interface.go",
      "Line": 93,
      "Receiver": ""
    },
    "extractPortMapping": {
      "Name": "extractPortMapping",
      "File": "discovery/marathon/marathon.go",
      "Line": 512,
      "Receiver": ""
    },
    "extractQueryOpts": {
      "Name": "extractQueryOpts",
      "File": "web/api/v1/api.go",
      "Line": 535,
      "Receiver": ""
    },
    "extrapolatedRate": {
      "Name": "extrapolatedRate",
      "File": "promql/functions.go",
      "Line": 72,
      "Receiver": ""
    },
    "fParams.HasAnyNaN": {
      "Name": "fParams.HasAnyNaN",
      "File": "promql/value.go",
      "Line": 588,
      "Receiver": "fParams"
    },
    "fParams.Max": {
      "Name": "fParams.Max",
      "File": "promql/value.go",
      "Line": 586,
      "Receiver": "fParams"
    },
    "fParams.Min": {
      "Name": "fParams.Min",
      "File": "promql/value.go",
      "Line": 587,
      "Receiver": "fParams"
    },
    "fParams.Next": {
      "Name": "fParams.Next",
      "File": "promql/value.go",
      "Line": 591,
      "Receiver": "fParams"
    },
    "fSample.Copy": {
      "Name": "fSample.Copy",
      "File": "storage/buffer.go",
      "Line": 190,
      "Receiver": "fSample"
    },
    "fSample.F": {
      "Name": "fSample.F",
      "File": "storage/buffer.go",
      "Line": 174,
      "Receiver": "fSample"
    },
    "fSample.FH": {
      "Name": "fSample.FH",
      "File": "storage/buffer.go",
      "Line": 182,
      "Receiver": "fSample"
    },
    "fSample.H": {
      "Name": "fSample.H",
      "File": "storage/buffer.go",
      "Line": 178,
      "Receiver": "fSample"
    },
    "fSample.T": {
      "Name": "fSample.T",
      "File": "storage/buffer.go",
      "Line": 170,
      "Receiver": "fSample"
    },
    "fSample.Type": {
      "Name": "fSample.Type",
      "File": "storage/buffer.go",
      "Line": 186,
      "Receiver": "fSample"
    },
    "failingSeriesLifecycleCallback.PostCreation": {
      "Name": "failingSeriesLifecycleCallback.PostCreation",
      "File": "tsdb/head_bench_test.go",
      "Line": 172,
      "Receiver": "failingSeriesLifecycleCallback"
    },
    "failingSeriesLifecycleCallback.PostDeletion": {
      "Name": "failingSeriesLifecycleCallback.PostDeletion",
      "File": "tsdb/head_bench_test.go",
      "Line": 173,
      "Receiver": "failingSeriesLifecycleCallback"
    },
    "failingSeriesLifecycleCallback.PreCreation": {
      "Name": "failingSeriesLifecycleCallback.PreCreation",
      "File": "tsdb/head_bench_test.go",
      "Line": 171,
      "Receiver": "failingSeriesLifecycleCallback"
    },
    "fakeChunk.Encoding": {
      "Name": "fakeChunk.Encoding",
      "File": "tsdb/chunkenc/chunk_test.go",
      "Line": 195,
      "Receiver": "fakeChunk"
    },
    "fakeChunk.Reset": {
      "Name": "fakeChunk.Reset",
      "File": "tsdb/chunkenc/chunk_test.go",
      "Line": 199,
      "Receiver": "fakeChunk"
    },
    "fakeChunksReader.ChunkOrIterable": {
      "Name": "fakeChunksReader.ChunkOrIterable",
      "File": "tsdb/querier_test.go",
      "Line": 739,
      "Receiver": "fakeChunksReader"
    },
    "fakeDB.CleanTombstones": {
      "Name": "fakeDB.CleanTombstones",
      "File": "web/api/v1/api_test.go",
      "Line": 3799,
      "Receiver": "fakeDB"
    },
    "fakeDB.Delete": {
      "Name": "fakeDB.Delete",
      "File": "web/api/v1/api_test.go",
      "Line": 3800,
      "Receiver": "fakeDB"
    },
    "fakeDB.Snapshot": {
      "Name": "fakeDB.Snapshot",
      "File": "web/api/v1/api_test.go",
      "Line": 3801,
      "Receiver": "fakeDB"
    },
    "fakeDB.Stats": {
      "Name": "fakeDB.Stats",
      "File": "web/api/v1/api_test.go",
      "Line": 3802,
      "Receiver": "fakeDB"
    },
    "fakeDB.WALReplayStatus": {
      "Name": "fakeDB.WALReplayStatus",
      "File": "web/api/v1/api_test.go",
      "Line": 3819,
      "Receiver": "fakeDB"
    },
    "fakeEngine.NewInstantQuery": {
      "Name": "fakeEngine.NewInstantQuery",
      "File": "web/api/v1/api_test.go",
      "Line": 4722,
      "Receiver": "fakeEngine"
    },
    "fakeEngine.NewRangeQuery": {
      "Name": "fakeEngine.NewRangeQuery",
      "File": "web/api/v1/api_test.go",
      "Line": 4726,
      "Receiver": "fakeEngine"
    },
    "fakeManager.TargetsActive": {
      "Name": "fakeManager.TargetsActive",
      "File": "storage/remote/metadata_watcher_test.go",
      "Line": 85,
      "Receiver": "fakeManager"
    },
    "fakeQuery.Cancel": {
      "Name": "fakeQuery.Cancel",
      "File": "web/api/v1/api_test.go",
      "Line": 4755,
      "Receiver": "fakeQuery"
    },
    "fakeQuery.Close": {
      "Name": "fakeQuery.Close",
      "File": "web/api/v1/api_test.go",
      "Line": 4745,
      "Receiver": "fakeQuery"
    },
    "fakeQuery.Exec": {
      "Name": "fakeQuery.Exec",
      "File": "web/api/v1/api_test.go",
      "Line": 4736,
      "Receiver": "fakeQuery"
    },
    "fakeQuery.Statement": {
      "Name": "fakeQuery.Statement",
      "File": "web/api/v1/api_test.go",
      "Line": 4747,
      "Receiver": "fakeQuery"
    },
    "fakeQuery.Stats": {
      "Name": "fakeQuery.Stats",
      "File": "web/api/v1/api_test.go",
      "Line": 4751,
      "Receiver": "fakeQuery"
    },
    "fakeQuery.String": {
      "Name": "fakeQuery.String",
      "File": "web/api/v1/api_test.go",
      "Line": 4757,
      "Receiver": "fakeQuery"
    },
    "fakeSeriesIterator.At": {
      "Name": "fakeSeriesIterator.At",
      "File": "storage/buffer_test.go",
      "Line": 415,
      "Receiver": "fakeSeriesIterator"
    },
    "fakeSeriesIterator.AtFloatHistogram": {
      "Name": "fakeSeriesIterator.AtFloatHistogram",
      "File": "storage/buffer_test.go",
      "Line": 423,
      "Receiver": "fakeSeriesIterator"
    },
    "fakeSeriesIterator.AtHistogram": {
      "Name": "fakeSeriesIterator.AtHistogram",
      "File": "storage/buffer_test.go",
      "Line": 419,
      "Receiver": "fakeSeriesIterator"
    },
    "fakeSeriesIterator.AtT": {
      "Name": "fakeSeriesIterator.AtT",
      "File": "storage/buffer_test.go",
      "Line": 427,
      "Receiver": "fakeSeriesIterator"
    },
    "fakeSeriesIterator.Err": {
      "Name": "fakeSeriesIterator.Err",
      "File": "storage/buffer_test.go",
      "Line": 447,
      "Receiver": "fakeSeriesIterator"
    },
    "fakeSeriesIterator.Next": {
      "Name": "fakeSeriesIterator.Next",
      "File": "storage/buffer_test.go",
      "Line": 431,
      "Receiver": "fakeSeriesIterator"
    },
    "fakeSeriesIterator.Seek": {
      "Name": "fakeSeriesIterator.Seek",
      "File": "storage/buffer_test.go",
      "Line": 439,
      "Receiver": "fakeSeriesIterator"
    },
    "fanout.Appender": {
      "Name": "fanout.Appender",
      "File": "storage/fanout.go",
      "Line": 120,
      "Receiver": "fanout"
    },
    "fanout.ChunkQuerier": {
      "Name": "fanout.ChunkQuerier",
      "File": "storage/fanout.go",
      "Line": 98,
      "Receiver": "fanout"
    },
    "fanout.Close": {
      "Name": "fanout.Close",
      "File": "storage/fanout.go",
      "Line": 134,
      "Receiver": "fanout"
    },
    "fanout.Querier": {
      "Name": "fanout.Querier",
      "File": "storage/fanout.go",
      "Line": 74,
      "Receiver": "fanout"
    },
    "fanout.StartTime": {
      "Name": "fanout.StartTime",
      "File": "storage/fanout.go",
      "Line": 54,
      "Receiver": "fanout"
    },
    "fanoutAppender.Append": {
      "Name": "fanoutAppender.Append",
      "File": "storage/fanout.go",
      "Line": 160,
      "Receiver": "fanoutAppender"
    },
    "fanoutAppender.AppendCTZeroSample": {
      "Name": "fanoutAppender.AppendCTZeroSample",
      "File": "storage/fanout.go",
      "Line": 230,
      "Receiver": "fanoutAppender"
    },
    "fanoutAppender.AppendExemplar": {
      "Name": "fanoutAppender.AppendExemplar",
      "File": "storage/fanout.go",
      "Line": 174,
      "Receiver": "fanoutAppender"
    },
    "fanoutAppender.AppendHistogram": {
      "Name": "fanoutAppender.AppendHistogram",
      "File": "storage/fanout.go",
      "Line": 188,
      "Receiver": "fanoutAppender"
    },
    "fanoutAppender.AppendHistogramCTZeroSample": {
      "Name": "fanoutAppender.AppendHistogramCTZeroSample",
      "File": "storage/fanout.go",
      "Line": 202,
      "Receiver": "fanoutAppender"
    },
    "fanoutAppender.Commit": {
      "Name": "fanoutAppender.Commit",
      "File": "storage/fanout.go",
      "Line": 244,
      "Receiver": "fanoutAppender"
    },
    "fanoutAppender.Rollback": {
      "Name": "fanoutAppender.Rollback",
      "File": "storage/fanout.go",
      "Line": 259,
      "Receiver": "fanoutAppender"
    },
    "fanoutAppender.SetOptions": {
      "Name": "fanoutAppender.SetOptions",
      "File": "storage/fanout.go",
      "Line": 151,
      "Receiver": "fanoutAppender"
    },
    "fanoutAppender.UpdateMetadata": {
      "Name": "fanoutAppender.UpdateMetadata",
      "File": "storage/fanout.go",
      "Line": 216,
      "Receiver": "fanoutAppender"
    },
    "faultySegmentFile.Write": {
      "Name": "faultySegmentFile.Write",
      "File": "tsdb/wlog/wlog_test.go",
      "Line": 492,
      "Receiver": "faultySegmentFile"
    },
    "fetchApps": {
      "Name": "fetchApps",
      "File": "discovery/marathon/marathon.go",
      "Line": 341,
      "Receiver": ""
    },
    "fetchDirectIORqmtsFromStatx": {
      "Name": "fetchDirectIORqmtsFromStatx",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 385,
      "Receiver": ""
    },
    "fetchDiscovery.Run": {
      "Name": "fetchDiscovery.Run",
      "File": "discovery/xds/xds.go",
      "Line": 111,
      "Receiver": "fetchDiscovery"
    },
    "fetchDiscovery.poll": {
      "Name": "fetchDiscovery.poll",
      "File": "discovery/xds/xds.go",
      "Line": 128,
      "Receiver": "fetchDiscovery"
    },
    "fhSample.Copy": {
      "Name": "fhSample.Copy",
      "File": "storage/buffer.go",
      "Line": 248,
      "Receiver": "fhSample"
    },
    "fhSample.F": {
      "Name": "fhSample.F",
      "File": "storage/buffer.go",
      "Line": 232,
      "Receiver": "fhSample"
    },
    "fhSample.FH": {
      "Name": "fhSample.FH",
      "File": "storage/buffer.go",
      "Line": 240,
      "Receiver": "fhSample"
    },
    "fhSample.H": {
      "Name": "fhSample.H",
      "File": "storage/buffer.go",
      "Line": 236,
      "Receiver": "fhSample"
    },
    "fhSample.T": {
      "Name": "fhSample.T",
      "File": "storage/buffer.go",
      "Line": 228,
      "Receiver": "fhSample"
    },
    "fhSample.Type": {
      "Name": "fhSample.Type",
      "File": "storage/buffer.go",
      "Line": 244,
      "Receiver": "fhSample"
    },
    "fileDirectIORqmts": {
      "Name": "fileDirectIORqmts",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 254,
      "Receiver": ""
    },
    "fileErr": {
      "Name": "fileErr",
      "File": "config/config.go",
      "Line": 1514,
      "Receiver": ""
    },
    "fileMetrics.Register": {
      "Name": "fileMetrics.Register",
      "File": "discovery/file/metrics.go",
      "Line": 65,
      "Receiver": "fileMetrics"
    },
    "fileMetrics.Unregister": {
      "Name": "fileMetrics.Unregister",
      "File": "discovery/file/metrics.go",
      "Line": 70,
      "Receiver": "fileMetrics"
    },
    "fileMetrics.init": {
      "Name": "fileMetrics.init",
      "File": "discovery/file/metrics.go",
      "Line": 74,
      "Receiver": "fileMetrics"
    },
    "filePath": {
      "Name": "filePath",
      "File": "config/config.go",
      "Line": 1506,
      "Receiver": ""
    },
    "fileSource": {
      "Name": "fileSource",
      "File": "discovery/file/file.go",
      "Line": 428,
      "Receiver": ""
    },
    "fileStatusFlags": {
      "Name": "fileStatusFlags",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 323,
      "Receiver": ""
    },
    "file_observability_v1_mads_proto_init": {
      "Name": "file_observability_v1_mads_proto_init",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 345,
      "Receiver": ""
    },
    "file_observability_v1_mads_proto_rawDescGZIP": {
      "Name": "file_observability_v1_mads_proto_rawDescGZIP",
      "File": "discovery/xds/kuma_mads.pb.go",
      "Line": 309,
      "Receiver": ""
    },
    "filterChunkQueriers": {
      "Name": "filterChunkQueriers",
      "File": "storage/merge.go",
      "Line": 121,
      "Receiver": ""
    },
    "filterExtLabelsFromMatchers": {
      "Name": "filterExtLabelsFromMatchers",
      "File": "storage/remote/read_handler.go",
      "Line": 259,
      "Receiver": ""
    },
    "filterFloats": {
      "Name": "filterFloats",
      "File": "promql/functions.go",
      "Line": 496,
      "Receiver": ""
    },
    "filterOutBuiltInLabels": {
      "Name": "filterOutBuiltInLabels",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client.go",
      "Line": 240,
      "Receiver": ""
    },
    "filterQueriers": {
      "Name": "filterQueriers",
      "File": "storage/merge.go",
      "Line": 76,
      "Receiver": ""
    },
    "filterTsLimit": {
      "Name": "filterTsLimit",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 2099,
      "Receiver": ""
    },
    "findEqualOrPrefixStringMatchers": {
      "Name": "findEqualOrPrefixStringMatchers",
      "File": "model/labels/regexp.go",
      "Line": 1032,
      "Receiver": ""
    },
    "findMinAndMaxTimestamps": {
      "Name": "findMinAndMaxTimestamps",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 423,
      "Receiver": ""
    },
    "findSamplesForMetric": {
      "Name": "findSamplesForMetric",
      "File": "scrape/manager_test.go",
      "Line": 881,
      "Receiver": ""
    },
    "findSetMatches": {
      "Name": "findSetMatches",
      "File": "model/labels/regexp.go",
      "Line": 125,
      "Receiver": ""
    },
    "findSetMatchesFromAlternate": {
      "Name": "findSetMatchesFromAlternate",
      "File": "model/labels/regexp.go",
      "Line": 219,
      "Receiver": ""
    },
    "findSetMatchesFromConcat": {
      "Name": "findSetMatchesFromConcat",
      "File": "model/labels/regexp.go",
      "Line": 182,
      "Receiver": ""
    },
    "findSetMatchesInternal": {
      "Name": "findSetMatchesInternal",
      "File": "model/labels/regexp.go",
      "Line": 131,
      "Receiver": ""
    },
    "fingerprint": {
      "Name": "fingerprint",
      "File": "documentation/examples/custom-sd/adapter/adapter.go",
      "Line": 39,
      "Receiver": ""
    },
    "flagConfig.setFeatureListOptions": {
      "Name": "flagConfig.setFeatureListOptions",
      "File": "cmd/prometheus/main.go",
      "Line": 221,
      "Receiver": "flagConfig"
    },
    "floatBucketIterator.At": {
      "Name": "floatBucketIterator.At",
      "File": "model/histogram/float_histogram.go",
      "Line": 1015,
      "Receiver": "floatBucketIterator"
    },
    "floatBucketIterator.Next": {
      "Name": "floatBucketIterator.Next",
      "File": "model/histogram/float_histogram.go",
      "Line": 1020,
      "Receiver": "floatBucketIterator"
    },
    "floatBucketsMatch": {
      "Name": "floatBucketsMatch",
      "File": "promql/promqltest/test.go",
      "Line": 1067,
      "Receiver": ""
    },
    "floatHistogramIterator.At": {
      "Name": "floatHistogramIterator.At",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 901,
      "Receiver": "floatHistogramIterator"
    },
    "floatHistogramIterator.AtFloatHistogram": {
      "Name": "floatHistogramIterator.AtFloatHistogram",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 909,
      "Receiver": "floatHistogramIterator"
    },
    "floatHistogramIterator.AtHistogram": {
      "Name": "floatHistogramIterator.AtHistogram",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 905,
      "Receiver": "floatHistogramIterator"
    },
    "floatHistogramIterator.AtT": {
      "Name": "floatHistogramIterator.AtT",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 955,
      "Receiver": "floatHistogramIterator"
    },
    "floatHistogramIterator.Err": {
      "Name": "floatHistogramIterator.Err",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 959,
      "Receiver": "floatHistogramIterator"
    },
    "floatHistogramIterator.Next": {
      "Name": "floatHistogramIterator.Next",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 989,
      "Receiver": "floatHistogramIterator"
    },
    "floatHistogramIterator.Reset": {
      "Name": "floatHistogramIterator.Reset",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 963,
      "Receiver": "floatHistogramIterator"
    },
    "floatHistogramIterator.Seek": {
      "Name": "floatHistogramIterator.Seek",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 888,
      "Receiver": "floatHistogramIterator"
    },
    "floatHistogramIterator.readXor": {
      "Name": "floatHistogramIterator.readXor",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 1158,
      "Receiver": "floatHistogramIterator"
    },
    "floatHistogramSample": {
      "Name": "floatHistogramSample",
      "File": "storage/merge_test.go",
      "Line": 393,
      "Receiver": ""
    },
    "floatToTime": {
      "Name": "floatToTime",
      "File": "template/template.go",
      "Line": 405,
      "Receiver": ""
    },
    "forceEMWA": {
      "Name": "forceEMWA",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1744,
      "Receiver": ""
    },
    "formatDate": {
      "Name": "formatDate",
      "File": "promql/engine.go",
      "Line": 3709,
      "Receiver": ""
    },
    "formatHyphenatedWords": {
      "Name": "formatHyphenatedWords",
      "File": "util/documentcli/documentcli.go",
      "Line": 264,
      "Receiver": ""
    },
    "formatOpenMetricsFloat": {
      "Name": "formatOpenMetricsFloat",
      "File": "model/textparse/protobufparse.go",
      "Line": 652,
      "Receiver": ""
    },
    "formatPromQL": {
      "Name": "formatPromQL",
      "File": "cmd/promtool/main.go",
      "Line": 1306,
      "Receiver": ""
    },
    "formatRules": {
      "Name": "formatRules",
      "File": "rules/manager_test.go",
      "Line": 867,
      "Receiver": ""
    },
    "formatSeriesName": {
      "Name": "formatSeriesName",
      "File": "cmd/promtool/analyze.go",
      "Line": 157,
      "Receiver": ""
    },
    "formatSeriesResult": {
      "Name": "formatSeriesResult",
      "File": "promql/promqltest/test.go",
      "Line": 1166,
      "Receiver": ""
    },
    "formatSeriesSet": {
      "Name": "formatSeriesSet",
      "File": "cmd/promtool/tsdb.go",
      "Line": 757,
      "Receiver": ""
    },
    "formatSeriesSetOpenMetrics": {
      "Name": "formatSeriesSetOpenMetrics",
      "File": "cmd/promtool/tsdb.go",
      "Line": 800,
      "Receiver": ""
    },
    "formatValueType": {
      "Name": "formatValueType",
      "File": "web/ui/mantine-ui/src/promql/tools/gen_functions_list/main.go",
      "Line": 24,
      "Receiver": ""
    },
    "formatValueTypes": {
      "Name": "formatValueTypes",
      "File": "web/ui/mantine-ui/src/promql/tools/gen_functions_list/main.go",
      "Line": 28,
      "Receiver": ""
    },
    "funcAbs": {
      "Name": "funcAbs",
      "File": "promql/functions.go",
      "Line": 1043,
      "Receiver": ""
    },
    "funcAbsent": {
      "Name": "funcAbsent",
      "File": "promql/functions.go",
      "Line": 999,
      "Receiver": ""
    },
    "funcAbsentOverTime": {
      "Name": "funcAbsentOverTime",
      "File": "promql/functions.go",
      "Line": 1015,
      "Receiver": ""
    },
    "funcAcos": {
      "Name": "funcAcos",
      "File": "promql/functions.go",
      "Line": 1103,
      "Receiver": ""
    },
    "funcAcosh": {
      "Name": "funcAcosh",
      "File": "promql/functions.go",
      "Line": 1133,
      "Receiver": ""
    },
    "funcAsin": {
      "Name": "funcAsin",
      "File": "promql/functions.go",
      "Line": 1098,
      "Receiver": ""
    },
    "funcAsinh": {
      "Name": "funcAsinh",
      "File": "promql/functions.go",
      "Line": 1128,
      "Receiver": ""
    },
    "funcAtan": {
      "Name": "funcAtan",
      "File": "promql/functions.go",
      "Line": 1108,
      "Receiver": ""
    },
    "funcAtanh": {
      "Name": "funcAtanh",
      "File": "promql/functions.go",
      "Line": 1138,
      "Receiver": ""
    },
    "funcAvgOverTime": {
      "Name": "funcAvgOverTime",
      "File": "promql/functions.go",
      "Line": 673,
      "Receiver": ""
    },
    "funcCeil": {
      "Name": "funcCeil",
      "File": "promql/functions.go",
      "Line": 1048,
      "Receiver": ""
    },
    "funcChanges": {
      "Name": "funcChanges",
      "File": "promql/functions.go",
      "Line": 1527,
      "Receiver": ""
    },
    "funcClamp": {
      "Name": "funcClamp",
      "File": "promql/functions.go",
      "Line": 598,
      "Receiver": ""
    },
    "funcClampMax": {
      "Name": "funcClampMax",
      "File": "promql/functions.go",
      "Line": 606,
      "Receiver": ""
    },
    "funcClampMin": {
      "Name": "funcClampMin",
      "File": "promql/functions.go",
      "Line": 613,
      "Receiver": ""
    },
    "funcCos": {
      "Name": "funcCos",
      "File": "promql/functions.go",
      "Line": 1088,
      "Receiver": ""
    },
    "funcCosh": {
      "Name": "funcCosh",
      "File": "promql/functions.go",
      "Line": 1118,
      "Receiver": ""
    },
    "funcCountOverTime": {
      "Name": "funcCountOverTime",
      "File": "promql/functions.go",
      "Line": 764,
      "Receiver": ""
    },
    "funcDayOfMonth": {
      "Name": "funcDayOfMonth",
      "File": "promql/functions.go",
      "Line": 1704,
      "Receiver": ""
    },
    "funcDayOfWeek": {
      "Name": "funcDayOfWeek",
      "File": "promql/functions.go",
      "Line": 1711,
      "Receiver": ""
    },
    "funcDayOfYear": {
      "Name": "funcDayOfYear",
      "File": "promql/functions.go",
      "Line": 1718,
      "Receiver": ""
    },
    "funcDaysInMonth": {
      "Name": "funcDaysInMonth",
      "File": "promql/functions.go",
      "Line": 1697,
      "Receiver": ""
    },
    "funcDeg": {
      "Name": "funcDeg",
      "File": "promql/functions.go",
      "Line": 1150,
      "Receiver": ""
    },
    "funcDelta": {
      "Name": "funcDelta",
      "File": "promql/functions.go",
      "Line": 291,
      "Receiver": ""
    },
    "funcDeriv": {
      "Name": "funcDeriv",
      "File": "promql/functions.go",
      "Line": 1253,
      "Receiver": ""
    },
    "funcDoubleExponentialSmoothing": {
      "Name": "funcDoubleExponentialSmoothing",
      "File": "promql/functions.go",
      "Line": 444,
      "Receiver": ""
    },
    "funcExp": {
      "Name": "funcExp",
      "File": "promql/functions.go",
      "Line": 1058,
      "Receiver": ""
    },
    "funcFloor": {
      "Name": "funcFloor",
      "File": "promql/functions.go",
      "Line": 1053,
      "Receiver": ""
    },
    "funcHistogramAvg": {
      "Name": "funcHistogramAvg",
      "File": "promql/functions.go",
      "Line": 1331,
      "Receiver": ""
    },
    "funcHistogramCount": {
      "Name": "funcHistogramCount",
      "File": "promql/functions.go",
      "Line": 1317,
      "Receiver": ""
    },
    "funcHistogramFraction": {
      "Name": "funcHistogramFraction",
      "File": "promql/functions.go",
      "Line": 1385,
      "Receiver": ""
    },
    "funcHistogramQuantile": {
      "Name": "funcHistogramQuantile",
      "File": "promql/functions.go",
      "Line": 1430,
      "Receiver": ""
    },
    "funcHistogramStdDev": {
      "Name": "funcHistogramStdDev",
      "File": "promql/functions.go",
      "Line": 1375,
      "Receiver": ""
    },
    "funcHistogramStdVar": {
      "Name": "funcHistogramStdVar",
      "File": "promql/functions.go",
      "Line": 1380,
      "Receiver": ""
    },
    "funcHistogramSum": {
      "Name": "funcHistogramSum",
      "File": "promql/functions.go",
      "Line": 1324,
      "Receiver": ""
    },
    "funcHour": {
      "Name": "funcHour",
      "File": "promql/functions.go",
      "Line": 1725,
      "Receiver": ""
    },
    "funcIdelta": {
      "Name": "funcIdelta",
      "File": "promql/functions.go",
      "Line": 311,
      "Receiver": ""
    },
    "funcIncrease": {
      "Name": "funcIncrease",
      "File": "promql/functions.go",
      "Line": 301,
      "Receiver": ""
    },
    "funcIrate": {
      "Name": "funcIrate",
      "File": "promql/functions.go",
      "Line": 306,
      "Receiver": ""
    },
    "funcLastOverTime": {
      "Name": "funcLastOverTime",
      "File": "promql/functions.go",
      "Line": 771,
      "Receiver": ""
    },
    "funcLn": {
      "Name": "funcLn",
      "File": "promql/functions.go",
      "Line": 1068,
      "Receiver": ""
    },
    "funcLog10": {
      "Name": "funcLog10",
      "File": "promql/functions.go",
      "Line": 1078,
      "Receiver": ""
    },
    "funcLog2": {
      "Name": "funcLog2",
      "File": "promql/functions.go",
      "Line": 1073,
      "Receiver": ""
    },
    "funcMadOverTime": {
      "Name": "funcMadOverTime",
      "File": "promql/functions.go",
      "Line": 797,
      "Receiver": ""
    },
    "funcMaxOverTime": {
      "Name": "funcMaxOverTime",
      "File": "promql/functions.go",
      "Line": 883,
      "Receiver": ""
    },
    "funcMinOverTime": {
      "Name": "funcMinOverTime",
      "File": "promql/functions.go",
      "Line": 890,
      "Receiver": ""
    },
    "funcMinute": {
      "Name": "funcMinute",
      "File": "promql/functions.go",
      "Line": 1732,
      "Receiver": ""
    },
    "funcMonth": {
      "Name": "funcMonth",
      "File": "promql/functions.go",
      "Line": 1739,
      "Receiver": ""
    },
    "funcPi": {
      "Name": "funcPi",
      "File": "promql/functions.go",
      "Line": 1157,
      "Receiver": ""
    },
    "funcPredictLinear": {
      "Name": "funcPredictLinear",
      "File": "promql/functions.go",
      "Line": 1278,
      "Receiver": ""
    },
    "funcPresentOverTime": {
      "Name": "funcPresentOverTime",
      "File": "promql/functions.go",
      "Line": 1020,
      "Receiver": ""
    },
    "funcQuantileOverTime": {
      "Name": "funcQuantileOverTime",
      "File": "promql/functions.go",
      "Line": 938,
      "Receiver": ""
    },
    "funcRad": {
      "Name": "funcRad",
      "File": "promql/functions.go",
      "Line": 1143,
      "Receiver": ""
    },
    "funcRate": {
      "Name": "funcRate",
      "File": "promql/functions.go",
      "Line": 296,
      "Receiver": ""
    },
    "funcResets": {
      "Name": "funcResets",
      "File": "promql/functions.go",
      "Line": 1482,
      "Receiver": ""
    },
    "funcRound": {
      "Name": "funcRound",
      "File": "promql/functions.go",
      "Line": 620,
      "Receiver": ""
    },
    "funcScalar": {
      "Name": "funcScalar",
      "File": "promql/functions.go",
      "Line": 635,
      "Receiver": ""
    },
    "funcSgn": {
      "Name": "funcSgn",
      "File": "promql/functions.go",
      "Line": 1162,
      "Receiver": ""
    },
    "funcSin": {
      "Name": "funcSin",
      "File": "promql/functions.go",
      "Line": 1083,
      "Receiver": ""
    },
    "funcSinh": {
      "Name": "funcSinh",
      "File": "promql/functions.go",
      "Line": 1113,
      "Receiver": ""
    },
    "funcSort": {
      "Name": "funcSort",
      "File": "promql/functions.go",
      "Line": 507,
      "Receiver": ""
    },
    "funcSortByLabel": {
      "Name": "funcSortByLabel",
      "File": "promql/functions.go",
      "Line": 525,
      "Receiver": ""
    },
    "funcSortByLabelDesc": {
      "Name": "funcSortByLabelDesc",
      "File": "promql/functions.go",
      "Line": 551,
      "Receiver": ""
    },
    "funcSortDesc": {
      "Name": "funcSortDesc",
      "File": "promql/functions.go",
      "Line": 516,
      "Receiver": ""
    },
    "funcSqrt": {
      "Name": "funcSqrt",
      "File": "promql/functions.go",
      "Line": 1063,
      "Receiver": ""
    },
    "funcStddevOverTime": {
      "Name": "funcStddevOverTime",
      "File": "promql/functions.go",
      "Line": 989,
      "Receiver": ""
    },
    "funcStdvarOverTime": {
      "Name": "funcStdvarOverTime",
      "File": "promql/functions.go",
      "Line": 994,
      "Receiver": ""
    },
    "funcSumOverTime": {
      "Name": "funcSumOverTime",
      "File": "promql/functions.go",
      "Line": 897,
      "Receiver": ""
    },
    "funcTan": {
      "Name": "funcTan",
      "File": "promql/functions.go",
      "Line": 1093,
      "Receiver": ""
    },
    "funcTanh": {
      "Name": "funcTanh",
      "File": "promql/functions.go",
      "Line": 1123,
      "Receiver": ""
    },
    "funcTime": {
      "Name": "funcTime",
      "File": "promql/functions.go",
      "Line": 62,
      "Receiver": ""
    },
    "funcTimestamp": {
      "Name": "funcTimestamp",
      "File": "promql/functions.go",
      "Line": 1176,
      "Receiver": ""
    },
    "funcTsOfLastOverTime": {
      "Name": "funcTsOfLastOverTime",
      "File": "promql/functions.go",
      "Line": 822,
      "Receiver": ""
    },
    "funcTsOfMaxOverTime": {
      "Name": "funcTsOfMaxOverTime",
      "File": "promql/functions.go",
      "Line": 842,
      "Receiver": ""
    },
    "funcTsOfMinOverTime": {
      "Name": "funcTsOfMinOverTime",
      "File": "promql/functions.go",
      "Line": 849,
      "Receiver": ""
    },
    "funcVector": {
      "Name": "funcVector",
      "File": "promql/functions.go",
      "Line": 1615,
      "Receiver": ""
    },
    "funcYear": {
      "Name": "funcYear",
      "File": "promql/functions.go",
      "Line": 1746,
      "Receiver": ""
    },
    "fuzzParseMetricWithContentType": {
      "Name": "fuzzParseMetricWithContentType",
      "File": "promql/fuzz.go",
      "Line": 63,
      "Receiver": ""
    },
    "gatherFamily": {
      "Name": "gatherFamily",
      "File": "tsdb/agent/db_test.go",
      "Line": 841,
      "Receiver": ""
    },
    "gatherLabels": {
      "Name": "gatherLabels",
      "File": "scrape/scrape_test.go",
      "Line": 645,
      "Receiver": ""
    },
    "gceMetrics.Register": {
      "Name": "gceMetrics.Register",
      "File": "discovery/gce/metrics.go",
      "Line": 27,
      "Receiver": "gceMetrics"
    },
    "gceMetrics.Unregister": {
      "Name": "gceMetrics.Unregister",
      "File": "discovery/gce/metrics.go",
      "Line": 32,
      "Receiver": "gceMetrics"
    },
    "genHistogramAndFloatSeries": {
      "Name": "genHistogramAndFloatSeries",
      "File": "tsdb/block_test.go",
      "Line": 808,
      "Receiver": ""
    },
    "genHistogramSeries": {
      "Name": "genHistogramSeries",
      "File": "tsdb/block_test.go",
      "Line": 776,
      "Receiver": ""
    },
    "genSeries": {
      "Name": "genSeries",
      "File": "tsdb/block_test.go",
      "Line": 769,
      "Receiver": ""
    },
    "genSeriesFromSampleGenerator": {
      "Name": "genSeriesFromSampleGenerator",
      "File": "tsdb/block_test.go",
      "Line": 852,
      "Receiver": ""
    },
    "genSeriesWithSample": {
      "Name": "genSeriesWithSample",
      "File": "storage/remote/write_handler_test.go",
      "Line": 789,
      "Receiver": ""
    },
    "generateAttributes": {
      "Name": "generateAttributes",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 1181,
      "Receiver": ""
    },
    "generateBucket": {
      "Name": "generateBucket",
      "File": "cmd/promtool/tsdb.go",
      "Line": 884,
      "Receiver": ""
    },
    "generateCustomHistograms": {
      "Name": "generateCustomHistograms",
      "File": "tsdb/compact_test.go",
      "Line": 1805,
      "Receiver": ""
    },
    "generateExemplars": {
      "Name": "generateExemplars",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 1187,
      "Receiver": ""
    },
    "generateGroupingKey": {
      "Name": "generateGroupingKey",
      "File": "promql/engine.go",
      "Line": 3657,
      "Receiver": ""
    },
    "generateGroupingLabels": {
      "Name": "generateGroupingLabels",
      "File": "promql/engine.go",
      "Line": 3670,
      "Receiver": ""
    },
    "generateInfoFunctionTestSeries": {
      "Name": "generateInfoFunctionTestSeries",
      "File": "promql/bench_test.go",
      "Line": 520,
      "Receiver": ""
    },
    "generateNativeHistogramCustomBucketsSeries": {
      "Name": "generateNativeHistogramCustomBucketsSeries",
      "File": "promql/bench_test.go",
      "Line": 610,
      "Receiver": ""
    },
    "generateNativeHistogramSeries": {
      "Name": "generateNativeHistogramSeries",
      "File": "promql/bench_test.go",
      "Line": 575,
      "Receiver": ""
    },
    "generateOTLPWriteRequest": {
      "Name": "generateOTLPWriteRequest",
      "File": "storage/remote/write_test.go",
      "Line": 544,
      "Receiver": ""
    },
    "generateRandomEntries": {
      "Name": "generateRandomEntries",
      "File": "tsdb/wlog/reader_test.go",
      "Line": 241,
      "Receiver": ""
    },
    "generateRandomValues": {
      "Name": "generateRandomValues",
      "File": "model/labels/regexp_test.go",
      "Line": 1324,
      "Receiver": ""
    },
    "generateSamples": {
      "Name": "generateSamples",
      "File": "tsdb/chunks/samples.go",
      "Line": 95,
      "Receiver": ""
    },
    "generateTargetGroups": {
      "Name": "generateTargetGroups",
      "File": "documentation/examples/custom-sd/adapter/adapter.go",
      "Line": 68,
      "Receiver": ""
    },
    "generateTestHistogram": {
      "Name": "generateTestHistogram",
      "File": "scrape/manager_test.go",
      "Line": 892,
      "Receiver": ""
    },
    "generateWALRecords": {
      "Name": "generateWALRecords",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 737,
      "Receiver": ""
    },
    "genericChunkSeriesSetAdapter.At": {
      "Name": "genericChunkSeriesSetAdapter.At",
      "File": "storage/generic.go",
      "Line": 52,
      "Receiver": "genericChunkSeriesSetAdapter"
    },
    "genericMergeSeriesSet.At": {
      "Name": "genericMergeSeriesSet.At",
      "File": "storage/merge.go",
      "Line": 405,
      "Receiver": "genericMergeSeriesSet"
    },
    "genericMergeSeriesSet.Err": {
      "Name": "genericMergeSeriesSet.Err",
      "File": "storage/merge.go",
      "Line": 416,
      "Receiver": "genericMergeSeriesSet"
    },
    "genericMergeSeriesSet.Next": {
      "Name": "genericMergeSeriesSet.Next",
      "File": "storage/merge.go",
      "Line": 365,
      "Receiver": "genericMergeSeriesSet"
    },
    "genericMergeSeriesSet.Warnings": {
      "Name": "genericMergeSeriesSet.Warnings",
      "File": "storage/merge.go",
      "Line": 425,
      "Receiver": "genericMergeSeriesSet"
    },
    "genericQuerierAdapter.Select": {
      "Name": "genericQuerierAdapter.Select",
      "File": "storage/generic.go",
      "Line": 64,
      "Receiver": "genericQuerierAdapter"
    },
    "genericReduceDelta": {
      "Name": "genericReduceDelta",
      "File": "storage/buffer.go",
      "Line": 742,
      "Receiver": ""
    },
    "genericSeriesSetAdapter.At": {
      "Name": "genericSeriesSetAdapter.At",
      "File": "storage/generic.go",
      "Line": 44,
      "Receiver": "genericSeriesSetAdapter"
    },
    "genericSeriesSetHeap.Len": {
      "Name": "genericSeriesSetHeap.Len",
      "File": "storage/merge.go",
      "Line": 435,
      "Receiver": "genericSeriesSetHeap"
    },
    "genericSeriesSetHeap.Less": {
      "Name": "genericSeriesSetHeap.Less",
      "File": "storage/merge.go",
      "Line": 438,
      "Receiver": "genericSeriesSetHeap"
    },
    "genericSeriesSetHeap.Pop": {
      "Name": "genericSeriesSetHeap.Pop",
      "File": "storage/merge.go",
      "Line": 447,
      "Receiver": "genericSeriesSetHeap"
    },
    "genericSeriesSetHeap.Push": {
      "Name": "genericSeriesSetHeap.Push",
      "File": "storage/merge.go",
      "Line": 443,
      "Receiver": "genericSeriesSetHeap"
    },
    "genericSeriesSetHeap.Swap": {
      "Name": "genericSeriesSetHeap.Swap",
      "File": "storage/merge.go",
      "Line": 436,
      "Receiver": "genericSeriesSetHeap"
    },
    "getAudience": {
      "Name": "getAudience",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 362,
      "Receiver": ""
    },
    "getBlock": {
      "Name": "getBlock",
      "File": "tsdb/db.go",
      "Line": 1529,
      "Receiver": ""
    },
    "getBound": {
      "Name": "getBound",
      "File": "model/histogram/generic.go",
      "Line": 453,
      "Receiver": ""
    },
    "getBoundExponential": {
      "Name": "getBoundExponential",
      "File": "model/histogram/generic.go",
      "Line": 470,
      "Receiver": ""
    },
    "getBucketCountsAtTime": {
      "Name": "getBucketCountsAtTime",
      "File": "cmd/promtool/analyze.go",
      "Line": 246,
      "Receiver": ""
    },
    "getBucketOffset": {
      "Name": "getBucketOffset",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms.go",
      "Line": 358,
      "Receiver": ""
    },
    "getCORSHandlerFunc": {
      "Name": "getCORSHandlerFunc",
      "File": "util/httputil/cors_test.go",
      "Line": 24,
      "Receiver": ""
    },
    "getChainSampleIterator": {
      "Name": "getChainSampleIterator",
      "File": "storage/merge.go",
      "Line": 492,
      "Receiver": ""
    },
    "getClient": {
      "Name": "getClient",
      "File": "tracing/tracing.go",
      "Line": 179,
      "Receiver": ""
    },
    "getCloudConfiguration": {
      "Name": "getCloudConfiguration",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 376,
      "Receiver": ""
    },
    "getCommonPrefixIndent": {
      "Name": "getCommonPrefixIndent",
      "File": "promql/parser/prettier.go",
      "Line": 164,
      "Receiver": ""
    },
    "getCompatibleBlockDuration": {
      "Name": "getCompatibleBlockDuration",
      "File": "cmd/promtool/backfill.go",
      "Line": 72,
      "Receiver": ""
    },
    "getCompressionHandlerFunc": {
      "Name": "getCompressionHandlerFunc",
      "File": "util/httputil/compression_test.go",
      "Line": 42,
      "Receiver": ""
    },
    "getConfigType": {
      "Name": "getConfigType",
      "File": "discovery/registry.go",
      "Line": 84,
      "Receiver": ""
    },
    "getCounterResetHint": {
      "Name": "getCounterResetHint",
      "File": "storage/series_test.go",
      "Line": 647,
      "Receiver": ""
    },
    "getCurrentGaugeValuesFor": {
      "Name": "getCurrentGaugeValuesFor",
      "File": "cmd/prometheus/main_test.go",
      "Line": 397,
      "Receiver": ""
    },
    "getDedicatedServerDetails": {
      "Name": "getDedicatedServerDetails",
      "File": "discovery/ovhcloud/dedicated_server.go",
      "Line": 74,
      "Receiver": ""
    },
    "getDedicatedServerList": {
      "Name": "getDedicatedServerList",
      "File": "discovery/ovhcloud/dedicated_server.go",
      "Line": 64,
      "Receiver": ""
    },
    "getDumpedSamples": {
      "Name": "getDumpedSamples",
      "File": "cmd/promtool/tsdb_test.go",
      "Line": 59,
      "Receiver": ""
    },
    "getEndpointInfoForSystems": {
      "Name": "getEndpointInfoForSystems",
      "File": "discovery/uyuni/uyuni.go",
      "Line": 203,
      "Receiver": ""
    },
    "getFPointSlice": {
      "Name": "getFPointSlice",
      "File": "promql/engine.go",
      "Line": 2303,
      "Receiver": ""
    },
    "getFailureCount": {
      "Name": "getFailureCount",
      "File": "discovery/http/http_test.go",
      "Line": 135,
      "Receiver": ""
    },
    "getFormattedBytes": {
      "Name": "getFormattedBytes",
      "File": "cmd/promtool/tsdb.go",
      "Line": 386,
      "Receiver": ""
    },
    "getFormattedTime": {
      "Name": "getFormattedTime",
      "File": "cmd/promtool/tsdb.go",
      "Line": 379,
      "Receiver": ""
    },
    "getFunction": {
      "Name": "getFunction",
      "File": "promql/parser/functions.go",
      "Line": 455,
      "Receiver": ""
    },
    "getGlobalURL": {
      "Name": "getGlobalURL",
      "File": "web/api/v1/api.go",
      "Line": 1062,
      "Receiver": ""
    },
    "getGoGC": {
      "Name": "getGoGC",
      "File": "config/config.go",
      "Line": 1518,
      "Receiver": ""
    },
    "getHPointSlice": {
      "Name": "getHPointSlice",
      "File": "promql/engine.go",
      "Line": 2325,
      "Receiver": ""
    },
    "getHistogramValType": {
      "Name": "getHistogramValType",
      "File": "storage/remote/codec.go",
      "Line": 461,
      "Receiver": ""
    },
    "getIntGaugeMetric": {
      "Name": "getIntGaugeMetric",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/testutil_test.go",
      "Line": 26,
      "Receiver": ""
    },
    "getIntSumMetric": {
      "Name": "getIntSumMetric",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/testutil_test.go",
      "Line": 41,
      "Receiver": ""
    },
    "getKumaMadsV1DiscoveryResponse": {
      "Name": "getKumaMadsV1DiscoveryResponse",
      "File": "discovery/xds/kuma_test.go",
      "Line": 92,
      "Receiver": ""
    },
    "getLe": {
      "Name": "getLe",
      "File": "cmd/promtool/analyze.go",
      "Line": 240,
      "Receiver": ""
    },
    "getLimits": {
      "Name": "getLimits",
      "File": "util/runtime/limits_default.go",
      "Line": 37,
      "Receiver": ""
    },
    "getLines": {
      "Name": "getLines",
      "File": "promql/promqltest/test.go",
      "Line": 463,
      "Receiver": ""
    },
    "getLogLines": {
      "Name": "getLogLines",
      "File": "util/logging/file_test.go",
      "Line": 26,
      "Receiver": ""
    },
    "getMMappedFile": {
      "Name": "getMMappedFile",
      "File": "promql/query_logger.go",
      "Line": 106,
      "Receiver": ""
    },
    "getMatrixSelectorHPoints": {
      "Name": "getMatrixSelectorHPoints",
      "File": "promql/engine.go",
      "Line": 2343,
      "Receiver": ""
    },
    "getMetricValue": {
      "Name": "getMetricValue",
      "File": "cmd/prometheus/main_test.go",
      "Line": 663,
      "Receiver": ""
    },
    "getMinAndMaxTimestamps": {
      "Name": "getMinAndMaxTimestamps",
      "File": "cmd/promtool/backfill.go",
      "Line": 33,
      "Receiver": ""
    },
    "getMockConf": {
      "Name": "getMockConf",
      "File": "discovery/ovhcloud/ovhcloud_test.go",
      "Line": 40,
      "Receiver": ""
    },
    "getMockConfFromString": {
      "Name": "getMockConfFromString",
      "File": "discovery/ovhcloud/ovhcloud_test.go",
      "Line": 53,
      "Receiver": ""
    },
    "getNetworkInformationForSystems": {
      "Name": "getNetworkInformationForSystems",
      "File": "discovery/uyuni/uyuni.go",
      "Line": 189,
      "Receiver": ""
    },
    "getNetworksLabels": {
      "Name": "getNetworksLabels",
      "File": "discovery/moby/network.go",
      "Line": 36,
      "Receiver": ""
    },
    "getOOOSeriesChunks": {
      "Name": "getOOOSeriesChunks",
      "File": "tsdb/ooo_head_read.go",
      "Line": 91,
      "Receiver": ""
    },
    "getPort": {
      "Name": "getPort",
      "File": "util/testutil/port.go",
      "Line": 55,
      "Receiver": ""
    },
    "getPromExemplars": {
      "Name": "getPromExemplars",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 354,
      "Receiver": ""
    },
    "getRuleGroupNextToken": {
      "Name": "getRuleGroupNextToken",
      "File": "web/api/v1/api.go",
      "Line": 1681,
      "Receiver": ""
    },
    "getSDCheckResult": {
      "Name": "getSDCheckResult",
      "File": "cmd/promtool/sd.go",
      "Line": 130,
      "Receiver": ""
    },
    "getSegmentSize": {
      "Name": "getSegmentSize",
      "File": "tsdb/wlog/watcher.go",
      "Line": 729,
      "Receiver": ""
    },
    "getSeriesIDFromRef": {
      "Name": "getSeriesIDFromRef",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 948,
      "Receiver": ""
    },
    "getServiceValueMode": {
      "Name": "getServiceValueMode",
      "File": "discovery/moby/services.go",
      "Line": 153,
      "Receiver": ""
    },
    "getStartOrEnd": {
      "Name": "getStartOrEnd",
      "File": "web/api/v1/translate_ast.go",
      "Line": 151,
      "Receiver": ""
    },
    "getSystemGroupNames": {
      "Name": "getSystemGroupNames",
      "File": "discovery/uyuni/uyuni.go",
      "Line": 286,
      "Receiver": ""
    },
    "getSystemGroupsInfoOfMonitoredClients": {
      "Name": "getSystemGroupsInfoOfMonitoredClients",
      "File": "discovery/uyuni/uyuni.go",
      "Line": 171,
      "Receiver": ""
    },
    "getTestNameFromRegexp": {
      "Name": "getTestNameFromRegexp",
      "File": "model/labels/regexp_test.go",
      "Line": 1317,
      "Receiver": ""
    },
    "getTimeRangesForSelector": {
      "Name": "getTimeRangesForSelector",
      "File": "promql/engine.go",
      "Line": 904,
      "Receiver": ""
    },
    "getToken": {
      "Name": "getToken",
      "File": "storage/remote/azuread/azuread_test.go",
      "Line": 326,
      "Receiver": ""
    },
    "getVpsDetails": {
      "Name": "getVpsDetails",
      "File": "discovery/ovhcloud/vps.go",
      "Line": 77,
      "Receiver": ""
    },
    "getVpsList": {
      "Name": "getVpsList",
      "File": "discovery/ovhcloud/vps.go",
      "Line": 101,
      "Receiver": ""
    },
    "hSample.Copy": {
      "Name": "hSample.Copy",
      "File": "storage/buffer.go",
      "Line": 219,
      "Receiver": "hSample"
    },
    "hSample.F": {
      "Name": "hSample.F",
      "File": "storage/buffer.go",
      "Line": 203,
      "Receiver": "hSample"
    },
    "hSample.FH": {
      "Name": "hSample.FH",
      "File": "storage/buffer.go",
      "Line": 211,
      "Receiver": "hSample"
    },
    "hSample.H": {
      "Name": "hSample.H",
      "File": "storage/buffer.go",
      "Line": 207,
      "Receiver": "hSample"
    },
    "hSample.T": {
      "Name": "hSample.T",
      "File": "storage/buffer.go",
      "Line": 199,
      "Receiver": "hSample"
    },
    "hSample.Type": {
      "Name": "hSample.Type",
      "File": "storage/buffer.go",
      "Line": 215,
      "Receiver": "hSample"
    },
    "handleAPIError": {
      "Name": "handleAPIError",
      "File": "cmd/promtool/query.go",
      "Line": 205,
      "Receiver": ""
    },
    "handleAggregationError": {
      "Name": "handleAggregationError",
      "File": "promql/engine.go",
      "Line": 3629,
      "Receiver": ""
    },
    "handleAppendableError": {
      "Name": "handleAppendableError",
      "File": "tsdb/head_append.go",
      "Line": 1128,
      "Receiver": ""
    },
    "handleChunkWriteError": {
      "Name": "handleChunkWriteError",
      "File": "tsdb/head_append.go",
      "Line": 1961,
      "Receiver": ""
    },
    "handleOTLP": {
      "Name": "handleOTLP",
      "File": "storage/remote/write_test.go",
      "Line": 521,
      "Receiver": ""
    },
    "handleVectorBinopError": {
      "Name": "handleVectorBinopError",
      "File": "promql/engine.go",
      "Line": 3639,
      "Receiver": ""
    },
    "hasAtModifier": {
      "Name": "hasAtModifier",
      "File": "promql/promqltest/test.go",
      "Line": 1269,
      "Receiver": ""
    },
    "hasDelta": {
      "Name": "hasDelta",
      "File": "storage/remote/write_handler.go",
      "Line": 669,
      "Receiver": ""
    },
    "hasPrefixCaseInsensitive": {
      "Name": "hasPrefixCaseInsensitive",
      "File": "model/labels/regexp.go",
      "Line": 1070,
      "Receiver": ""
    },
    "hasSuffixCaseInsensitive": {
      "Name": "hasSuffixCaseInsensitive",
      "File": "model/labels/regexp.go",
      "Line": 1074,
      "Receiver": ""
    },
    "hcloudDiscovery.refresh": {
      "Name": "hcloudDiscovery.refresh",
      "File": "discovery/hetzner/hcloud.go",
      "Line": 83,
      "Receiver": "hcloudDiscovery"
    },
    "hcloudSDTestSuite.SetupTest": {
      "Name": "hcloudSDTestSuite.SetupTest",
      "File": "discovery/hetzner/hcloud_test.go",
      "Line": 30,
      "Receiver": "hcloudSDTestSuite"
    },
    "headAppender.Append": {
      "Name": "headAppender.Append",
      "File": "tsdb/head_append.go",
      "Line": 343,
      "Receiver": "headAppender"
    },
    "headAppender.AppendCTZeroSample": {
      "Name": "headAppender.AppendCTZeroSample",
      "File": "tsdb/head_append.go",
      "Line": 418,
      "Receiver": "headAppender"
    },
    "headAppender.AppendExemplar": {
      "Name": "headAppender.AppendExemplar",
      "File": "tsdb/head_append.go",
      "Line": 611,
      "Receiver": "headAppender"
    },
    "headAppender.AppendHistogram": {
      "Name": "headAppender.AppendHistogram",
      "File": "tsdb/head_append.go",
      "Line": 646,
      "Receiver": "headAppender"
    },
    "headAppender.AppendHistogramCTZeroSample": {
      "Name": "headAppender.AppendHistogramCTZeroSample",
      "File": "tsdb/head_append.go",
      "Line": 763,
      "Receiver": "headAppender"
    },
    "headAppender.Commit": {
      "Name": "headAppender.Commit",
      "File": "tsdb/head_append.go",
      "Line": 1450,
      "Receiver": "headAppender"
    },
    "headAppender.GetRef": {
      "Name": "headAppender.GetRef",
      "File": "tsdb/head_append.go",
      "Line": 900,
      "Receiver": "headAppender"
    },
    "headAppender.Rollback": {
      "Name": "headAppender.Rollback",
      "File": "tsdb/head_append.go",
      "Line": 1968,
      "Receiver": "headAppender"
    },
    "headAppender.SetOptions": {
      "Name": "headAppender.SetOptions",
      "File": "tsdb/head_append.go",
      "Line": 339,
      "Receiver": "headAppender"
    },
    "headAppender.UpdateMetadata": {
      "Name": "headAppender.UpdateMetadata",
      "File": "tsdb/head_append.go",
      "Line": 869,
      "Receiver": "headAppender"
    },
    "headAppender.commitExemplars": {
      "Name": "headAppender.commitExemplars",
      "File": "tsdb/head_append.go",
      "Line": 1038,
      "Receiver": "headAppender"
    },
    "headAppender.commitFloatHistograms": {
      "Name": "headAppender.commitFloatHistograms",
      "File": "tsdb/head_append.go",
      "Line": 1339,
      "Receiver": "headAppender"
    },
    "headAppender.commitHistograms": {
      "Name": "headAppender.commitHistograms",
      "File": "tsdb/head_append.go",
      "Line": 1251,
      "Receiver": "headAppender"
    },
    "headAppender.commitMetadata": {
      "Name": "headAppender.commitMetadata",
      "File": "tsdb/head_append.go",
      "Line": 1430,
      "Receiver": "headAppender"
    },
    "headAppender.commitSamples": {
      "Name": "headAppender.commitSamples",
      "File": "tsdb/head_append.go",
      "Line": 1163,
      "Receiver": "headAppender"
    },
    "headAppender.getOrCreate": {
      "Name": "headAppender.getOrCreate",
      "File": "tsdb/head_append.go",
      "Line": 456,
      "Receiver": "headAppender"
    },
    "headAppender.log": {
      "Name": "headAppender.log",
      "File": "tsdb/head_append.go",
      "Line": 910,
      "Receiver": "headAppender"
    },
    "headAppender.unmarkCreatedSeriesAsPendingCommit": {
      "Name": "headAppender.unmarkCreatedSeriesAsPendingCommit",
      "File": "tsdb/head_append.go",
      "Line": 1440,
      "Receiver": "headAppender"
    },
    "headChunkReader.ChunkOrIterable": {
      "Name": "headChunkReader.ChunkOrIterable",
      "File": "tsdb/head_read.go",
      "Line": 346,
      "Receiver": "headChunkReader"
    },
    "headChunkReader.ChunkOrIterableWithCopy": {
      "Name": "headChunkReader.ChunkOrIterableWithCopy",
      "File": "tsdb/head_read.go",
      "Line": 357,
      "Receiver": "headChunkReader"
    },
    "headChunkReader.Close": {
      "Name": "headChunkReader.Close",
      "File": "tsdb/head_read.go",
      "Line": 338,
      "Receiver": "headChunkReader"
    },
    "headChunkReader.chunk": {
      "Name": "headChunkReader.chunk",
      "File": "tsdb/head_read.go",
      "Line": 365,
      "Receiver": "headChunkReader"
    },
    "headIndexReader.Close": {
      "Name": "headIndexReader.Close",
      "File": "tsdb/head_read.go",
      "Line": 52,
      "Receiver": "headIndexReader"
    },
    "headIndexReader.LabelNames": {
      "Name": "headIndexReader.LabelNames",
      "File": "tsdb/head_read.go",
      "Line": 90,
      "Receiver": "headIndexReader"
    },
    "headIndexReader.LabelNamesFor": {
      "Name": "headIndexReader.LabelNamesFor",
      "File": "tsdb/head_read.go",
      "Line": 281,
      "Receiver": "headIndexReader"
    },
    "headIndexReader.LabelValueFor": {
      "Name": "headIndexReader.LabelValueFor",
      "File": "tsdb/head_read.go",
      "Line": 265,
      "Receiver": "headIndexReader"
    },
    "headIndexReader.LabelValues": {
      "Name": "headIndexReader.LabelValues",
      "File": "tsdb/head_read.go",
      "Line": 76,
      "Receiver": "headIndexReader"
    },
    "headIndexReader.Postings": {
      "Name": "headIndexReader.Postings",
      "File": "tsdb/head_read.go",
      "Line": 105,
      "Receiver": "headIndexReader"
    },
    "headIndexReader.PostingsForAllLabelValues": {
      "Name": "headIndexReader.PostingsForAllLabelValues",
      "File": "tsdb/head_read.go",
      "Line": 113,
      "Receiver": "headIndexReader"
    },
    "headIndexReader.PostingsForLabelMatching": {
      "Name": "headIndexReader.PostingsForLabelMatching",
      "File": "tsdb/head_read.go",
      "Line": 109,
      "Receiver": "headIndexReader"
    },
    "headIndexReader.Series": {
      "Name": "headIndexReader.Series",
      "File": "tsdb/head_read.go",
      "Line": 182,
      "Receiver": "headIndexReader"
    },
    "headIndexReader.ShardedPostings": {
      "Name": "headIndexReader.ShardedPostings",
      "File": "tsdb/head_read.go",
      "Line": 151,
      "Receiver": "headIndexReader"
    },
    "headIndexReader.SortedLabelValues": {
      "Name": "headIndexReader.SortedLabelValues",
      "File": "tsdb/head_read.go",
      "Line": 64,
      "Receiver": "headIndexReader"
    },
    "headIndexReader.SortedPostings": {
      "Name": "headIndexReader.SortedPostings",
      "File": "tsdb/head_read.go",
      "Line": 117,
      "Receiver": "headIndexReader"
    },
    "headIndexReader.Symbols": {
      "Name": "headIndexReader.Symbols",
      "File": "tsdb/head_read.go",
      "Line": 56,
      "Receiver": "headIndexReader"
    },
    "header": {
      "Name": "header",
      "File": "util/documentcli/documentcli.go",
      "Line": 56,
      "Receiver": ""
    },
    "hetznerMetrics.Register": {
      "Name": "hetznerMetrics.Register",
      "File": "discovery/hetzner/metrics.go",
      "Line": 27,
      "Receiver": "hetznerMetrics"
    },
    "hetznerMetrics.Unregister": {
      "Name": "hetznerMetrics.Unregister",
      "File": "discovery/hetzner/metrics.go",
      "Line": 32,
      "Receiver": "hetznerMetrics"
    },
    "hintRecordingQuerier.Select": {
      "Name": "hintRecordingQuerier.Select",
      "File": "promql/engine_test.go",
      "Line": 302,
      "Receiver": "hintRecordingQuerier"
    },
    "histogramIterator.At": {
      "Name": "histogramIterator.At",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 955,
      "Receiver": "histogramIterator"
    },
    "histogramIterator.AtFloatHistogram": {
      "Name": "histogramIterator.AtFloatHistogram",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 1005,
      "Receiver": "histogramIterator"
    },
    "histogramIterator.AtHistogram": {
      "Name": "histogramIterator.AtHistogram",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 959,
      "Receiver": "histogramIterator"
    },
    "histogramIterator.AtT": {
      "Name": "histogramIterator.AtT",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 1059,
      "Receiver": "histogramIterator"
    },
    "histogramIterator.Err": {
      "Name": "histogramIterator.Err",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 1063,
      "Receiver": "histogramIterator"
    },
    "histogramIterator.Next": {
      "Name": "histogramIterator.Next",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 1107,
      "Receiver": "histogramIterator"
    },
    "histogramIterator.Reset": {
      "Name": "histogramIterator.Reset",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 1067,
      "Receiver": "histogramIterator"
    },
    "histogramIterator.Seek": {
      "Name": "histogramIterator.Seek",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 942,
      "Receiver": "histogramIterator"
    },
    "histogramIterator.readSum": {
      "Name": "histogramIterator.readSum",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 1314,
      "Receiver": "histogramIterator"
    },
    "histogramRate": {
      "Name": "histogramRate",
      "File": "promql/functions.go",
      "Line": 194,
      "Receiver": ""
    },
    "histogramSample": {
      "Name": "histogramSample",
      "File": "storage/merge_test.go",
      "Line": 387,
      "Receiver": ""
    },
    "histogramSeries.Iterator": {
      "Name": "histogramSeries.Iterator",
      "File": "promql/histogram_stats_iterator_test.go",
      "Line": 226,
      "Receiver": "histogramSeries"
    },
    "histogramSeries.Labels": {
      "Name": "histogramSeries.Labels",
      "File": "promql/histogram_stats_iterator_test.go",
      "Line": 224,
      "Receiver": "histogramSeries"
    },
    "histogramStatsSeries.Iterator": {
      "Name": "histogramStatsSeries.Iterator",
      "File": "promql/engine.go",
      "Line": 3970,
      "Receiver": "histogramStatsSeries"
    },
    "histogramVariance": {
      "Name": "histogramVariance",
      "File": "promql/functions.go",
      "Line": 1337,
      "Receiver": ""
    },
    "httpMetrics.Register": {
      "Name": "httpMetrics.Register",
      "File": "discovery/http/metrics.go",
      "Line": 50,
      "Receiver": "httpMetrics"
    },
    "httpMetrics.Unregister": {
      "Name": "httpMetrics.Unregister",
      "File": "discovery/http/metrics.go",
      "Line": 55,
      "Receiver": "httpMetrics"
    },
    "iaasDiscovery.refresh": {
      "Name": "iaasDiscovery.refresh",
      "File": "discovery/stackit/server.go",
      "Line": 114,
      "Receiver": "iaasDiscovery"
    },
    "importRules": {
      "Name": "importRules",
      "File": "cmd/promtool/main.go",
      "Line": 1228,
      "Receiver": ""
    },
    "indent": {
      "Name": "indent",
      "File": "promql/parser/prettier.go",
      "Line": 180,
      "Receiver": ""
    },
    "indentLines": {
      "Name": "indentLines",
      "File": "cmd/promtool/unittest.go",
      "Line": 603,
      "Receiver": ""
    },
    "indexWriterSeriesSlice.Len": {
      "Name": "indexWriterSeriesSlice.Len",
      "File": "tsdb/index/index.go",
      "Line": 68,
      "Receiver": "indexWriterSeriesSlice"
    },
    "indexWriterSeriesSlice.Less": {
      "Name": "indexWriterSeriesSlice.Less",
      "File": "tsdb/index/index.go",
      "Line": 71,
      "Receiver": "indexWriterSeriesSlice"
    },
    "indexWriterSeriesSlice.Swap": {
      "Name": "indexWriterSeriesSlice.Swap",
      "File": "tsdb/index/index.go",
      "Line": 69,
      "Receiver": "indexWriterSeriesSlice"
    },
    "indexWriterStage.String": {
      "Name": "indexWriterStage.String",
      "File": "tsdb/index/index.go",
      "Line": 84,
      "Receiver": "indexWriterStage"
    },
    "ingressLabels": {
      "Name": "ingressLabels",
      "File": "discovery/kubernetes/ingress.go",
      "Line": 149,
      "Receiver": ""
    },
    "ingressSource": {
      "Name": "ingressSource",
      "File": "discovery/kubernetes/ingress.go",
      "Line": 134,
      "Receiver": ""
    },
    "ingressSourceFromNamespaceAndName": {
      "Name": "ingressSourceFromNamespaceAndName",
      "File": "discovery/kubernetes/ingress.go",
      "Line": 138,
      "Receiver": ""
    },
    "init": {
      "Name": "init",
      "File": "web/api/v1/json_codec.go",
      "Line": 27,
      "Receiver": ""
    },
    "initAppender.Append": {
      "Name": "initAppender.Append",
      "File": "tsdb/head_append.go",
      "Line": 49,
      "Receiver": "initAppender"
    },
    "initAppender.AppendCTZeroSample": {
      "Name": "initAppender.AppendCTZeroSample",
      "File": "tsdb/head_append.go",
      "Line": 105,
      "Receiver": "initAppender"
    },
    "initAppender.AppendExemplar": {
      "Name": "initAppender.AppendExemplar",
      "File": "tsdb/head_append.go",
      "Line": 59,
      "Receiver": "initAppender"
    },
    "initAppender.AppendHistogram": {
      "Name": "initAppender.AppendHistogram",
      "File": "tsdb/head_append.go",
      "Line": 76,
      "Receiver": "initAppender"
    },
    "initAppender.AppendHistogramCTZeroSample": {
      "Name": "initAppender.AppendHistogramCTZeroSample",
      "File": "tsdb/head_append.go",
      "Line": 86,
      "Receiver": "initAppender"
    },
    "initAppender.Commit": {
      "Name": "initAppender.Commit",
      "File": "tsdb/head_append.go",
      "Line": 134,
      "Receiver": "initAppender"
    },
    "initAppender.GetRef": {
      "Name": "initAppender.GetRef",
      "File": "tsdb/head_append.go",
      "Line": 127,
      "Receiver": "initAppender"
    },
    "initAppender.Rollback": {
      "Name": "initAppender.Rollback",
      "File": "tsdb/head_append.go",
      "Line": 142,
      "Receiver": "initAppender"
    },
    "initAppender.SetOptions": {
      "Name": "initAppender.SetOptions",
      "File": "tsdb/head_append.go",
      "Line": 43,
      "Receiver": "initAppender"
    },
    "initAppender.UpdateMetadata": {
      "Name": "initAppender.UpdateMetadata",
      "File": "tsdb/head_append.go",
      "Line": 96,
      "Receiver": "initAppender"
    },
    "injectHeadersRoundTripper.RoundTrip": {
      "Name": "injectHeadersRoundTripper.RoundTrip",
      "File": "storage/remote/client.go",
      "Line": 238,
      "Receiver": "injectHeadersRoundTripper"
    },
    "insert": {
      "Name": "insert",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 484,
      "Receiver": ""
    },
    "inspector.Visit": {
      "Name": "inspector.Visit",
      "File": "promql/parser/ast.go",
      "Line": 363,
      "Receiver": "inspector"
    },
    "instanceDiscovery.refresh": {
      "Name": "instanceDiscovery.refresh",
      "File": "discovery/scaleway/instance.go",
      "Line": 119,
      "Receiver": "instanceDiscovery"
    },
    "instantValue": {
      "Name": "instantValue",
      "File": "promql/functions.go",
      "Line": 315,
      "Receiver": ""
    },
    "instrumentedChunkWriter.WriteChunks": {
      "Name": "instrumentedChunkWriter.WriteChunks",
      "File": "tsdb/compact.go",
      "Line": 619,
      "Receiver": "instrumentedChunkWriter"
    },
    "int32ptr": {
      "Name": "int32ptr",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 39,
      "Receiver": ""
    },
    "int64p": {
      "Name": "int64p",
      "File": "model/textparse/openmetricsparse_test.go",
      "Line": 28,
      "Receiver": ""
    },
    "int64ptr": {
      "Name": "int64ptr",
      "File": "discovery/aws/ec2_test.go",
      "Line": 42,
      "Receiver": ""
    },
    "intersectPostings.At": {
      "Name": "intersectPostings.At",
      "File": "tsdb/index/postings.go",
      "Line": 618,
      "Receiver": "intersectPostings"
    },
    "intersectPostings.Err": {
      "Name": "intersectPostings.Err",
      "File": "tsdb/index/postings.go",
      "Line": 655,
      "Receiver": "intersectPostings"
    },
    "intersectPostings.Next": {
      "Name": "intersectPostings.Next",
      "File": "tsdb/index/postings.go",
      "Line": 638,
      "Receiver": "intersectPostings"
    },
    "intersectPostings.Seek": {
      "Name": "intersectPostings.Seek",
      "File": "tsdb/index/postings.go",
      "Line": 650,
      "Receiver": "intersectPostings"
    },
    "intersectPostings.doNext": {
      "Name": "intersectPostings.doNext",
      "File": "tsdb/index/postings.go",
      "Line": 622,
      "Receiver": "intersectPostings"
    },
    "intersection": {
      "Name": "intersection",
      "File": "tsdb/db_test.go",
      "Line": 1354,
      "Receiver": ""
    },
    "invalidParamError": {
      "Name": "invalidParamError",
      "File": "web/api/v1/api.go",
      "Line": 438,
      "Receiver": ""
    },
    "inversePostingsForMatcher": {
      "Name": "inversePostingsForMatcher",
      "File": "tsdb/querier.go",
      "Line": 364,
      "Receiver": ""
    },
    "ionosMetrics.Register": {
      "Name": "ionosMetrics.Register",
      "File": "discovery/ionos/metrics.go",
      "Line": 27,
      "Receiver": "ionosMetrics"
    },
    "ionosMetrics.Unregister": {
      "Name": "ionosMetrics.Unregister",
      "File": "discovery/ionos/metrics.go",
      "Line": 32,
      "Receiver": "ionosMetrics"
    },
    "isAligned": {
      "Name": "isAligned",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 286,
      "Receiver": ""
    },
    "isAlpha": {
      "Name": "isAlpha",
      "File": "promql/parser/lex.go",
      "Line": 1116,
      "Receiver": ""
    },
    "isAlphaNumeric": {
      "Name": "isAlphaNumeric",
      "File": "promql/parser/lex.go",
      "Line": 1104,
      "Receiver": ""
    },
    "isBlockDir": {
      "Name": "isBlockDir",
      "File": "tsdb/db.go",
      "Line": 2298,
      "Receiver": ""
    },
    "isCaseInsensitive": {
      "Name": "isCaseInsensitive",
      "File": "model/labels/regexp.go",
      "Line": 285,
      "Receiver": ""
    },
    "isCaseSensitive": {
      "Name": "isCaseSensitive",
      "File": "model/labels/regexp.go",
      "Line": 291,
      "Receiver": ""
    },
    "isClosed": {
      "Name": "isClosed",
      "File": "tsdb/wlog/watcher.go",
      "Line": 738,
      "Receiver": ""
    },
    "isDigit": {
      "Name": "isDigit",
      "File": "promql/parser/lex.go",
      "Line": 1111,
      "Receiver": ""
    },
    "isEndOfLine": {
      "Name": "isEndOfLine",
      "File": "promql/parser/lex.go",
      "Line": 1099,
      "Receiver": ""
    },
    "isNativeHistogram": {
      "Name": "isNativeHistogram",
      "File": "model/textparse/protobufparse.go",
      "Line": 687,
      "Receiver": ""
    },
    "isSameMetric": {
      "Name": "isSameMetric",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw.go",
      "Line": 282,
      "Receiver": ""
    },
    "isSampleOld": {
      "Name": "isSampleOld",
      "File": "storage/remote/queue_manager.go",
      "Line": 622,
      "Receiver": ""
    },
    "isSeriesPartOfFamily": {
      "Name": "isSeriesPartOfFamily",
      "File": "scrape/scrape.go",
      "Line": 1912,
      "Receiver": ""
    },
    "isSpace": {
      "Name": "isSpace",
      "File": "promql/parser/lex.go",
      "Line": 1094,
      "Receiver": ""
    },
    "isTimeSeriesOldFilter": {
      "Name": "isTimeSeriesOldFilter",
      "File": "storage/remote/queue_manager.go",
      "Line": 632,
      "Receiver": ""
    },
    "isTmpDir": {
      "Name": "isTmpDir",
      "File": "tsdb/db.go",
      "Line": 2308,
      "Receiver": ""
    },
    "isV2TimeSeriesOldFilter": {
      "Name": "isV2TimeSeriesOldFilter",
      "File": "storage/remote/queue_manager.go",
      "Line": 662,
      "Receiver": ""
    },
    "isWholeWhenMultiplied": {
      "Name": "isWholeWhenMultiplied",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 179,
      "Receiver": ""
    },
    "isolation.State": {
      "Name": "isolation.State",
      "File": "tsdb/isolation.go",
      "Line": 138,
      "Receiver": "isolation"
    },
    "isolation.TraverseOpenReads": {
      "Name": "isolation.TraverseOpenReads",
      "File": "tsdb/isolation.go",
      "Line": 169,
      "Receiver": "isolation"
    },
    "isolation.closeAppend": {
      "Name": "isolation.closeAppend",
      "File": "tsdb/isolation.go",
      "Line": 219,
      "Receiver": "isolation"
    },
    "isolation.lastAppendID": {
      "Name": "isolation.lastAppendID",
      "File": "tsdb/isolation.go",
      "Line": 208,
      "Receiver": "isolation"
    },
    "isolation.lowWatermark": {
      "Name": "isolation.lowWatermark",
      "File": "tsdb/isolation.go",
      "Line": 96,
      "Receiver": "isolation"
    },
    "isolation.lowWatermarkLocked": {
      "Name": "isolation.lowWatermarkLocked",
      "File": "tsdb/isolation.go",
      "Line": 106,
      "Receiver": "isolation"
    },
    "isolation.lowestAppendTime": {
      "Name": "isolation.lowestAppendTime",
      "File": "tsdb/isolation.go",
      "Line": 123,
      "Receiver": "isolation"
    },
    "isolation.newAppendID": {
      "Name": "isolation.newAppendID",
      "File": "tsdb/isolation.go",
      "Line": 184,
      "Receiver": "isolation"
    },
    "isolationState.Close": {
      "Name": "isolationState.Close",
      "File": "tsdb/isolation.go",
      "Line": 36,
      "Receiver": "isolationState"
    },
    "isolationState.IsolationDisabled": {
      "Name": "isolationState.IsolationDisabled",
      "File": "tsdb/isolation.go",
      "Line": 43,
      "Receiver": "isolationState"
    },
    "join": {
      "Name": "join",
      "File": "discovery/ionos/server.go",
      "Line": 163,
      "Receiver": ""
    },
    "joinLabels": {
      "Name": "joinLabels",
      "File": "promql/parser/printer.go",
      "Line": 95,
      "Receiver": ""
    },
    "jsonPrinter.printLabelValues": {
      "Name": "jsonPrinter.printLabelValues",
      "File": "cmd/promtool/main.go",
      "Line": 1221,
      "Receiver": "jsonPrinter"
    },
    "jsonPrinter.printSeries": {
      "Name": "jsonPrinter.printSeries",
      "File": "cmd/promtool/main.go",
      "Line": 1216,
      "Receiver": "jsonPrinter"
    },
    "jsonPrinter.printValue": {
      "Name": "jsonPrinter.printValue",
      "File": "cmd/promtool/main.go",
      "Line": 1211,
      "Receiver": "jsonPrinter"
    },
    "k8sDiscoveryTest.Run": {
      "Name": "k8sDiscoveryTest.Run",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 105,
      "Receiver": "k8sDiscoveryTest"
    },
    "kahanSumInc": {
      "Name": "kahanSumInc",
      "File": "promql/functions.go",
      "Line": 1191,
      "Receiver": ""
    },
    "klogv1Writer.Write": {
      "Name": "klogv1Writer.Write",
      "File": "cmd/prometheus/main.go",
      "Line": 102,
      "Receiver": "klogv1Writer"
    },
    "kubernetesMetrics.Register": {
      "Name": "kubernetesMetrics.Register",
      "File": "discovery/kubernetes/metrics.go",
      "Line": 79,
      "Receiver": "kubernetesMetrics"
    },
    "kubernetesMetrics.Unregister": {
      "Name": "kubernetesMetrics.Unregister",
      "File": "discovery/kubernetes/metrics.go",
      "Line": 84,
      "Receiver": "kubernetesMetrics"
    },
    "kubernetesSDHostURL": {
      "Name": "kubernetesSDHostURL",
      "File": "config/config_test.go",
      "Line": 2783,
      "Receiver": ""
    },
    "kumaMadsV1ResourceParser": {
      "Name": "kumaMadsV1ResourceParser",
      "File": "discovery/xds/kuma.go",
      "Line": 142,
      "Receiver": ""
    },
    "labelAndAnnotation.String": {
      "Name": "labelAndAnnotation.String",
      "File": "cmd/promtool/unittest.go",
      "Line": 648,
      "Receiver": "labelAndAnnotation"
    },
    "labelGenericQueriers.Get": {
      "Name": "labelGenericQueriers.Get",
      "File": "storage/merge.go",
      "Line": 185,
      "Receiver": "labelGenericQueriers"
    },
    "labelGenericQueriers.Len": {
      "Name": "labelGenericQueriers.Len",
      "File": "storage/merge.go",
      "Line": 184,
      "Receiver": "labelGenericQueriers"
    },
    "labelGenericQueriers.SplitByHalf": {
      "Name": "labelGenericQueriers.SplitByHalf",
      "File": "storage/merge.go",
      "Line": 186,
      "Receiver": "labelGenericQueriers"
    },
    "labelNamesWithMatchers": {
      "Name": "labelNamesWithMatchers",
      "File": "tsdb/querier.go",
      "Line": 466,
      "Receiver": ""
    },
    "labelProtosToLabels": {
      "Name": "labelProtosToLabels",
      "File": "prompb/codec.go",
      "Line": 38,
      "Receiver": ""
    },
    "labelSize": {
      "Name": "labelSize",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 570,
      "Receiver": ""
    },
    "labelValuesWithMatchers": {
      "Name": "labelValuesWithMatchers",
      "File": "tsdb/querier.go",
      "Line": 393,
      "Receiver": ""
    },
    "labelsAndAnnotations.Len": {
      "Name": "labelsAndAnnotations.Len",
      "File": "cmd/promtool/unittest.go",
      "Line": 620,
      "Receiver": "labelsAndAnnotations"
    },
    "labelsAndAnnotations.Less": {
      "Name": "labelsAndAnnotations.Less",
      "File": "cmd/promtool/unittest.go",
      "Line": 622,
      "Receiver": "labelsAndAnnotations"
    },
    "labelsAndAnnotations.String": {
      "Name": "labelsAndAnnotations.String",
      "File": "cmd/promtool/unittest.go",
      "Line": 630,
      "Receiver": "labelsAndAnnotations"
    },
    "labelsAndAnnotations.Swap": {
      "Name": "labelsAndAnnotations.Swap",
      "File": "cmd/promtool/unittest.go",
      "Line": 621,
      "Receiver": "labelsAndAnnotations"
    },
    "labelsDeletePromQL": {
      "Name": "labelsDeletePromQL",
      "File": "cmd/promtool/main.go",
      "Line": 1361,
      "Receiver": ""
    },
    "labelsForTest": {
      "Name": "labelsForTest",
      "File": "tsdb/agent/db_test.go",
      "Line": 826,
      "Receiver": ""
    },
    "labelsIsEmpty": {
      "Name": "labelsIsEmpty",
      "File": "web/api/v1/json_codec.go",
      "Line": 235,
      "Receiver": ""
    },
    "labelsSetPromQL": {
      "Name": "labelsSetPromQL",
      "File": "cmd/promtool/main.go",
      "Line": 1316,
      "Receiver": ""
    },
    "labelsSize": {
      "Name": "labelsSize",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 562,
      "Receiver": ""
    },
    "labelsToEqualityMatchers": {
      "Name": "labelsToEqualityMatchers",
      "File": "storage/remote/storage.go",
      "Line": 209,
      "Receiver": ""
    },
    "labelsToOpenAPILabelSet": {
      "Name": "labelsToOpenAPILabelSet",
      "File": "notifier/util.go",
      "Line": 42,
      "Receiver": ""
    },
    "labelsWithHashCollision": {
      "Name": "labelsWithHashCollision",
      "File": "tsdb/head_test.go",
      "Line": 6373,
      "Receiver": ""
    },
    "lazyGenericSeriesSet.At": {
      "Name": "lazyGenericSeriesSet.At",
      "File": "storage/lazy.go",
      "Line": 43,
      "Receiver": "lazyGenericSeriesSet"
    },
    "lazyGenericSeriesSet.Err": {
      "Name": "lazyGenericSeriesSet.Err",
      "File": "storage/lazy.go",
      "Line": 36,
      "Receiver": "lazyGenericSeriesSet"
    },
    "lazyGenericSeriesSet.Next": {
      "Name": "lazyGenericSeriesSet.Next",
      "File": "storage/lazy.go",
      "Line": 27,
      "Receiver": "lazyGenericSeriesSet"
    },
    "lazyGenericSeriesSet.Warnings": {
      "Name": "lazyGenericSeriesSet.Warnings",
      "File": "storage/lazy.go",
      "Line": 50,
      "Receiver": "lazyGenericSeriesSet"
    },
    "lessByMinTimeAndMinRef": {
      "Name": "lessByMinTimeAndMinRef",
      "File": "tsdb/ooo_head_read.go",
      "Line": 191,
      "Receiver": ""
    },
    "lexBuckets": {
      "Name": "lexBuckets",
      "File": "promql/parser/lex.go",
      "Line": 626,
      "Receiver": ""
    },
    "lexDurationExpr": {
      "Name": "lexDurationExpr",
      "File": "promql/parser/lex.go",
      "Line": 1121,
      "Receiver": ""
    },
    "lexEscape": {
      "Name": "lexEscape",
      "File": "promql/parser/lex.go",
      "Line": 759,
      "Receiver": ""
    },
    "lexHistogram": {
      "Name": "lexHistogram",
      "File": "promql/parser/lex.go",
      "Line": 520,
      "Receiver": ""
    },
    "lexHistogramDescriptor": {
      "Name": "lexHistogramDescriptor",
      "File": "promql/parser/lex.go",
      "Line": 589,
      "Receiver": ""
    },
    "lexIdentifier": {
      "Name": "lexIdentifier",
      "File": "promql/parser/lex.go",
      "Line": 1056,
      "Receiver": ""
    },
    "lexInsideBraces": {
      "Name": "lexInsideBraces",
      "File": "promql/parser/lex.go",
      "Line": 658,
      "Receiver": ""
    },
    "lexKeywordOrIdentifier": {
      "Name": "lexKeywordOrIdentifier",
      "File": "promql/parser/lex.go",
      "Line": 1068,
      "Receiver": ""
    },
    "lexLineComment": {
      "Name": "lexLineComment",
      "File": "promql/parser/lex.go",
      "Line": 883,
      "Receiver": ""
    },
    "lexNumber": {
      "Name": "lexNumber",
      "File": "promql/parser/lex.go",
      "Line": 894,
      "Receiver": ""
    },
    "lexNumberOrDuration": {
      "Name": "lexNumberOrDuration",
      "File": "promql/parser/lex.go",
      "Line": 929,
      "Receiver": ""
    },
    "lexRawString": {
      "Name": "lexRawString",
      "File": "promql/parser/lex.go",
      "Line": 855,
      "Receiver": ""
    },
    "lexSpace": {
      "Name": "lexSpace",
      "File": "promql/parser/lex.go",
      "Line": 874,
      "Receiver": ""
    },
    "lexStatements": {
      "Name": "lexStatements",
      "File": "promql/parser/lex.go",
      "Line": 386,
      "Receiver": ""
    },
    "lexString": {
      "Name": "lexString",
      "File": "promql/parser/lex.go",
      "Line": 835,
      "Receiver": ""
    },
    "lexValueSequence": {
      "Name": "lexValueSequence",
      "File": "promql/parser/lex.go",
      "Line": 712,
      "Receiver": ""
    },
    "lightsailMetrics.Register": {
      "Name": "lightsailMetrics.Register",
      "File": "discovery/aws/metrics_lightsail.go",
      "Line": 27,
      "Receiver": "lightsailMetrics"
    },
    "lightsailMetrics.Unregister": {
      "Name": "lightsailMetrics.Unregister",
      "File": "discovery/aws/metrics_lightsail.go",
      "Line": 32,
      "Receiver": "lightsailMetrics"
    },
    "limitAppender.Append": {
      "Name": "limitAppender.Append",
      "File": "scrape/target.go",
      "Line": 334,
      "Receiver": "limitAppender"
    },
    "limitToString": {
      "Name": "limitToString",
      "File": "util/runtime/limits_default.go",
      "Line": 30,
      "Receiver": ""
    },
    "linearRegression": {
      "Name": "linearRegression",
      "File": "promql/functions.go",
      "Line": 1209,
      "Receiver": ""
    },
    "linodeMetrics.Register": {
      "Name": "linodeMetrics.Register",
      "File": "discovery/linode/metrics.go",
      "Line": 50,
      "Receiver": "linodeMetrics"
    },
    "linodeMetrics.Unregister": {
      "Name": "linodeMetrics.Unregister",
      "File": "discovery/linode/metrics.go",
      "Line": 55,
      "Receiver": "linodeMetrics"
    },
    "lintScrapeConfigs": {
      "Name": "lintScrapeConfigs",
      "File": "cmd/promtool/main.go",
      "Line": 944,
      "Receiver": ""
    },
    "listBlocks": {
      "Name": "listBlocks",
      "File": "cmd/promtool/tsdb.go",
      "Line": 338,
      "Receiver": ""
    },
    "listCheckpoints": {
      "Name": "listCheckpoints",
      "File": "tsdb/wlog/checkpoint.go",
      "Line": 407,
      "Receiver": ""
    },
    "listChunkFiles": {
      "Name": "listChunkFiles",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 367,
      "Receiver": ""
    },
    "listChunkSeriesIterator.At": {
      "Name": "listChunkSeriesIterator.At",
      "File": "storage/series.go",
      "Line": 217,
      "Receiver": "listChunkSeriesIterator"
    },
    "listChunkSeriesIterator.Err": {
      "Name": "listChunkSeriesIterator.Err",
      "File": "storage/series.go",
      "Line": 226,
      "Receiver": "listChunkSeriesIterator"
    },
    "listChunkSeriesIterator.Next": {
      "Name": "listChunkSeriesIterator.Next",
      "File": "storage/series.go",
      "Line": 221,
      "Receiver": "listChunkSeriesIterator"
    },
    "listChunkSeriesIterator.Reset": {
      "Name": "listChunkSeriesIterator.Reset",
      "File": "storage/series.go",
      "Line": 212,
      "Receiver": "listChunkSeriesIterator"
    },
    "listSegments": {
      "Name": "listSegments",
      "File": "tsdb/wlog/wlog.go",
      "Line": 893,
      "Receiver": ""
    },
    "listSeriesIterator.At": {
      "Name": "listSeriesIterator.At",
      "File": "storage/series.go",
      "Line": 121,
      "Receiver": "listSeriesIterator"
    },
    "listSeriesIterator.AtFloatHistogram": {
      "Name": "listSeriesIterator.AtFloatHistogram",
      "File": "storage/series.go",
      "Line": 131,
      "Receiver": "listSeriesIterator"
    },
    "listSeriesIterator.AtHistogram": {
      "Name": "listSeriesIterator.AtHistogram",
      "File": "storage/series.go",
      "Line": 126,
      "Receiver": "listSeriesIterator"
    },
    "listSeriesIterator.AtT": {
      "Name": "listSeriesIterator.AtT",
      "File": "storage/series.go",
      "Line": 136,
      "Receiver": "listSeriesIterator"
    },
    "listSeriesIterator.Err": {
      "Name": "listSeriesIterator.Err",
      "File": "storage/series.go",
      "Line": 172,
      "Receiver": "listSeriesIterator"
    },
    "listSeriesIterator.Next": {
      "Name": "listSeriesIterator.Next",
      "File": "storage/series.go",
      "Line": 141,
      "Receiver": "listSeriesIterator"
    },
    "listSeriesIterator.Reset": {
      "Name": "listSeriesIterator.Reset",
      "File": "storage/series.go",
      "Line": 116,
      "Receiver": "listSeriesIterator"
    },
    "listSeriesIterator.Seek": {
      "Name": "listSeriesIterator.Seek",
      "File": "storage/series.go",
      "Line": 149,
      "Receiver": "listSeriesIterator"
    },
    "listSeriesIteratorWithCopy.AtFloatHistogram": {
      "Name": "listSeriesIteratorWithCopy.AtFloatHistogram",
      "File": "storage/series.go",
      "Line": 193,
      "Receiver": "listSeriesIteratorWithCopy"
    },
    "listSeriesIteratorWithCopy.AtHistogram": {
      "Name": "listSeriesIteratorWithCopy.AtHistogram",
      "File": "storage/series.go",
      "Line": 184,
      "Receiver": "listSeriesIteratorWithCopy"
    },
    "literalPrefixInsensitiveStringMatcher.Matches": {
      "Name": "literalPrefixInsensitiveStringMatcher.Matches",
      "File": "model/labels/regexp.go",
      "Line": 664,
      "Receiver": "literalPrefixInsensitiveStringMatcher"
    },
    "literalPrefixSensitiveStringMatcher.Matches": {
      "Name": "literalPrefixSensitiveStringMatcher.Matches",
      "File": "model/labels/regexp.go",
      "Line": 647,
      "Receiver": "literalPrefixSensitiveStringMatcher"
    },
    "literalSuffixStringMatcher.Matches": {
      "Name": "literalSuffixStringMatcher.Matches",
      "File": "model/labels/regexp.go",
      "Line": 682,
      "Receiver": "literalSuffixStringMatcher"
    },
    "loadAzureAdConfig": {
      "Name": "loadAzureAdConfig",
      "File": "storage/remote/azuread/azuread_test.go",
      "Line": 128,
      "Receiver": ""
    },
    "loadCmd.String": {
      "Name": "loadCmd.String",
      "File": "promql/promqltest/test.go",
      "Line": 535,
      "Receiver": "loadCmd"
    },
    "loadCmd.append": {
      "Name": "loadCmd.append",
      "File": "promql/promqltest/test.go",
      "Line": 560,
      "Receiver": "loadCmd"
    },
    "loadCmd.appendCustomHistogram": {
      "Name": "loadCmd.appendCustomHistogram",
      "File": "promql/promqltest/test.go",
      "Line": 611,
      "Receiver": "loadCmd"
    },
    "loadCmd.set": {
      "Name": "loadCmd.set",
      "File": "promql/promqltest/test.go",
      "Line": 540,
      "Receiver": "loadCmd"
    },
    "loadCmd.testCmd": {
      "Name": "loadCmd.testCmd",
      "File": "promql/promqltest/test.go",
      "Line": 512,
      "Receiver": "loadCmd"
    },
    "loadConfiguration": {
      "Name": "loadConfiguration",
      "File": "scrape/manager_test.go",
      "Line": 466,
      "Receiver": ""
    },
    "loadProfile": {
      "Name": "loadProfile",
      "File": "discovery/scaleway/scaleway.go",
      "Line": 224,
      "Receiver": ""
    },
    "lockStaticConfig.Name": {
      "Name": "lockStaticConfig.Name",
      "File": "discovery/manager_test.go",
      "Line": 1179,
      "Receiver": "lockStaticConfig"
    },
    "lockStaticConfig.NewDiscoverer": {
      "Name": "lockStaticConfig.NewDiscoverer",
      "File": "discovery/manager_test.go",
      "Line": 1180,
      "Receiver": "lockStaticConfig"
    },
    "lockStaticConfig.NewDiscovererMetrics": {
      "Name": "lockStaticConfig.NewDiscovererMetrics",
      "File": "discovery/manager_test.go",
      "Line": 1175,
      "Receiver": "lockStaticConfig"
    },
    "lockStaticDiscoverer.Run": {
      "Name": "lockStaticDiscoverer.Run",
      "File": "discovery/manager_test.go",
      "Line": 1186,
      "Receiver": "lockStaticDiscoverer"
    },
    "logUnfinishedQueries": {
      "Name": "logUnfinishedQueries",
      "File": "promql/query_logger.go",
      "Line": 65,
      "Receiver": ""
    },
    "login": {
      "Name": "login",
      "File": "discovery/uyuni/uyuni.go",
      "Line": 165,
      "Receiver": ""
    },
    "lookupFromAnyServer": {
      "Name": "lookupFromAnyServer",
      "File": "discovery/dns/dns.go",
      "Line": 340,
      "Receiver": ""
    },
    "lookupWithSearchPath": {
      "Name": "lookupWithSearchPath",
      "File": "discovery/dns/dns.go",
      "Line": 291,
      "Receiver": ""
    },
    "lv": {
      "Name": "lv",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 608,
      "Receiver": ""
    },
    "main": {
      "Name": "main",
      "File": "web/ui/mantine-ui/src/promql/tools/gen_functions_list/main.go",
      "Line": 36,
      "Receiver": ""
    },
    "makeBucketBounds": {
      "Name": "makeBucketBounds",
      "File": "cmd/promtool/analyze.go",
      "Line": 274,
      "Receiver": ""
    },
    "makeDiscovery": {
      "Name": "makeDiscovery",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 49,
      "Receiver": ""
    },
    "makeDiscoveryWithMetadata": {
      "Name": "makeDiscoveryWithMetadata",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 86,
      "Receiver": ""
    },
    "makeDiscoveryWithVersion": {
      "Name": "makeDiscoveryWithVersion",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 54,
      "Receiver": ""
    },
    "makeEndpointSliceV1": {
      "Name": "makeEndpointSliceV1",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 47,
      "Receiver": ""
    },
    "makeEndpoints": {
      "Name": "makeEndpoints",
      "File": "discovery/kubernetes/endpoints_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "makeEnumeratedNode": {
      "Name": "makeEnumeratedNode",
      "File": "discovery/kubernetes/node_test.go",
      "Line": 54,
      "Receiver": ""
    },
    "makeEvenSampleSlice": {
      "Name": "makeEvenSampleSlice",
      "File": "tsdb/ooo_head_test.go",
      "Line": 34,
      "Receiver": ""
    },
    "makeExternalService": {
      "Name": "makeExternalService",
      "File": "discovery/kubernetes/service_test.go",
      "Line": 79,
      "Receiver": ""
    },
    "makeFunc": {
      "Name": "makeFunc",
      "File": "util/pool/pool_test.go",
      "Line": 22,
      "Receiver": ""
    },
    "makeIngress": {
      "Name": "makeIngress",
      "File": "discovery/kubernetes/ingress_test.go",
      "Line": 37,
      "Receiver": ""
    },
    "makeInitContainerPods": {
      "Name": "makeInitContainerPods",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 141,
      "Receiver": ""
    },
    "makeInputTargetGroup": {
      "Name": "makeInputTargetGroup",
      "File": "notifier/manager_test.go",
      "Line": 691,
      "Receiver": ""
    },
    "makeInt64Pointer": {
      "Name": "makeInt64Pointer",
      "File": "promql/promqltest/test.go",
      "Line": 1641,
      "Receiver": ""
    },
    "makeLabels": {
      "Name": "makeLabels",
      "File": "util/fmtutil/format.go",
      "Line": 164,
      "Receiver": ""
    },
    "makeLabelsMap": {
      "Name": "makeLabelsMap",
      "File": "util/fmtutil/format.go",
      "Line": 183,
      "Receiver": ""
    },
    "makeLoadBalancerService": {
      "Name": "makeLoadBalancerService",
      "File": "discovery/kubernetes/service_test.go",
      "Line": 99,
      "Receiver": ""
    },
    "makeMergeSeriesSet": {
      "Name": "makeMergeSeriesSet",
      "File": "storage/merge_test.go",
      "Line": 1343,
      "Receiver": ""
    },
    "makeMultiPortPods": {
      "Name": "makeMultiPortPods",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 33,
      "Receiver": ""
    },
    "makeMultiPortService": {
      "Name": "makeMultiPortService",
      "File": "discovery/kubernetes/service_test.go",
      "Line": 28,
      "Receiver": ""
    },
    "makeNode": {
      "Name": "makeNode",
      "File": "discovery/kubernetes/node_test.go",
      "Line": 28,
      "Receiver": ""
    },
    "makeOptionalBool": {
      "Name": "makeOptionalBool",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 29,
      "Receiver": ""
    },
    "makePods": {
      "Name": "makePods",
      "File": "discovery/kubernetes/pod_test.go",
      "Line": 98,
      "Receiver": ""
    },
    "makeSeries": {
      "Name": "makeSeries",
      "File": "storage/merge_test.go",
      "Line": 1330,
      "Receiver": ""
    },
    "makeService": {
      "Name": "makeService",
      "File": "discovery/kubernetes/service_test.go",
      "Line": 75,
      "Receiver": ""
    },
    "makeStopIterator": {
      "Name": "makeStopIterator",
      "File": "tsdb/head_read.go",
      "Line": 602,
      "Receiver": ""
    },
    "makeSuffixedService": {
      "Name": "makeSuffixedService",
      "File": "discovery/kubernetes/service_test.go",
      "Line": 55,
      "Receiver": ""
    },
    "makeTestGauges": {
      "Name": "makeTestGauges",
      "File": "scrape/scrape_test.go",
      "Line": 1426,
      "Receiver": ""
    },
    "makeTimeseries": {
      "Name": "makeTimeseries",
      "File": "util/fmtutil/format.go",
      "Line": 101,
      "Receiver": ""
    },
    "makeXDSResourceHTTPEndpointURL": {
      "Name": "makeXDSResourceHTTPEndpointURL",
      "File": "discovery/xds/client.go",
      "Line": 130,
      "Receiver": ""
    },
    "mapFromVM": {
      "Name": "mapFromVM",
      "File": "discovery/azure/azure.go",
      "Line": 586,
      "Receiver": ""
    },
    "mapFromVMScaleSetVM": {
      "Name": "mapFromVMScaleSetVM",
      "File": "discovery/azure/azure.go",
      "Line": 631,
      "Receiver": ""
    },
    "mapLabelsToNumbers": {
      "Name": "mapLabelsToNumbers",
      "File": "model/labels/labels_dedupelabels.go",
      "Line": 716,
      "Receiver": ""
    },
    "mapSelector": {
      "Name": "mapSelector",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 347,
      "Receiver": ""
    },
    "mapToArray": {
      "Name": "mapToArray",
      "File": "documentation/examples/custom-sd/adapter/adapter.go",
      "Line": 60,
      "Receiver": ""
    },
    "marathonMetrics.Register": {
      "Name": "marathonMetrics.Register",
      "File": "discovery/marathon/metrics.go",
      "Line": 27,
      "Receiver": "marathonMetrics"
    },
    "marathonMetrics.Unregister": {
      "Name": "marathonMetrics.Unregister",
      "File": "discovery/marathon/metrics.go",
      "Line": 32,
      "Receiver": "marathonMetrics"
    },
    "marathonTestAppList": {
      "Name": "marathonTestAppList",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 83,
      "Receiver": ""
    },
    "marathonTestAppListWithContainerNetworkAndPortMappings": {
      "Name": "marathonTestAppListWithContainerNetworkAndPortMappings",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 525,
      "Receiver": ""
    },
    "marathonTestAppListWithContainerPortMappings": {
      "Name": "marathonTestAppListWithContainerPortMappings",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 413,
      "Receiver": ""
    },
    "marathonTestAppListWithDockerContainerPortMappings": {
      "Name": "marathonTestAppListWithDockerContainerPortMappings",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 469,
      "Receiver": ""
    },
    "marathonTestAppListWithMultiplePorts": {
      "Name": "marathonTestAppListWithMultiplePorts",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 159,
      "Receiver": ""
    },
    "marathonTestAppListWithPortDefinitions": {
      "Name": "marathonTestAppListWithPortDefinitions",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 259,
      "Receiver": ""
    },
    "marathonTestAppListWithPortDefinitionsRequirePorts": {
      "Name": "marathonTestAppListWithPortDefinitionsRequirePorts",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 314,
      "Receiver": ""
    },
    "marathonTestAppListWithPorts": {
      "Name": "marathonTestAppListWithPorts",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 366,
      "Receiver": ""
    },
    "marathonTestZeroTaskPortAppList": {
      "Name": "marathonTestZeroTaskPortAppList",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 209,
      "Receiver": ""
    },
    "marshalExemplarJSON": {
      "Name": "marshalExemplarJSON",
      "File": "web/api/v1/json_codec.go",
      "Line": 194,
      "Receiver": ""
    },
    "marshalFPointJSON": {
      "Name": "marshalFPointJSON",
      "File": "web/api/v1/json_codec.go",
      "Line": 165,
      "Receiver": ""
    },
    "marshalHPointJSON": {
      "Name": "marshalHPointJSON",
      "File": "web/api/v1/json_codec.go",
      "Line": 179,
      "Receiver": ""
    },
    "marshalLabelToSizedBuffer": {
      "Name": "marshalLabelToSizedBuffer",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 528,
      "Receiver": ""
    },
    "marshalLabelsJSON": {
      "Name": "marshalLabelsJSON",
      "File": "web/api/v1/json_codec.go",
      "Line": 220,
      "Receiver": ""
    },
    "marshalLabelsToSizedBuffer": {
      "Name": "marshalLabelsToSizedBuffer",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 519,
      "Receiver": ""
    },
    "marshalNumbersToSizedBuffer": {
      "Name": "marshalNumbersToSizedBuffer",
      "File": "model/labels/labels_dedupelabels.go",
      "Line": 667,
      "Receiver": ""
    },
    "marshalSampleJSON": {
      "Name": "marshalSampleJSON",
      "File": "web/api/v1/json_codec.go",
      "Line": 137,
      "Receiver": ""
    },
    "marshalSeriesJSON": {
      "Name": "marshalSeriesJSON",
      "File": "web/api/v1/json_codec.go",
      "Line": 76,
      "Receiver": ""
    },
    "marshalTargetGroups": {
      "Name": "marshalTargetGroups",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 208,
      "Receiver": ""
    },
    "matchLabels": {
      "Name": "matchLabels",
      "File": "web/api/v1/api.go",
      "Line": 1200,
      "Receiver": ""
    },
    "matches": {
      "Name": "matches",
      "File": "rules/group.go",
      "Line": 169,
      "Receiver": ""
    },
    "matchesHostnamePattern": {
      "Name": "matchesHostnamePattern",
      "File": "discovery/kubernetes/ingress.go",
      "Line": 230,
      "Receiver": ""
    },
    "matchesMatcherSets": {
      "Name": "matchesMatcherSets",
      "File": "rules/group.go",
      "Line": 179,
      "Receiver": ""
    },
    "matchesRun": {
      "Name": "matchesRun",
      "File": "cmd/promtool/unittest.go",
      "Line": 149,
      "Receiver": ""
    },
    "matchesSomeMatcherSet": {
      "Name": "matchesSomeMatcherSet",
      "File": "tsdb/exemplar.go",
      "Line": 196,
      "Receiver": ""
    },
    "maxHeap.get": {
      "Name": "maxHeap.get",
      "File": "tsdb/index/postingsstats.go",
      "Line": 64,
      "Receiver": "maxHeap"
    },
    "maxHeap.init": {
      "Name": "maxHeap.init",
      "File": "tsdb/index/postingsstats.go",
      "Line": 34,
      "Receiver": "maxHeap"
    },
    "maxHeap.push": {
      "Name": "maxHeap.push",
      "File": "tsdb/index/postingsstats.go",
      "Line": 40,
      "Receiver": "maxHeap"
    },
    "maxSchemaAppender.AppendHistogram": {
      "Name": "maxSchemaAppender.AppendHistogram",
      "File": "scrape/target.go",
      "Line": 413,
      "Receiver": "maxSchemaAppender"
    },
    "maxTimestamp.Get": {
      "Name": "maxTimestamp.Get",
      "File": "storage/remote/max_timestamp.go",
      "Line": 37,
      "Receiver": "maxTimestamp"
    },
    "maxTimestamp.Set": {
      "Name": "maxTimestamp.Set",
      "File": "storage/remote/max_timestamp.go",
      "Line": 28,
      "Receiver": "maxTimestamp"
    },
    "measureTime": {
      "Name": "measureTime",
      "File": "cmd/promtool/tsdb.go",
      "Line": 298,
      "Receiver": ""
    },
    "memChunk.OverlapsClosedInterval": {
      "Name": "memChunk.OverlapsClosedInterval",
      "File": "tsdb/head.go",
      "Line": 2370,
      "Receiver": "memChunk"
    },
    "memChunk.atOffset": {
      "Name": "memChunk.atOffset",
      "File": "tsdb/head.go",
      "Line": 2336,
      "Receiver": "memChunk"
    },
    "memChunk.len": {
      "Name": "memChunk.len",
      "File": "tsdb/head.go",
      "Line": 2309,
      "Receiver": "memChunk"
    },
    "memChunk.oldest": {
      "Name": "memChunk.oldest",
      "File": "tsdb/head.go",
      "Line": 2324,
      "Receiver": "memChunk"
    },
    "memSeries.append": {
      "Name": "memSeries.append",
      "File": "tsdb/head_append.go",
      "Line": 1563,
      "Receiver": "memSeries"
    },
    "memSeries.appendFloatHistogram": {
      "Name": "memSeries.appendFloatHistogram",
      "File": "tsdb/head_append.go",
      "Line": 1645,
      "Receiver": "memSeries"
    },
    "memSeries.appendHistogram": {
      "Name": "memSeries.appendHistogram",
      "File": "tsdb/head_append.go",
      "Line": 1588,
      "Receiver": "memSeries"
    },
    "memSeries.appendPreprocessor": {
      "Name": "memSeries.appendPreprocessor",
      "File": "tsdb/head_append.go",
      "Line": 1701,
      "Receiver": "memSeries"
    },
    "memSeries.appendable": {
      "Name": "memSeries.appendable",
      "File": "tsdb/head_append.go",
      "Line": 483,
      "Receiver": "memSeries"
    },
    "memSeries.appendableFloatHistogram": {
      "Name": "memSeries.appendableFloatHistogram",
      "File": "tsdb/head_append.go",
      "Line": 570,
      "Receiver": "memSeries"
    },
    "memSeries.appendableHistogram": {
      "Name": "memSeries.appendableHistogram",
      "File": "tsdb/head_append.go",
      "Line": 528,
      "Receiver": "memSeries"
    },
    "memSeries.chunk": {
      "Name": "memSeries.chunk",
      "File": "tsdb/head_read.go",
      "Line": 434,
      "Receiver": "memSeries"
    },
    "memSeries.cleanupAppendIDsBelow": {
      "Name": "memSeries.cleanupAppendIDsBelow",
      "File": "tsdb/head.go",
      "Line": 2296,
      "Receiver": "memSeries"
    },
    "memSeries.cutNewHeadChunk": {
      "Name": "memSeries.cutNewHeadChunk",
      "File": "tsdb/head_append.go",
      "Line": 1856,
      "Receiver": "memSeries"
    },
    "memSeries.cutNewOOOHeadChunk": {
      "Name": "memSeries.cutNewOOOHeadChunk",
      "File": "tsdb/head_append.go",
      "Line": 1891,
      "Receiver": "memSeries"
    },
    "memSeries.encodeToSnapshotRecord": {
      "Name": "memSeries.encodeToSnapshotRecord",
      "File": "tsdb/head_wal.go",
      "Line": 1111,
      "Receiver": "memSeries"
    },
    "memSeries.headChunkID": {
      "Name": "memSeries.headChunkID",
      "File": "tsdb/head_read.go",
      "Line": 244,
      "Receiver": "memSeries"
    },
    "memSeries.histogramsAppendPreprocessor": {
      "Name": "memSeries.histogramsAppendPreprocessor",
      "File": "tsdb/head_append.go",
      "Line": 1769,
      "Receiver": "memSeries"
    },
    "memSeries.insert": {
      "Name": "memSeries.insert",
      "File": "tsdb/head_append.go",
      "Line": 1529,
      "Receiver": "memSeries"
    },
    "memSeries.iterator": {
      "Name": "memSeries.iterator",
      "File": "tsdb/head_read.go",
      "Line": 522,
      "Receiver": "memSeries"
    },
    "memSeries.labels": {
      "Name": "memSeries.labels",
      "File": "tsdb/head_other.go",
      "Line": 25,
      "Receiver": "memSeries"
    },
    "memSeries.maxTime": {
      "Name": "memSeries.maxTime",
      "File": "tsdb/head.go",
      "Line": 2224,
      "Receiver": "memSeries"
    },
    "memSeries.minTime": {
      "Name": "memSeries.minTime",
      "File": "tsdb/head.go",
      "Line": 2214,
      "Receiver": "memSeries"
    },
    "memSeries.mmapChunks": {
      "Name": "memSeries.mmapChunks",
      "File": "tsdb/head_append.go",
      "Line": 1934,
      "Receiver": "memSeries"
    },
    "memSeries.mmapCurrentOOOHeadChunk": {
      "Name": "memSeries.mmapCurrentOOOHeadChunk",
      "File": "tsdb/head_append.go",
      "Line": 1904,
      "Receiver": "memSeries"
    },
    "memSeries.oooChunk": {
      "Name": "memSeries.oooChunk",
      "File": "tsdb/head_read.go",
      "Line": 492,
      "Receiver": "memSeries"
    },
    "memSeries.oooHeadChunkID": {
      "Name": "memSeries.oooHeadChunkID",
      "File": "tsdb/head_read.go",
      "Line": 255,
      "Receiver": "memSeries"
    },
    "memSeries.truncateChunksBefore": {
      "Name": "memSeries.truncateChunksBefore",
      "File": "tsdb/head.go",
      "Line": 2238,
      "Receiver": "memSeries"
    },
    "memSeries.updateTimestamp": {
      "Name": "memSeries.updateTimestamp",
      "File": "tsdb/agent/series.go",
      "Line": 38,
      "Receiver": "memSeries"
    },
    "mergeGenericQuerier.Close": {
      "Name": "mergeGenericQuerier.Close",
      "File": "storage/merge.go",
      "Line": 274,
      "Receiver": "mergeGenericQuerier"
    },
    "mergeGenericQuerier.LabelNames": {
      "Name": "mergeGenericQuerier.LabelNames",
      "File": "storage/merge.go",
      "Line": 263,
      "Receiver": "mergeGenericQuerier"
    },
    "mergeGenericQuerier.LabelValues": {
      "Name": "mergeGenericQuerier.LabelValues",
      "File": "storage/merge.go",
      "Line": 194,
      "Receiver": "mergeGenericQuerier"
    },
    "mergeGenericQuerier.Select": {
      "Name": "mergeGenericQuerier.Select",
      "File": "storage/merge.go",
      "Line": 132,
      "Receiver": "mergeGenericQuerier"
    },
    "mergeGenericQuerier.mergeResults": {
      "Name": "mergeGenericQuerier.mergeResults",
      "File": "storage/merge.go",
      "Line": 205,
      "Receiver": "mergeGenericQuerier"
    },
    "mergeRanges": {
      "Name": "mergeRanges",
      "File": "promql/parser/ast.go",
      "Line": 434,
      "Receiver": ""
    },
    "mergeResult": {
      "Name": "mergeResult",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client.go",
      "Line": 212,
      "Receiver": ""
    },
    "mergeSamples": {
      "Name": "mergeSamples",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client.go",
      "Line": 306,
      "Receiver": ""
    },
    "mergeStrings": {
      "Name": "mergeStrings",
      "File": "storage/merge.go",
      "Line": 235,
      "Receiver": ""
    },
    "mergedOOOChunks.Iterator": {
      "Name": "mergedOOOChunks.Iterator",
      "File": "tsdb/ooo_head_read.go",
      "Line": 49,
      "Receiver": "mergedOOOChunks"
    },
    "mergedStringIter.At": {
      "Name": "mergedStringIter.At",
      "File": "tsdb/querier.go",
      "Line": 1174,
      "Receiver": "mergedStringIter"
    },
    "mergedStringIter.Err": {
      "Name": "mergedStringIter.Err",
      "File": "tsdb/querier.go",
      "Line": 1175,
      "Receiver": "mergedStringIter"
    },
    "mergedStringIter.Next": {
      "Name": "mergedStringIter.Next",
      "File": "tsdb/querier.go",
      "Line": 1141,
      "Receiver": "mergedStringIter"
    },
    "metaEntry.size": {
      "Name": "metaEntry.size",
      "File": "scrape/scrape.go",
      "Line": 991,
      "Receiver": "metaEntry"
    },
    "metaRange": {
      "Name": "metaRange",
      "File": "tsdb/compact_test.go",
      "Line": 453,
      "Receiver": ""
    },
    "metaStatistics.Count": {
      "Name": "metaStatistics.Count",
      "File": "cmd/promtool/analyze.go",
      "Line": 354,
      "Receiver": "metaStatistics"
    },
    "metaStatistics.String": {
      "Name": "metaStatistics.String",
      "File": "cmd/promtool/analyze.go",
      "Line": 358,
      "Receiver": "metaStatistics"
    },
    "metaStatistics.update": {
      "Name": "metaStatistics.update",
      "File": "cmd/promtool/analyze.go",
      "Line": 365,
      "Receiver": "metaStatistics"
    },
    "metadataEntryEqual": {
      "Name": "metadataEntryEqual",
      "File": "scrape/helpers_test.go",
      "Line": 98,
      "Receiver": ""
    },
    "metricRegistererImpl.RegisterMetrics": {
      "Name": "metricRegistererImpl.RegisterMetrics",
      "File": "discovery/util.go",
      "Line": 50,
      "Receiver": "metricRegistererImpl"
    },
    "metricRegistererImpl.UnregisterMetrics": {
      "Name": "metricRegistererImpl.UnregisterMetrics",
      "File": "discovery/util.go",
      "Line": 68,
      "Receiver": "metricRegistererImpl"
    },
    "metrics.instrumentHandler": {
      "Name": "metrics.instrumentHandler",
      "File": "web/web.go",
      "Line": 186,
      "Receiver": "metrics"
    },
    "metrics.instrumentHandlerWithPrefix": {
      "Name": "metrics.instrumentHandlerWithPrefix",
      "File": "web/web.go",
      "Line": 180,
      "Receiver": "metrics"
    },
    "mmap": {
      "Name": "mmap",
      "File": "tsdb/fileutil/mmap_windows.go",
      "Line": 22,
      "Receiver": ""
    },
    "mmappedChunk.OverlapsClosedInterval": {
      "Name": "mmappedChunk.OverlapsClosedInterval",
      "File": "tsdb/head.go",
      "Line": 2386,
      "Receiver": "mmappedChunk"
    },
    "mmappedChunksDir": {
      "Name": "mmappedChunksDir",
      "File": "tsdb/head.go",
      "Line": 603,
      "Receiver": ""
    },
    "mmappedFile.Close": {
      "Name": "mmappedFile.Close",
      "File": "promql/query_logger.go",
      "Line": 94,
      "Receiver": "mmappedFile"
    },
    "mockAppendable.Append": {
      "Name": "mockAppendable.Append",
      "File": "storage/remote/write_handler_test.go",
      "Line": 875,
      "Receiver": "mockAppendable"
    },
    "mockAppendable.AppendCTZeroSample": {
      "Name": "mockAppendable.AppendCTZeroSample",
      "File": "storage/remote/write_handler_test.go",
      "Line": 1017,
      "Receiver": "mockAppendable"
    },
    "mockAppendable.AppendExemplar": {
      "Name": "mockAppendable.AppendExemplar",
      "File": "storage/remote/write_handler_test.go",
      "Line": 915,
      "Receiver": "mockAppendable"
    },
    "mockAppendable.AppendHistogram": {
      "Name": "mockAppendable.AppendHistogram",
      "File": "storage/remote/write_handler_test.go",
      "Line": 933,
      "Receiver": "mockAppendable"
    },
    "mockAppendable.AppendHistogramCTZeroSample": {
      "Name": "mockAppendable.AppendHistogramCTZeroSample",
      "File": "storage/remote/write_handler_test.go",
      "Line": 967,
      "Receiver": "mockAppendable"
    },
    "mockAppendable.Appender": {
      "Name": "mockAppendable.Appender",
      "File": "storage/remote/write_handler_test.go",
      "Line": 855,
      "Receiver": "mockAppendable"
    },
    "mockAppendable.Commit": {
      "Name": "mockAppendable.Commit",
      "File": "storage/remote/write_handler_test.go",
      "Line": 900,
      "Receiver": "mockAppendable"
    },
    "mockAppendable.Rollback": {
      "Name": "mockAppendable.Rollback",
      "File": "storage/remote/write_handler_test.go",
      "Line": 907,
      "Receiver": "mockAppendable"
    },
    "mockAppendable.SetOptions": {
      "Name": "mockAppendable.SetOptions",
      "File": "storage/remote/write_handler_test.go",
      "Line": 871,
      "Receiver": "mockAppendable"
    },
    "mockAppendable.UpdateMetadata": {
      "Name": "mockAppendable.UpdateMetadata",
      "File": "storage/remote/write_handler_test.go",
      "Line": 1008,
      "Receiver": "mockAppendable"
    },
    "mockBReader.Chunks": {
      "Name": "mockBReader.Chunks",
      "File": "tsdb/mocks_test.go",
      "Line": 65,
      "Receiver": "mockBReader"
    },
    "mockBReader.Index": {
      "Name": "mockBReader.Index",
      "File": "tsdb/mocks_test.go",
      "Line": 64,
      "Receiver": "mockBReader"
    },
    "mockBReader.Meta": {
      "Name": "mockBReader.Meta",
      "File": "tsdb/mocks_test.go",
      "Line": 69,
      "Receiver": "mockBReader"
    },
    "mockBReader.Size": {
      "Name": "mockBReader.Size",
      "File": "tsdb/mocks_test.go",
      "Line": 70,
      "Receiver": "mockBReader"
    },
    "mockBReader.Tombstones": {
      "Name": "mockBReader.Tombstones",
      "File": "tsdb/mocks_test.go",
      "Line": 66,
      "Receiver": "mockBReader"
    },
    "mockChunkIterator.At": {
      "Name": "mockChunkIterator.At",
      "File": "storage/remote/codec_test.go",
      "Line": 733,
      "Receiver": "mockChunkIterator"
    },
    "mockChunkIterator.Err": {
      "Name": "mockChunkIterator.Err",
      "File": "storage/remote/codec_test.go",
      "Line": 751,
      "Receiver": "mockChunkIterator"
    },
    "mockChunkIterator.Next": {
      "Name": "mockChunkIterator.Next",
      "File": "storage/remote/codec_test.go",
      "Line": 746,
      "Receiver": "mockChunkIterator"
    },
    "mockChunkQuerier.Select": {
      "Name": "mockChunkQuerier.Select",
      "File": "storage/merge_test.go",
      "Line": 998,
      "Receiver": "mockChunkQuerier"
    },
    "mockChunkReader.ChunkOrIterable": {
      "Name": "mockChunkReader.ChunkOrIterable",
      "File": "tsdb/querier_test.go",
      "Line": 2076,
      "Receiver": "mockChunkReader"
    },
    "mockChunkReader.Close": {
      "Name": "mockChunkReader.Close",
      "File": "tsdb/querier_test.go",
      "Line": 2085,
      "Receiver": "mockChunkReader"
    },
    "mockChunkSeriesSet.At": {
      "Name": "mockChunkSeriesSet.At",
      "File": "tsdb/querier_test.go",
      "Line": 81,
      "Receiver": "mockChunkSeriesSet"
    },
    "mockChunkSeriesSet.Err": {
      "Name": "mockChunkSeriesSet.Err",
      "File": "tsdb/querier_test.go",
      "Line": 82,
      "Receiver": "mockChunkSeriesSet"
    },
    "mockChunkSeriesSet.Next": {
      "Name": "mockChunkSeriesSet.Next",
      "File": "tsdb/querier_test.go",
      "Line": 80,
      "Receiver": "mockChunkSeriesSet"
    },
    "mockChunkSeriesSet.Warnings": {
      "Name": "mockChunkSeriesSet.Warnings",
      "File": "tsdb/querier_test.go",
      "Line": 83,
      "Receiver": "mockChunkSeriesSet"
    },
    "mockCompactorFailing.Compact": {
      "Name": "mockCompactorFailing.Compact",
      "File": "tsdb/db_test.go",
      "Line": 1404,
      "Receiver": "mockCompactorFailing"
    },
    "mockCompactorFailing.CompactOOO": {
      "Name": "mockCompactorFailing.CompactOOO",
      "File": "tsdb/db_test.go",
      "Line": 1408,
      "Receiver": "mockCompactorFailing"
    },
    "mockCompactorFailing.Plan": {
      "Name": "mockCompactorFailing.Plan",
      "File": "tsdb/db_test.go",
      "Line": 1376,
      "Receiver": "mockCompactorFailing"
    },
    "mockCompactorFailing.Write": {
      "Name": "mockCompactorFailing.Write",
      "File": "tsdb/db_test.go",
      "Line": 1380,
      "Receiver": "mockCompactorFailing"
    },
    "mockCompactorFn.Compact": {
      "Name": "mockCompactorFn.Compact",
      "File": "tsdb/db_test.go",
      "Line": 9212,
      "Receiver": "mockCompactorFn"
    },
    "mockCompactorFn.Plan": {
      "Name": "mockCompactorFn.Plan",
      "File": "tsdb/db_test.go",
      "Line": 9208,
      "Receiver": "mockCompactorFn"
    },
    "mockCompactorFn.Write": {
      "Name": "mockCompactorFn.Write",
      "File": "tsdb/db_test.go",
      "Line": 9216,
      "Receiver": "mockCompactorFn"
    },
    "mockCredential.GetToken": {
      "Name": "mockCredential.GetToken",
      "File": "storage/remote/azuread/azuread_test.go",
      "Line": 204,
      "Receiver": "mockCredential"
    },
    "mockDialContext.dialContext": {
      "Name": "mockDialContext.dialContext",
      "File": "storage/remote/dial_context_test.go",
      "Line": 65,
      "Receiver": "mockDialContext"
    },
    "mockDialContext.getCount": {
      "Name": "mockDialContext.getCount",
      "File": "storage/remote/dial_context_test.go",
      "Line": 73,
      "Receiver": "mockDialContext"
    },
    "mockEC2Client.DescribeAvailabilityZonesWithContext": {
      "Name": "mockEC2Client.DescribeAvailabilityZonesWithContext",
      "File": "discovery/aws/ec2_test.go",
      "Line": 402,
      "Receiver": "mockEC2Client"
    },
    "mockEC2Client.DescribeInstancesPagesWithContext": {
      "Name": "mockEC2Client.DescribeInstancesPagesWithContext",
      "File": "discovery/aws/ec2_test.go",
      "Line": 423,
      "Receiver": "mockEC2Client"
    },
    "mockFlusher.Flush": {
      "Name": "mockFlusher.Flush",
      "File": "storage/remote/codec_test.go",
      "Line": 989,
      "Receiver": "mockFlusher"
    },
    "mockIONOSServers": {
      "Name": "mockIONOSServers",
      "File": "discovery/ionos/server_test.go",
      "Line": 95,
      "Receiver": ""
    },
    "mockIndex.AddSeries": {
      "Name": "mockIndex.AddSeries",
      "File": "tsdb/querier_test.go",
      "Line": 2219,
      "Receiver": "mockIndex"
    },
    "mockIndex.Close": {
      "Name": "mockIndex.Close",
      "File": "tsdb/querier_test.go",
      "Line": 2252,
      "Receiver": "mockIndex"
    },
    "mockIndex.LabelNames": {
      "Name": "mockIndex.LabelNames",
      "File": "tsdb/querier_test.go",
      "Line": 2390,
      "Receiver": "mockIndex"
    },
    "mockIndex.LabelNamesFor": {
      "Name": "mockIndex.LabelNamesFor",
      "File": "tsdb/querier_test.go",
      "Line": 2300,
      "Receiver": "mockIndex"
    },
    "mockIndex.LabelValueFor": {
      "Name": "mockIndex.LabelValueFor",
      "File": "tsdb/querier_test.go",
      "Line": 2296,
      "Receiver": "mockIndex"
    },
    "mockIndex.LabelValues": {
      "Name": "mockIndex.LabelValues",
      "File": "tsdb/querier_test.go",
      "Line": 2262,
      "Receiver": "mockIndex"
    },
    "mockIndex.Postings": {
      "Name": "mockIndex.Postings",
      "File": "tsdb/querier_test.go",
      "Line": 2317,
      "Receiver": "mockIndex"
    },
    "mockIndex.PostingsForAllLabelValues": {
      "Name": "mockIndex.PostingsForAllLabelValues",
      "File": "tsdb/querier_test.go",
      "Line": 2348,
      "Receiver": "mockIndex"
    },
    "mockIndex.PostingsForLabelMatching": {
      "Name": "mockIndex.PostingsForLabelMatching",
      "File": "tsdb/querier_test.go",
      "Line": 2338,
      "Receiver": "mockIndex"
    },
    "mockIndex.Series": {
      "Name": "mockIndex.Series",
      "File": "tsdb/querier_test.go",
      "Line": 2379,
      "Receiver": "mockIndex"
    },
    "mockIndex.ShardedPostings": {
      "Name": "mockIndex.ShardedPostings",
      "File": "tsdb/querier_test.go",
      "Line": 2358,
      "Receiver": "mockIndex"
    },
    "mockIndex.SortedLabelValues": {
      "Name": "mockIndex.SortedLabelValues",
      "File": "tsdb/querier_test.go",
      "Line": 2256,
      "Receiver": "mockIndex"
    },
    "mockIndex.SortedPostings": {
      "Name": "mockIndex.SortedPostings",
      "File": "tsdb/querier_test.go",
      "Line": 2326,
      "Receiver": "mockIndex"
    },
    "mockIndex.Symbols": {
      "Name": "mockIndex.Symbols",
      "File": "tsdb/querier_test.go",
      "Line": 2210,
      "Receiver": "mockIndex"
    },
    "mockIndex.WritePostings": {
      "Name": "mockIndex.WritePostings",
      "File": "tsdb/querier_test.go",
      "Line": 2239,
      "Receiver": "mockIndex"
    },
    "mockIndexWriter.AddSeries": {
      "Name": "mockIndexWriter.AddSeries",
      "File": "tsdb/mocks_test.go",
      "Line": 38,
      "Receiver": "mockIndexWriter"
    },
    "mockIndexWriter.AddSymbol": {
      "Name": "mockIndexWriter.AddSymbol",
      "File": "tsdb/mocks_test.go",
      "Line": 37,
      "Receiver": "mockIndexWriter"
    },
    "mockIndexWriter.Close": {
      "Name": "mockIndexWriter.Close",
      "File": "tsdb/mocks_test.go",
      "Line": 55,
      "Receiver": "mockIndexWriter"
    },
    "mockIndexWriter.WriteLabelIndex": {
      "Name": "mockIndexWriter.WriteLabelIndex",
      "File": "tsdb/mocks_test.go",
      "Line": 54,
      "Receiver": "mockIndexWriter"
    },
    "mockIterable.Iterator": {
      "Name": "mockIterable.Iterator",
      "File": "tsdb/querier_test.go",
      "Line": 754,
      "Receiver": "mockIterable"
    },
    "mockMatcherIndex.Close": {
      "Name": "mockMatcherIndex.Close",
      "File": "tsdb/querier_test.go",
      "Line": 3310,
      "Receiver": "mockMatcherIndex"
    },
    "mockMatcherIndex.LabelNames": {
      "Name": "mockMatcherIndex.LabelNames",
      "File": "tsdb/querier_test.go",
      "Line": 3346,
      "Receiver": "mockMatcherIndex"
    },
    "mockMatcherIndex.LabelNamesFor": {
      "Name": "mockMatcherIndex.LabelNamesFor",
      "File": "tsdb/querier_test.go",
      "Line": 3326,
      "Receiver": "mockMatcherIndex"
    },
    "mockMatcherIndex.LabelValueFor": {
      "Name": "mockMatcherIndex.LabelValueFor",
      "File": "tsdb/querier_test.go",
      "Line": 3322,
      "Receiver": "mockMatcherIndex"
    },
    "mockMatcherIndex.LabelValues": {
      "Name": "mockMatcherIndex.LabelValues",
      "File": "tsdb/querier_test.go",
      "Line": 3318,
      "Receiver": "mockMatcherIndex"
    },
    "mockMatcherIndex.Postings": {
      "Name": "mockMatcherIndex.Postings",
      "File": "tsdb/querier_test.go",
      "Line": 3330,
      "Receiver": "mockMatcherIndex"
    },
    "mockMatcherIndex.PostingsForAllLabelValues": {
      "Name": "mockMatcherIndex.PostingsForAllLabelValues",
      "File": "tsdb/querier_test.go",
      "Line": 3354,
      "Receiver": "mockMatcherIndex"
    },
    "mockMatcherIndex.PostingsForLabelMatching": {
      "Name": "mockMatcherIndex.PostingsForLabelMatching",
      "File": "tsdb/querier_test.go",
      "Line": 3350,
      "Receiver": "mockMatcherIndex"
    },
    "mockMatcherIndex.Series": {
      "Name": "mockMatcherIndex.Series",
      "File": "tsdb/querier_test.go",
      "Line": 3342,
      "Receiver": "mockMatcherIndex"
    },
    "mockMatcherIndex.ShardedPostings": {
      "Name": "mockMatcherIndex.ShardedPostings",
      "File": "tsdb/querier_test.go",
      "Line": 3338,
      "Receiver": "mockMatcherIndex"
    },
    "mockMatcherIndex.SortedLabelValues": {
      "Name": "mockMatcherIndex.SortedLabelValues",
      "File": "tsdb/querier_test.go",
      "Line": 3313,
      "Receiver": "mockMatcherIndex"
    },
    "mockMatcherIndex.SortedPostings": {
      "Name": "mockMatcherIndex.SortedPostings",
      "File": "tsdb/querier_test.go",
      "Line": 3334,
      "Receiver": "mockMatcherIndex"
    },
    "mockMatcherIndex.Symbols": {
      "Name": "mockMatcherIndex.Symbols",
      "File": "tsdb/querier_test.go",
      "Line": 3308,
      "Receiver": "mockMatcherIndex"
    },
    "mockQuerier.Close": {
      "Name": "mockQuerier.Close",
      "File": "storage/merge_test.go",
      "Line": 979,
      "Receiver": "mockQuerier"
    },
    "mockQuerier.LabelNames": {
      "Name": "mockQuerier.LabelNames",
      "File": "storage/merge_test.go",
      "Line": 972,
      "Receiver": "mockQuerier"
    },
    "mockQuerier.LabelValues": {
      "Name": "mockQuerier.LabelValues",
      "File": "storage/merge_test.go",
      "Line": 962,
      "Receiver": "mockQuerier"
    },
    "mockQuerier.Select": {
      "Name": "mockQuerier.Select",
      "File": "storage/merge_test.go",
      "Line": 940,
      "Receiver": "mockQuerier"
    },
    "mockQueryRangeAPI.QueryRange": {
      "Name": "mockQueryRangeAPI.QueryRange",
      "File": "cmd/promtool/rules_test.go",
      "Line": 38,
      "Receiver": "mockQueryRangeAPI"
    },
    "mockReaderOfLabels.Close": {
      "Name": "mockReaderOfLabels.Close",
      "File": "tsdb/querier_test.go",
      "Line": 3772,
      "Receiver": "mockReaderOfLabels"
    },
    "mockReaderOfLabels.LabelNames": {
      "Name": "mockReaderOfLabels.LabelNames",
      "File": "tsdb/querier_test.go",
      "Line": 3776,
      "Receiver": "mockReaderOfLabels"
    },
    "mockReaderOfLabels.LabelNamesFor": {
      "Name": "mockReaderOfLabels.LabelNamesFor",
      "File": "tsdb/querier_test.go",
      "Line": 3780,
      "Receiver": "mockReaderOfLabels"
    },
    "mockReaderOfLabels.LabelValueFor": {
      "Name": "mockReaderOfLabels.LabelValueFor",
      "File": "tsdb/querier_test.go",
      "Line": 3764,
      "Receiver": "mockReaderOfLabels"
    },
    "mockReaderOfLabels.LabelValues": {
      "Name": "mockReaderOfLabels.LabelValues",
      "File": "tsdb/querier_test.go",
      "Line": 3760,
      "Receiver": "mockReaderOfLabels"
    },
    "mockReaderOfLabels.Postings": {
      "Name": "mockReaderOfLabels.Postings",
      "File": "tsdb/querier_test.go",
      "Line": 3792,
      "Receiver": "mockReaderOfLabels"
    },
    "mockReaderOfLabels.PostingsForAllLabelValues": {
      "Name": "mockReaderOfLabels.PostingsForAllLabelValues",
      "File": "tsdb/querier_test.go",
      "Line": 3788,
      "Receiver": "mockReaderOfLabels"
    },
    "mockReaderOfLabels.PostingsForLabelMatching": {
      "Name": "mockReaderOfLabels.PostingsForLabelMatching",
      "File": "tsdb/querier_test.go",
      "Line": 3784,
      "Receiver": "mockReaderOfLabels"
    },
    "mockReaderOfLabels.Series": {
      "Name": "mockReaderOfLabels.Series",
      "File": "tsdb/querier_test.go",
      "Line": 3804,
      "Receiver": "mockReaderOfLabels"
    },
    "mockReaderOfLabels.ShardedPostings": {
      "Name": "mockReaderOfLabels.ShardedPostings",
      "File": "tsdb/querier_test.go",
      "Line": 3796,
      "Receiver": "mockReaderOfLabels"
    },
    "mockReaderOfLabels.SortedLabelValues": {
      "Name": "mockReaderOfLabels.SortedLabelValues",
      "File": "tsdb/querier_test.go",
      "Line": 3768,
      "Receiver": "mockReaderOfLabels"
    },
    "mockReaderOfLabels.SortedPostings": {
      "Name": "mockReaderOfLabels.SortedPostings",
      "File": "tsdb/querier_test.go",
      "Line": 3800,
      "Receiver": "mockReaderOfLabels"
    },
    "mockReaderOfLabels.Symbols": {
      "Name": "mockReaderOfLabels.Symbols",
      "File": "tsdb/querier_test.go",
      "Line": 3808,
      "Receiver": "mockReaderOfLabels"
    },
    "mockSampleIterator.At": {
      "Name": "mockSampleIterator.At",
      "File": "tsdb/querier_test.go",
      "Line": 776,
      "Receiver": "mockSampleIterator"
    },
    "mockSampleIterator.AtFloatHistogram": {
      "Name": "mockSampleIterator.AtFloatHistogram",
      "File": "tsdb/querier_test.go",
      "Line": 784,
      "Receiver": "mockSampleIterator"
    },
    "mockSampleIterator.AtHistogram": {
      "Name": "mockSampleIterator.AtHistogram",
      "File": "tsdb/querier_test.go",
      "Line": 780,
      "Receiver": "mockSampleIterator"
    },
    "mockSampleIterator.AtT": {
      "Name": "mockSampleIterator.AtT",
      "File": "tsdb/querier_test.go",
      "Line": 788,
      "Receiver": "mockSampleIterator"
    },
    "mockSampleIterator.Err": {
      "Name": "mockSampleIterator.Err",
      "File": "tsdb/querier_test.go",
      "Line": 801,
      "Receiver": "mockSampleIterator"
    },
    "mockSampleIterator.Next": {
      "Name": "mockSampleIterator.Next",
      "File": "tsdb/querier_test.go",
      "Line": 792,
      "Receiver": "mockSampleIterator"
    },
    "mockSampleIterator.Seek": {
      "Name": "mockSampleIterator.Seek",
      "File": "tsdb/querier_test.go",
      "Line": 766,
      "Receiver": "mockSampleIterator"
    },
    "mockScalewayInstance": {
      "Name": "mockScalewayInstance",
      "File": "discovery/scaleway/instance_test.go",
      "Line": 168,
      "Receiver": ""
    },
    "mockSeries.Iterator": {
      "Name": "mockSeries.Iterator",
      "File": "storage/interface.go",
      "Line": 472,
      "Receiver": "mockSeries"
    },
    "mockSeries.Labels": {
      "Name": "mockSeries.Labels",
      "File": "storage/interface.go",
      "Line": 468,
      "Receiver": "mockSeries"
    },
    "mockSeriesIterator.At": {
      "Name": "mockSeriesIterator.At",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 228,
      "Receiver": "mockSeriesIterator"
    },
    "mockSeriesIterator.AtFloatHistogram": {
      "Name": "mockSeriesIterator.AtFloatHistogram",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 236,
      "Receiver": "mockSeriesIterator"
    },
    "mockSeriesIterator.AtHistogram": {
      "Name": "mockSeriesIterator.AtHistogram",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 232,
      "Receiver": "mockSeriesIterator"
    },
    "mockSeriesIterator.AtT": {
      "Name": "mockSeriesIterator.AtT",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 240,
      "Receiver": "mockSeriesIterator"
    },
    "mockSeriesIterator.Err": {
      "Name": "mockSeriesIterator.Err",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 252,
      "Receiver": "mockSeriesIterator"
    },
    "mockSeriesIterator.Next": {
      "Name": "mockSeriesIterator.Next",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 244,
      "Receiver": "mockSeriesIterator"
    },
    "mockSeriesIterator.Seek": {
      "Name": "mockSeriesIterator.Seek",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 226,
      "Receiver": "mockSeriesIterator"
    },
    "mockSeriesSet.At": {
      "Name": "mockSeriesSet.At",
      "File": "tsdb/querier_test.go",
      "Line": 54,
      "Receiver": "mockSeriesSet"
    },
    "mockSeriesSet.Err": {
      "Name": "mockSeriesSet.Err",
      "File": "tsdb/querier_test.go",
      "Line": 55,
      "Receiver": "mockSeriesSet"
    },
    "mockSeriesSet.Next": {
      "Name": "mockSeriesSet.Next",
      "File": "tsdb/querier_test.go",
      "Line": 53,
      "Receiver": "mockSeriesSet"
    },
    "mockSeriesSet.Warnings": {
      "Name": "mockSeriesSet.Warnings",
      "File": "tsdb/querier_test.go",
      "Line": 56,
      "Receiver": "mockSeriesSet"
    },
    "mockServer": {
      "Name": "mockServer",
      "File": "discovery/puppetdb/puppetdb_test.go",
      "Line": 35,
      "Receiver": ""
    },
    "mockWriter.Write": {
      "Name": "mockWriter.Write",
      "File": "storage/remote/codec_test.go",
      "Line": 686,
      "Receiver": "mockWriter"
    },
    "mockdiscoveryProvider.Run": {
      "Name": "mockdiscoveryProvider.Run",
      "File": "discovery/manager_test.go",
      "Line": 1406,
      "Receiver": "mockdiscoveryProvider"
    },
    "mockedFlusher.Flush": {
      "Name": "mockedFlusher.Flush",
      "File": "storage/remote/chunked_test.go",
      "Line": 27,
      "Receiver": "mockedFlusher"
    },
    "mockedLookupHost.LookupHost": {
      "Name": "mockedLookupHost.LookupHost",
      "File": "storage/remote/dial_context_test.go",
      "Line": 84,
      "Receiver": "mockedLookupHost"
    },
    "mockedRemoteClient.Read": {
      "Name": "mockedRemoteClient.Read",
      "File": "storage/remote/read_test.go",
      "Line": 202,
      "Receiver": "mockedRemoteClient"
    },
    "mockedRemoteClient.reset": {
      "Name": "mockedRemoteClient.reset",
      "File": "storage/remote/read_test.go",
      "Line": 234,
      "Receiver": "mockedRemoteClient"
    },
    "multiError.Add": {
      "Name": "multiError.Add",
      "File": "tsdb/errors/errors.go",
      "Line": 36,
      "Receiver": "multiError"
    },
    "multiError.Err": {
      "Name": "multiError.Err",
      "File": "tsdb/errors/errors.go",
      "Line": 51,
      "Receiver": "multiError"
    },
    "multiReadCloser.Close": {
      "Name": "multiReadCloser.Close",
      "File": "tsdb/wlog/reader_test.go",
      "Line": 289,
      "Receiver": "multiReadCloser"
    },
    "multiReadCloser.Read": {
      "Name": "multiReadCloser.Read",
      "File": "tsdb/wlog/reader_test.go",
      "Line": 285,
      "Receiver": "multiReadCloser"
    },
    "multipleAppender.add": {
      "Name": "multipleAppender.add",
      "File": "cmd/promtool/rules.go",
      "Line": 205,
      "Receiver": "multipleAppender"
    },
    "multipleAppender.commit": {
      "Name": "multipleAppender.commit",
      "File": "cmd/promtool/rules.go",
      "Line": 216,
      "Receiver": "multipleAppender"
    },
    "multipleAppender.flushAndCommit": {
      "Name": "multipleAppender.flushAndCommit",
      "File": "cmd/promtool/rules.go",
      "Line": 228,
      "Receiver": "multipleAppender"
    },
    "munmap": {
      "Name": "munmap",
      "File": "tsdb/fileutil/mmap_windows.go",
      "Line": 41,
      "Receiver": ""
    },
    "mustNewMatcher": {
      "Name": "mustNewMatcher",
      "File": "model/labels/matcher_test.go",
      "Line": 24,
      "Receiver": ""
    },
    "mustParseURL": {
      "Name": "mustParseURL",
      "File": "config/config_test.go",
      "Line": 65,
      "Receiver": ""
    },
    "mustRegisterMessage": {
      "Name": "mustRegisterMessage",
      "File": "discovery/xds/xds.go",
      "Line": 61,
      "Receiver": ""
    },
    "mutateReportSampleLabels": {
      "Name": "mutateReportSampleLabels",
      "File": "scrape/scrape.go",
      "Line": 713,
      "Receiver": ""
    },
    "mutateSampleLabels": {
      "Name": "mutateSampleLabels",
      "File": "scrape/scrape.go",
      "Line": 662,
      "Receiver": ""
    },
    "nameAndLabels": {
      "Name": "nameAndLabels",
      "File": "rules/group.go",
      "Line": 446,
      "Receiver": ""
    },
    "nameTable.ToName": {
      "Name": "nameTable.ToName",
      "File": "model/labels/labels_dedupelabels.go",
      "Line": 103,
      "Receiver": "nameTable"
    },
    "namespacedName": {
      "Name": "namespacedName",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 802,
      "Receiver": ""
    },
    "needsSplit": {
      "Name": "needsSplit",
      "File": "promql/parser/prettier.go",
      "Line": 170,
      "Receiver": ""
    },
    "neverEmpty": {
      "Name": "neverEmpty",
      "File": "web/api/v1/json_codec.go",
      "Line": 107,
      "Receiver": ""
    },
    "newAPI": {
      "Name": "newAPI",
      "File": "cmd/promtool/query.go",
      "Line": 35,
      "Receiver": ""
    },
    "newAlertMetrics": {
      "Name": "newAlertMetrics",
      "File": "notifier/metric.go",
      "Line": 28,
      "Receiver": ""
    },
    "newAlertmanagerSet": {
      "Name": "newAlertmanagerSet",
      "File": "notifier/alertmanagerset.go",
      "Line": 45,
      "Receiver": ""
    },
    "newAuthTokenFileRoundTripper": {
      "Name": "newAuthTokenFileRoundTripper",
      "File": "discovery/scaleway/scaleway.go",
      "Line": 244,
      "Receiver": ""
    },
    "newAuthTokenRoundTripper": {
      "Name": "newAuthTokenRoundTripper",
      "File": "discovery/marathon/marathon.go",
      "Line": 187,
      "Receiver": ""
    },
    "newAzureResourceFromID": {
      "Name": "newAzureResourceFromID",
      "File": "discovery/azure/azure.go",
      "Line": 335,
      "Receiver": ""
    },
    "newBReader": {
      "Name": "newBReader",
      "File": "tsdb/chunkenc/bstream.go",
      "Line": 129,
      "Receiver": ""
    },
    "newBaremetalDiscovery": {
      "Name": "newBaremetalDiscovery",
      "File": "discovery/scaleway/baremetal.go",
      "Line": 63,
      "Receiver": ""
    },
    "newBasicScrapeLoop": {
      "Name": "newBasicScrapeLoop",
      "File": "scrape/scrape_test.go",
      "Line": 959,
      "Receiver": ""
    },
    "newBasicScrapeLoopWithFallback": {
      "Name": "newBasicScrapeLoopWithFallback",
      "File": "scrape/scrape_test.go",
      "Line": 963,
      "Receiver": ""
    },
    "newBigEndianPostings": {
      "Name": "newBigEndianPostings",
      "File": "tsdb/index/postings.go",
      "Line": 880,
      "Receiver": ""
    },
    "newBlockBaseQuerier": {
      "Name": "newBlockBaseQuerier",
      "File": "tsdb/querier.go",
      "Line": 50,
      "Receiver": ""
    },
    "newBlockSeriesSet": {
      "Name": "newBlockSeriesSet",
      "File": "tsdb/querier.go",
      "Line": 1074,
      "Receiver": ""
    },
    "newBucketIterator": {
      "Name": "newBucketIterator",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 237,
      "Receiver": ""
    },
    "newCRC32": {
      "Name": "newCRC32",
      "File": "tsdb/tombstones/tombstones.go",
      "Line": 58,
      "Receiver": ""
    },
    "newChunkBuffer": {
      "Name": "newChunkBuffer",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 1110,
      "Receiver": ""
    },
    "newChunkDiskMapperRef": {
      "Name": "newChunkDiskMapperRef",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 80,
      "Receiver": ""
    },
    "newChunkToSeriesDecoder": {
      "Name": "newChunkToSeriesDecoder",
      "File": "storage/series.go",
      "Line": 275,
      "Receiver": ""
    },
    "newChunkWriteQueue": {
      "Name": "newChunkWriteQueue",
      "File": "tsdb/chunks/chunk_write_queue.go",
      "Line": 82,
      "Receiver": ""
    },
    "newChunkedSeriesIterator": {
      "Name": "newChunkedSeriesIterator",
      "File": "storage/remote/codec.go",
      "Line": 647,
      "Receiver": ""
    },
    "newCompressedResponseWriter": {
      "Name": "newCompressedResponseWriter",
      "File": "util/httputil/compression.go",
      "Line": 58,
      "Receiver": ""
    },
    "newConcreteSeriesIterator": {
      "Name": "newConcreteSeriesIterator",
      "File": "storage/remote/codec.go",
      "Line": 393,
      "Receiver": ""
    },
    "newConfigLintConfig": {
      "Name": "newConfigLintConfig",
      "File": "cmd/promtool/main.go",
      "Line": 507,
      "Receiver": ""
    },
    "newCredential": {
      "Name": "newCredential",
      "File": "discovery/azure/azure.go",
      "Line": 288,
      "Receiver": ""
    },
    "newDBMetrics": {
      "Name": "newDBMetrics",
      "File": "tsdb/db.go",
      "Line": 307,
      "Receiver": ""
    },
    "newDedicatedServerDiscovery": {
      "Name": "newDedicatedServerDiscovery",
      "File": "discovery/ovhcloud/dedicated_server.go",
      "Line": 60,
      "Receiver": ""
    },
    "newDialContextWithRoundRobinDNS": {
      "Name": "newDialContextWithRoundRobinDNS",
      "File": "storage/remote/dial_context.go",
      "Line": 39,
      "Receiver": ""
    },
    "newDirectIOWriter": {
      "Name": "newDirectIOWriter",
      "File": "tsdb/fileutil/direct_io_writer.go",
      "Line": 60,
      "Receiver": ""
    },
    "newDiscovererMetrics": {
      "Name": "newDiscovererMetrics",
      "File": "discovery/xds/metrics.go",
      "Line": 32,
      "Receiver": ""
    },
    "newDiscovery": {
      "Name": "newDiscovery",
      "File": "documentation/examples/custom-sd/adapter-usage/main.go",
      "Line": 238,
      "Receiver": ""
    },
    "newDistribution": {
      "Name": "newDistribution",
      "File": "cmd/promtool/analyze.go",
      "Line": 320,
      "Receiver": ""
    },
    "newEWMARate": {
      "Name": "newEWMARate",
      "File": "storage/remote/ewma.go",
      "Line": 36,
      "Receiver": ""
    },
    "newEntry": {
      "Name": "newEntry",
      "File": "storage/remote/intern.go",
      "Line": 47,
      "Receiver": ""
    },
    "newEqualMultiStringMatcher": {
      "Name": "newEqualMultiStringMatcher",
      "File": "model/labels/regexp.go",
      "Line": 734,
      "Receiver": ""
    },
    "newFParams": {
      "Name": "newFParams",
      "File": "promql/value.go",
      "Line": 549,
      "Receiver": ""
    },
    "newFakeSeriesIterator": {
      "Name": "newFakeSeriesIterator",
      "File": "storage/buffer_test.go",
      "Line": 411,
      "Receiver": ""
    },
    "newFloatHistogramIterator": {
      "Name": "newFloatHistogramIterator",
      "File": "tsdb/chunkenc/float_histogram.go",
      "Line": 171,
      "Receiver": ""
    },
    "newGenericMergeSeriesSet": {
      "Name": "newGenericMergeSeriesSet",
      "File": "storage/merge.go",
      "Line": 338,
      "Receiver": ""
    },
    "newGenericQuerierFrom": {
      "Name": "newGenericQuerierFrom",
      "File": "storage/generic.go",
      "Line": 71,
      "Receiver": ""
    },
    "newGenericQuerierFromChunk": {
      "Name": "newGenericQuerierFromChunk",
      "File": "storage/generic.go",
      "Line": 75,
      "Receiver": ""
    },
    "newHcloudDiscovery": {
      "Name": "newHcloudDiscovery",
      "File": "discovery/hetzner/hcloud.go",
      "Line": 62,
      "Receiver": ""
    },
    "newHeadMetrics": {
      "Name": "newHeadMetrics",
      "File": "tsdb/head.go",
      "Line": 397,
      "Receiver": ""
    },
    "newHighestTimestampMetric": {
      "Name": "newHighestTimestampMetric",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 59,
      "Receiver": ""
    },
    "newHistogramIterator": {
      "Name": "newHistogramIterator",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 166,
      "Receiver": ""
    },
    "newHistogramSeries": {
      "Name": "newHistogramSeries",
      "File": "promql/histogram_stats_iterator_test.go",
      "Line": 218,
      "Receiver": ""
    },
    "newHistogramStatsSeries": {
      "Name": "newHistogramStatsSeries",
      "File": "promql/engine.go",
      "Line": 3966,
      "Receiver": ""
    },
    "newHypervisorDiscovery": {
      "Name": "newHypervisorDiscovery",
      "File": "discovery/openstack/hypervisor.go",
      "Line": 52,
      "Receiver": ""
    },
    "newInjectHeadersRoundTripper": {
      "Name": "newInjectHeadersRoundTripper",
      "File": "storage/remote/client.go",
      "Line": 229,
      "Receiver": ""
    },
    "newInstanceDiscovery": {
      "Name": "newInstanceDiscovery",
      "File": "discovery/scaleway/instance.go",
      "Line": 76,
      "Receiver": ""
    },
    "newInstantEvalCmd": {
      "Name": "newInstantEvalCmd",
      "File": "promql/promqltest/test.go",
      "Line": 771,
      "Receiver": ""
    },
    "newIntersectPostings": {
      "Name": "newIntersectPostings",
      "File": "tsdb/index/postings.go",
      "Line": 614,
      "Receiver": ""
    },
    "newIsolation": {
      "Name": "newIsolation",
      "File": "tsdb/isolation.go",
      "Line": 76,
      "Receiver": ""
    },
    "newJSONEntry": {
      "Name": "newJSONEntry",
      "File": "promql/query_logger.go",
      "Line": 187,
      "Receiver": ""
    },
    "newKumaTestHTTPDiscovery": {
      "Name": "newKumaTestHTTPDiscovery",
      "File": "discovery/xds/kuma_test.go",
      "Line": 111,
      "Receiver": ""
    },
    "newListPostings": {
      "Name": "newListPostings",
      "File": "tsdb/index/postings.go",
      "Line": 826,
      "Receiver": ""
    },
    "newLiteralPrefixStringMatcher": {
      "Name": "newLiteralPrefixStringMatcher",
      "File": "model/labels/regexp.go",
      "Line": 625,
      "Receiver": ""
    },
    "newLoadBalancerDiscovery": {
      "Name": "newLoadBalancerDiscovery",
      "File": "discovery/openstack/loadbalancer.go",
      "Line": 57,
      "Receiver": ""
    },
    "newLoadCmd": {
      "Name": "newLoadCmd",
      "File": "promql/promqltest/test.go",
      "Line": 525,
      "Receiver": ""
    },
    "newLock": {
      "Name": "newLock",
      "File": "tsdb/fileutil/flock_windows.go",
      "Line": 26,
      "Receiver": ""
    },
    "newManagedIdentityTokenCredential": {
      "Name": "newManagedIdentityTokenCredential",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 268,
      "Receiver": ""
    },
    "newMemSeries": {
      "Name": "newMemSeries",
      "File": "tsdb/head.go",
      "Line": 2200,
      "Receiver": ""
    },
    "newMergedPostings": {
      "Name": "newMergedPostings",
      "File": "tsdb/index/postings.go",
      "Line": 686,
      "Receiver": ""
    },
    "newMetaStatistics": {
      "Name": "newMetaStatistics",
      "File": "cmd/promtool/analyze.go",
      "Line": 345,
      "Receiver": ""
    },
    "newMetadataWriteToMock": {
      "Name": "newMetadataWriteToMock",
      "File": "storage/remote/metadata_watcher_test.go",
      "Line": 64,
      "Receiver": ""
    },
    "newMetrics": {
      "Name": "newMetrics",
      "File": "web/web.go",
      "Line": 139,
      "Receiver": ""
    },
    "newMockChunkSeriesSet": {
      "Name": "newMockChunkSeriesSet",
      "File": "tsdb/querier_test.go",
      "Line": 85,
      "Receiver": ""
    },
    "newMockDialContext": {
      "Name": "newMockDialContext",
      "File": "storage/remote/dial_context_test.go",
      "Line": 54,
      "Receiver": ""
    },
    "newMockDiscoveryProvider": {
      "Name": "newMockDiscoveryProvider",
      "File": "discovery/manager_test.go",
      "Line": 1399,
      "Receiver": ""
    },
    "newMockEC2Client": {
      "Name": "newMockEC2Client",
      "File": "discovery/aws/ec2_test.go",
      "Line": 395,
      "Receiver": ""
    },
    "newMockIndex": {
      "Name": "newMockIndex",
      "File": "tsdb/querier_test.go",
      "Line": 2201,
      "Receiver": ""
    },
    "newMockSeriesSet": {
      "Name": "newMockSeriesSet",
      "File": "tsdb/querier_test.go",
      "Line": 58,
      "Receiver": ""
    },
    "newMultipleAppender": {
      "Name": "newMultipleAppender",
      "File": "cmd/promtool/rules.go",
      "Line": 188,
      "Receiver": ""
    },
    "newNopChunkReader": {
      "Name": "newNopChunkReader",
      "File": "tsdb/querier.go",
      "Line": 1259,
      "Receiver": ""
    },
    "newOAuthTokenCredential": {
      "Name": "newOAuthTokenCredential",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 280,
      "Receiver": ""
    },
    "newOOOIsolation": {
      "Name": "newOOOIsolation",
      "File": "tsdb/ooo_isolation.go",
      "Line": 35,
      "Receiver": ""
    },
    "newOneShotCloser": {
      "Name": "newOneShotCloser",
      "File": "storage/remote/codec_test.go",
      "Line": 996,
      "Receiver": ""
    },
    "newPool": {
      "Name": "newPool",
      "File": "storage/remote/intern.go",
      "Line": 51,
      "Receiver": ""
    },
    "newQueue": {
      "Name": "newQueue",
      "File": "storage/remote/queue_manager.go",
      "Line": 1373,
      "Receiver": ""
    },
    "newQueueManagerMetrics": {
      "Name": "newQueueManagerMetrics",
      "File": "storage/remote/queue_manager.go",
      "Line": 98,
      "Receiver": ""
    },
    "newRangeEvalCmd": {
      "Name": "newRangeEvalCmd",
      "File": "promql/promqltest/test.go",
      "Line": 783,
      "Receiver": ""
    },
    "newReader": {
      "Name": "newReader",
      "File": "tsdb/index/index.go",
      "Line": 1165,
      "Receiver": ""
    },
    "newRefresher": {
      "Name": "newRefresher",
      "File": "discovery/stackit/stackit.go",
      "Line": 151,
      "Receiver": ""
    },
    "newRegularBucketIterator": {
      "Name": "newRegularBucketIterator",
      "File": "model/histogram/histogram.go",
      "Line": 482,
      "Receiver": ""
    },
    "newRemovedPostings": {
      "Name": "newRemovedPostings",
      "File": "tsdb/index/postings.go",
      "Line": 753,
      "Receiver": ""
    },
    "newReverseFloatBucketIterator": {
      "Name": "newReverseFloatBucketIterator",
      "File": "model/histogram/float_histogram.go",
      "Line": 979,
      "Receiver": ""
    },
    "newRobotDiscovery": {
      "Name": "newRobotDiscovery",
      "File": "discovery/hetzner/robot.go",
      "Line": 54,
      "Receiver": ""
    },
    "newRuleConcurrencyController": {
      "Name": "newRuleConcurrencyController",
      "File": "rules/manager.go",
      "Line": 506,
      "Receiver": ""
    },
    "newRuleImporter": {
      "Name": "newRuleImporter",
      "File": "cmd/promtool/rules.go",
      "Line": 60,
      "Receiver": ""
    },
    "newRulesLintConfig": {
      "Name": "newRulesLintConfig",
      "File": "cmd/promtool/main.go",
      "Line": 477,
      "Receiver": ""
    },
    "newSDKTokenCredential": {
      "Name": "newSDKTokenCredential",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 286,
      "Receiver": ""
    },
    "newSample": {
      "Name": "newSample",
      "File": "tsdb/head.go",
      "Line": 2105,
      "Receiver": ""
    },
    "newSampleRing": {
      "Name": "newSampleRing",
      "File": "storage/buffer.go",
      "Line": 287,
      "Receiver": ""
    },
    "newScopeFromScopeMetrics": {
      "Name": "newScopeFromScopeMetrics",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw.go",
      "Line": 106,
      "Receiver": ""
    },
    "newScrapableServer": {
      "Name": "newScrapableServer",
      "File": "scrape/scrape_test.go",
      "Line": 5479,
      "Receiver": ""
    },
    "newScrapeCache": {
      "Name": "newScrapeCache",
      "File": "scrape/scrape.go",
      "Line": 996,
      "Receiver": ""
    },
    "newScrapeLoop": {
      "Name": "newScrapeLoop",
      "File": "scrape/scrape.go",
      "Line": 1213,
      "Receiver": ""
    },
    "newScrapeMetrics": {
      "Name": "newScrapeMetrics",
      "File": "scrape/metrics.go",
      "Line": 58,
      "Receiver": ""
    },
    "newScrapePool": {
      "Name": "newScrapePool",
      "File": "scrape/scrape.go",
      "Line": 142,
      "Receiver": ""
    },
    "newSecondaryQuerierFrom": {
      "Name": "newSecondaryQuerierFrom",
      "File": "storage/secondary.go",
      "Line": 44,
      "Receiver": ""
    },
    "newSecondaryQuerierFromChunk": {
      "Name": "newSecondaryQuerierFromChunk",
      "File": "storage/secondary.go",
      "Line": 48,
      "Receiver": ""
    },
    "newSeq": {
      "Name": "newSeq",
      "File": "promql/parser/parse_test.go",
      "Line": 5101,
      "Receiver": ""
    },
    "newSeriesSetFilter": {
      "Name": "newSeriesSetFilter",
      "File": "storage/remote/read.go",
      "Line": 242,
      "Receiver": ""
    },
    "newServer": {
      "Name": "newServer",
      "File": "discovery/consul/consul_test.go",
      "Line": 232,
      "Receiver": ""
    },
    "newServerDiscovery": {
      "Name": "newServerDiscovery",
      "File": "discovery/stackit/server.go",
      "Line": 59,
      "Receiver": ""
    },
    "newStepInvariantExpr": {
      "Name": "newStepInvariantExpr",
      "File": "promql/engine.go",
      "Line": 3836,
      "Receiver": ""
    },
    "newStorageSeriesIterator": {
      "Name": "newStorageSeriesIterator",
      "File": "promql/value.go",
      "Line": 435,
      "Receiver": ""
    },
    "newStripeSeries": {
      "Name": "newStripeSeries",
      "File": "tsdb/head.go",
      "Line": 1905,
      "Receiver": ""
    },
    "newTLSConfig": {
      "Name": "newTLSConfig",
      "File": "scrape/target_test.go",
      "Line": 317,
      "Receiver": ""
    },
    "newTarGzFileWriter": {
      "Name": "newTarGzFileWriter",
      "File": "cmd/promtool/archive.go",
      "Line": 32,
      "Receiver": ""
    },
    "newTempHistogramWrapper": {
      "Name": "newTempHistogramWrapper",
      "File": "promql/promqltest/test.go",
      "Line": 581,
      "Receiver": ""
    },
    "newTest": {
      "Name": "newTest",
      "File": "promql/promqltest/test.go",
      "Line": 204,
      "Receiver": ""
    },
    "newTestClientAndQueueManager": {
      "Name": "newTestClientAndQueueManager",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 314,
      "Receiver": ""
    },
    "newTestDB": {
      "Name": "newTestDB",
      "File": "tsdb/db_test.go",
      "Line": 3932,
      "Receiver": ""
    },
    "newTestDBWithOpts": {
      "Name": "newTestDBWithOpts",
      "File": "tsdb/ooo_head_read_test.go",
      "Line": 1124,
      "Receiver": ""
    },
    "newTestDiscoverer": {
      "Name": "newTestDiscoverer",
      "File": "discovery/manager_test.go",
      "Line": 1512,
      "Receiver": ""
    },
    "newTestEngine": {
      "Name": "newTestEngine",
      "File": "promql/promql_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "newTestHTTPServerBuilder": {
      "Name": "newTestHTTPServerBuilder",
      "File": "notifier/manager_test.go",
      "Line": 76,
      "Receiver": ""
    },
    "newTestHead": {
      "Name": "newTestHead",
      "File": "tsdb/head_test.go",
      "Line": 72,
      "Receiver": ""
    },
    "newTestHeadDefaultOptions": {
      "Name": "newTestHeadDefaultOptions",
      "File": "tsdb/head_test.go",
      "Line": 60,
      "Receiver": ""
    },
    "newTestHeadWithOptions": {
      "Name": "newTestHeadWithOptions",
      "File": "tsdb/head_test.go",
      "Line": 76,
      "Receiver": ""
    },
    "newTestQueueManager": {
      "Name": "newTestQueueManager",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 321,
      "Receiver": ""
    },
    "newTestRegistryAndScrapeMetrics": {
      "Name": "newTestRegistryAndScrapeMetrics",
      "File": "scrape/scrape_test.go",
      "Line": 71,
      "Receiver": ""
    },
    "newTestRuleImporter": {
      "Name": "newTestRuleImporter",
      "File": "cmd/promtool/rules_test.go",
      "Line": 165,
      "Receiver": ""
    },
    "newTestRunner": {
      "Name": "newTestRunner",
      "File": "discovery/file/file_test.go",
      "Line": 55,
      "Receiver": ""
    },
    "newTestScrapeMetrics": {
      "Name": "newTestScrapeMetrics",
      "File": "scrape/scrape_test.go",
      "Line": 78,
      "Receiver": ""
    },
    "newTestStorage": {
      "Name": "newTestStorage",
      "File": "promql/promqltest/test.go",
      "Line": 217,
      "Receiver": ""
    },
    "newTestTarget": {
      "Name": "newTestTarget",
      "File": "scrape/target_test.go",
      "Line": 138,
      "Receiver": ""
    },
    "newTestTargetRetriever": {
      "Name": "newTestTargetRetriever",
      "File": "web/api/v1/api_test.go",
      "Line": 119,
      "Receiver": ""
    },
    "newTokenCredential": {
      "Name": "newTokenCredential",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 221,
      "Receiver": ""
    },
    "newTokenProvider": {
      "Name": "newTokenProvider",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 293,
      "Receiver": ""
    },
    "newTritonDiscovery": {
      "Name": "newTritonDiscovery",
      "File": "discovery/triton/triton_test.go",
      "Line": 83,
      "Receiver": ""
    },
    "newTxRing": {
      "Name": "newTxRing",
      "File": "tsdb/isolation.go",
      "Line": 247,
      "Receiver": ""
    },
    "newUnsupportedChunk": {
      "Name": "newUnsupportedChunk",
      "File": "tsdb/head_test.go",
      "Line": 5566,
      "Receiver": ""
    },
    "newVpsDiscovery": {
      "Name": "newVpsDiscovery",
      "File": "discovery/ovhcloud/vps.go",
      "Line": 73,
      "Receiver": ""
    },
    "newWLMetrics": {
      "Name": "newWLMetrics",
      "File": "tsdb/wlog/wlog.go",
      "Line": 234,
      "Receiver": ""
    },
    "newWriteJobQueue": {
      "Name": "newWriteJobQueue",
      "File": "tsdb/chunks/queue.go",
      "Line": 39,
      "Receiver": ""
    },
    "newWriteToMock": {
      "Name": "newWriteToMock",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 133,
      "Receiver": ""
    },
    "newXORChunk": {
      "Name": "newXORChunk",
      "File": "tsdb/chunkenc/chunk_test.go",
      "Line": 254,
      "Receiver": ""
    },
    "nextSequenceFile": {
      "Name": "nextSequenceFile",
      "File": "tsdb/chunks/chunks.go",
      "Line": 737,
      "Receiver": ""
    },
    "nilCloser.Close": {
      "Name": "nilCloser.Close",
      "File": "util/testutil/directory.go",
      "Line": 80,
      "Receiver": "nilCloser"
    },
    "noErr": {
      "Name": "noErr",
      "File": "tsdb/example_test.go",
      "Line": 100,
      "Receiver": ""
    },
    "nodeAddress": {
      "Name": "nodeAddress",
      "File": "discovery/kubernetes/node.go",
      "Line": 212,
      "Receiver": ""
    },
    "nodeLabels": {
      "Name": "nodeLabels",
      "File": "discovery/kubernetes/node.go",
      "Line": 165,
      "Receiver": ""
    },
    "nodeName": {
      "Name": "nodeName",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 808,
      "Receiver": ""
    },
    "nodeSource": {
      "Name": "nodeSource",
      "File": "discovery/kubernetes/node.go",
      "Line": 152,
      "Receiver": ""
    },
    "nodeSourceFromName": {
      "Name": "nodeSourceFromName",
      "File": "discovery/kubernetes/node.go",
      "Line": 156,
      "Receiver": ""
    },
    "nomadMetrics.Register": {
      "Name": "nomadMetrics.Register",
      "File": "discovery/nomad/metrics.go",
      "Line": 50,
      "Receiver": "nomadMetrics"
    },
    "nomadMetrics.Unregister": {
      "Name": "nomadMetrics.Unregister",
      "File": "discovery/nomad/metrics.go",
      "Line": 55,
      "Receiver": "nomadMetrics"
    },
    "nonNilMultiError.Error": {
      "Name": "nonNilMultiError.Error",
      "File": "tsdb/errors/errors.go",
      "Line": 67,
      "Receiver": "nonNilMultiError"
    },
    "nonNilMultiError.Is": {
      "Name": "nonNilMultiError.Is",
      "File": "tsdb/errors/errors.go",
      "Line": 88,
      "Receiver": "nonNilMultiError"
    },
    "nonNilMultiError.Unwrap": {
      "Name": "nonNilMultiError.Unwrap",
      "File": "tsdb/errors/errors.go",
      "Line": 98,
      "Receiver": "nonNilMultiError"
    },
    "noopChunkQuerier.Close": {
      "Name": "noopChunkQuerier.Close",
      "File": "storage/noop.go",
      "Line": 65,
      "Receiver": "noopChunkQuerier"
    },
    "noopChunkQuerier.LabelNames": {
      "Name": "noopChunkQuerier.LabelNames",
      "File": "storage/noop.go",
      "Line": 61,
      "Receiver": "noopChunkQuerier"
    },
    "noopChunkQuerier.LabelValues": {
      "Name": "noopChunkQuerier.LabelValues",
      "File": "storage/noop.go",
      "Line": 57,
      "Receiver": "noopChunkQuerier"
    },
    "noopChunkQuerier.Select": {
      "Name": "noopChunkQuerier.Select",
      "File": "storage/noop.go",
      "Line": 53,
      "Receiver": "noopChunkQuerier"
    },
    "noopChunkedSeriesSet.At": {
      "Name": "noopChunkedSeriesSet.At",
      "File": "storage/noop.go",
      "Line": 93,
      "Receiver": "noopChunkedSeriesSet"
    },
    "noopChunkedSeriesSet.Err": {
      "Name": "noopChunkedSeriesSet.Err",
      "File": "storage/noop.go",
      "Line": 95,
      "Receiver": "noopChunkedSeriesSet"
    },
    "noopChunkedSeriesSet.Next": {
      "Name": "noopChunkedSeriesSet.Next",
      "File": "storage/noop.go",
      "Line": 91,
      "Receiver": "noopChunkedSeriesSet"
    },
    "noopChunkedSeriesSet.Warnings": {
      "Name": "noopChunkedSeriesSet.Warnings",
      "File": "storage/noop.go",
      "Line": 97,
      "Receiver": "noopChunkedSeriesSet"
    },
    "noopGenericSeriesSet.At": {
      "Name": "noopGenericSeriesSet.At",
      "File": "storage/generic.go",
      "Line": 139,
      "Receiver": "noopGenericSeriesSet"
    },
    "noopGenericSeriesSet.Err": {
      "Name": "noopGenericSeriesSet.Err",
      "File": "storage/generic.go",
      "Line": 141,
      "Receiver": "noopGenericSeriesSet"
    },
    "noopGenericSeriesSet.Next": {
      "Name": "noopGenericSeriesSet.Next",
      "File": "storage/generic.go",
      "Line": 137,
      "Receiver": "noopGenericSeriesSet"
    },
    "noopGenericSeriesSet.Warnings": {
      "Name": "noopGenericSeriesSet.Warnings",
      "File": "storage/generic.go",
      "Line": 143,
      "Receiver": "noopGenericSeriesSet"
    },
    "noopHintRecordingQueryable.Querier": {
      "Name": "noopHintRecordingQueryable.Querier",
      "File": "promql/engine_test.go",
      "Line": 292,
      "Receiver": "noopHintRecordingQueryable"
    },
    "noopLoop": {
      "Name": "noopLoop",
      "File": "scrape/manager_test.go",
      "Line": 474,
      "Receiver": ""
    },
    "noopMetric.Dec": {
      "Name": "noopMetric.Dec",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 120,
      "Receiver": "noopMetric"
    },
    "noopMetric.Inc": {
      "Name": "noopMetric.Inc",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 119,
      "Receiver": "noopMetric"
    },
    "noopMetric.Observe": {
      "Name": "noopMetric.Observe",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 121,
      "Receiver": "noopMetric"
    },
    "noopMetric.Set": {
      "Name": "noopMetric.Set",
      "File": "discovery/metrics_k8s_client.go",
      "Line": 122,
      "Receiver": "noopMetric"
    },
    "noopQuerier.Close": {
      "Name": "noopQuerier.Close",
      "File": "storage/noop.go",
      "Line": 42,
      "Receiver": "noopQuerier"
    },
    "noopQuerier.LabelNames": {
      "Name": "noopQuerier.LabelNames",
      "File": "storage/noop.go",
      "Line": 38,
      "Receiver": "noopQuerier"
    },
    "noopQuerier.LabelValues": {
      "Name": "noopQuerier.LabelValues",
      "File": "storage/noop.go",
      "Line": 34,
      "Receiver": "noopQuerier"
    },
    "noopQuerier.Select": {
      "Name": "noopQuerier.Select",
      "File": "storage/noop.go",
      "Line": 30,
      "Receiver": "noopQuerier"
    },
    "noopScrapeManager.Get": {
      "Name": "noopScrapeManager.Get",
      "File": "storage/remote/metadata_watcher.go",
      "Line": 40,
      "Receiver": "noopScrapeManager"
    },
    "noopSeriesLifecycleCallback.PostCreation": {
      "Name": "noopSeriesLifecycleCallback.PostCreation",
      "File": "tsdb/head.go",
      "Line": 2393,
      "Receiver": "noopSeriesLifecycleCallback"
    },
    "noopSeriesLifecycleCallback.PostDeletion": {
      "Name": "noopSeriesLifecycleCallback.PostDeletion",
      "File": "tsdb/head.go",
      "Line": 2394,
      "Receiver": "noopSeriesLifecycleCallback"
    },
    "noopSeriesLifecycleCallback.PreCreation": {
      "Name": "noopSeriesLifecycleCallback.PreCreation",
      "File": "tsdb/head.go",
      "Line": 2392,
      "Receiver": "noopSeriesLifecycleCallback"
    },
    "noopSeriesSet.At": {
      "Name": "noopSeriesSet.At",
      "File": "storage/noop.go",
      "Line": 78,
      "Receiver": "noopSeriesSet"
    },
    "noopSeriesSet.Err": {
      "Name": "noopSeriesSet.Err",
      "File": "storage/noop.go",
      "Line": 80,
      "Receiver": "noopSeriesSet"
    },
    "noopSeriesSet.Next": {
      "Name": "noopSeriesSet.Next",
      "File": "storage/noop.go",
      "Line": 76,
      "Receiver": "noopSeriesSet"
    },
    "noopSeriesSet.Warnings": {
      "Name": "noopSeriesSet.Warnings",
      "File": "storage/noop.go",
      "Line": 82,
      "Receiver": "noopSeriesSet"
    },
    "nopAppendable.Appender": {
      "Name": "nopAppendable.Appender",
      "File": "scrape/helpers_test.go",
      "Line": 40,
      "Receiver": "nopAppendable"
    },
    "nopAppender.Append": {
      "Name": "nopAppender.Append",
      "File": "scrape/helpers_test.go",
      "Line": 48,
      "Receiver": "nopAppender"
    },
    "nopAppender.AppendCTZeroSample": {
      "Name": "nopAppender.AppendCTZeroSample",
      "File": "scrape/helpers_test.go",
      "Line": 68,
      "Receiver": "nopAppender"
    },
    "nopAppender.AppendExemplar": {
      "Name": "nopAppender.AppendExemplar",
      "File": "scrape/helpers_test.go",
      "Line": 52,
      "Receiver": "nopAppender"
    },
    "nopAppender.AppendHistogram": {
      "Name": "nopAppender.AppendHistogram",
      "File": "scrape/helpers_test.go",
      "Line": 56,
      "Receiver": "nopAppender"
    },
    "nopAppender.AppendHistogramCTZeroSample": {
      "Name": "nopAppender.AppendHistogramCTZeroSample",
      "File": "scrape/helpers_test.go",
      "Line": 60,
      "Receiver": "nopAppender"
    },
    "nopAppender.Commit": {
      "Name": "nopAppender.Commit",
      "File": "scrape/helpers_test.go",
      "Line": 72,
      "Receiver": "nopAppender"
    },
    "nopAppender.Rollback": {
      "Name": "nopAppender.Rollback",
      "File": "scrape/helpers_test.go",
      "Line": 73,
      "Receiver": "nopAppender"
    },
    "nopAppender.SetOptions": {
      "Name": "nopAppender.SetOptions",
      "File": "scrape/helpers_test.go",
      "Line": 46,
      "Receiver": "nopAppender"
    },
    "nopAppender.UpdateMetadata": {
      "Name": "nopAppender.UpdateMetadata",
      "File": "scrape/helpers_test.go",
      "Line": 64,
      "Receiver": "nopAppender"
    },
    "nopChunkReader.ChunkOrIterable": {
      "Name": "nopChunkReader.ChunkOrIterable",
      "File": "tsdb/querier.go",
      "Line": 1265,
      "Receiver": "nopChunkReader"
    },
    "nopChunkReader.Close": {
      "Name": "nopChunkReader.Close",
      "File": "tsdb/querier.go",
      "Line": 1269,
      "Receiver": "nopChunkReader"
    },
    "nopChunkWriter.Close": {
      "Name": "nopChunkWriter.Close",
      "File": "tsdb/compact_test.go",
      "Line": 475,
      "Receiver": "nopChunkWriter"
    },
    "nopChunkWriter.WriteChunks": {
      "Name": "nopChunkWriter.WriteChunks",
      "File": "tsdb/compact_test.go",
      "Line": 474,
      "Receiver": "nopChunkWriter"
    },
    "nopIterator.At": {
      "Name": "nopIterator.At",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 263,
      "Receiver": "nopIterator"
    },
    "nopIterator.AtFloatHistogram": {
      "Name": "nopIterator.AtFloatHistogram",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 268,
      "Receiver": "nopIterator"
    },
    "nopIterator.AtHistogram": {
      "Name": "nopIterator.AtHistogram",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 264,
      "Receiver": "nopIterator"
    },
    "nopIterator.AtT": {
      "Name": "nopIterator.AtT",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 271,
      "Receiver": "nopIterator"
    },
    "nopIterator.Err": {
      "Name": "nopIterator.Err",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 272,
      "Receiver": "nopIterator"
    },
    "nopIterator.Next": {
      "Name": "nopIterator.Next",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 261,
      "Receiver": "nopIterator"
    },
    "nopIterator.Seek": {
      "Name": "nopIterator.Seek",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 262,
      "Receiver": "nopIterator"
    },
    "nopMutator": {
      "Name": "nopMutator",
      "File": "scrape/scrape_test.go",
      "Line": 1044,
      "Receiver": ""
    },
    "nopScraper.Report": {
      "Name": "nopScraper.Report",
      "File": "scrape/scrape_test.go",
      "Line": 256,
      "Receiver": "nopScraper"
    },
    "normalizeBody": {
      "Name": "normalizeBody",
      "File": "web/federate_test.go",
      "Line": 286,
      "Receiver": ""
    },
    "normalizeFloatsInLabelValues": {
      "Name": "normalizeFloatsInLabelValues",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 775,
      "Receiver": ""
    },
    "normalizeNewLine": {
      "Name": "normalizeNewLine",
      "File": "cmd/promtool/tsdb_test.go",
      "Line": 85,
      "Receiver": ""
    },
    "notReadyAppender.Append": {
      "Name": "notReadyAppender.Append",
      "File": "cmd/prometheus/main.go",
      "Line": 1707,
      "Receiver": "notReadyAppender"
    },
    "notReadyAppender.AppendCTZeroSample": {
      "Name": "notReadyAppender.AppendCTZeroSample",
      "File": "cmd/prometheus/main.go",
      "Line": 1727,
      "Receiver": "notReadyAppender"
    },
    "notReadyAppender.AppendExemplar": {
      "Name": "notReadyAppender.AppendExemplar",
      "File": "cmd/prometheus/main.go",
      "Line": 1711,
      "Receiver": "notReadyAppender"
    },
    "notReadyAppender.AppendHistogram": {
      "Name": "notReadyAppender.AppendHistogram",
      "File": "cmd/prometheus/main.go",
      "Line": 1715,
      "Receiver": "notReadyAppender"
    },
    "notReadyAppender.AppendHistogramCTZeroSample": {
      "Name": "notReadyAppender.AppendHistogramCTZeroSample",
      "File": "cmd/prometheus/main.go",
      "Line": 1719,
      "Receiver": "notReadyAppender"
    },
    "notReadyAppender.Commit": {
      "Name": "notReadyAppender.Commit",
      "File": "cmd/prometheus/main.go",
      "Line": 1731,
      "Receiver": "notReadyAppender"
    },
    "notReadyAppender.Rollback": {
      "Name": "notReadyAppender.Rollback",
      "File": "cmd/prometheus/main.go",
      "Line": 1733,
      "Receiver": "notReadyAppender"
    },
    "notReadyAppender.SetOptions": {
      "Name": "notReadyAppender.SetOptions",
      "File": "cmd/prometheus/main.go",
      "Line": 1705,
      "Receiver": "notReadyAppender"
    },
    "notReadyAppender.UpdateMetadata": {
      "Name": "notReadyAppender.UpdateMetadata",
      "File": "cmd/prometheus/main.go",
      "Line": 1723,
      "Receiver": "notReadyAppender"
    },
    "notReadyReadStorage.Querier": {
      "Name": "notReadyReadStorage.Querier",
      "File": "web/federate_test.go",
      "Line": 243,
      "Receiver": "notReadyReadStorage"
    },
    "notReadyReadStorage.StartTime": {
      "Name": "notReadyReadStorage.StartTime",
      "File": "web/federate_test.go",
      "Line": 247,
      "Receiver": "notReadyReadStorage"
    },
    "notReadyReadStorage.Stats": {
      "Name": "notReadyReadStorage.Stats",
      "File": "web/federate_test.go",
      "Line": 251,
      "Receiver": "notReadyReadStorage"
    },
    "onceProvider.Run": {
      "Name": "onceProvider.Run",
      "File": "discovery/manager_test.go",
      "Line": 1440,
      "Receiver": "onceProvider"
    },
    "oneShotCloser.Close": {
      "Name": "oneShotCloser.Close",
      "File": "storage/remote/codec_test.go",
      "Line": 1008,
      "Receiver": "oneShotCloser"
    },
    "oneShotCloser.Read": {
      "Name": "oneShotCloser.Read",
      "File": "storage/remote/codec_test.go",
      "Line": 1000,
      "Receiver": "oneShotCloser"
    },
    "oooHeadChunk.OverlapsClosedInterval": {
      "Name": "oooHeadChunk.OverlapsClosedInterval",
      "File": "tsdb/head.go",
      "Line": 2365,
      "Receiver": "oooHeadChunk"
    },
    "oooIsolation.HasOpenReadsAtOrBefore": {
      "Name": "oooIsolation.HasOpenReadsAtOrBefore",
      "File": "tsdb/ooo_isolation.go",
      "Line": 43,
      "Receiver": "oooIsolation"
    },
    "oooIsolation.TrackReadAfter": {
      "Name": "oooIsolation.TrackReadAfter",
      "File": "tsdb/ooo_isolation.go",
      "Line": 62,
      "Receiver": "oooIsolation"
    },
    "oooIsolationState.Close": {
      "Name": "oooIsolationState.Close",
      "File": "tsdb/ooo_isolation.go",
      "Line": 75,
      "Receiver": "oooIsolationState"
    },
    "open": {
      "Name": "open",
      "File": "tsdb/db.go",
      "Line": 827,
      "Receiver": ""
    },
    "openBlock": {
      "Name": "openBlock",
      "File": "cmd/promtool/tsdb.go",
      "Line": 393,
      "Receiver": ""
    },
    "openBlocks": {
      "Name": "openBlocks",
      "File": "tsdb/db.go",
      "Line": 1666,
      "Receiver": ""
    },
    "openDBWithMetrics": {
      "Name": "openDBWithMetrics",
      "File": "cmd/prometheus/main.go",
      "Line": 1438,
      "Receiver": ""
    },
    "openDir": {
      "Name": "openDir",
      "File": "tsdb/fileutil/dir_windows.go",
      "Line": 33,
      "Receiver": ""
    },
    "openMetricsLexer.Error": {
      "Name": "openMetricsLexer.Error",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 71,
      "Receiver": "openMetricsLexer"
    },
    "openMetricsLexer.Lex": {
      "Name": "openMetricsLexer.Lex",
      "File": "model/textparse/openmetricslex.l.go",
      "Line": 25,
      "Receiver": "openMetricsLexer"
    },
    "openMetricsLexer.buf": {
      "Name": "openMetricsLexer.buf",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 48,
      "Receiver": "openMetricsLexer"
    },
    "openMetricsLexer.next": {
      "Name": "openMetricsLexer.next",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 53,
      "Receiver": "openMetricsLexer"
    },
    "openTestDB": {
      "Name": "openTestDB",
      "File": "tsdb/db_test.go",
      "Line": 82,
      "Receiver": ""
    },
    "openstackMetrics.Register": {
      "Name": "openstackMetrics.Register",
      "File": "discovery/openstack/metrics.go",
      "Line": 27,
      "Receiver": "openstackMetrics"
    },
    "openstackMetrics.Unregister": {
      "Name": "openstackMetrics.Unregister",
      "File": "discovery/openstack/metrics.go",
      "Line": 32,
      "Receiver": "openstackMetrics"
    },
    "optimizeAlternatingLiterals": {
      "Name": "optimizeAlternatingLiterals",
      "File": "model/labels/regexp.go",
      "Line": 320,
      "Receiver": ""
    },
    "optimizeConcatRegex": {
      "Name": "optimizeConcatRegex",
      "File": "model/labels/regexp.go",
      "Line": 361,
      "Receiver": ""
    },
    "optimizeEqualOrPrefixStringMatchers": {
      "Name": "optimizeEqualOrPrefixStringMatchers",
      "File": "model/labels/regexp.go",
      "Line": 960,
      "Receiver": ""
    },
    "optsFactory": {
      "Name": "optsFactory",
      "File": "rules/manager_test.go",
      "Line": 2501,
      "Receiver": ""
    },
    "orStringMatcher.Matches": {
      "Name": "orStringMatcher.Matches",
      "File": "model/labels/regexp.go",
      "Line": 705,
      "Receiver": "orStringMatcher"
    },
    "orderedGroups": {
      "Name": "orderedGroups",
      "File": "cmd/promtool/unittest.go",
      "Line": 551,
      "Receiver": ""
    },
    "otelErrHandler.Handle": {
      "Name": "otelErrHandler.Handle",
      "File": "tracing/tracing.go",
      "Line": 125,
      "Receiver": "otelErrHandler"
    },
    "otelMetricTypeToPromMetricType": {
      "Name": "otelMetricTypeToPromMetricType",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/otlp_to_openmetrics_metadata.go",
      "Line": 25,
      "Receiver": ""
    },
    "otlpWriteHandler.ServeHTTP": {
      "Name": "otlpWriteHandler.ServeHTTP",
      "File": "storage/remote/write_handler.go",
      "Line": 634,
      "Receiver": "otlpWriteHandler"
    },
    "overlapsClosedInterval": {
      "Name": "overlapsClosedInterval",
      "File": "tsdb/head.go",
      "Line": 2374,
      "Receiver": ""
    },
    "overwriteReadTimeout": {
      "Name": "overwriteReadTimeout",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 58,
      "Receiver": ""
    },
    "ovhcloudMetrics.Register": {
      "Name": "ovhcloudMetrics.Register",
      "File": "discovery/ovhcloud/metrics.go",
      "Line": 27,
      "Receiver": "ovhcloudMetrics"
    },
    "ovhcloudMetrics.Unregister": {
      "Name": "ovhcloudMetrics.Unregister",
      "File": "discovery/ovhcloud/metrics.go",
      "Line": 32,
      "Receiver": "ovhcloudMetrics"
    },
    "page.full": {
      "Name": "page.full",
      "File": "tsdb/wlog/wlog.go",
      "Line": 66,
      "Receiver": "page"
    },
    "page.remaining": {
      "Name": "page.remaining",
      "File": "tsdb/wlog/wlog.go",
      "Line": 62,
      "Receiver": "page"
    },
    "page.reset": {
      "Name": "page.reset",
      "File": "tsdb/wlog/wlog.go",
      "Line": 70,
      "Receiver": "page"
    },
    "parseAndPushMetrics": {
      "Name": "parseAndPushMetrics",
      "File": "cmd/promtool/metrics.go",
      "Line": 105,
      "Receiver": ""
    },
    "parseBrokenJSON": {
      "Name": "parseBrokenJSON",
      "File": "promql/query_logger.go",
      "Line": 51,
      "Receiver": ""
    },
    "parseCompressionType": {
      "Name": "parseCompressionType",
      "File": "cmd/prometheus/main.go",
      "Line": 313,
      "Receiver": ""
    },
    "parseDuration": {
      "Name": "parseDuration",
      "File": "web/api/v1/api.go",
      "Line": 2088,
      "Receiver": ""
    },
    "parseExcludeAlerts": {
      "Name": "parseExcludeAlerts",
      "File": "web/api/v1/api.go",
      "Line": 1635,
      "Receiver": ""
    },
    "parseExpect": {
      "Name": "parseExpect",
      "File": "promql/promqltest/test.go",
      "Line": 270,
      "Receiver": ""
    },
    "parseFlags": {
      "Name": "parseFlags",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/main.go",
      "Line": 114,
      "Receiver": ""
    },
    "parseFloat": {
      "Name": "parseFloat",
      "File": "model/textparse/promparse.go",
      "Line": 529,
      "Receiver": ""
    },
    "parseIPList": {
      "Name": "parseIPList",
      "File": "discovery/ovhcloud/ovhcloud.go",
      "Line": 112,
      "Receiver": ""
    },
    "parseLabel": {
      "Name": "parseLabel",
      "File": "prompb/io/prometheus/client/decoder.go",
      "Line": 174,
      "Receiver": ""
    },
    "parseLastEvaluation": {
      "Name": "parseLastEvaluation",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 148,
      "Receiver": ""
    },
    "parseLimitParam": {
      "Name": "parseLimitParam",
      "File": "web/api/v1/api.go",
      "Line": 2121,
      "Receiver": ""
    },
    "parseListRulesPaginationRequest": {
      "Name": "parseListRulesPaginationRequest",
      "File": "web/api/v1/api.go",
      "Line": 1649,
      "Receiver": ""
    },
    "parseLoad": {
      "Name": "parseLoad",
      "File": "promql/promqltest/test.go",
      "Line": 229,
      "Receiver": ""
    },
    "parseMatchersParam": {
      "Name": "parseMatchersParam",
      "File": "web/api/v1/api.go",
      "Line": 2102,
      "Receiver": ""
    },
    "parseNerveMember": {
      "Name": "parseNerveMember",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 315,
      "Receiver": ""
    },
    "parseNumber": {
      "Name": "parseNumber",
      "File": "promql/promqltest/test.go",
      "Line": 1475,
      "Receiver": ""
    },
    "parseSeries": {
      "Name": "parseSeries",
      "File": "promql/promqltest/test.go",
      "Line": 259,
      "Receiver": ""
    },
    "parseServersetMember": {
      "Name": "parseServersetMember",
      "File": "discovery/zookeeper/zookeeper.go",
      "Line": 274,
      "Receiver": ""
    },
    "parseStartTimeAndEndTime": {
      "Name": "parseStartTimeAndEndTime",
      "File": "cmd/promtool/query.go",
      "Line": 216,
      "Receiver": ""
    },
    "parseTime": {
      "Name": "parseTime",
      "File": "web/api/v1/api.go",
      "Line": 2065,
      "Receiver": ""
    },
    "parseTimeParam": {
      "Name": "parseTimeParam",
      "File": "web/api/v1/api.go",
      "Line": 2053,
      "Receiver": ""
    },
    "parsedSample.String": {
      "Name": "parsedSample.String",
      "File": "cmd/promtool/unittest.go",
      "Line": 698,
      "Receiver": "parsedSample"
    },
    "parsedSamplesString": {
      "Name": "parsedSamplesString",
      "File": "cmd/promtool/unittest.go",
      "Line": 687,
      "Receiver": ""
    },
    "parser.Close": {
      "Name": "parser.Close",
      "File": "promql/parser/parse.go",
      "Line": 129,
      "Receiver": "parser"
    },
    "parser.Error": {
      "Name": "parser.Error",
      "File": "promql/parser/parse.go",
      "Line": 405,
      "Receiver": "parser"
    },
    "parser.InjectItem": {
      "Name": "parser.InjectItem",
      "File": "promql/parser/parse.go",
      "Line": 415,
      "Receiver": "parser"
    },
    "parser.Lex": {
      "Name": "parser.Lex",
      "File": "promql/parser/parse.go",
      "Line": 361,
      "Receiver": "parser"
    },
    "parser.ParseExpr": {
      "Name": "parser.ParseExpr",
      "File": "promql/parser/parse.go",
      "Line": 108,
      "Receiver": "parser"
    },
    "parser.addOffset": {
      "Name": "parser.addOffset",
      "File": "promql/parser/parse.go",
      "Line": 962,
      "Receiver": "parser"
    },
    "parser.addOffsetExpr": {
      "Name": "parser.addOffsetExpr",
      "File": "promql/parser/parse.go",
      "Line": 1002,
      "Receiver": "parser"
    },
    "parser.addParseErr": {
      "Name": "parser.addParseErr",
      "File": "promql/parser/parse.go",
      "Line": 293,
      "Receiver": "parser"
    },
    "parser.addParseErrf": {
      "Name": "parser.addParseErrf",
      "File": "promql/parser/parse.go",
      "Line": 288,
      "Receiver": "parser"
    },
    "parser.addSemanticError": {
      "Name": "parser.addSemanticError",
      "File": "promql/parser/parse.go",
      "Line": 303,
      "Receiver": "parser"
    },
    "parser.assembleVectorSelector": {
      "Name": "parser.assembleVectorSelector",
      "File": "promql/parser/parse.go",
      "Line": 438,
      "Receiver": "parser"
    },
    "parser.buildHistogramBucketsAndSpans": {
      "Name": "parser.buildHistogramBucketsAndSpans",
      "File": "promql/parser/parse.go",
      "Line": 642,
      "Receiver": "parser"
    },
    "parser.buildHistogramFromMap": {
      "Name": "parser.buildHistogramFromMap",
      "File": "promql/parser/parse.go",
      "Line": 549,
      "Receiver": "parser"
    },
    "parser.checkAST": {
      "Name": "parser.checkAST",
      "File": "promql/parser/parse.go",
      "Line": 694,
      "Receiver": "parser"
    },
    "parser.expectType": {
      "Name": "parser.expectType",
      "File": "promql/parser/parse.go",
      "Line": 686,
      "Receiver": "parser"
    },
    "parser.experimentalDurationExpr": {
      "Name": "parser.experimentalDurationExpr",
      "File": "promql/parser/parse.go",
      "Line": 1113,
      "Receiver": "parser"
    },
    "parser.getAtModifierVars": {
      "Name": "parser.getAtModifierVars",
      "File": "promql/parser/parse.go",
      "Line": 1076,
      "Receiver": "parser"
    },
    "parser.histogramsDecreaseSeries": {
      "Name": "parser.histogramsDecreaseSeries",
      "File": "promql/parser/parse.go",
      "Line": 519,
      "Receiver": "parser"
    },
    "parser.histogramsIncreaseSeries": {
      "Name": "parser.histogramsIncreaseSeries",
      "File": "promql/parser/parse.go",
      "Line": 513,
      "Receiver": "parser"
    },
    "parser.histogramsSeries": {
      "Name": "parser.histogramsSeries",
      "File": "promql/parser/parse.go",
      "Line": 525,
      "Receiver": "parser"
    },
    "parser.mergeMaps": {
      "Name": "parser.mergeMaps",
      "File": "promql/parser/parse.go",
      "Line": 502,
      "Receiver": "parser"
    },
    "parser.newAggregateExpr": {
      "Name": "parser.newAggregateExpr",
      "File": "promql/parser/parse.go",
      "Line": 450,
      "Receiver": "parser"
    },
    "parser.newBinaryExpression": {
      "Name": "parser.newBinaryExpression",
      "File": "promql/parser/parse.go",
      "Line": 428,
      "Receiver": "parser"
    },
    "parser.newLabelMatcher": {
      "Name": "parser.newLabelMatcher",
      "File": "promql/parser/parse.go",
      "Line": 923,
      "Receiver": "parser"
    },
    "parser.newMap": {
      "Name": "parser.newMap",
      "File": "promql/parser/parse.go",
      "Line": 496,
      "Receiver": "parser"
    },
    "parser.newMetricNameMatcher": {
      "Name": "parser.newMetricNameMatcher",
      "File": "promql/parser/parse.go",
      "Line": 952,
      "Receiver": "parser"
    },
    "parser.number": {
      "Name": "parser.number",
      "File": "promql/parser/parse.go",
      "Line": 672,
      "Receiver": "parser"
    },
    "parser.parseGenerated": {
      "Name": "parser.parseGenerated",
      "File": "promql/parser/parse.go",
      "Line": 915,
      "Receiver": "parser"
    },
    "parser.recover": {
      "Name": "parser.recover",
      "File": "promql/parser/parse.go",
      "Line": 337,
      "Receiver": "parser"
    },
    "parser.setAtModifierPreprocessor": {
      "Name": "parser.setAtModifierPreprocessor",
      "File": "promql/parser/parse.go",
      "Line": 1063,
      "Receiver": "parser"
    },
    "parser.setTimestamp": {
      "Name": "parser.setTimestamp",
      "File": "promql/parser/parse.go",
      "Line": 1041,
      "Receiver": "parser"
    },
    "parser.unexpected": {
      "Name": "parser.unexpected",
      "File": "promql/parser/parse.go",
      "Line": 310,
      "Receiver": "parser"
    },
    "parser.unquoteString": {
      "Name": "parser.unquoteString",
      "File": "promql/parser/parse.go",
      "Line": 896,
      "Receiver": "parser"
    },
    "pathFromMetric": {
      "Name": "pathFromMetric",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/graphite/client.go",
      "Line": 53,
      "Receiver": ""
    },
    "pathsFromIngressPaths": {
      "Name": "pathsFromIngressPaths",
      "File": "discovery/kubernetes/ingress.go",
      "Line": 162,
      "Receiver": ""
    },
    "permutateChunkIntervals": {
      "Name": "permutateChunkIntervals",
      "File": "tsdb/ooo_head_read_test.go",
      "Line": 48,
      "Receiver": ""
    },
    "pickSchema": {
      "Name": "pickSchema",
      "File": "scrape/scrape.go",
      "Line": 2257,
      "Receiver": ""
    },
    "pk": {
      "Name": "pk",
      "File": "discovery/manager_test.go",
      "Line": 779,
      "Receiver": ""
    },
    "plan9Lock.Release": {
      "Name": "plan9Lock.Release",
      "File": "tsdb/fileutil/flock_plan9.go",
      "Line": 22,
      "Receiver": "plan9Lock"
    },
    "podLabels": {
      "Name": "podLabels",
      "File": "discovery/kubernetes/pod.go",
      "Line": 215,
      "Receiver": ""
    },
    "podReady": {
      "Name": "podReady",
      "File": "discovery/kubernetes/pod.go",
      "Line": 338,
      "Receiver": ""
    },
    "podSource": {
      "Name": "podSource",
      "File": "discovery/kubernetes/pod.go",
      "Line": 330,
      "Receiver": ""
    },
    "podSourceFromNamespaceAndName": {
      "Name": "podSourceFromNamespaceAndName",
      "File": "discovery/kubernetes/pod.go",
      "Line": 334,
      "Receiver": ""
    },
    "pointerOf": {
      "Name": "pointerOf",
      "File": "rules/group_test.go",
      "Line": 96,
      "Receiver": ""
    },
    "pool.Get": {
      "Name": "pool.Get",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 308,
      "Receiver": "pool"
    },
    "pool.Put": {
      "Name": "pool.Put",
      "File": "tsdb/chunkenc/chunk.go",
      "Line": 325,
      "Receiver": "pool"
    },
    "pool.intern": {
      "Name": "pool.intern",
      "File": "storage/remote/intern.go",
      "Line": 57,
      "Receiver": "pool"
    },
    "pool.release": {
      "Name": "pool.release",
      "File": "storage/remote/intern.go",
      "Line": 85,
      "Receiver": "pool"
    },
    "populateSeries": {
      "Name": "populateSeries",
      "File": "tsdb/block_test.go",
      "Line": 875,
      "Receiver": ""
    },
    "populateTestWL": {
      "Name": "populateTestWL",
      "File": "tsdb/head_test.go",
      "Line": 152,
      "Receiver": ""
    },
    "populateTimeSeries": {
      "Name": "populateTimeSeries",
      "File": "storage/remote/queue_manager.go",
      "Line": 1596,
      "Receiver": ""
    },
    "populateV2TimeSeries": {
      "Name": "populateV2TimeSeries",
      "File": "storage/remote/queue_manager.go",
      "Line": 1914,
      "Receiver": ""
    },
    "populateWithDelChunkSeriesIterator.At": {
      "Name": "populateWithDelChunkSeriesIterator.At",
      "File": "tsdb/querier.go",
      "Line": 1065,
      "Receiver": "populateWithDelChunkSeriesIterator"
    },
    "populateWithDelChunkSeriesIterator.Next": {
      "Name": "populateWithDelChunkSeriesIterator.Next",
      "File": "tsdb/querier.go",
      "Line": 824,
      "Receiver": "populateWithDelChunkSeriesIterator"
    },
    "populateWithDelChunkSeriesIterator.populateChunksFromIterable": {
      "Name": "populateWithDelChunkSeriesIterator.populateChunksFromIterable",
      "File": "tsdb/querier.go",
      "Line": 953,
      "Receiver": "populateWithDelChunkSeriesIterator"
    },
    "populateWithDelChunkSeriesIterator.populateCurrForSingleChunk": {
      "Name": "populateWithDelChunkSeriesIterator.populateCurrForSingleChunk",
      "File": "tsdb/querier.go",
      "Line": 865,
      "Receiver": "populateWithDelChunkSeriesIterator"
    },
    "populateWithDelChunkSeriesIterator.reset": {
      "Name": "populateWithDelChunkSeriesIterator.reset",
      "File": "tsdb/querier.go",
      "Line": 817,
      "Receiver": "populateWithDelChunkSeriesIterator"
    },
    "populateWithDelGenericSeriesIterator.Err": {
      "Name": "populateWithDelGenericSeriesIterator.Err",
      "File": "tsdb/querier.go",
      "Line": 697,
      "Receiver": "populateWithDelGenericSeriesIterator"
    },
    "populateWithDelGenericSeriesIterator.next": {
      "Name": "populateWithDelGenericSeriesIterator.next",
      "File": "tsdb/querier.go",
      "Line": 642,
      "Receiver": "populateWithDelGenericSeriesIterator"
    },
    "populateWithDelGenericSeriesIterator.reset": {
      "Name": "populateWithDelGenericSeriesIterator.reset",
      "File": "tsdb/querier.go",
      "Line": 625,
      "Receiver": "populateWithDelGenericSeriesIterator"
    },
    "populateWithDelSeriesIterator.At": {
      "Name": "populateWithDelSeriesIterator.At",
      "File": "tsdb/querier.go",
      "Line": 775,
      "Receiver": "populateWithDelSeriesIterator"
    },
    "populateWithDelSeriesIterator.AtFloatHistogram": {
      "Name": "populateWithDelSeriesIterator.AtFloatHistogram",
      "File": "tsdb/querier.go",
      "Line": 783,
      "Receiver": "populateWithDelSeriesIterator"
    },
    "populateWithDelSeriesIterator.AtHistogram": {
      "Name": "populateWithDelSeriesIterator.AtHistogram",
      "File": "tsdb/querier.go",
      "Line": 779,
      "Receiver": "populateWithDelSeriesIterator"
    },
    "populateWithDelSeriesIterator.AtT": {
      "Name": "populateWithDelSeriesIterator.AtT",
      "File": "tsdb/querier.go",
      "Line": 787,
      "Receiver": "populateWithDelSeriesIterator"
    },
    "populateWithDelSeriesIterator.Err": {
      "Name": "populateWithDelSeriesIterator.Err",
      "File": "tsdb/querier.go",
      "Line": 791,
      "Receiver": "populateWithDelSeriesIterator"
    },
    "populateWithDelSeriesIterator.Next": {
      "Name": "populateWithDelSeriesIterator.Next",
      "File": "tsdb/querier.go",
      "Line": 741,
      "Receiver": "populateWithDelSeriesIterator"
    },
    "populateWithDelSeriesIterator.Seek": {
      "Name": "populateWithDelSeriesIterator.Seek",
      "File": "tsdb/querier.go",
      "Line": 761,
      "Receiver": "populateWithDelSeriesIterator"
    },
    "populateWithDelSeriesIterator.reset": {
      "Name": "populateWithDelSeriesIterator.reset",
      "File": "tsdb/querier.go",
      "Line": 736,
      "Receiver": "populateWithDelSeriesIterator"
    },
    "portWasUsed": {
      "Name": "portWasUsed",
      "File": "util/testutil/port.go",
      "Line": 51,
      "Receiver": ""
    },
    "postPath": {
      "Name": "postPath",
      "File": "notifier/alertmanager.go",
      "Line": 87,
      "Receiver": ""
    },
    "postingsFailingAfterNthCall.Err": {
      "Name": "postingsFailingAfterNthCall.Err",
      "File": "tsdb/index/postings_test.go",
      "Line": 1196,
      "Receiver": "postingsFailingAfterNthCall"
    },
    "postingsFailingAfterNthCall.Next": {
      "Name": "postingsFailingAfterNthCall.Next",
      "File": "tsdb/index/postings_test.go",
      "Line": 1188,
      "Receiver": "postingsFailingAfterNthCall"
    },
    "postingsFailingAfterNthCall.Seek": {
      "Name": "postingsFailingAfterNthCall.Seek",
      "File": "tsdb/index/postings_test.go",
      "Line": 1180,
      "Receiver": "postingsFailingAfterNthCall"
    },
    "postingsForMatcher": {
      "Name": "postingsForMatcher",
      "File": "tsdb/querier.go",
      "Line": 343,
      "Receiver": ""
    },
    "postingsWithIndexHeap.Len": {
      "Name": "postingsWithIndexHeap.Len",
      "File": "tsdb/index/postings.go",
      "Line": 1010,
      "Receiver": "postingsWithIndexHeap"
    },
    "postingsWithIndexHeap.Less": {
      "Name": "postingsWithIndexHeap.Less",
      "File": "tsdb/index/postings.go",
      "Line": 1014,
      "Receiver": "postingsWithIndexHeap"
    },
    "postingsWithIndexHeap.Pop": {
      "Name": "postingsWithIndexHeap.Pop",
      "File": "tsdb/index/postings.go",
      "Line": 1032,
      "Receiver": "postingsWithIndexHeap"
    },
    "postingsWithIndexHeap.Push": {
      "Name": "postingsWithIndexHeap.Push",
      "File": "tsdb/index/postings.go",
      "Line": 1025,
      "Receiver": "postingsWithIndexHeap"
    },
    "postingsWithIndexHeap.Swap": {
      "Name": "postingsWithIndexHeap.Swap",
      "File": "tsdb/index/postings.go",
      "Line": 1022,
      "Receiver": "postingsWithIndexHeap"
    },
    "postingsWithIndexHeap.at": {
      "Name": "postingsWithIndexHeap.at",
      "File": "tsdb/index/postings.go",
      "Line": 986,
      "Receiver": "postingsWithIndexHeap"
    },
    "postingsWithIndexHeap.empty": {
      "Name": "postingsWithIndexHeap.empty",
      "File": "tsdb/index/postings.go",
      "Line": 970,
      "Receiver": "postingsWithIndexHeap"
    },
    "postingsWithIndexHeap.next": {
      "Name": "postingsWithIndexHeap.next",
      "File": "tsdb/index/postings.go",
      "Line": 992,
      "Receiver": "postingsWithIndexHeap"
    },
    "postingsWithIndexHeap.popIndex": {
      "Name": "postingsWithIndexHeap.popIndex",
      "File": "tsdb/index/postings.go",
      "Line": 978,
      "Receiver": "postingsWithIndexHeap"
    },
    "preallocExtend": {
      "Name": "preallocExtend",
      "File": "tsdb/fileutil/preallocate_other.go",
      "Line": 21,
      "Receiver": ""
    },
    "preallocExtendTrunc": {
      "Name": "preallocExtendTrunc",
      "File": "tsdb/fileutil/preallocate.go",
      "Line": 38,
      "Receiver": ""
    },
    "preallocFixed": {
      "Name": "preallocFixed",
      "File": "tsdb/fileutil/preallocate_other.go",
      "Line": 25,
      "Receiver": ""
    },
    "prepareTestEncodedCounter": {
      "Name": "prepareTestEncodedCounter",
      "File": "scrape/manager_test.go",
      "Line": 849,
      "Receiver": ""
    },
    "preprocessExprHelper": {
      "Name": "preprocessExprHelper",
      "File": "promql/engine.go",
      "Line": 3752,
      "Receiver": ""
    },
    "printBlocks": {
      "Name": "printBlocks",
      "File": "cmd/promtool/tsdb.go",
      "Line": 354,
      "Receiver": ""
    },
    "printV1": {
      "Name": "printV1",
      "File": "documentation/examples/remote_storage/example_write_adapter/server.go",
      "Line": 72,
      "Receiver": ""
    },
    "printV2": {
      "Name": "printV2",
      "File": "documentation/examples/remote_storage/example_write_adapter/server.go",
      "Line": 96,
      "Receiver": ""
    },
    "processClassicHistogramSeries": {
      "Name": "processClassicHistogramSeries",
      "File": "promql/promqltest/test.go",
      "Line": 587,
      "Receiver": ""
    },
    "processExternalLabels": {
      "Name": "processExternalLabels",
      "File": "storage/remote/queue_manager.go",
      "Line": 1046,
      "Receiver": ""
    },
    "processTestFileLines": {
      "Name": "processTestFileLines",
      "File": "promql/promqltest/test_migrate.go",
      "Line": 115,
      "Receiver": ""
    },
    "promTextToProto": {
      "Name": "promTextToProto",
      "File": "scrape/scrape_test.go",
      "Line": 1437,
      "Receiver": ""
    },
    "prometheusCommandWithLogging": {
      "Name": "prometheusCommandWithLogging",
      "File": "cmd/prometheus/reload_test.go",
      "Line": 201,
      "Receiver": ""
    },
    "promlexer.Error": {
      "Name": "promlexer.Error",
      "File": "model/textparse/promparse.go",
      "Line": 144,
      "Receiver": "promlexer"
    },
    "promlexer.Lex": {
      "Name": "promlexer.Lex",
      "File": "model/textparse/promlex.l.go",
      "Line": 39,
      "Receiver": "promlexer"
    },
    "promlexer.buf": {
      "Name": "promlexer.buf",
      "File": "model/textparse/promparse.go",
      "Line": 121,
      "Receiver": "promlexer"
    },
    "promlexer.consumeComment": {
      "Name": "promlexer.consumeComment",
      "File": "model/textparse/promlex.l.go",
      "Line": 646,
      "Receiver": "promlexer"
    },
    "promlexer.cur": {
      "Name": "promlexer.cur",
      "File": "model/textparse/promparse.go",
      "Line": 125,
      "Receiver": "promlexer"
    },
    "promlexer.next": {
      "Name": "promlexer.next",
      "File": "model/textparse/promparse.go",
      "Line": 130,
      "Receiver": "promlexer"
    },
    "promqlPrinter.printLabelValues": {
      "Name": "promqlPrinter.printLabelValues",
      "File": "cmd/promtool/main.go",
      "Line": 1203,
      "Receiver": "promqlPrinter"
    },
    "promqlPrinter.printSeries": {
      "Name": "promqlPrinter.printSeries",
      "File": "cmd/promtool/main.go",
      "Line": 1197,
      "Receiver": "promqlPrinter"
    },
    "promqlPrinter.printValue": {
      "Name": "promqlPrinter.printValue",
      "File": "cmd/promtool/main.go",
      "Line": 1193,
      "Receiver": "promqlPrinter"
    },
    "protoMarshalDelimited": {
      "Name": "protoMarshalDelimited",
      "File": "scrape/helpers_test.go",
      "Line": 260,
      "Receiver": ""
    },
    "protoToSamples": {
      "Name": "protoToSamples",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/main.go",
      "Line": 283,
      "Receiver": ""
    },
    "protocolptr": {
      "Name": "protocolptr",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 43,
      "Receiver": ""
    },
    "puppetdbMetrics.Register": {
      "Name": "puppetdbMetrics.Register",
      "File": "discovery/puppetdb/metrics.go",
      "Line": 27,
      "Receiver": "puppetdbMetrics"
    },
    "puppetdbMetrics.Unregister": {
      "Name": "puppetdbMetrics.Unregister",
      "File": "discovery/puppetdb/metrics.go",
      "Line": 32,
      "Receiver": "puppetdbMetrics"
    },
    "putCustomBound": {
      "Name": "putCustomBound",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 200,
      "Receiver": ""
    },
    "putFPointSlice": {
      "Name": "putFPointSlice",
      "File": "promql/engine.go",
      "Line": 2317,
      "Receiver": ""
    },
    "putHPointSlice": {
      "Name": "putHPointSlice",
      "File": "promql/engine.go",
      "Line": 2337,
      "Receiver": ""
    },
    "putHistogramChunkLayoutCustomBounds": {
      "Name": "putHistogramChunkLayoutCustomBounds",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 105,
      "Receiver": ""
    },
    "putHistogramChunkLayoutSpans": {
      "Name": "putHistogramChunkLayoutSpans",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 72,
      "Receiver": ""
    },
    "putMatrixSelectorHPointSlice": {
      "Name": "putMatrixSelectorHPointSlice",
      "File": "promql/engine.go",
      "Line": 2351,
      "Receiver": ""
    },
    "putVarbitInt": {
      "Name": "putVarbitInt",
      "File": "tsdb/chunkenc/varbit.go",
      "Line": 33,
      "Receiver": ""
    },
    "putVarbitUint": {
      "Name": "putVarbitUint",
      "File": "tsdb/chunkenc/varbit.go",
      "Line": 138,
      "Receiver": ""
    },
    "putZeroThreshold": {
      "Name": "putZeroThreshold",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 143,
      "Receiver": ""
    },
    "quantile": {
      "Name": "quantile",
      "File": "promql/quantile.go",
      "Line": 664,
      "Receiver": ""
    },
    "querier.Close": {
      "Name": "querier.Close",
      "File": "storage/remote/read.go",
      "Line": 225,
      "Receiver": "querier"
    },
    "querier.LabelNames": {
      "Name": "querier.LabelNames",
      "File": "storage/remote/read.go",
      "Line": 219,
      "Receiver": "querier"
    },
    "querier.LabelValues": {
      "Name": "querier.LabelValues",
      "File": "storage/remote/read.go",
      "Line": 213,
      "Receiver": "querier"
    },
    "querier.Select": {
      "Name": "querier.Select",
      "File": "storage/remote/read.go",
      "Line": 141,
      "Receiver": "querier"
    },
    "querier.addExternalLabels": {
      "Name": "querier.addExternalLabels",
      "File": "storage/remote/read.go",
      "Line": 181,
      "Receiver": "querier"
    },
    "querierAdapter.Select": {
      "Name": "querierAdapter.Select",
      "File": "storage/generic.go",
      "Line": 91,
      "Receiver": "querierAdapter"
    },
    "query": {
      "Name": "query",
      "File": "tsdb/db_test.go",
      "Line": 104,
      "Receiver": ""
    },
    "query.Cancel": {
      "Name": "query.Cancel",
      "File": "promql/engine.go",
      "Line": 224,
      "Receiver": "query"
    },
    "query.Close": {
      "Name": "query.Close",
      "File": "promql/engine.go",
      "Line": 231,
      "Receiver": "query"
    },
    "query.Exec": {
      "Name": "query.Exec",
      "File": "promql/engine.go",
      "Line": 239,
      "Receiver": "query"
    },
    "query.Statement": {
      "Name": "query.Statement",
      "File": "promql/engine.go",
      "Line": 206,
      "Receiver": "query"
    },
    "query.Stats": {
      "Name": "query.Stats",
      "File": "promql/engine.go",
      "Line": 216,
      "Receiver": "query"
    },
    "query.String": {
      "Name": "query.String",
      "File": "promql/engine.go",
      "Line": 211,
      "Receiver": "query"
    },
    "queryAllSeries": {
      "Name": "queryAllSeries",
      "File": "cmd/promtool/backfill_test.go",
      "Line": 48,
      "Receiver": ""
    },
    "queryAndExpandChunks": {
      "Name": "queryAndExpandChunks",
      "File": "tsdb/db_test.go",
      "Line": 134,
      "Receiver": ""
    },
    "queryChunks": {
      "Name": "queryChunks",
      "File": "tsdb/db_test.go",
      "Line": 152,
      "Receiver": ""
    },
    "queryLogTest.String": {
      "Name": "queryLogTest.String",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 226,
      "Receiver": "queryLogTest"
    },
    "queryLogTest.configuration": {
      "Name": "queryLogTest.configuration",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 260,
      "Receiver": "queryLogTest"
    },
    "queryLogTest.exactQueryCount": {
      "Name": "queryLogTest.exactQueryCount",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 271,
      "Receiver": "queryLogTest"
    },
    "queryLogTest.params": {
      "Name": "queryLogTest.params",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 247,
      "Receiver": "queryLogTest"
    },
    "queryLogTest.query": {
      "Name": "queryLogTest.query",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 99,
      "Receiver": "queryLogTest"
    },
    "queryLogTest.queryString": {
      "Name": "queryLogTest.queryString",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 177,
      "Receiver": "queryLogTest"
    },
    "queryLogTest.run": {
      "Name": "queryLogTest.run",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 276,
      "Receiver": "queryLogTest"
    },
    "queryLogTest.setQueryLog": {
      "Name": "queryLogTest.setQueryLog",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 85,
      "Receiver": "queryLogTest"
    },
    "queryLogTest.skip": {
      "Name": "queryLogTest.skip",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 58,
      "Receiver": "queryLogTest"
    },
    "queryLogTest.validateLastQuery": {
      "Name": "queryLogTest.validateLastQuery",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 192,
      "Receiver": "queryLogTest"
    },
    "queryLogTest.waitForPrometheus": {
      "Name": "queryLogTest.waitForPrometheus",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 71,
      "Receiver": "queryLogTest"
    },
    "queryResultByLabelSorter.Len": {
      "Name": "queryResultByLabelSorter.Len",
      "File": "template/template.go",
      "Line": 71,
      "Receiver": "queryResultByLabelSorter"
    },
    "queryResultByLabelSorter.Less": {
      "Name": "queryResultByLabelSorter.Less",
      "File": "template/template.go",
      "Line": 75,
      "Receiver": "queryResultByLabelSorter"
    },
    "queryResultByLabelSorter.Swap": {
      "Name": "queryResultByLabelSorter.Swap",
      "File": "template/template.go",
      "Line": 79,
      "Receiver": "queryResultByLabelSorter"
    },
    "querySamples": {
      "Name": "querySamples",
      "File": "cmd/promtool/analyze.go",
      "Line": 164,
      "Receiver": ""
    },
    "queryableBlock.Querier": {
      "Name": "queryableBlock.Querier",
      "File": "tsdb/querier_bench_test.go",
      "Line": 337,
      "Receiver": "queryableBlock"
    },
    "queue.Append": {
      "Name": "queue.Append",
      "File": "storage/remote/queue_manager.go",
      "Line": 1391,
      "Receiver": "queue"
    },
    "queue.Batch": {
      "Name": "queue.Batch",
      "File": "storage/remote/queue_manager.go",
      "Line": 1418,
      "Receiver": "queue"
    },
    "queue.Chan": {
      "Name": "queue.Chan",
      "File": "storage/remote/queue_manager.go",
      "Line": 1413,
      "Receiver": "queue"
    },
    "queue.FlushAndShutdown": {
      "Name": "queue.FlushAndShutdown",
      "File": "storage/remote/queue_manager.go",
      "Line": 1442,
      "Receiver": "queue"
    },
    "queue.ReturnForReuse": {
      "Name": "queue.ReturnForReuse",
      "File": "storage/remote/queue_manager.go",
      "Line": 1432,
      "Receiver": "queue"
    },
    "queue.newBatch": {
      "Name": "queue.newBatch",
      "File": "storage/remote/queue_manager.go",
      "Line": 1474,
      "Receiver": "queue"
    },
    "queue.tryEnqueueingBatch": {
      "Name": "queue.tryEnqueueingBatch",
      "File": "storage/remote/queue_manager.go",
      "Line": 1454,
      "Receiver": "queue"
    },
    "queueManagerMetrics.register": {
      "Name": "queueManagerMetrics.register",
      "File": "storage/remote/queue_manager.go",
      "Line": 320,
      "Receiver": "queueManagerMetrics"
    },
    "queueManagerMetrics.unregister": {
      "Name": "queueManagerMetrics.unregister",
      "File": "storage/remote/queue_manager.go",
      "Line": 356,
      "Receiver": "queueManagerMetrics"
    },
    "raise": {
      "Name": "raise",
      "File": "promql/promqltest/test.go",
      "Line": 222,
      "Receiver": ""
    },
    "randString": {
      "Name": "randString",
      "File": "model/labels/regexp_test.go",
      "Line": 676,
      "Receiver": ""
    },
    "randStrings": {
      "Name": "randStrings",
      "File": "model/labels/regexp_test.go",
      "Line": 684,
      "Receiver": ""
    },
    "randStringsWithSuffix": {
      "Name": "randStringsWithSuffix",
      "File": "model/labels/regexp_test.go",
      "Line": 692,
      "Receiver": ""
    },
    "randomAppsURL": {
      "Name": "randomAppsURL",
      "File": "discovery/marathon/marathon.go",
      "Line": 376,
      "Receiver": ""
    },
    "randomChunk": {
      "Name": "randomChunk",
      "File": "tsdb/chunks/head_chunks_test.go",
      "Line": 556,
      "Receiver": ""
    },
    "rangeForTimestamp": {
      "Name": "rangeForTimestamp",
      "File": "tsdb/db.go",
      "Line": 2208,
      "Receiver": ""
    },
    "rangeQueryCases": {
      "Name": "rangeQueryCases",
      "File": "promql/bench_test.go",
      "Line": 102,
      "Receiver": ""
    },
    "readBogusMetaFile": {
      "Name": "readBogusMetaFile",
      "File": "tsdb/repair.go",
      "Line": 124,
      "Receiver": ""
    },
    "readConfigs": {
      "Name": "readConfigs",
      "File": "discovery/registry.go",
      "Line": 162,
      "Receiver": ""
    },
    "readCustomBound": {
      "Name": "readCustomBound",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 213,
      "Receiver": ""
    },
    "readDirs": {
      "Name": "readDirs",
      "File": "tsdb/fileutil/fileutil.go",
      "Line": 76,
      "Receiver": ""
    },
    "readHandler.ServeHTTP": {
      "Name": "readHandler.ServeHTTP",
      "File": "storage/remote/read_handler.go",
      "Line": 71,
      "Receiver": "readHandler"
    },
    "readHandler.remoteReadSamples": {
      "Name": "readHandler.remoteReadSamples",
      "File": "storage/remote/read_handler.go",
      "Line": 116,
      "Receiver": "readHandler"
    },
    "readHandler.remoteReadStreamedXORChunks": {
      "Name": "readHandler.remoteReadStreamedXORChunks",
      "File": "storage/remote/read_handler.go",
      "Line": 188,
      "Receiver": "readHandler"
    },
    "readHistogramChunkLayout": {
      "Name": "readHistogramChunkLayout",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 35,
      "Receiver": ""
    },
    "readHistogramChunkLayoutCustomBounds": {
      "Name": "readHistogramChunkLayoutCustomBounds",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 112,
      "Receiver": ""
    },
    "readHistogramChunkLayoutSpans": {
      "Name": "readHistogramChunkLayoutSpans",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 80,
      "Receiver": ""
    },
    "readMetaFile": {
      "Name": "readMetaFile",
      "File": "tsdb/block.go",
      "Line": 248,
      "Receiver": ""
    },
    "readPrometheusLabels": {
      "Name": "readPrometheusLabels",
      "File": "cmd/promtool/tsdb.go",
      "Line": 309,
      "Receiver": ""
    },
    "readQueryLog": {
      "Name": "readQueryLog",
      "File": "cmd/prometheus/query_log_test.go",
      "Line": 434,
      "Receiver": ""
    },
    "readResultWithTimeout": {
      "Name": "readResultWithTimeout",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 158,
      "Receiver": ""
    },
    "readSeriesSet": {
      "Name": "readSeriesSet",
      "File": "rules/manager_test.go",
      "Line": 610,
      "Receiver": ""
    },
    "readTestFile": {
      "Name": "readTestFile",
      "File": "promql/promqltest/test_migrate_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "readTestWAL": {
      "Name": "readTestWAL",
      "File": "tsdb/head_test.go",
      "Line": 177,
      "Receiver": ""
    },
    "readTestdataFile": {
      "Name": "readTestdataFile",
      "File": "model/textparse/benchmark_test.go",
      "Line": 254,
      "Receiver": ""
    },
    "readTextParseTestMetrics": {
      "Name": "readTextParseTestMetrics",
      "File": "scrape/scrape_test.go",
      "Line": 1416,
      "Receiver": ""
    },
    "readVarbitInt": {
      "Name": "readVarbitInt",
      "File": "tsdb/chunkenc/varbit.go",
      "Line": 65,
      "Receiver": ""
    },
    "readVarbitUint": {
      "Name": "readVarbitUint",
      "File": "tsdb/chunkenc/varbit.go",
      "Line": 170,
      "Receiver": ""
    },
    "readWALSamples": {
      "Name": "readWALSamples",
      "File": "tsdb/agent/db_test.go",
      "Line": 1325,
      "Receiver": ""
    },
    "readZeroThreshold": {
      "Name": "readZeroThreshold",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 158,
      "Receiver": ""
    },
    "readable": {
      "Name": "readable",
      "File": "promql/parser/parse_test.go",
      "Line": 4849,
      "Receiver": ""
    },
    "readyScrapeManager.Get": {
      "Name": "readyScrapeManager.Get",
      "File": "cmd/prometheus/main.go",
      "Line": 1829,
      "Receiver": "readyScrapeManager"
    },
    "readyScrapeManager.Set": {
      "Name": "readyScrapeManager.Set",
      "File": "cmd/prometheus/main.go",
      "Line": 1821,
      "Receiver": "readyScrapeManager"
    },
    "readyStorage.Appender": {
      "Name": "readyStorage.Appender",
      "File": "cmd/prometheus/main.go",
      "Line": 1695,
      "Receiver": "readyStorage"
    },
    "readyStorage.ApplyConfig": {
      "Name": "readyStorage.ApplyConfig",
      "File": "cmd/prometheus/main.go",
      "Line": 1610,
      "Receiver": "readyStorage"
    },
    "readyStorage.ChunkQuerier": {
      "Name": "readyStorage.ChunkQuerier",
      "File": "cmd/prometheus/main.go",
      "Line": 1673,
      "Receiver": "readyStorage"
    },
    "readyStorage.CleanTombstones": {
      "Name": "readyStorage.CleanTombstones",
      "File": "cmd/prometheus/main.go",
      "Line": 1744,
      "Receiver": "readyStorage"
    },
    "readyStorage.Close": {
      "Name": "readyStorage.Close",
      "File": "cmd/prometheus/main.go",
      "Line": 1736,
      "Receiver": "readyStorage"
    },
    "readyStorage.Delete": {
      "Name": "readyStorage.Delete",
      "File": "cmd/prometheus/main.go",
      "Line": 1759,
      "Receiver": "readyStorage"
    },
    "readyStorage.ExemplarQuerier": {
      "Name": "readyStorage.ExemplarQuerier",
      "File": "cmd/prometheus/main.go",
      "Line": 1680,
      "Receiver": "readyStorage"
    },
    "readyStorage.Querier": {
      "Name": "readyStorage.Querier",
      "File": "cmd/prometheus/main.go",
      "Line": 1665,
      "Receiver": "readyStorage"
    },
    "readyStorage.Set": {
      "Name": "readyStorage.Set",
      "File": "cmd/prometheus/main.go",
      "Line": 1619,
      "Receiver": "readyStorage"
    },
    "readyStorage.Snapshot": {
      "Name": "readyStorage.Snapshot",
      "File": "cmd/prometheus/main.go",
      "Line": 1774,
      "Receiver": "readyStorage"
    },
    "readyStorage.StartTime": {
      "Name": "readyStorage.StartTime",
      "File": "cmd/prometheus/main.go",
      "Line": 1642,
      "Receiver": "readyStorage"
    },
    "readyStorage.Stats": {
      "Name": "readyStorage.Stats",
      "File": "cmd/prometheus/main.go",
      "Line": 1789,
      "Receiver": "readyStorage"
    },
    "readyStorage.WALReplayStatus": {
      "Name": "readyStorage.WALReplayStatus",
      "File": "cmd/prometheus/main.go",
      "Line": 1804,
      "Receiver": "readyStorage"
    },
    "readyStorage.get": {
      "Name": "readyStorage.get",
      "File": "cmd/prometheus/main.go",
      "Line": 1627,
      "Receiver": "readyStorage"
    },
    "readyStorage.getStats": {
      "Name": "readyStorage.getStats",
      "File": "cmd/prometheus/main.go",
      "Line": 1634,
      "Receiver": "readyStorage"
    },
    "realByteSlice.Len": {
      "Name": "realByteSlice.Len",
      "File": "tsdb/index/index.go",
      "Line": 1130,
      "Receiver": "realByteSlice"
    },
    "realByteSlice.Range": {
      "Name": "realByteSlice.Range",
      "File": "tsdb/index/index.go",
      "Line": 1134,
      "Receiver": "realByteSlice"
    },
    "realByteSlice.Sub": {
      "Name": "realByteSlice.Sub",
      "File": "tsdb/index/index.go",
      "Line": 1138,
      "Receiver": "realByteSlice"
    },
    "recType.String": {
      "Name": "recType.String",
      "File": "tsdb/wlog/wlog.go",
      "Line": 634,
      "Receiver": "recType"
    },
    "recTypeFromHeader": {
      "Name": "recTypeFromHeader",
      "File": "tsdb/wlog/wlog.go",
      "Line": 630,
      "Receiver": ""
    },
    "reduceResolution": {
      "Name": "reduceResolution",
      "File": "model/histogram/generic.go",
      "Line": 684,
      "Receiver": ""
    },
    "registerConfig": {
      "Name": "registerConfig",
      "File": "discovery/registry.go",
      "Line": 61,
      "Receiver": ""
    },
    "registerFederationMetrics": {
      "Name": "registerFederationMetrics",
      "File": "web/federate.go",
      "Line": 52,
      "Receiver": ""
    },
    "regularBucketIterator.Next": {
      "Name": "regularBucketIterator.Next",
      "File": "model/histogram/histogram.go",
      "Line": 493,
      "Receiver": "regularBucketIterator"
    },
    "relabel": {
      "Name": "relabel",
      "File": "model/relabel/relabel.go",
      "Line": 280,
      "Receiver": ""
    },
    "relabelAlerts": {
      "Name": "relabelAlerts",
      "File": "notifier/alert.go",
      "Line": 71,
      "Receiver": ""
    },
    "reloadAndValidate": {
      "Name": "reloadAndValidate",
      "File": "rules/manager_test.go",
      "Line": 895,
      "Receiver": ""
    },
    "reloadConfig": {
      "Name": "reloadConfig",
      "File": "cmd/prometheus/main.go",
      "Line": 1494,
      "Receiver": ""
    },
    "reloadPrometheusConfig": {
      "Name": "reloadPrometheusConfig",
      "File": "cmd/prometheus/main_test.go",
      "Line": 655,
      "Receiver": ""
    },
    "removeBestEffortTmpDirs": {
      "Name": "removeBestEffortTmpDirs",
      "File": "tsdb/db.go",
      "Line": 1041,
      "Receiver": ""
    },
    "removedPostings.At": {
      "Name": "removedPostings.At",
      "File": "tsdb/index/postings.go",
      "Line": 760,
      "Receiver": "removedPostings"
    },
    "removedPostings.Err": {
      "Name": "removedPostings.Err",
      "File": "tsdb/index/postings.go",
      "Line": 808,
      "Receiver": "removedPostings"
    },
    "removedPostings.Next": {
      "Name": "removedPostings.Next",
      "File": "tsdb/index/postings.go",
      "Line": 764,
      "Receiver": "removedPostings"
    },
    "removedPostings.Seek": {
      "Name": "removedPostings.Seek",
      "File": "tsdb/index/postings.go",
      "Line": 796,
      "Receiver": "removedPostings"
    },
    "repairBadIndexVersion": {
      "Name": "repairBadIndexVersion",
      "File": "tsdb/repair.go",
      "Line": 30,
      "Receiver": ""
    },
    "repairLastChunkFile": {
      "Name": "repairLastChunkFile",
      "File": "tsdb/chunks/head_chunks.go",
      "Line": 414,
      "Receiver": ""
    },
    "replaceYAMLTypeError": {
      "Name": "replaceYAMLTypeError",
      "File": "discovery/registry.go",
      "Line": 251,
      "Receiver": ""
    },
    "requireContainsSample": {
      "Name": "requireContainsSample",
      "File": "storage/remote/write_test.go",
      "Line": 508,
      "Receiver": ""
    },
    "requireEntries": {
      "Name": "requireEntries",
      "File": "model/textparse/interface_test.go",
      "Line": 210,
      "Receiver": ""
    },
    "requireEqual": {
      "Name": "requireEqual",
      "File": "storage/remote/write_handler_test.go",
      "Line": 847,
      "Receiver": ""
    },
    "requireEqualOOOSamples": {
      "Name": "requireEqualOOOSamples",
      "File": "tsdb/testutil.go",
      "Line": 148,
      "Receiver": ""
    },
    "requireEqualSamples": {
      "Name": "requireEqualSamples",
      "File": "tsdb/testutil.go",
      "Line": 163,
      "Receiver": ""
    },
    "requireEqualSeries": {
      "Name": "requireEqualSeries",
      "File": "tsdb/testutil.go",
      "Line": 132,
      "Receiver": ""
    },
    "requireEqualSlice": {
      "Name": "requireEqualSlice",
      "File": "storage/merge_test.go",
      "Line": 1683,
      "Receiver": ""
    },
    "requireTargetGroups": {
      "Name": "requireTargetGroups",
      "File": "discovery/kubernetes/kubernetes_test.go",
      "Line": 190,
      "Receiver": ""
    },
    "requireTargets": {
      "Name": "requireTargets",
      "File": "scrape/manager_test.go",
      "Line": 1124,
      "Receiver": ""
    },
    "resetValAndLset": {
      "Name": "resetValAndLset",
      "File": "model/textparse/openmetricsparse_test.go",
      "Line": 1208,
      "Receiver": ""
    },
    "resize": {
      "Name": "resize",
      "File": "tsdb/chunkenc/histogram.go",
      "Line": 1323,
      "Receiver": ""
    },
    "resolveAndGlobFilepaths": {
      "Name": "resolveAndGlobFilepaths",
      "File": "cmd/promtool/unittest.go",
      "Line": 168,
      "Receiver": ""
    },
    "resolveConflictingExposedLabels": {
      "Name": "resolveConflictingExposedLabels",
      "File": "scrape/scrape.go",
      "Line": 696,
      "Receiver": ""
    },
    "resultMetric": {
      "Name": "resultMetric",
      "File": "promql/engine.go",
      "Line": 2786,
      "Receiver": ""
    },
    "retry": {
      "Name": "retry",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 44,
      "Receiver": ""
    },
    "retryAfterDuration": {
      "Name": "retryAfterDuration",
      "File": "storage/remote/client.go",
      "Line": 316,
      "Receiver": ""
    },
    "retryOnError": {
      "Name": "retryOnError",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 622,
      "Receiver": ""
    },
    "returnAPIError": {
      "Name": "returnAPIError",
      "File": "web/api/v1/api.go",
      "Line": 680,
      "Receiver": ""
    },
    "reusableCache": {
      "Name": "reusableCache",
      "File": "scrape/scrape.go",
      "Line": 2222,
      "Receiver": ""
    },
    "reuseOrGetFPointSlices": {
      "Name": "reuseOrGetFPointSlices",
      "File": "promql/engine.go",
      "Line": 2200,
      "Receiver": ""
    },
    "reuseOrGetHPointSlices": {
      "Name": "reuseOrGetHPointSlices",
      "File": "promql/engine.go",
      "Line": 2188,
      "Receiver": ""
    },
    "reverseFloatBucketIterator.Next": {
      "Name": "reverseFloatBucketIterator.Next",
      "File": "model/histogram/float_histogram.go",
      "Line": 1116,
      "Receiver": "reverseFloatBucketIterator"
    },
    "rmChunkRefs": {
      "Name": "rmChunkRefs",
      "File": "tsdb/querier_test.go",
      "Line": 1808,
      "Receiver": ""
    },
    "robotDiscovery.refresh": {
      "Name": "robotDiscovery.refresh",
      "File": "discovery/hetzner/robot.go",
      "Line": 72,
      "Receiver": "robotDiscovery"
    },
    "robotSDTestSuite.SetupTest": {
      "Name": "robotSDTestSuite.SetupTest",
      "File": "discovery/hetzner/robot_test.go",
      "Line": 31,
      "Receiver": "robotSDTestSuite"
    },
    "role.UnmarshalYAML": {
      "Name": "role.UnmarshalYAML",
      "File": "discovery/scaleway/scaleway.go",
      "Line": 58,
      "Receiver": "role"
    },
    "roundTrip.RoundTrip": {
      "Name": "roundTrip.RoundTrip",
      "File": "util/testutil/roundtrip.go",
      "Line": 25,
      "Receiver": "roundTrip"
    },
    "roundTripCheckRequest.RoundTrip": {
      "Name": "roundTripCheckRequest.RoundTrip",
      "File": "util/testutil/roundtrip.go",
      "Line": 34,
      "Receiver": "roundTripCheckRequest"
    },
    "ruleDependencyController.AnalyseRules": {
      "Name": "ruleDependencyController.AnalyseRules",
      "File": "rules/manager.go",
      "Line": 468,
      "Receiver": "ruleDependencyController"
    },
    "ruleImporter.importAll": {
      "Name": "ruleImporter.importAll",
      "File": "cmd/promtool/rules.go",
      "Line": 81,
      "Receiver": "ruleImporter"
    },
    "ruleImporter.importRule": {
      "Name": "ruleImporter.importRule",
      "File": "cmd/promtool/rules.go",
      "Line": 96,
      "Receiver": "ruleImporter"
    },
    "ruleImporter.loadGroups": {
      "Name": "ruleImporter.loadGroups",
      "File": "cmd/promtool/rules.go",
      "Line": 71,
      "Receiver": "ruleImporter"
    },
    "ruleMetric": {
      "Name": "ruleMetric",
      "File": "cmd/promtool/main.go",
      "Line": 1004,
      "Receiver": ""
    },
    "rulePaths": {
      "Name": "rulePaths",
      "File": "discovery/kubernetes/ingress.go",
      "Line": 177,
      "Receiver": ""
    },
    "ruleUnitTest": {
      "Name": "ruleUnitTest",
      "File": "cmd/promtool/unittest.go",
      "Line": 85,
      "Receiver": ""
    },
    "rulesAlertsToAPIAlerts": {
      "Name": "rulesAlertsToAPIAlerts",
      "File": "web/api/v1/api.go",
      "Line": 1332,
      "Receiver": ""
    },
    "rulesLintConfig.lintDuplicateRules": {
      "Name": "rulesLintConfig.lintDuplicateRules",
      "File": "cmd/promtool/main.go",
      "Line": 497,
      "Receiver": "rulesLintConfig"
    },
    "rulesRetrieverMock.AlertingRules": {
      "Name": "rulesRetrieverMock.AlertingRules",
      "File": "web/api/v1/api_test.go",
      "Line": 351,
      "Receiver": "rulesRetrieverMock"
    },
    "rulesRetrieverMock.CreateAlertingRules": {
      "Name": "rulesRetrieverMock.CreateAlertingRules",
      "File": "web/api/v1/api_test.go",
      "Line": 221,
      "Receiver": "rulesRetrieverMock"
    },
    "rulesRetrieverMock.CreateRuleGroups": {
      "Name": "rulesRetrieverMock.CreateRuleGroups",
      "File": "web/api/v1/api_test.go",
      "Line": 298,
      "Receiver": "rulesRetrieverMock"
    },
    "rulesRetrieverMock.RuleGroups": {
      "Name": "rulesRetrieverMock.RuleGroups",
      "File": "web/api/v1/api_test.go",
      "Line": 355,
      "Receiver": "rulesRetrieverMock"
    },
    "rulesRetrieverMock.toFactory": {
      "Name": "rulesRetrieverMock.toFactory",
      "File": "web/api/v1/api_test.go",
      "Line": 359,
      "Receiver": "rulesRetrieverMock"
    },
    "runManagers": {
      "Name": "runManagers",
      "File": "scrape/manager_test.go",
      "Line": 1080,
      "Receiver": ""
    },
    "runScrapeLoopTest": {
      "Name": "runScrapeLoopTest",
      "File": "scrape/scrape_test.go",
      "Line": 123,
      "Receiver": ""
    },
    "runTest": {
      "Name": "runTest",
      "File": "promql/promqltest/test.go",
      "Line": 155,
      "Receiver": ""
    },
    "runTestSteps": {
      "Name": "runTestSteps",
      "File": "cmd/prometheus/reload_test.go",
      "Line": 108,
      "Receiver": ""
    },
    "rwExporter.Capabilities": {
      "Name": "rwExporter.Capabilities",
      "File": "storage/remote/write_handler.go",
      "Line": 623,
      "Receiver": "rwExporter"
    },
    "rwExporter.ConsumeMetrics": {
      "Name": "rwExporter.ConsumeMetrics",
      "File": "storage/remote/write_handler.go",
      "Line": 593,
      "Receiver": "rwExporter"
    },
    "rwProtoMsgFlagParser.IsCumulative": {
      "Name": "rwProtoMsgFlagParser.IsCumulative",
      "File": "cmd/prometheus/main.go",
      "Line": 1928,
      "Receiver": "rwProtoMsgFlagParser"
    },
    "rwProtoMsgFlagParser.Set": {
      "Name": "rwProtoMsgFlagParser.Set",
      "File": "cmd/prometheus/main.go",
      "Line": 1940,
      "Receiver": "rwProtoMsgFlagParser"
    },
    "rwProtoMsgFlagParser.String": {
      "Name": "rwProtoMsgFlagParser.String",
      "File": "cmd/prometheus/main.go",
      "Line": 1932,
      "Receiver": "rwProtoMsgFlagParser"
    },
    "rwProtoMsgFlagValue": {
      "Name": "rwProtoMsgFlagValue",
      "File": "cmd/prometheus/main.go",
      "Line": 1923,
      "Receiver": ""
    },
    "safeHeadChunk.Iterator": {
      "Name": "safeHeadChunk.Iterator",
      "File": "tsdb/head_read.go",
      "Line": 513,
      "Receiver": "safeHeadChunk"
    },
    "safePromQLNoStepSubqueryInterval.Get": {
      "Name": "safePromQLNoStepSubqueryInterval.Get",
      "File": "cmd/prometheus/main.go",
      "Line": 1485,
      "Receiver": "safePromQLNoStepSubqueryInterval"
    },
    "safePromQLNoStepSubqueryInterval.Set": {
      "Name": "safePromQLNoStepSubqueryInterval.Set",
      "File": "cmd/prometheus/main.go",
      "Line": 1481,
      "Receiver": "safePromQLNoStepSubqueryInterval"
    },
    "sample.Copy": {
      "Name": "sample.Copy",
      "File": "tsdb/head.go",
      "Line": 2125,
      "Receiver": "sample"
    },
    "sample.F": {
      "Name": "sample.F",
      "File": "tsdb/head.go",
      "Line": 2110,
      "Receiver": "sample"
    },
    "sample.FH": {
      "Name": "sample.FH",
      "File": "tsdb/head.go",
      "Line": 2112,
      "Receiver": "sample"
    },
    "sample.H": {
      "Name": "sample.H",
      "File": "tsdb/head.go",
      "Line": 2111,
      "Receiver": "sample"
    },
    "sample.T": {
      "Name": "sample.T",
      "File": "tsdb/head.go",
      "Line": 2109,
      "Receiver": "sample"
    },
    "sample.Type": {
      "Name": "sample.Type",
      "File": "tsdb/head.go",
      "Line": 2114,
      "Receiver": "sample"
    },
    "sampleAndChunkQueryableClient.ChunkQuerier": {
      "Name": "sampleAndChunkQueryableClient.ChunkQuerier",
      "File": "storage/remote/read.go",
      "Line": 78,
      "Receiver": "sampleAndChunkQueryableClient"
    },
    "sampleAndChunkQueryableClient.Querier": {
      "Name": "sampleAndChunkQueryableClient.Querier",
      "File": "storage/remote/read.go",
      "Line": 52,
      "Receiver": "sampleAndChunkQueryableClient"
    },
    "sampleAndChunkQueryableClient.preferLocalStorage": {
      "Name": "sampleAndChunkQueryableClient.preferLocalStorage",
      "File": "storage/remote/read.go",
      "Line": 108,
      "Receiver": "sampleAndChunkQueryableClient"
    },
    "sampleCount": {
      "Name": "sampleCount",
      "File": "storage/remote/write_test.go",
      "Line": 925,
      "Receiver": ""
    },
    "sampleRing.add": {
      "Name": "sampleRing.add",
      "File": "storage/buffer.go",
      "Line": 438,
      "Receiver": "sampleRing"
    },
    "sampleRing.addF": {
      "Name": "sampleRing.addF",
      "File": "storage/buffer.go",
      "Line": 500,
      "Receiver": "sampleRing"
    },
    "sampleRing.addFH": {
      "Name": "sampleRing.addFH",
      "File": "storage/buffer.go",
      "Line": 534,
      "Receiver": "sampleRing"
    },
    "sampleRing.addH": {
      "Name": "sampleRing.addH",
      "File": "storage/buffer.go",
      "Line": 517,
      "Receiver": "sampleRing"
    },
    "sampleRing.at": {
      "Name": "sampleRing.at",
      "File": "storage/buffer.go",
      "Line": 413,
      "Receiver": "sampleRing"
    },
    "sampleRing.atF": {
      "Name": "sampleRing.atF",
      "File": "storage/buffer.go",
      "Line": 418,
      "Receiver": "sampleRing"
    },
    "sampleRing.atFH": {
      "Name": "sampleRing.atFH",
      "File": "storage/buffer.go",
      "Line": 428,
      "Receiver": "sampleRing"
    },
    "sampleRing.atH": {
      "Name": "sampleRing.atH",
      "File": "storage/buffer.go",
      "Line": 423,
      "Receiver": "sampleRing"
    },
    "sampleRing.iterator": {
      "Name": "sampleRing.iterator",
      "File": "storage/buffer.go",
      "Line": 322,
      "Receiver": "sampleRing"
    },
    "sampleRing.nthLast": {
      "Name": "sampleRing.nthLast",
      "File": "storage/buffer.go",
      "Line": 756,
      "Receiver": "sampleRing"
    },
    "sampleRing.reduceDelta": {
      "Name": "sampleRing.reduceDelta",
      "File": "storage/buffer.go",
      "Line": 719,
      "Receiver": "sampleRing"
    },
    "sampleRing.reset": {
      "Name": "sampleRing.reset",
      "File": "storage/buffer.go",
      "Line": 308,
      "Receiver": "sampleRing"
    },
    "sampleRing.samples": {
      "Name": "sampleRing.samples",
      "File": "storage/buffer.go",
      "Line": 773,
      "Receiver": "sampleRing"
    },
    "sampledResponseHTTPHandler": {
      "Name": "sampledResponseHTTPHandler",
      "File": "storage/remote/client_test.go",
      "Line": 425,
      "Receiver": ""
    },
    "samples.Get": {
      "Name": "samples.Get",
      "File": "storage/series.go",
      "Line": 102,
      "Receiver": "samples"
    },
    "samples.Len": {
      "Name": "samples.Len",
      "File": "storage/series.go",
      "Line": 103,
      "Receiver": "samples"
    },
    "samplesForRange": {
      "Name": "samplesForRange",
      "File": "tsdb/compact_test.go",
      "Line": 477,
      "Receiver": ""
    },
    "samplesIteratorHeap.Len": {
      "Name": "samplesIteratorHeap.Len",
      "File": "storage/merge.go",
      "Line": 694,
      "Receiver": "samplesIteratorHeap"
    },
    "samplesIteratorHeap.Less": {
      "Name": "samplesIteratorHeap.Less",
      "File": "storage/merge.go",
      "Line": 697,
      "Receiver": "samplesIteratorHeap"
    },
    "samplesIteratorHeap.Pop": {
      "Name": "samplesIteratorHeap.Pop",
      "File": "storage/merge.go",
      "Line": 705,
      "Receiver": "samplesIteratorHeap"
    },
    "samplesIteratorHeap.Push": {
      "Name": "samplesIteratorHeap.Push",
      "File": "storage/merge.go",
      "Line": 701,
      "Receiver": "samplesIteratorHeap"
    },
    "samplesIteratorHeap.Swap": {
      "Name": "samplesIteratorHeap.Swap",
      "File": "storage/merge.go",
      "Line": 695,
      "Receiver": "samplesIteratorHeap"
    },
    "sanitizeAttributes": {
      "Name": "sanitizeAttributes",
      "File": "config/config.go",
      "Line": 1639,
      "Receiver": ""
    },
    "sanitizeList": {
      "Name": "sanitizeList",
      "File": "web/api/v1/translate_ast.go",
      "Line": 132,
      "Receiver": ""
    },
    "sanitizeSplitHostPort": {
      "Name": "sanitizeSplitHostPort",
      "File": "web/api/v1/api.go",
      "Line": 1050,
      "Receiver": ""
    },
    "scalarBinop": {
      "Name": "scalarBinop",
      "File": "promql/engine.go",
      "Line": 2878,
      "Receiver": ""
    },
    "scalewayMetrics.Register": {
      "Name": "scalewayMetrics.Register",
      "File": "discovery/scaleway/metrics.go",
      "Line": 27,
      "Receiver": "scalewayMetrics"
    },
    "scalewayMetrics.Unregister": {
      "Name": "scalewayMetrics.Unregister",
      "File": "discovery/scaleway/metrics.go",
      "Line": 32,
      "Receiver": "scalewayMetrics"
    },
    "scrapeCache.GetMetadata": {
      "Name": "scrapeCache.GetMetadata",
      "File": "scrape/scrape.go",
      "Line": 1160,
      "Receiver": "scrapeCache"
    },
    "scrapeCache.LengthMetadata": {
      "Name": "scrapeCache.LengthMetadata",
      "File": "scrape/scrape.go",
      "Line": 1206,
      "Receiver": "scrapeCache"
    },
    "scrapeCache.ListMetadata": {
      "Name": "scrapeCache.ListMetadata",
      "File": "scrape/scrape.go",
      "Line": 1177,
      "Receiver": "scrapeCache"
    },
    "scrapeCache.SizeMetadata": {
      "Name": "scrapeCache.SizeMetadata",
      "File": "scrape/scrape.go",
      "Line": 1195,
      "Receiver": "scrapeCache"
    },
    "scrapeCache.addDropped": {
      "Name": "scrapeCache.addDropped",
      "File": "scrape/scrape.go",
      "Line": 1077,
      "Receiver": "scrapeCache"
    },
    "scrapeCache.addRef": {
      "Name": "scrapeCache.addRef",
      "File": "scrape/scrape.go",
      "Line": 1070,
      "Receiver": "scrapeCache"
    },
    "scrapeCache.forEachStale": {
      "Name": "scrapeCache.forEachStale",
      "File": "scrape/scrape.go",
      "Line": 1094,
      "Receiver": "scrapeCache"
    },
    "scrapeCache.get": {
      "Name": "scrapeCache.get",
      "File": "scrape/scrape.go",
      "Line": 1060,
      "Receiver": "scrapeCache"
    },
    "scrapeCache.getDropped": {
      "Name": "scrapeCache.getDropped",
      "File": "scrape/scrape.go",
      "Line": 1082,
      "Receiver": "scrapeCache"
    },
    "scrapeCache.iterDone": {
      "Name": "scrapeCache.iterDone",
      "File": "scrape/scrape.go",
      "Line": 1007,
      "Receiver": "scrapeCache"
    },
    "scrapeCache.setHelp": {
      "Name": "scrapeCache.setHelp",
      "File": "scrape/scrape.go",
      "Line": 1125,
      "Receiver": "scrapeCache"
    },
    "scrapeCache.setType": {
      "Name": "scrapeCache.setType",
      "File": "scrape/scrape.go",
      "Line": 1108,
      "Receiver": "scrapeCache"
    },
    "scrapeCache.setUnit": {
      "Name": "scrapeCache.setUnit",
      "File": "scrape/scrape.go",
      "Line": 1142,
      "Receiver": "scrapeCache"
    },
    "scrapeCache.trackStaleness": {
      "Name": "scrapeCache.trackStaleness",
      "File": "scrape/scrape.go",
      "Line": 1090,
      "Receiver": "scrapeCache"
    },
    "scrapeLoop.addReportSample": {
      "Name": "scrapeLoop.addReportSample",
      "File": "scrape/scrape.go",
      "Line": 2170,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.append": {
      "Name": "scrapeLoop.append",
      "File": "scrape/scrape.go",
      "Line": 1611,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.checkAddError": {
      "Name": "scrapeLoop.checkAddError",
      "File": "scrape/scrape.go",
      "Line": 1983,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.disableEndOfRunStalenessMarkers": {
      "Name": "scrapeLoop.disableEndOfRunStalenessMarkers",
      "File": "scrape/scrape.go",
      "Line": 1578,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.endOfRunStaleness": {
      "Name": "scrapeLoop.endOfRunStaleness",
      "File": "scrape/scrape.go",
      "Line": 1508,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.getCache": {
      "Name": "scrapeLoop.getCache",
      "File": "scrape/scrape.go",
      "Line": 1582,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.getForcedError": {
      "Name": "scrapeLoop.getForcedError",
      "File": "scrape/scrape.go",
      "Line": 1502,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.report": {
      "Name": "scrapeLoop.report",
      "File": "scrape/scrape.go",
      "Line": 2095,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.reportStale": {
      "Name": "scrapeLoop.reportStale",
      "File": "scrape/scrape.go",
      "Line": 2135,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.run": {
      "Name": "scrapeLoop.run",
      "File": "scrape/scrape.go",
      "Line": 1317,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.scrapeAndReport": {
      "Name": "scrapeLoop.scrapeAndReport",
      "File": "scrape/scrape.go",
      "Line": 1389,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.setForcedError": {
      "Name": "scrapeLoop.setForcedError",
      "File": "scrape/scrape.go",
      "Line": 1496,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.setScrapeFailureLogger": {
      "Name": "scrapeLoop.setScrapeFailureLogger",
      "File": "scrape/scrape.go",
      "Line": 1308,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.stop": {
      "Name": "scrapeLoop.stop",
      "File": "scrape/scrape.go",
      "Line": 1573,
      "Receiver": "scrapeLoop"
    },
    "scrapeLoop.updateStaleMarkers": {
      "Name": "scrapeLoop.updateStaleMarkers",
      "File": "scrape/scrape.go",
      "Line": 1594,
      "Receiver": "scrapeLoop"
    },
    "scrapeManagerMock.Get": {
      "Name": "scrapeManagerMock.Get",
      "File": "storage/remote/metadata_watcher_test.go",
      "Line": 73,
      "Receiver": "scrapeManagerMock"
    },
    "scrapeMetrics.Unregister": {
      "Name": "scrapeMetrics.Unregister",
      "File": "scrape/metrics.go",
      "Line": 274,
      "Receiver": "scrapeMetrics"
    },
    "scrapeMetrics.setTargetMetadataCacheGatherer": {
      "Name": "scrapeMetrics.setTargetMetadataCacheGatherer",
      "File": "scrape/metrics.go",
      "Line": 269,
      "Receiver": "scrapeMetrics"
    },
    "scrapePool.ActiveTargets": {
      "Name": "scrapePool.ActiveTargets",
      "File": "scrape/scrape.go",
      "Line": 224,
      "Receiver": "scrapePool"
    },
    "scrapePool.DroppedTargets": {
      "Name": "scrapePool.DroppedTargets",
      "File": "scrape/scrape.go",
      "Line": 236,
      "Receiver": "scrapePool"
    },
    "scrapePool.DroppedTargetsCount": {
      "Name": "scrapePool.DroppedTargetsCount",
      "File": "scrape/scrape.go",
      "Line": 242,
      "Receiver": "scrapePool"
    },
    "scrapePool.SetScrapeFailureLogger": {
      "Name": "scrapePool.SetScrapeFailureLogger",
      "File": "scrape/scrape.go",
      "Line": 248,
      "Receiver": "scrapePool"
    },
    "scrapePool.Sync": {
      "Name": "scrapePool.Sync",
      "File": "scrape/scrape.go",
      "Line": 452,
      "Receiver": "scrapePool"
    },
    "scrapePool.checkSymbolTable": {
      "Name": "scrapePool.checkSymbolTable",
      "File": "scrape/scrape.go",
      "Line": 433,
      "Receiver": "scrapePool"
    },
    "scrapePool.getScrapeFailureLogger": {
      "Name": "scrapePool.getScrapeFailureLogger",
      "File": "scrape/scrape.go",
      "Line": 263,
      "Receiver": "scrapePool"
    },
    "scrapePool.refreshTargetLimitErr": {
      "Name": "scrapePool.refreshTargetLimitErr",
      "File": "scrape/scrape.go",
      "Line": 616,
      "Receiver": "scrapePool"
    },
    "scrapePool.reload": {
      "Name": "scrapePool.reload",
      "File": "scrape/scrape.go",
      "Line": 308,
      "Receiver": "scrapePool"
    },
    "scrapePool.restartLoops": {
      "Name": "scrapePool.restartLoops",
      "File": "scrape/scrape.go",
      "Line": 342,
      "Receiver": "scrapePool"
    },
    "scrapePool.stop": {
      "Name": "scrapePool.stop",
      "File": "scrape/scrape.go",
      "Line": 270,
      "Receiver": "scrapePool"
    },
    "scrapePool.sync": {
      "Name": "scrapePool.sync",
      "File": "scrape/scrape.go",
      "Line": 498,
      "Receiver": "scrapePool"
    },
    "secondaryQuerier.LabelNames": {
      "Name": "secondaryQuerier.LabelNames",
      "File": "storage/secondary.go",
      "Line": 60,
      "Receiver": "secondaryQuerier"
    },
    "secondaryQuerier.LabelValues": {
      "Name": "secondaryQuerier.LabelValues",
      "File": "storage/secondary.go",
      "Line": 52,
      "Receiver": "secondaryQuerier"
    },
    "secondaryQuerier.Select": {
      "Name": "secondaryQuerier.Select",
      "File": "storage/secondary.go",
      "Line": 68,
      "Receiver": "secondaryQuerier"
    },
    "segmentBufReader.Close": {
      "Name": "segmentBufReader.Close",
      "File": "tsdb/wlog/wlog.go",
      "Line": 995,
      "Receiver": "segmentBufReader"
    },
    "segmentBufReader.Read": {
      "Name": "segmentBufReader.Read",
      "File": "tsdb/wlog/wlog.go",
      "Line": 1005,
      "Receiver": "segmentBufReader"
    },
    "segmentFile": {
      "Name": "segmentFile",
      "File": "tsdb/chunks/chunks.go",
      "Line": 759,
      "Receiver": ""
    },
    "selectChunkSeriesSet": {
      "Name": "selectChunkSeriesSet",
      "File": "tsdb/querier.go",
      "Line": 169,
      "Receiver": ""
    },
    "selectSeriesSet": {
      "Name": "selectSeriesSet",
      "File": "tsdb/querier.go",
      "Line": 121,
      "Receiver": ""
    },
    "send": {
      "Name": "send",
      "File": "discovery/kubernetes/kubernetes.go",
      "Line": 612,
      "Receiver": ""
    },
    "sendSamples": {
      "Name": "sendSamples",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/main.go",
      "Line": 302,
      "Receiver": ""
    },
    "senderFunc.Send": {
      "Name": "senderFunc.Send",
      "File": "cmd/prometheus/main_test.go",
      "Line": 150,
      "Receiver": "senderFunc"
    },
    "sequenceFiles": {
      "Name": "sequenceFiles",
      "File": "tsdb/chunks/chunks.go",
      "Line": 763,
      "Receiver": ""
    },
    "sequentialRuleEvalController.Allow": {
      "Name": "sequentialRuleEvalController.Allow",
      "File": "rules/manager.go",
      "Line": 561,
      "Receiver": "sequentialRuleEvalController"
    },
    "sequentialRuleEvalController.Done": {
      "Name": "sequentialRuleEvalController.Done",
      "File": "rules/manager.go",
      "Line": 569,
      "Receiver": "sequentialRuleEvalController"
    },
    "sequentialRuleEvalController.SplitGroupIntoBatches": {
      "Name": "sequentialRuleEvalController.SplitGroupIntoBatches",
      "File": "rules/manager.go",
      "Line": 565,
      "Receiver": "sequentialRuleEvalController"
    },
    "seriesByLabel.Len": {
      "Name": "seriesByLabel.Len",
      "File": "storage/merge_test.go",
      "Line": 936,
      "Receiver": "seriesByLabel"
    },
    "seriesByLabel.Less": {
      "Name": "seriesByLabel.Less",
      "File": "storage/merge_test.go",
      "Line": 938,
      "Receiver": "seriesByLabel"
    },
    "seriesByLabel.Swap": {
      "Name": "seriesByLabel.Swap",
      "File": "storage/merge_test.go",
      "Line": 937,
      "Receiver": "seriesByLabel"
    },
    "seriesData.Labels": {
      "Name": "seriesData.Labels",
      "File": "tsdb/querier.go",
      "Line": 482,
      "Receiver": "seriesData"
    },
    "seriesFilter.Labels": {
      "Name": "seriesFilter.Labels",
      "File": "storage/remote/read.go",
      "Line": 275,
      "Receiver": "seriesFilter"
    },
    "seriesHashmap.Delete": {
      "Name": "seriesHashmap.Delete",
      "File": "tsdb/agent/series.go",
      "Line": 90,
      "Receiver": "seriesHashmap"
    },
    "seriesHashmap.Get": {
      "Name": "seriesHashmap.Get",
      "File": "tsdb/agent/series.go",
      "Line": 58,
      "Receiver": "seriesHashmap"
    },
    "seriesHashmap.Set": {
      "Name": "seriesHashmap.Set",
      "File": "tsdb/agent/series.go",
      "Line": 72,
      "Receiver": "seriesHashmap"
    },
    "seriesHashmap.del": {
      "Name": "seriesHashmap.del",
      "File": "tsdb/head.go",
      "Line": 1852,
      "Receiver": "seriesHashmap"
    },
    "seriesHashmap.get": {
      "Name": "seriesHashmap.get",
      "File": "tsdb/head.go",
      "Line": 1820,
      "Receiver": "seriesHashmap"
    },
    "seriesHashmap.set": {
      "Name": "seriesHashmap.set",
      "File": "tsdb/head.go",
      "Line": 1834,
      "Receiver": "seriesHashmap"
    },
    "seriesMergerAdapter.Merge": {
      "Name": "seriesMergerAdapter.Merge",
      "File": "storage/generic.go",
      "Line": 115,
      "Receiver": "seriesMergerAdapter"
    },
    "seriesRefSet.count": {
      "Name": "seriesRefSet.count",
      "File": "tsdb/head_wal.go",
      "Line": 66,
      "Receiver": "seriesRefSet"
    },
    "seriesRefSet.merge": {
      "Name": "seriesRefSet.merge",
      "File": "tsdb/head_wal.go",
      "Line": 60,
      "Receiver": "seriesRefSet"
    },
    "seriesSelector": {
      "Name": "seriesSelector",
      "File": "cmd/promtool/analyze.go",
      "Line": 148,
      "Receiver": ""
    },
    "seriesSetAdapter.At": {
      "Name": "seriesSetAdapter.At",
      "File": "storage/generic.go",
      "Line": 87,
      "Receiver": "seriesSetAdapter"
    },
    "seriesSetFilter.At": {
      "Name": "seriesSetFilter.At",
      "File": "storage/remote/read.go",
      "Line": 263,
      "Receiver": "seriesSetFilter"
    },
    "seriesSetFilter.GetQuerier": {
      "Name": "seriesSetFilter.GetQuerier",
      "File": "storage/remote/read.go",
      "Line": 255,
      "Receiver": "seriesSetFilter"
    },
    "seriesSetFilter.SetQuerier": {
      "Name": "seriesSetFilter.SetQuerier",
      "File": "storage/remote/read.go",
      "Line": 259,
      "Receiver": "seriesSetFilter"
    },
    "seriesSetToChunkSet.At": {
      "Name": "seriesSetToChunkSet.At",
      "File": "storage/series.go",
      "Line": 301,
      "Receiver": "seriesSetToChunkSet"
    },
    "seriesSetToChunkSet.Err": {
      "Name": "seriesSetToChunkSet.Err",
      "File": "storage/series.go",
      "Line": 305,
      "Receiver": "seriesSetToChunkSet"
    },
    "seriesSetToChunkSet.Next": {
      "Name": "seriesSetToChunkSet.Next",
      "File": "storage/series.go",
      "Line": 294,
      "Receiver": "seriesSetToChunkSet"
    },
    "seriesToChunkEncoder.Iterator": {
      "Name": "seriesToChunkEncoder.Iterator",
      "File": "storage/series.go",
      "Line": 320,
      "Receiver": "seriesToChunkEncoder"
    },
    "serve": {
      "Name": "serve",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/main.go",
      "Line": 205,
      "Receiver": ""
    },
    "serveDebug": {
      "Name": "serveDebug",
      "File": "web/web.go",
      "Line": 563,
      "Receiver": ""
    },
    "serverDiscovery.refresh": {
      "Name": "serverDiscovery.refresh",
      "File": "discovery/ionos/server.go",
      "Line": 86,
      "Receiver": "serverDiscovery"
    },
    "serverOnlyFlag": {
      "Name": "serverOnlyFlag",
      "File": "cmd/prometheus/main.go",
      "Line": 158,
      "Receiver": ""
    },
    "serverSDTestSuite.SetupTest": {
      "Name": "serverSDTestSuite.SetupTest",
      "File": "discovery/stackit/server_test.go",
      "Line": 33,
      "Receiver": "serverSDTestSuite"
    },
    "serviceLabels": {
      "Name": "serviceLabels",
      "File": "discovery/kubernetes/service.go",
      "Line": 164,
      "Receiver": ""
    },
    "serviceSource": {
      "Name": "serviceSource",
      "File": "discovery/kubernetes/service.go",
      "Line": 146,
      "Receiver": ""
    },
    "serviceSourceFromNamespaceAndName": {
      "Name": "serviceSourceFromNamespaceAndName",
      "File": "discovery/kubernetes/service.go",
      "Line": 150,
      "Receiver": ""
    },
    "setAtomicToNewer": {
      "Name": "setAtomicToNewer",
      "File": "storage/remote/queue_manager.go",
      "Line": 2042,
      "Receiver": ""
    },
    "setHeadersTransport.RoundTrip": {
      "Name": "setHeadersTransport.RoundTrip",
      "File": "cmd/promtool/metrics.go",
      "Line": 139,
      "Receiver": "setHeadersTransport"
    },
    "setOffsetForAtModifier": {
      "Name": "setOffsetForAtModifier",
      "File": "promql/engine.go",
      "Line": 3843,
      "Receiver": ""
    },
    "setPathWithPrefix": {
      "Name": "setPathWithPrefix",
      "File": "web/web.go",
      "Line": 901,
      "Receiver": ""
    },
    "setUnavailStatusOnTSDBNotReady": {
      "Name": "setUnavailStatusOnTSDBNotReady",
      "File": "web/api/v1/api.go",
      "Line": 336,
      "Receiver": ""
    },
    "setUpRuleEvalTest": {
      "Name": "setUpRuleEvalTest",
      "File": "rules/recording_test.go",
      "Line": 114,
      "Receiver": ""
    },
    "setup": {
      "Name": "setup",
      "File": "util/httputil/compression_test.go",
      "Line": 34,
      "Receiver": ""
    },
    "setupRangeQueryTestData": {
      "Name": "setupRangeQueryTestData",
      "File": "promql/bench_test.go",
      "Line": 36,
      "Receiver": ""
    },
    "setupRemote": {
      "Name": "setupRemote",
      "File": "web/api/v1/api_test.go",
      "Line": 1043,
      "Receiver": ""
    },
    "setupTestServer": {
      "Name": "setupTestServer",
      "File": "scrape/manager_test.go",
      "Line": 723,
      "Receiver": ""
    },
    "setupTestTargetRetriever": {
      "Name": "setupTestTargetRetriever",
      "File": "web/api/v1/api_test.go",
      "Line": 992,
      "Receiver": ""
    },
    "shards.enqueue": {
      "Name": "shards.enqueue",
      "File": "storage/remote/queue_manager.go",
      "Line": 1311,
      "Receiver": "shards"
    },
    "shards.runShard": {
      "Name": "shards.runShard",
      "File": "storage/remote/queue_manager.go",
      "Line": 1486,
      "Receiver": "shards"
    },
    "shards.sendSamples": {
      "Name": "shards.sendSamples",
      "File": "storage/remote/queue_manager.go",
      "Line": 1637,
      "Receiver": "shards"
    },
    "shards.sendSamplesWithBackoff": {
      "Name": "shards.sendSamplesWithBackoff",
      "File": "storage/remote/queue_manager.go",
      "Line": 1690,
      "Receiver": "shards"
    },
    "shards.sendV2Samples": {
      "Name": "shards.sendV2Samples",
      "File": "storage/remote/queue_manager.go",
      "Line": 1646,
      "Receiver": "shards"
    },
    "shards.sendV2SamplesWithBackoff": {
      "Name": "shards.sendV2SamplesWithBackoff",
      "File": "storage/remote/queue_manager.go",
      "Line": 1803,
      "Receiver": "shards"
    },
    "shards.start": {
      "Name": "shards.start",
      "File": "storage/remote/queue_manager.go",
      "Line": 1236,
      "Receiver": "shards"
    },
    "shards.stop": {
      "Name": "shards.stop",
      "File": "storage/remote/queue_manager.go",
      "Line": 1268,
      "Receiver": "shards"
    },
    "shards.updateMetrics": {
      "Name": "shards.updateMetrics",
      "File": "storage/remote/queue_manager.go",
      "Line": 1653,
      "Receiver": "shards"
    },
    "sharedLimitListener.Accept": {
      "Name": "sharedLimitListener.Accept",
      "File": "util/netconnlimit/netconnlimit.go",
      "Line": 62,
      "Receiver": "sharedLimitListener"
    },
    "sharedLimitListener.Close": {
      "Name": "sharedLimitListener.Close",
      "File": "util/netconnlimit/netconnlimit.go",
      "Line": 81,
      "Receiver": "sharedLimitListener"
    },
    "sharedLimitListener.acquire": {
      "Name": "sharedLimitListener.acquire",
      "File": "util/netconnlimit/netconnlimit.go",
      "Line": 51,
      "Receiver": "sharedLimitListener"
    },
    "sharedLimitListener.release": {
      "Name": "sharedLimitListener.release",
      "File": "util/netconnlimit/netconnlimit.go",
      "Line": 60,
      "Receiver": "sharedLimitListener"
    },
    "sharedLimitListenerConn.Close": {
      "Name": "sharedLimitListenerConn.Close",
      "File": "util/netconnlimit/netconnlimit.go",
      "Line": 93,
      "Receiver": "sharedLimitListenerConn"
    },
    "shortDuration": {
      "Name": "shortDuration",
      "File": "cmd/promtool/unittest.go",
      "Line": 538,
      "Receiver": ""
    },
    "signatureFunc": {
      "Name": "signatureFunc",
      "File": "promql/engine.go",
      "Line": 2770,
      "Receiver": ""
    },
    "simpleFloatFunc": {
      "Name": "simpleFloatFunc",
      "File": "promql/functions.go",
      "Line": 1026,
      "Receiver": ""
    },
    "simpleHistogramFunc": {
      "Name": "simpleHistogramFunc",
      "File": "promql/functions.go",
      "Line": 1300,
      "Receiver": ""
    },
    "simpleTestScrapeLoop": {
      "Name": "simpleTestScrapeLoop",
      "File": "scrape/scrape_test.go",
      "Line": 1325,
      "Receiver": ""
    },
    "singleSeriesSet.At": {
      "Name": "singleSeriesSet.At",
      "File": "promql/engine_test.go",
      "Line": 3811,
      "Receiver": "singleSeriesSet"
    },
    "singleSeriesSet.Err": {
      "Name": "singleSeriesSet.Err",
      "File": "promql/engine_test.go",
      "Line": 3812,
      "Receiver": "singleSeriesSet"
    },
    "singleSeriesSet.Next": {
      "Name": "singleSeriesSet.Next",
      "File": "promql/engine_test.go",
      "Line": 3810,
      "Receiver": "singleSeriesSet"
    },
    "singleSeriesSet.Warnings": {
      "Name": "singleSeriesSet.Warnings",
      "File": "promql/engine_test.go",
      "Line": 3813,
      "Receiver": "singleSeriesSet"
    },
    "sizeVarint": {
      "Name": "sizeVarint",
      "File": "model/labels/labels_dedupelabels.go",
      "Line": 675,
      "Receiver": ""
    },
    "sizeWhenEncoded": {
      "Name": "sizeWhenEncoded",
      "File": "model/labels/labels_stringlabels.go",
      "Line": 539,
      "Receiver": ""
    },
    "skipMetrics": {
      "Name": "skipMetrics",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 4217,
      "Receiver": ""
    },
    "skipRemote": {
      "Name": "skipRemote",
      "File": "prompb/remote.pb.go",
      "Line": 1619,
      "Receiver": ""
    },
    "skipSpaces": {
      "Name": "skipSpaces",
      "File": "promql/parser/lex.go",
      "Line": 827,
      "Receiver": ""
    },
    "skipTypes": {
      "Name": "skipTypes",
      "File": "prompb/types.pb.go",
      "Line": 4437,
      "Receiver": ""
    },
    "slowRegexpString": {
      "Name": "slowRegexpString",
      "File": "tsdb/index/postings_test.go",
      "Line": 1412,
      "Receiver": ""
    },
    "sortAlerts": {
      "Name": "sortAlerts",
      "File": "rules/manager_test.go",
      "Line": 354,
      "Receiver": ""
    },
    "sortFunc": {
      "Name": "sortFunc",
      "File": "discovery/moby/docker_test.go",
      "Line": 469,
      "Receiver": ""
    },
    "sortLines": {
      "Name": "sortLines",
      "File": "cmd/promtool/tsdb_test.go",
      "Line": 173,
      "Receiver": ""
    },
    "sortMatrix": {
      "Name": "sortMatrix",
      "File": "cmd/promtool/analyze.go",
      "Line": 234,
      "Receiver": ""
    },
    "sortSamples": {
      "Name": "sortSamples",
      "File": "cmd/promtool/backfill_test.go",
      "Line": 38,
      "Receiver": ""
    },
    "sortTargetsByID": {
      "Name": "sortTargetsByID",
      "File": "discovery/azure/azure_test.go",
      "Line": 857,
      "Receiver": ""
    },
    "sortTimeSeries": {
      "Name": "sortTimeSeries",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/metrics_to_prw_test.go",
      "Line": 815,
      "Receiver": ""
    },
    "sovMetrics": {
      "Name": "sovMetrics",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 2189,
      "Receiver": ""
    },
    "sovRemote": {
      "Name": "sovRemote",
      "File": "prompb/remote.pb.go",
      "Line": 907,
      "Receiver": ""
    },
    "sovTypes": {
      "Name": "sovTypes",
      "File": "prompb/types.pb.go",
      "Line": 2405,
      "Receiver": ""
    },
    "sozMetrics": {
      "Name": "sozMetrics",
      "File": "prompb/io/prometheus/client/metrics.pb.go",
      "Line": 2192,
      "Receiver": ""
    },
    "sozRemote": {
      "Name": "sozRemote",
      "File": "prompb/remote.pb.go",
      "Line": 910,
      "Receiver": ""
    },
    "sozTypes": {
      "Name": "sozTypes",
      "File": "prompb/types.pb.go",
      "Line": 2408,
      "Receiver": ""
    },
    "spansMatch": {
      "Name": "spansMatch",
      "File": "promql/promqltest/test.go",
      "Line": 1079,
      "Receiver": ""
    },
    "spansProtoToSpans": {
      "Name": "spansProtoToSpans",
      "File": "prompb/io/prometheus/write/v2/codec.go",
      "Line": 143,
      "Receiver": ""
    },
    "spansToSpansProto": {
      "Name": "spansToSpansProto",
      "File": "prompb/io/prometheus/write/v2/codec.go",
      "Line": 198,
      "Receiver": ""
    },
    "splitByRange": {
      "Name": "splitByRange",
      "File": "tsdb/compact.go",
      "Line": 375,
      "Receiver": ""
    },
    "stackitMetrics.Register": {
      "Name": "stackitMetrics.Register",
      "File": "discovery/stackit/metrics.go",
      "Line": 27,
      "Receiver": "stackitMetrics"
    },
    "stackitMetrics.Unregister": {
      "Name": "stackitMetrics.Unregister",
      "File": "discovery/stackit/metrics.go",
      "Line": 32,
      "Receiver": "stackitMetrics"
    },
    "startGarbageServer": {
      "Name": "startGarbageServer",
      "File": "cmd/prometheus/scrape_failure_log_test.go",
      "Line": 166,
      "Receiver": ""
    },
    "startTime": {
      "Name": "startTime",
      "File": "tsdb/agent/db_test.go",
      "Line": 821,
      "Receiver": ""
    },
    "startsOrEndsWithQuote": {
      "Name": "startsOrEndsWithQuote",
      "File": "cmd/prometheus/main.go",
      "Line": 1554,
      "Receiver": ""
    },
    "staticConfig": {
      "Name": "staticConfig",
      "File": "discovery/manager_test.go",
      "Line": 720,
      "Receiver": ""
    },
    "staticDiscoverer.Run": {
      "Name": "staticDiscoverer.Run",
      "File": "discovery/discovery.go",
      "Line": 157,
      "Receiver": "staticDiscoverer"
    },
    "statistics.String": {
      "Name": "statistics.String",
      "File": "cmd/promtool/analyze.go",
      "Line": 186,
      "Receiver": "statistics"
    },
    "stepStat.MarshalJSON": {
      "Name": "stepStat.MarshalJSON",
      "File": "util/stats/query_stats.go",
      "Line": 91,
      "Receiver": "stepStat"
    },
    "stepStat.String": {
      "Name": "stepStat.String",
      "File": "util/stats/query_stats.go",
      "Line": 86,
      "Receiver": "stepStat"
    },
    "stopIterator.Next": {
      "Name": "stopIterator.Next",
      "File": "tsdb/head_read.go",
      "Line": 594,
      "Receiver": "stopIterator"
    },
    "storageSeriesIterator.At": {
      "Name": "storageSeriesIterator.At",
      "File": "promql/value.go",
      "Line": 470,
      "Receiver": "storageSeriesIterator"
    },
    "storageSeriesIterator.AtFloatHistogram": {
      "Name": "storageSeriesIterator.AtFloatHistogram",
      "File": "promql/value.go",
      "Line": 478,
      "Receiver": "storageSeriesIterator"
    },
    "storageSeriesIterator.AtHistogram": {
      "Name": "storageSeriesIterator.AtHistogram",
      "File": "promql/value.go",
      "Line": 474,
      "Receiver": "storageSeriesIterator"
    },
    "storageSeriesIterator.AtT": {
      "Name": "storageSeriesIterator.AtT",
      "File": "promql/value.go",
      "Line": 482,
      "Receiver": "storageSeriesIterator"
    },
    "storageSeriesIterator.Err": {
      "Name": "storageSeriesIterator.Err",
      "File": "promql/value.go",
      "Line": 534,
      "Receiver": "storageSeriesIterator"
    },
    "storageSeriesIterator.Next": {
      "Name": "storageSeriesIterator.Next",
      "File": "promql/value.go",
      "Line": 486,
      "Receiver": "storageSeriesIterator"
    },
    "storageSeriesIterator.Seek": {
      "Name": "storageSeriesIterator.Seek",
      "File": "promql/value.go",
      "Line": 455,
      "Receiver": "storageSeriesIterator"
    },
    "storageSeriesIterator.reset": {
      "Name": "storageSeriesIterator.reset",
      "File": "promql/value.go",
      "Line": 445,
      "Receiver": "storageSeriesIterator"
    },
    "stringFromArg": {
      "Name": "stringFromArg",
      "File": "promql/functions.go",
      "Line": 1945,
      "Receiver": ""
    },
    "stringListIter.At": {
      "Name": "stringListIter.At",
      "File": "tsdb/index/index.go",
      "Line": 1922,
      "Receiver": "stringListIter"
    },
    "stringListIter.Err": {
      "Name": "stringListIter.Err",
      "File": "tsdb/index/index.go",
      "Line": 1923,
      "Receiver": "stringListIter"
    },
    "stringListIter.Next": {
      "Name": "stringListIter.Next",
      "File": "tsdb/index/index.go",
      "Line": 1914,
      "Receiver": "stringListIter"
    },
    "stringMatcherFromRegexp": {
      "Name": "stringMatcherFromRegexp",
      "File": "model/labels/regexp.go",
      "Line": 406,
      "Receiver": ""
    },
    "stringMatcherFromRegexpInternal": {
      "Name": "stringMatcherFromRegexpInternal",
      "File": "model/labels/regexp.go",
      "Line": 415,
      "Receiver": ""
    },
    "stringSliceFromArgs": {
      "Name": "stringSliceFromArgs",
      "File": "promql/functions.go",
      "Line": 1951,
      "Receiver": ""
    },
    "stripeSeries.GC": {
      "Name": "stripeSeries.GC",
      "File": "tsdb/agent/series.go",
      "Line": 163,
      "Receiver": "stripeSeries"
    },
    "stripeSeries.GetByHash": {
      "Name": "stripeSeries.GetByHash",
      "File": "tsdb/agent/series.go",
      "Line": 229,
      "Receiver": "stripeSeries"
    },
    "stripeSeries.GetByID": {
      "Name": "stripeSeries.GetByID",
      "File": "tsdb/agent/series.go",
      "Line": 222,
      "Receiver": "stripeSeries"
    },
    "stripeSeries.GetLatestExemplar": {
      "Name": "stripeSeries.GetLatestExemplar",
      "File": "tsdb/agent/series.go",
      "Line": 257,
      "Receiver": "stripeSeries"
    },
    "stripeSeries.Set": {
      "Name": "stripeSeries.Set",
      "File": "tsdb/agent/series.go",
      "Line": 237,
      "Receiver": "stripeSeries"
    },
    "stripeSeries.SetLatestExemplar": {
      "Name": "stripeSeries.SetLatestExemplar",
      "File": "tsdb/agent/series.go",
      "Line": 267,
      "Receiver": "stripeSeries"
    },
    "stripeSeries.gc": {
      "Name": "stripeSeries.gc",
      "File": "tsdb/head.go",
      "Line": 1932,
      "Receiver": "stripeSeries"
    },
    "stripeSeries.getByHash": {
      "Name": "stripeSeries.getByHash",
      "File": "tsdb/head.go",
      "Line": 2045,
      "Receiver": "stripeSeries"
    },
    "stripeSeries.getByID": {
      "Name": "stripeSeries.getByID",
      "File": "tsdb/head.go",
      "Line": 2035,
      "Receiver": "stripeSeries"
    },
    "stripeSeries.getOrSet": {
      "Name": "stripeSeries.getOrSet",
      "File": "tsdb/head.go",
      "Line": 2055,
      "Receiver": "stripeSeries"
    },
    "stripeSeries.iterForDeletion": {
      "Name": "stripeSeries.iterForDeletion",
      "File": "tsdb/head.go",
      "Line": 2009,
      "Receiver": "stripeSeries"
    },
    "stripeSeries.postCreation": {
      "Name": "stripeSeries.postCreation",
      "File": "tsdb/head.go",
      "Line": 2094,
      "Receiver": "stripeSeries"
    },
    "stripeSeriesWithCollidingSeries": {
      "Name": "stripeSeriesWithCollidingSeries",
      "File": "tsdb/head_test.go",
      "Line": 6392,
      "Receiver": ""
    },
    "strptr": {
      "Name": "strptr",
      "File": "discovery/kubernetes/endpointslice_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "subqueryTimes": {
      "Name": "subqueryTimes",
      "File": "promql/engine.go",
      "Line": 844,
      "Receiver": ""
    },
    "symbolsIter.At": {
      "Name": "symbolsIter.At",
      "File": "tsdb/index/index.go",
      "Line": 1438,
      "Receiver": "symbolsIter"
    },
    "symbolsIter.Err": {
      "Name": "symbolsIter.Err",
      "File": "tsdb/index/index.go",
      "Line": 1439,
      "Receiver": "symbolsIter"
    },
    "symbolsIter.Next": {
      "Name": "symbolsIter.Next",
      "File": "tsdb/index/index.go",
      "Line": 1425,
      "Receiver": "symbolsIter"
    },
    "syncAppendable.Appender": {
      "Name": "syncAppendable.Appender",
      "File": "storage/remote/write_test.go",
      "Line": 968,
      "Receiver": "syncAppendable"
    },
    "syncAppender.Append": {
      "Name": "syncAppender.Append",
      "File": "storage/remote/write_test.go",
      "Line": 972,
      "Receiver": "syncAppender"
    },
    "syncAppender.AppendHistogram": {
      "Name": "syncAppender.AppendHistogram",
      "File": "storage/remote/write_test.go",
      "Line": 978,
      "Receiver": "syncAppender"
    },
    "syncDBuffer.get": {
      "Name": "syncDBuffer.get",
      "File": "util/compression/buffers.go",
      "Line": 111,
      "Receiver": "syncDBuffer"
    },
    "syncDBuffer.set": {
      "Name": "syncDBuffer.set",
      "File": "util/compression/buffers.go",
      "Line": 115,
      "Receiver": "syncDBuffer"
    },
    "syncDBuffer.zstdDecBuf": {
      "Name": "syncDBuffer.zstdDecBuf",
      "File": "util/compression/buffers.go",
      "Line": 103,
      "Receiver": "syncDBuffer"
    },
    "syncEBuffer.get": {
      "Name": "syncEBuffer.get",
      "File": "util/compression/buffers.go",
      "Line": 49,
      "Receiver": "syncEBuffer"
    },
    "syncEBuffer.set": {
      "Name": "syncEBuffer.set",
      "File": "util/compression/buffers.go",
      "Line": 53,
      "Receiver": "syncEBuffer"
    },
    "syncEBuffer.zstdEncBuf": {
      "Name": "syncEBuffer.zstdEncBuf",
      "File": "util/compression/buffers.go",
      "Line": 41,
      "Receiver": "syncEBuffer"
    },
    "tagsFromMetric": {
      "Name": "tagsFromMetric",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/opentsdb/client.go",
      "Line": 63,
      "Receiver": ""
    },
    "tagsToLabelPairs": {
      "Name": "tagsToLabelPairs",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client.go",
      "Line": 262,
      "Receiver": ""
    },
    "tarGzFileWriter.close": {
      "Name": "tarGzFileWriter.close",
      "File": "cmd/promtool/archive.go",
      "Line": 46,
      "Receiver": "tarGzFileWriter"
    },
    "tarGzFileWriter.write": {
      "Name": "tarGzFileWriter.write",
      "File": "cmd/promtool/archive.go",
      "Line": 56,
      "Receiver": "tarGzFileWriter"
    },
    "targetEndpoint": {
      "Name": "targetEndpoint",
      "File": "discovery/marathon/marathon.go",
      "Line": 498,
      "Receiver": ""
    },
    "targetIdx": {
      "Name": "targetIdx",
      "File": "model/histogram/float_histogram.go",
      "Line": 1194,
      "Receiver": ""
    },
    "targetScraper.readResponse": {
      "Name": "targetScraper.readResponse",
      "File": "scrape/scrape.go",
      "Line": 831,
      "Receiver": "targetScraper"
    },
    "targetScraper.scrape": {
      "Name": "targetScraper.scrape",
      "File": "scrape/scrape.go",
      "Line": 814,
      "Receiver": "targetScraper"
    },
    "targetsForApp": {
      "Name": "targetsForApp",
      "File": "discovery/marathon/marathon.go",
      "Line": 415,
      "Receiver": ""
    },
    "temporaryDirectory.Close": {
      "Name": "temporaryDirectory.Close",
      "File": "util/testutil/directory.go",
      "Line": 95,
      "Receiver": "temporaryDirectory"
    },
    "temporaryDirectory.Path": {
      "Name": "temporaryDirectory.Path",
      "File": "util/testutil/directory.go",
      "Line": 110,
      "Receiver": "temporaryDirectory"
    },
    "test.clear": {
      "Name": "test.clear",
      "File": "promql/promqltest/test.go",
      "Line": 1463,
      "Receiver": "test"
    },
    "test.exec": {
      "Name": "test.exec",
      "File": "promql/promqltest/test.go",
      "Line": 1281,
      "Receiver": "test"
    },
    "test.execEval": {
      "Name": "test.execEval",
      "File": "promql/promqltest/test.go",
      "Line": 1306,
      "Receiver": "test"
    },
    "test.execInstantEval": {
      "Name": "test.execInstantEval",
      "File": "promql/promqltest/test.go",
      "Line": 1356,
      "Receiver": "test"
    },
    "test.execRangeEval": {
      "Name": "test.execRangeEval",
      "File": "promql/promqltest/test.go",
      "Line": 1328,
      "Receiver": "test"
    },
    "test.parse": {
      "Name": "test.parse",
      "File": "promql/promqltest/test.go",
      "Line": 476,
      "Receiver": "test"
    },
    "test.parseEval": {
      "Name": "test.parseEval",
      "File": "promql/promqltest/test.go",
      "Line": 317,
      "Receiver": "test"
    },
    "test.runInstantQuery": {
      "Name": "test.runInstantQuery",
      "File": "promql/promqltest/test.go",
      "Line": 1370,
      "Receiver": "test"
    },
    "testAlertmanagerRetriever.Alertmanagers": {
      "Name": "testAlertmanagerRetriever.Alertmanagers",
      "File": "web/api/v1/api_test.go",
      "Line": 191,
      "Receiver": "testAlertmanagerRetriever"
    },
    "testAlertmanagerRetriever.DroppedAlertmanagers": {
      "Name": "testAlertmanagerRetriever.DroppedAlertmanagers",
      "File": "web/api/v1/api_test.go",
      "Line": 201,
      "Receiver": "testAlertmanagerRetriever"
    },
    "testAlertmanagerRetriever.toFactory": {
      "Name": "testAlertmanagerRetriever.toFactory",
      "File": "web/api/v1/api_test.go",
      "Line": 211,
      "Receiver": "testAlertmanagerRetriever"
    },
    "testBlockQuerier": {
      "Name": "testBlockQuerier",
      "File": "tsdb/querier_test.go",
      "Line": 197,
      "Receiver": ""
    },
    "testBlocks": {
      "Name": "testBlocks",
      "File": "cmd/promtool/backfill_test.go",
      "Line": 63,
      "Receiver": ""
    },
    "testChunk": {
      "Name": "testChunk",
      "File": "tsdb/chunkenc/chunk_test.go",
      "Line": 44,
      "Receiver": ""
    },
    "testChunkQuerierOOOQuery": {
      "Name": "testChunkQuerierOOOQuery",
      "File": "tsdb/db_test.go",
      "Line": 5923,
      "Receiver": ""
    },
    "testChunkQuerierShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks": {
      "Name": "testChunkQuerierShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks",
      "File": "tsdb/db_test.go",
      "Line": 3564,
      "Receiver": ""
    },
    "testCodec.CanEncode": {
      "Name": "testCodec.CanEncode",
      "File": "web/api/v1/api_test.go",
      "Line": 4594,
      "Receiver": "testCodec"
    },
    "testCodec.ContentType": {
      "Name": "testCodec.ContentType",
      "File": "web/api/v1/api_test.go",
      "Line": 4590,
      "Receiver": "testCodec"
    },
    "testCodec.Encode": {
      "Name": "testCodec.Encode",
      "File": "web/api/v1/api_test.go",
      "Line": 4598,
      "Receiver": "testCodec"
    },
    "testConfig": {
      "Name": "testConfig",
      "File": "discovery/marathon/marathon_test.go",
      "Line": 37,
      "Receiver": ""
    },
    "testDefaultQueueConfig": {
      "Name": "testDefaultQueueConfig",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 329,
      "Receiver": ""
    },
    "testDiscoverer.Name": {
      "Name": "testDiscoverer.Name",
      "File": "discovery/manager_test.go",
      "Line": 1524,
      "Receiver": "testDiscoverer"
    },
    "testDiscoverer.NewDiscoverer": {
      "Name": "testDiscoverer.NewDiscoverer",
      "File": "discovery/manager_test.go",
      "Line": 1529,
      "Receiver": "testDiscoverer"
    },
    "testDiscoverer.NewDiscovererMetrics": {
      "Name": "testDiscoverer.NewDiscovererMetrics",
      "File": "discovery/manager_test.go",
      "Line": 1519,
      "Receiver": "testDiscoverer"
    },
    "testDiscoverer.Run": {
      "Name": "testDiscoverer.Run",
      "File": "discovery/manager_test.go",
      "Line": 1534,
      "Receiver": "testDiscoverer"
    },
    "testDiscoverer.update": {
      "Name": "testDiscoverer.update",
      "File": "discovery/manager_test.go",
      "Line": 1540,
      "Receiver": "testDiscoverer"
    },
    "testDiskFillingUpAfterDisablingOOO": {
      "Name": "testDiskFillingUpAfterDisablingOOO",
      "File": "tsdb/db_test.go",
      "Line": 8421,
      "Receiver": ""
    },
    "testEndpoints": {
      "Name": "testEndpoints",
      "File": "web/api/v1/api_test.go",
      "Line": 1097,
      "Receiver": ""
    },
    "testEngine": {
      "Name": "testEngine",
      "File": "web/api/v1/api_test.go",
      "Line": 60,
      "Receiver": ""
    },
    "testError.Error": {
      "Name": "testError.Error",
      "File": "tsdb/errors/errors_test.go",
      "Line": 170,
      "Receiver": "testError"
    },
    "testFloatHistogram": {
      "Name": "testFloatHistogram",
      "File": "prompb/rwcommon/codec_test.go",
      "Line": 174,
      "Receiver": ""
    },
    "testFloatHistogramSub": {
      "Name": "testFloatHistogramSub",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 2517,
      "Receiver": ""
    },
    "testGroup.maxEvalTime": {
      "Name": "testGroup.maxEvalTime",
      "File": "cmd/promtool/unittest.go",
      "Line": 563,
      "Receiver": "testGroup"
    },
    "testGroup.seriesLoadingString": {
      "Name": "testGroup.seriesLoadingString",
      "File": "cmd/promtool/unittest.go",
      "Line": 530,
      "Receiver": "testGroup"
    },
    "testGroup.test": {
      "Name": "testGroup.test",
      "File": "cmd/promtool/unittest.go",
      "Line": 202,
      "Receiver": "testGroup"
    },
    "testHTTPResourceConfig": {
      "Name": "testHTTPResourceConfig",
      "File": "discovery/xds/client_test.go",
      "Line": 29,
      "Receiver": ""
    },
    "testHeadAppendHistogramAndCommitConcurrency": {
      "Name": "testHeadAppendHistogramAndCommitConcurrency",
      "File": "tsdb/head_test.go",
      "Line": 6835,
      "Receiver": ""
    },
    "testHeadMinOOOTimeUpdate": {
      "Name": "testHeadMinOOOTimeUpdate",
      "File": "tsdb/head_test.go",
      "Line": 5809,
      "Receiver": ""
    },
    "testHeadSeriesChunkRace": {
      "Name": "testHeadSeriesChunkRace",
      "File": "tsdb/head_test.go",
      "Line": 3052,
      "Receiver": ""
    },
    "testHeader": {
      "Name": "testHeader",
      "File": "discovery/openstack/mock_test.go",
      "Line": 57,
      "Receiver": ""
    },
    "testHistogramAdd": {
      "Name": "testHistogramAdd",
      "File": "model/histogram/float_histogram_test.go",
      "Line": 2319,
      "Receiver": ""
    },
    "testHistogramAppendAndQueryHelper": {
      "Name": "testHistogramAppendAndQueryHelper",
      "File": "tsdb/db_test.go",
      "Line": 8517,
      "Receiver": ""
    },
    "testHistogramStaleSampleHelper": {
      "Name": "testHistogramStaleSampleHelper",
      "File": "tsdb/head_test.go",
      "Line": 4625,
      "Receiver": ""
    },
    "testHistogramsSeriesToChunks": {
      "Name": "testHistogramsSeriesToChunks",
      "File": "storage/series_test.go",
      "Line": 585,
      "Receiver": ""
    },
    "testIntHistogram": {
      "Name": "testIntHistogram",
      "File": "prompb/rwcommon/codec_test.go",
      "Line": 149,
      "Receiver": ""
    },
    "testLoop.disableEndOfRunStalenessMarkers": {
      "Name": "testLoop.disableEndOfRunStalenessMarkers",
      "File": "scrape/scrape_test.go",
      "Line": 418,
      "Receiver": "testLoop"
    },
    "testLoop.getCache": {
      "Name": "testLoop.getCache",
      "File": "scrape/scrape_test.go",
      "Line": 437,
      "Receiver": "testLoop"
    },
    "testLoop.getForcedError": {
      "Name": "testLoop.getForcedError",
      "File": "scrape/scrape_test.go",
      "Line": 427,
      "Receiver": "testLoop"
    },
    "testLoop.run": {
      "Name": "testLoop.run",
      "File": "scrape/scrape_test.go",
      "Line": 410,
      "Receiver": "testLoop"
    },
    "testLoop.setForcedError": {
      "Name": "testLoop.setForcedError",
      "File": "scrape/scrape_test.go",
      "Line": 421,
      "Receiver": "testLoop"
    },
    "testLoop.setScrapeFailureLogger": {
      "Name": "testLoop.setScrapeFailureLogger",
      "File": "scrape/scrape_test.go",
      "Line": 407,
      "Receiver": "testLoop"
    },
    "testLoop.stop": {
      "Name": "testLoop.stop",
      "File": "scrape/scrape_test.go",
      "Line": 433,
      "Receiver": "testLoop"
    },
    "testMetaStore.GetMetadata": {
      "Name": "testMetaStore.GetMetadata",
      "File": "web/api/v1/api_test.go",
      "Line": 84,
      "Receiver": "testMetaStore"
    },
    "testMetaStore.LengthMetadata": {
      "Name": "testMetaStore.LengthMetadata",
      "File": "web/api/v1/api_test.go",
      "Line": 95,
      "Receiver": "testMetaStore"
    },
    "testMetaStore.ListMetadata": {
      "Name": "testMetaStore.ListMetadata",
      "File": "web/api/v1/api_test.go",
      "Line": 80,
      "Receiver": "testMetaStore"
    },
    "testMetaStore.SizeMetadata": {
      "Name": "testMetaStore.SizeMetadata",
      "File": "web/api/v1/api_test.go",
      "Line": 94,
      "Receiver": "testMetaStore"
    },
    "testMethod": {
      "Name": "testMethod",
      "File": "discovery/openstack/mock_test.go",
      "Line": 53,
      "Receiver": ""
    },
    "testNativeHistogramMaxSchemaSet": {
      "Name": "testNativeHistogramMaxSchemaSet",
      "File": "scrape/scrape_test.go",
      "Line": 5207,
      "Receiver": ""
    },
    "testNoGapAfterRestartWithOOO": {
      "Name": "testNoGapAfterRestartWithOOO",
      "File": "tsdb/db_test.go",
      "Line": 8180,
      "Receiver": ""
    },
    "testOOOAppendAndQuery": {
      "Name": "testOOOAppendAndQuery",
      "File": "tsdb/db_test.go",
      "Line": 6645,
      "Receiver": ""
    },
    "testOOOAppendWithNoSeries": {
      "Name": "testOOOAppendWithNoSeries",
      "File": "tsdb/head_test.go",
      "Line": 5717,
      "Receiver": ""
    },
    "testOOOCompaction": {
      "Name": "testOOOCompaction",
      "File": "tsdb/db_test.go",
      "Line": 5008,
      "Receiver": ""
    },
    "testOOOCompactionFailure": {
      "Name": "testOOOCompactionFailure",
      "File": "tsdb/db_test.go",
      "Line": 7515,
      "Receiver": ""
    },
    "testOOOCompactionWithDisabledWriteLog": {
      "Name": "testOOOCompactionWithDisabledWriteLog",
      "File": "tsdb/db_test.go",
      "Line": 5319,
      "Receiver": ""
    },
    "testOOOCompactionWithNormalCompaction": {
      "Name": "testOOOCompactionWithNormalCompaction",
      "File": "tsdb/db_test.go",
      "Line": 5210,
      "Receiver": ""
    },
    "testOOODisabled": {
      "Name": "testOOODisabled",
      "File": "tsdb/db_test.go",
      "Line": 6779,
      "Receiver": ""
    },
    "testOOOHeadChunkReader_Chunk": {
      "Name": "testOOOHeadChunkReader_Chunk",
      "File": "tsdb/ooo_head_read_test.go",
      "Line": 492,
      "Receiver": ""
    },
    "testOOOHeadChunkReader_Chunk_ConsistentQueryResponseDespiteOfHeadExpanding": {
      "Name": "testOOOHeadChunkReader_Chunk_ConsistentQueryResponseDespiteOfHeadExpanding",
      "File": "tsdb/ooo_head_read_test.go",
      "Line": 902,
      "Receiver": ""
    },
    "testOOOHeadChunkReader_LabelValues": {
      "Name": "testOOOHeadChunkReader_LabelValues",
      "File": "tsdb/ooo_head_read_test.go",
      "Line": 389,
      "Receiver": ""
    },
    "testOOOInsert": {
      "Name": "testOOOInsert",
      "File": "tsdb/ooo_head_test.go",
      "Line": 73,
      "Receiver": ""
    },
    "testOOOInsertDuplicate": {
      "Name": "testOOOInsertDuplicate",
      "File": "tsdb/ooo_head_test.go",
      "Line": 137,
      "Receiver": ""
    },
    "testOOOInterleavedImplicitCounterResets": {
      "Name": "testOOOInterleavedImplicitCounterResets",
      "File": "tsdb/db_test.go",
      "Line": 6372,
      "Receiver": ""
    },
    "testOOOMmapCorruption": {
      "Name": "testOOOMmapCorruption",
      "File": "tsdb/db_test.go",
      "Line": 7808,
      "Receiver": ""
    },
    "testOOOMmapReplay": {
      "Name": "testOOOMmapReplay",
      "File": "tsdb/head_test.go",
      "Line": 5414,
      "Receiver": ""
    },
    "testOOONativeHistogramsWithCounterResets": {
      "Name": "testOOONativeHistogramsWithCounterResets",
      "File": "tsdb/db_test.go",
      "Line": 6208,
      "Receiver": ""
    },
    "testOOOQueryAfterRestartWithSnapshotAndRemovedWBL": {
      "Name": "testOOOQueryAfterRestartWithSnapshotAndRemovedWBL",
      "File": "tsdb/db_test.go",
      "Line": 5430,
      "Receiver": ""
    },
    "testOOOWALWrite": {
      "Name": "testOOOWALWrite",
      "File": "tsdb/db_test.go",
      "Line": 4422,
      "Receiver": ""
    },
    "testOutOfOrderRuntimeConfig": {
      "Name": "testOutOfOrderRuntimeConfig",
      "File": "tsdb/db_test.go",
      "Line": 7940,
      "Receiver": ""
    },
    "testOutOfOrderSamplesMetric": {
      "Name": "testOutOfOrderSamplesMetric",
      "File": "tsdb/head_test.go",
      "Line": 2970,
      "Receiver": ""
    },
    "testPanicOnApplyConfig": {
      "Name": "testPanicOnApplyConfig",
      "File": "tsdb/db_test.go",
      "Line": 8364,
      "Receiver": ""
    },
    "testParse": {
      "Name": "testParse",
      "File": "model/textparse/interface_test.go",
      "Line": 229,
      "Receiver": ""
    },
    "testPostingsForLabelMatching": {
      "Name": "testPostingsForLabelMatching",
      "File": "tsdb/block_test.go",
      "Line": 564,
      "Receiver": ""
    },
    "testQuerierOOOQuery": {
      "Name": "testQuerierOOOQuery",
      "File": "tsdb/db_test.go",
      "Line": 5595,
      "Receiver": ""
    },
    "testQuerierShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks": {
      "Name": "testQuerierShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks",
      "File": "tsdb/db_test.go",
      "Line": 3428,
      "Receiver": ""
    },
    "testQueryOOOHeadDuringTruncate": {
      "Name": "testQueryOOOHeadDuringTruncate",
      "File": "tsdb/head_test.go",
      "Line": 3814,
      "Receiver": ""
    },
    "testRemoteWriteConfig": {
      "Name": "testRemoteWriteConfig",
      "File": "storage/remote/write_test.go",
      "Line": 50,
      "Receiver": ""
    },
    "testResourceClient.Close": {
      "Name": "testResourceClient.Close",
      "File": "discovery/xds/xds_test.go",
      "Line": 118,
      "Receiver": "testResourceClient"
    },
    "testResourceClient.Fetch": {
      "Name": "testResourceClient.Fetch",
      "File": "discovery/xds/xds_test.go",
      "Line": 110,
      "Receiver": "testResourceClient"
    },
    "testResourceClient.ID": {
      "Name": "testResourceClient.ID",
      "File": "discovery/xds/xds_test.go",
      "Line": 114,
      "Receiver": "testResourceClient"
    },
    "testResourceClient.ResourceTypeURL": {
      "Name": "testResourceClient.ResourceTypeURL",
      "File": "discovery/xds/xds_test.go",
      "Line": 102,
      "Receiver": "testResourceClient"
    },
    "testResourceClient.Server": {
      "Name": "testResourceClient.Server",
      "File": "discovery/xds/xds_test.go",
      "Line": 106,
      "Receiver": "testResourceClient"
    },
    "testRunner.appendString": {
      "Name": "testRunner.appendString",
      "File": "discovery/file/file_test.go",
      "Line": 112,
      "Receiver": "testRunner"
    },
    "testRunner.copyFile": {
      "Name": "testRunner.copyFile",
      "File": "discovery/file/file_test.go",
      "Line": 69,
      "Receiver": "testRunner"
    },
    "testRunner.copyFileTo": {
      "Name": "testRunner.copyFileTo",
      "File": "discovery/file/file_test.go",
      "Line": 75,
      "Receiver": "testRunner"
    },
    "testRunner.lastReceive": {
      "Name": "testRunner.lastReceive",
      "File": "discovery/file/file_test.go",
      "Line": 180,
      "Receiver": "testRunner"
    },
    "testRunner.requireTargetGroups": {
      "Name": "testRunner.requireTargetGroups",
      "File": "discovery/file/file_test.go",
      "Line": 234,
      "Receiver": "testRunner"
    },
    "testRunner.requireUpdate": {
      "Name": "testRunner.requireUpdate",
      "File": "discovery/file/file_test.go",
      "Line": 204,
      "Receiver": "testRunner"
    },
    "testRunner.run": {
      "Name": "testRunner.run",
      "File": "discovery/file/file_test.go",
      "Line": 124,
      "Receiver": "testRunner"
    },
    "testRunner.stop": {
      "Name": "testRunner.stop",
      "File": "discovery/file/file_test.go",
      "Line": 174,
      "Receiver": "testRunner"
    },
    "testRunner.targets": {
      "Name": "testRunner.targets",
      "File": "discovery/file/file_test.go",
      "Line": 186,
      "Receiver": "testRunner"
    },
    "testRunner.writeString": {
      "Name": "testRunner.writeString",
      "File": "discovery/file/file_test.go",
      "Line": 97,
      "Receiver": "testRunner"
    },
    "testScraper.Report": {
      "Name": "testScraper.Report",
      "File": "scrape/scrape_test.go",
      "Line": 3415,
      "Receiver": "testScraper"
    },
    "testScraper.offset": {
      "Name": "testScraper.offset",
      "File": "scrape/scrape_test.go",
      "Line": 3411,
      "Receiver": "testScraper"
    },
    "testScraper.readResponse": {
      "Name": "testScraper.readResponse",
      "File": "scrape/scrape_test.go",
      "Line": 3425,
      "Receiver": "testScraper"
    },
    "testScraper.scrape": {
      "Name": "testScraper.scrape",
      "File": "scrape/scrape_test.go",
      "Line": 3421,
      "Receiver": "testScraper"
    },
    "testSeriesSet.At": {
      "Name": "testSeriesSet.At",
      "File": "storage/interface.go",
      "Line": 412,
      "Receiver": "testSeriesSet"
    },
    "testSeriesSet.Err": {
      "Name": "testSeriesSet.Err",
      "File": "storage/interface.go",
      "Line": 413,
      "Receiver": "testSeriesSet"
    },
    "testSeriesSet.Next": {
      "Name": "testSeriesSet.Next",
      "File": "storage/interface.go",
      "Line": 411,
      "Receiver": "testSeriesSet"
    },
    "testSeriesSet.Warnings": {
      "Name": "testSeriesSet.Warnings",
      "File": "storage/interface.go",
      "Line": 414,
      "Receiver": "testSeriesSet"
    },
    "testStats.Builtin": {
      "Name": "testStats.Builtin",
      "File": "web/api/v1/api_test.go",
      "Line": 873,
      "Receiver": "testStats"
    },
    "testTargetRetriever.ResetMetadataStore": {
      "Name": "testTargetRetriever.ResetMetadataStore",
      "File": "web/api/v1/api_test.go",
      "Line": 177,
      "Receiver": "testTargetRetriever"
    },
    "testTargetRetriever.SetMetadataStoreForTargets": {
      "Name": "testTargetRetriever.SetMetadataStoreForTargets",
      "File": "web/api/v1/api_test.go",
      "Line": 163,
      "Receiver": "testTargetRetriever"
    },
    "testTargetRetriever.TargetsActive": {
      "Name": "testTargetRetriever.TargetsActive",
      "File": "web/api/v1/api_test.go",
      "Line": 147,
      "Receiver": "testTargetRetriever"
    },
    "testTargetRetriever.TargetsDropped": {
      "Name": "testTargetRetriever.TargetsDropped",
      "File": "web/api/v1/api_test.go",
      "Line": 151,
      "Receiver": "testTargetRetriever"
    },
    "testTargetRetriever.TargetsDroppedCounts": {
      "Name": "testTargetRetriever.TargetsDroppedCounts",
      "File": "web/api/v1/api_test.go",
      "Line": 155,
      "Receiver": "testTargetRetriever"
    },
    "testTargetRetriever.toFactory": {
      "Name": "testTargetRetriever.toFactory",
      "File": "web/api/v1/api_test.go",
      "Line": 185,
      "Receiver": "testTargetRetriever"
    },
    "testTemplateExpansion": {
      "Name": "testTemplateExpansion",
      "File": "template/template_test.go",
      "Line": 601,
      "Receiver": ""
    },
    "testTemplateParsing": {
      "Name": "testTemplateParsing",
      "File": "model/rulefmt/rulefmt.go",
      "Line": 288,
      "Receiver": ""
    },
    "testTest": {
      "Name": "testTest",
      "File": "promql/promqltest/test.go",
      "Line": 151,
      "Receiver": ""
    },
    "testTokenExpiry": {
      "Name": "testTokenExpiry",
      "File": "storage/remote/azuread/azuread_test.go",
      "Line": 42,
      "Receiver": ""
    },
    "testTritonSDRefresh": {
      "Name": "testTritonSDRefresh",
      "File": "discovery/triton/triton_test.go",
      "Line": 230,
      "Receiver": ""
    },
    "testUpdateServices": {
      "Name": "testUpdateServices",
      "File": "discovery/uyuni/uyuni_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "testWALReplayRaceOnSamplesLoggedBeforeSeries": {
      "Name": "testWALReplayRaceOnSamplesLoggedBeforeSeries",
      "File": "tsdb/db_test.go",
      "Line": 1105,
      "Receiver": ""
    },
    "testWBLAndMmapReplay": {
      "Name": "testWBLAndMmapReplay",
      "File": "tsdb/db_test.go",
      "Line": 6853,
      "Receiver": ""
    },
    "testWBLReplay": {
      "Name": "testWBLReplay",
      "File": "tsdb/head_test.go",
      "Line": 5321,
      "Receiver": ""
    },
    "testWblReplayAfterOOODisableAndRestart": {
      "Name": "testWblReplayAfterOOODisableAndRestart",
      "File": "tsdb/db_test.go",
      "Line": 8296,
      "Receiver": ""
    },
    "textToProto": {
      "Name": "textToProto",
      "File": "scrape/scrape_test.go",
      "Line": 2899,
      "Receiver": ""
    },
    "timeLimitAppender.Append": {
      "Name": "timeLimitAppender.Append",
      "File": "storage/remote/write_handler.go",
      "Line": 700,
      "Receiver": "timeLimitAppender"
    },
    "timeLimitAppender.AppendExemplar": {
      "Name": "timeLimitAppender.AppendExemplar",
      "File": "storage/remote/write_handler.go",
      "Line": 724,
      "Receiver": "timeLimitAppender"
    },
    "timeLimitAppender.AppendHistogram": {
      "Name": "timeLimitAppender.AppendHistogram",
      "File": "storage/remote/write_handler.go",
      "Line": 712,
      "Receiver": "timeLimitAppender"
    },
    "timeMilliseconds": {
      "Name": "timeMilliseconds",
      "File": "promql/promqltest/test.go",
      "Line": 1647,
      "Receiver": ""
    },
    "timeSeriesSignature": {
      "Name": "timeSeriesSignature",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/helper.go",
      "Line": 87,
      "Receiver": ""
    },
    "timestampTracker.Append": {
      "Name": "timestampTracker.Append",
      "File": "storage/remote/write.go",
      "Line": 289,
      "Receiver": "timestampTracker"
    },
    "timestampTracker.AppendCTZeroSample": {
      "Name": "timestampTracker.AppendCTZeroSample",
      "File": "storage/remote/write.go",
      "Line": 310,
      "Receiver": "timestampTracker"
    },
    "timestampTracker.AppendExemplar": {
      "Name": "timestampTracker.AppendExemplar",
      "File": "storage/remote/write.go",
      "Line": 297,
      "Receiver": "timestampTracker"
    },
    "timestampTracker.AppendHistogram": {
      "Name": "timestampTracker.AppendHistogram",
      "File": "storage/remote/write.go",
      "Line": 302,
      "Receiver": "timestampTracker"
    },
    "timestampTracker.AppendHistogramCTZeroSample": {
      "Name": "timestampTracker.AppendHistogramCTZeroSample",
      "File": "storage/remote/write.go",
      "Line": 320,
      "Receiver": "timestampTracker"
    },
    "timestampTracker.Commit": {
      "Name": "timestampTracker.Commit",
      "File": "storage/remote/write.go",
      "Line": 337,
      "Receiver": "timestampTracker"
    },
    "timestampTracker.Rollback": {
      "Name": "timestampTracker.Rollback",
      "File": "storage/remote/write.go",
      "Line": 348,
      "Receiver": "timestampTracker"
    },
    "timestampTracker.SetOptions": {
      "Name": "timestampTracker.SetOptions",
      "File": "storage/remote/write.go",
      "Line": 284,
      "Receiver": "timestampTracker"
    },
    "timestampTracker.UpdateMetadata": {
      "Name": "timestampTracker.UpdateMetadata",
      "File": "storage/remote/write.go",
      "Line": 330,
      "Receiver": "timestampTracker"
    },
    "tlsHosts": {
      "Name": "tlsHosts",
      "File": "discovery/kubernetes/ingress.go",
      "Line": 189,
      "Receiver": ""
    },
    "toFloat64": {
      "Name": "toFloat64",
      "File": "web/web.go",
      "Line": 848,
      "Receiver": ""
    },
    "toHash": {
      "Name": "toHash",
      "File": "storage/remote/storage.go",
      "Line": 222,
      "Receiver": ""
    },
    "toHintLimit": {
      "Name": "toHintLimit",
      "File": "web/api/v1/api.go",
      "Line": 2139,
      "Receiver": ""
    },
    "toNormalisedLower": {
      "Name": "toNormalisedLower",
      "File": "model/labels/regexp.go",
      "Line": 861,
      "Receiver": ""
    },
    "toNormalisedLowerSlow": {
      "Name": "toNormalisedLowerSlow",
      "File": "model/labels/regexp.go",
      "Line": 876,
      "Receiver": ""
    },
    "toTimeseries": {
      "Name": "toTimeseries",
      "File": "util/fmtutil/format.go",
      "Line": 89,
      "Receiver": ""
    },
    "todoDetectFamilySwitch": {
      "Name": "todoDetectFamilySwitch",
      "File": "model/textparse/promparse_test.go",
      "Line": 56,
      "Receiver": ""
    },
    "token.String": {
      "Name": "token.String",
      "File": "model/textparse/promparse.go",
      "Line": 72,
      "Receiver": "token"
    },
    "tokenProvider.getAccessToken": {
      "Name": "tokenProvider.getAccessToken",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 308,
      "Receiver": "tokenProvider"
    },
    "tokenProvider.getToken": {
      "Name": "tokenProvider.getToken",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 333,
      "Receiver": "tokenProvider"
    },
    "tokenProvider.updateRefreshTime": {
      "Name": "tokenProvider.updateRefreshTime",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 351,
      "Receiver": "tokenProvider"
    },
    "tokenProvider.valid": {
      "Name": "tokenProvider.valid",
      "File": "storage/remote/azuread/azuread.go",
      "Line": 322,
      "Receiver": "tokenProvider"
    },
    "tooManyMatches": {
      "Name": "tooManyMatches",
      "File": "model/labels/regexp.go",
      "Line": 296,
      "Receiver": ""
    },
    "totalHPointSize": {
      "Name": "totalHPointSize",
      "File": "promql/value.go",
      "Line": 184,
      "Receiver": ""
    },
    "translateAST": {
      "Name": "translateAST",
      "File": "web/api/v1/translate_ast.go",
      "Line": 27,
      "Receiver": ""
    },
    "translateMatchers": {
      "Name": "translateMatchers",
      "File": "web/api/v1/translate_ast.go",
      "Line": 139,
      "Receiver": ""
    },
    "translationStrategyOption.ShouldAddSuffixes": {
      "Name": "translationStrategyOption.ShouldAddSuffixes",
      "File": "config/config.go",
      "Line": 1588,
      "Receiver": "translationStrategyOption"
    },
    "translationStrategyOption.ShouldEscape": {
      "Name": "translationStrategyOption.ShouldEscape",
      "File": "config/config.go",
      "Line": 1575,
      "Receiver": "translationStrategyOption"
    },
    "tree": {
      "Name": "tree",
      "File": "promql/parser/printer.go",
      "Line": 34,
      "Receiver": ""
    },
    "trimStringByBytes": {
      "Name": "trimStringByBytes",
      "File": "promql/query_logger.go",
      "Line": 162,
      "Receiver": ""
    },
    "tritonMetrics.Register": {
      "Name": "tritonMetrics.Register",
      "File": "discovery/triton/metrics.go",
      "Line": 27,
      "Receiver": "tritonMetrics"
    },
    "tritonMetrics.Unregister": {
      "Name": "tritonMetrics.Unregister",
      "File": "discovery/triton/metrics.go",
      "Line": 32,
      "Receiver": "tritonMetrics"
    },
    "trueMatcher.Matches": {
      "Name": "trueMatcher.Matches",
      "File": "model/labels/regexp.go",
      "Line": 950,
      "Receiver": "trueMatcher"
    },
    "truncateResults": {
      "Name": "truncateResults",
      "File": "web/api/v1/api.go",
      "Line": 2149,
      "Receiver": ""
    },
    "truncateToLimit": {
      "Name": "truncateToLimit",
      "File": "storage/merge.go",
      "Line": 284,
      "Receiver": ""
    },
    "tsdbOptions.ToTSDBOptions": {
      "Name": "tsdbOptions.ToTSDBOptions",
      "File": "cmd/prometheus/main.go",
      "Line": 1865,
      "Receiver": "tsdbOptions"
    },
    "txRing.add": {
      "Name": "txRing.add",
      "File": "tsdb/isolation.go",
      "Line": 253,
      "Receiver": "txRing"
    },
    "txRing.cleanupAppendIDsBelow": {
      "Name": "txRing.cleanupAppendIDsBelow",
      "File": "tsdb/isolation.go",
      "Line": 271,
      "Receiver": "txRing"
    },
    "txRing.iterator": {
      "Name": "txRing.iterator",
      "File": "tsdb/isolation.go",
      "Line": 293,
      "Receiver": "txRing"
    },
    "txRingIterator.At": {
      "Name": "txRingIterator.At",
      "File": "tsdb/isolation.go",
      "Line": 308,
      "Receiver": "txRingIterator"
    },
    "txRingIterator.Next": {
      "Name": "txRingIterator.Next",
      "File": "tsdb/isolation.go",
      "Line": 312,
      "Receiver": "txRingIterator"
    },
    "typeAndUnitLabels": {
      "Name": "typeAndUnitLabels",
      "File": "model/textparse/promparse_test.go",
      "Line": 28,
      "Receiver": ""
    },
    "typeRequiresCT": {
      "Name": "typeRequiresCT",
      "File": "model/textparse/openmetricsparse.go",
      "Line": 423,
      "Receiver": ""
    },
    "unhex": {
      "Name": "unhex",
      "File": "util/strutil/quote.go",
      "Line": 244,
      "Receiver": ""
    },
    "unixLock.Release": {
      "Name": "unixLock.Release",
      "File": "tsdb/fileutil/flock_unix.go",
      "Line": 27,
      "Receiver": "unixLock"
    },
    "unixLock.set": {
      "Name": "unixLock.set",
      "File": "tsdb/fileutil/flock_unix.go",
      "Line": 34,
      "Receiver": "unixLock"
    },
    "unknownRule.DependencyRules": {
      "Name": "unknownRule.DependencyRules",
      "File": "rules/origin_test.go",
      "Line": 52,
      "Receiver": "unknownRule"
    },
    "unknownRule.DependentRules": {
      "Name": "unknownRule.DependentRules",
      "File": "rules/origin_test.go",
      "Line": 49,
      "Receiver": "unknownRule"
    },
    "unknownRule.Eval": {
      "Name": "unknownRule.Eval",
      "File": "rules/origin_test.go",
      "Line": 34,
      "Receiver": "unknownRule"
    },
    "unknownRule.GetEvaluationDuration": {
      "Name": "unknownRule.GetEvaluationDuration",
      "File": "rules/origin_test.go",
      "Line": 44,
      "Receiver": "unknownRule"
    },
    "unknownRule.GetEvaluationTimestamp": {
      "Name": "unknownRule.GetEvaluationTimestamp",
      "File": "rules/origin_test.go",
      "Line": 46,
      "Receiver": "unknownRule"
    },
    "unknownRule.Health": {
      "Name": "unknownRule.Health",
      "File": "rules/origin_test.go",
      "Line": 42,
      "Receiver": "unknownRule"
    },
    "unknownRule.Labels": {
      "Name": "unknownRule.Labels",
      "File": "rules/origin_test.go",
      "Line": 33,
      "Receiver": "unknownRule"
    },
    "unknownRule.LastError": {
      "Name": "unknownRule.LastError",
      "File": "rules/origin_test.go",
      "Line": 40,
      "Receiver": "unknownRule"
    },
    "unknownRule.Name": {
      "Name": "unknownRule.Name",
      "File": "rules/origin_test.go",
      "Line": 32,
      "Receiver": "unknownRule"
    },
    "unknownRule.NoDependencyRules": {
      "Name": "unknownRule.NoDependencyRules",
      "File": "rules/origin_test.go",
      "Line": 51,
      "Receiver": "unknownRule"
    },
    "unknownRule.NoDependentRules": {
      "Name": "unknownRule.NoDependentRules",
      "File": "rules/origin_test.go",
      "Line": 48,
      "Receiver": "unknownRule"
    },
    "unknownRule.Query": {
      "Name": "unknownRule.Query",
      "File": "rules/origin_test.go",
      "Line": 38,
      "Receiver": "unknownRule"
    },
    "unknownRule.SetDependencyRules": {
      "Name": "unknownRule.SetDependencyRules",
      "File": "rules/origin_test.go",
      "Line": 50,
      "Receiver": "unknownRule"
    },
    "unknownRule.SetDependentRules": {
      "Name": "unknownRule.SetDependentRules",
      "File": "rules/origin_test.go",
      "Line": 47,
      "Receiver": "unknownRule"
    },
    "unknownRule.SetEvaluationDuration": {
      "Name": "unknownRule.SetEvaluationDuration",
      "File": "rules/origin_test.go",
      "Line": 43,
      "Receiver": "unknownRule"
    },
    "unknownRule.SetEvaluationTimestamp": {
      "Name": "unknownRule.SetEvaluationTimestamp",
      "File": "rules/origin_test.go",
      "Line": 45,
      "Receiver": "unknownRule"
    },
    "unknownRule.SetHealth": {
      "Name": "unknownRule.SetHealth",
      "File": "rules/origin_test.go",
      "Line": 41,
      "Receiver": "unknownRule"
    },
    "unknownRule.SetLastError": {
      "Name": "unknownRule.SetLastError",
      "File": "rules/origin_test.go",
      "Line": 39,
      "Receiver": "unknownRule"
    },
    "unknownRule.String": {
      "Name": "unknownRule.String",
      "File": "rules/origin_test.go",
      "Line": 37,
      "Receiver": "unknownRule"
    },
    "unpackHeadChunkRef": {
      "Name": "unpackHeadChunkRef",
      "File": "tsdb/head_read.go",
      "Line": 259,
      "Receiver": ""
    },
    "unquoteChar": {
      "Name": "unquoteChar",
      "File": "util/strutil/quote.go",
      "Line": 127,
      "Receiver": ""
    },
    "unreplace": {
      "Name": "unreplace",
      "File": "model/textparse/promparse.go",
      "Line": 513,
      "Receiver": ""
    },
    "unsafeMarshalFPointJSON": {
      "Name": "unsafeMarshalFPointJSON",
      "File": "web/api/v1/json_codec.go",
      "Line": 160,
      "Receiver": ""
    },
    "unsafeMarshalHPointJSON": {
      "Name": "unsafeMarshalHPointJSON",
      "File": "web/api/v1/json_codec.go",
      "Line": 174,
      "Receiver": ""
    },
    "unsafeMarshalLabelsJSON": {
      "Name": "unsafeMarshalLabelsJSON",
      "File": "web/api/v1/json_codec.go",
      "Line": 215,
      "Receiver": ""
    },
    "unsafeMarshalMatrixJSON": {
      "Name": "unsafeMarshalMatrixJSON",
      "File": "web/api/v1/json_codec.go",
      "Line": 254,
      "Receiver": ""
    },
    "unsafeMarshalSampleJSON": {
      "Name": "unsafeMarshalSampleJSON",
      "File": "web/api/v1/json_codec.go",
      "Line": 132,
      "Receiver": ""
    },
    "unsafeMarshalSeriesJSON": {
      "Name": "unsafeMarshalSeriesJSON",
      "File": "web/api/v1/json_codec.go",
      "Line": 71,
      "Receiver": ""
    },
    "unsafeMarshalVectorJSON": {
      "Name": "unsafeMarshalVectorJSON",
      "File": "web/api/v1/json_codec.go",
      "Line": 241,
      "Receiver": ""
    },
    "unsupportedChunk.Encoding": {
      "Name": "unsupportedChunk.Encoding",
      "File": "tsdb/head_test.go",
      "Line": 5570,
      "Receiver": "unsupportedChunk"
    },
    "unwrapParenExpr": {
      "Name": "unwrapParenExpr",
      "File": "promql/engine.go",
      "Line": 3714,
      "Receiver": ""
    },
    "unwrapStepInvariantExpr": {
      "Name": "unwrapStepInvariantExpr",
      "File": "promql/engine.go",
      "Line": 3724,
      "Receiver": ""
    },
    "updateGoGC": {
      "Name": "updateGoGC",
      "File": "cmd/prometheus/main.go",
      "Line": 1541,
      "Receiver": ""
    },
    "urlMustParse": {
      "Name": "urlMustParse",
      "File": "discovery/xds/client_test.go",
      "Line": 42,
      "Receiver": ""
    },
    "urlSource": {
      "Name": "urlSource",
      "File": "discovery/http/http.go",
      "Line": 220,
      "Receiver": ""
    },
    "uyuniMetrics.Register": {
      "Name": "uyuniMetrics.Register",
      "File": "discovery/uyuni/metrics.go",
      "Line": 27,
      "Receiver": "uyuniMetrics"
    },
    "uyuniMetrics.Unregister": {
      "Name": "uyuniMetrics.Unregister",
      "File": "discovery/uyuni/metrics.go",
      "Line": 32,
      "Receiver": "uyuniMetrics"
    },
    "v2RequestToWriteRequest": {
      "Name": "v2RequestToWriteRequest",
      "File": "storage/remote/queue_manager_test.go",
      "Line": 1193,
      "Receiver": ""
    },
    "valEven": {
      "Name": "valEven",
      "File": "tsdb/ooo_head_test.go",
      "Line": 31,
      "Receiver": ""
    },
    "valOdd": {
      "Name": "valOdd",
      "File": "tsdb/ooo_head_test.go",
      "Line": 32,
      "Receiver": ""
    },
    "valid2Tg": {
      "Name": "valid2Tg",
      "File": "discovery/file/file_test.go",
      "Line": 281,
      "Receiver": ""
    },
    "validTg": {
      "Name": "validTg",
      "File": "discovery/file/file_test.go",
      "Line": 249,
      "Receiver": ""
    },
    "validateAcceptScrapeProtocols": {
      "Name": "validateAcceptScrapeProtocols",
      "File": "config/config.go",
      "Line": 565,
      "Receiver": ""
    },
    "validateAuthConfigs": {
      "Name": "validateAuthConfigs",
      "File": "config/config.go",
      "Line": 1366,
      "Receiver": ""
    },
    "validateAuthParam": {
      "Name": "validateAuthParam",
      "File": "discovery/azure/azure.go",
      "Line": 133,
      "Receiver": ""
    },
    "validateExpectedAnnotationsOfType": {
      "Name": "validateExpectedAnnotationsOfType",
      "File": "promql/promqltest/test.go",
      "Line": 820,
      "Receiver": ""
    },
    "validateExpectedCmds": {
      "Name": "validateExpectedCmds",
      "File": "promql/promqltest/test.go",
      "Line": 304,
      "Receiver": ""
    },
    "validateExponentialHistogramCount": {
      "Name": "validateExponentialHistogramCount",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms_test.go",
      "Line": 591,
      "Receiver": ""
    },
    "validateHeaders": {
      "Name": "validateHeaders",
      "File": "config/config.go",
      "Line": 1404,
      "Receiver": ""
    },
    "validateHeadersForTracing": {
      "Name": "validateHeadersForTracing",
      "File": "config/config.go",
      "Line": 1392,
      "Receiver": ""
    },
    "validateHistogramCount": {
      "Name": "validateHistogramCount",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms_test.go",
      "Line": 583,
      "Receiver": ""
    },
    "validateLabelsAndMetricName": {
      "Name": "validateLabelsAndMetricName",
      "File": "storage/remote/codec.go",
      "Line": 767,
      "Receiver": ""
    },
    "validateNativeHistogramCount": {
      "Name": "validateNativeHistogramCount",
      "File": "storage/remote/otlptranslator/prometheusremotewrite/histograms_test.go",
      "Line": 602,
      "Receiver": ""
    },
    "validateOptions": {
      "Name": "validateOptions",
      "File": "tsdb/agent/db.go",
      "Line": 333,
      "Receiver": ""
    },
    "validateOpts": {
      "Name": "validateOpts",
      "File": "tsdb/db.go",
      "Line": 784,
      "Receiver": ""
    },
    "validateRecord": {
      "Name": "validateRecord",
      "File": "tsdb/wlog/live_reader.go",
      "Line": 232,
      "Receiver": ""
    },
    "valuesToSamples": {
      "Name": "valuesToSamples",
      "File": "documentation/examples/remote_storage/remote_storage_adapter/influxdb/client.go",
      "Line": 286,
      "Receiver": ""
    },
    "varInRegexTemplate": {
      "Name": "varInRegexTemplate",
      "File": "model/relabel/relabel.go",
      "Line": 366,
      "Receiver": ""
    },
    "varianceOverTime": {
      "Name": "varianceOverTime",
      "File": "promql/functions.go",
      "Line": 960,
      "Receiver": ""
    },
    "vectorByReverseValueHeap.Len": {
      "Name": "vectorByReverseValueHeap.Len",
      "File": "promql/functions.go",
      "Line": 1883,
      "Receiver": "vectorByReverseValueHeap"
    },
    "vectorByReverseValueHeap.Less": {
      "Name": "vectorByReverseValueHeap.Less",
      "File": "promql/functions.go",
      "Line": 1887,
      "Receiver": "vectorByReverseValueHeap"
    },
    "vectorByReverseValueHeap.Pop": {
      "Name": "vectorByReverseValueHeap.Pop",
      "File": "promql/functions.go",
      "Line": 1903,
      "Receiver": "vectorByReverseValueHeap"
    },
    "vectorByReverseValueHeap.Push": {
      "Name": "vectorByReverseValueHeap.Push",
      "File": "promql/functions.go",
      "Line": 1899,
      "Receiver": "vectorByReverseValueHeap"
    },
    "vectorByReverseValueHeap.Swap": {
      "Name": "vectorByReverseValueHeap.Swap",
      "File": "promql/functions.go",
      "Line": 1895,
      "Receiver": "vectorByReverseValueHeap"
    },
    "vectorByValueHeap.Len": {
      "Name": "vectorByValueHeap.Len",
      "File": "promql/functions.go",
      "Line": 1853,
      "Receiver": "vectorByValueHeap"
    },
    "vectorByValueHeap.Less": {
      "Name": "vectorByValueHeap.Less",
      "File": "promql/functions.go",
      "Line": 1857,
      "Receiver": "vectorByValueHeap"
    },
    "vectorByValueHeap.Pop": {
      "Name": "vectorByValueHeap.Pop",
      "File": "promql/functions.go",
      "Line": 1873,
      "Receiver": "vectorByValueHeap"
    },
    "vectorByValueHeap.Push": {
      "Name": "vectorByValueHeap.Push",
      "File": "promql/functions.go",
      "Line": 1869,
      "Receiver": "vectorByValueHeap"
    },
    "vectorByValueHeap.Swap": {
      "Name": "vectorByValueHeap.Swap",
      "File": "promql/functions.go",
      "Line": 1865,
      "Receiver": "vectorByValueHeap"
    },
    "vectorElemBinop": {
      "Name": "vectorElemBinop",
      "File": "promql/engine.go",
      "Line": 2911,
      "Receiver": ""
    },
    "verifyConfigReloadMetric": {
      "Name": "verifyConfigReloadMetric",
      "File": "cmd/prometheus/reload_test.go",
      "Line": 164,
      "Receiver": ""
    },
    "verifyLabelLimits": {
      "Name": "verifyLabelLimits",
      "File": "scrape/scrape.go",
      "Line": 627,
      "Receiver": ""
    },
    "verifyPresence": {
      "Name": "verifyPresence",
      "File": "discovery/manager_test.go",
      "Line": 757,
      "Receiver": ""
    },
    "verifyScrapeInterval": {
      "Name": "verifyScrapeInterval",
      "File": "cmd/prometheus/reload_test.go",
      "Line": 146,
      "Receiver": ""
    },
    "verifySyncedPresence": {
      "Name": "verifySyncedPresence",
      "File": "discovery/manager_test.go",
      "Line": 733,
      "Receiver": ""
    },
    "visitMockQueriers": {
      "Name": "visitMockQueriers",
      "File": "storage/merge_test.go",
      "Line": 1421,
      "Receiver": ""
    },
    "visitMockQueriersInGenericQuerier": {
      "Name": "visitMockQueriersInGenericQuerier",
      "File": "storage/merge_test.go",
      "Line": 1433,
      "Receiver": ""
    },
    "visitStringMatcher": {
      "Name": "visitStringMatcher",
      "File": "model/labels/regexp_test.go",
      "Line": 1338,
      "Receiver": ""
    },
    "vpsDiscovery.getService": {
      "Name": "vpsDiscovery.getService",
      "File": "discovery/ovhcloud/vps.go",
      "Line": 112,
      "Receiver": "vpsDiscovery"
    },
    "vpsDiscovery.getSource": {
      "Name": "vpsDiscovery.getSource",
      "File": "discovery/ovhcloud/vps.go",
      "Line": 116,
      "Receiver": "vpsDiscovery"
    },
    "vpsDiscovery.refresh": {
      "Name": "vpsDiscovery.refresh",
      "File": "discovery/ovhcloud/vps.go",
      "Line": 120,
      "Receiver": "vpsDiscovery"
    },
    "vultrMetrics.Register": {
      "Name": "vultrMetrics.Register",
      "File": "discovery/vultr/metrics.go",
      "Line": 27,
      "Receiver": "vultrMetrics"
    },
    "vultrMetrics.Unregister": {
      "Name": "vultrMetrics.Unregister",
      "File": "discovery/vultr/metrics.go",
      "Line": 32,
      "Receiver": "vultrMetrics"
    },
    "walSubsetProcessor.closeAndDrain": {
      "Name": "walSubsetProcessor.closeAndDrain",
      "File": "tsdb/head_wal.go",
      "Line": 564,
      "Receiver": "walSubsetProcessor"
    },
    "walSubsetProcessor.processWALSamples": {
      "Name": "walSubsetProcessor.processWALSamples",
      "File": "tsdb/head_wal.go",
      "Line": 595,
      "Receiver": "walSubsetProcessor"
    },
    "walSubsetProcessor.reuseBuf": {
      "Name": "walSubsetProcessor.reuseBuf",
      "File": "tsdb/head_wal.go",
      "Line": 573,
      "Receiver": "walSubsetProcessor"
    },
    "walSubsetProcessor.reuseHistogramBuf": {
      "Name": "walSubsetProcessor.reuseHistogramBuf",
      "File": "tsdb/head_wal.go",
      "Line": 583,
      "Receiver": "walSubsetProcessor"
    },
    "walSubsetProcessor.setup": {
      "Name": "walSubsetProcessor.setup",
      "File": "tsdb/head_wal.go",
      "Line": 558,
      "Receiver": "walSubsetProcessor"
    },
    "warningsOnlySeriesSet.At": {
      "Name": "warningsOnlySeriesSet.At",
      "File": "storage/lazy.go",
      "Line": 61,
      "Receiver": "warningsOnlySeriesSet"
    },
    "warningsOnlySeriesSet.Err": {
      "Name": "warningsOnlySeriesSet.Err",
      "File": "storage/lazy.go",
      "Line": 60,
      "Receiver": "warningsOnlySeriesSet"
    },
    "warningsOnlySeriesSet.Next": {
      "Name": "warningsOnlySeriesSet.Next",
      "File": "storage/lazy.go",
      "Line": 59,
      "Receiver": "warningsOnlySeriesSet"
    },
    "warningsOnlySeriesSet.Warnings": {
      "Name": "warningsOnlySeriesSet.Warnings",
      "File": "storage/lazy.go",
      "Line": 62,
      "Receiver": "warningsOnlySeriesSet"
    },
    "wblSubsetProcessor.closeAndDrain": {
      "Name": "wblSubsetProcessor.closeAndDrain",
      "File": "tsdb/head_wal.go",
      "Line": 983,
      "Receiver": "wblSubsetProcessor"
    },
    "wblSubsetProcessor.processWBLSamples": {
      "Name": "wblSubsetProcessor.processWBLSamples",
      "File": "tsdb/head_wal.go",
      "Line": 1013,
      "Receiver": "wblSubsetProcessor"
    },
    "wblSubsetProcessor.reuseBuf": {
      "Name": "wblSubsetProcessor.reuseBuf",
      "File": "tsdb/head_wal.go",
      "Line": 992,
      "Receiver": "wblSubsetProcessor"
    },
    "wblSubsetProcessor.reuseHistogramBuf": {
      "Name": "wblSubsetProcessor.reuseHistogramBuf",
      "File": "tsdb/head_wal.go",
      "Line": 1002,
      "Receiver": "wblSubsetProcessor"
    },
    "wblSubsetProcessor.setup": {
      "Name": "wblSubsetProcessor.setup",
      "File": "tsdb/head_wal.go",
      "Line": 977,
      "Receiver": "wblSubsetProcessor"
    },
    "windowsLock.Release": {
      "Name": "windowsLock.Release",
      "File": "tsdb/fileutil/flock_windows.go",
      "Line": 22,
      "Receiver": "windowsLock"
    },
    "withStackTracer": {
      "Name": "withStackTracer",
      "File": "web/web.go",
      "Line": 117,
      "Receiver": ""
    },
    "wlMetrics.Unregister": {
      "Name": "wlMetrics.Unregister",
      "File": "tsdb/wlog/wlog.go",
      "Line": 217,
      "Receiver": "wlMetrics"
    },
    "writeArgTable": {
      "Name": "writeArgTable",
      "File": "util/documentcli/documentcli.go",
      "Line": 122,
      "Receiver": ""
    },
    "writeBenchmark.ingestScrapes": {
      "Name": "writeBenchmark.ingestScrapes",
      "File": "cmd/promtool/tsdb.go",
      "Line": 151,
      "Receiver": "writeBenchmark"
    },
    "writeBenchmark.ingestScrapesShard": {
      "Name": "writeBenchmark.ingestScrapesShard",
      "File": "cmd/promtool/tsdb.go",
      "Line": 184,
      "Receiver": "writeBenchmark"
    },
    "writeBenchmark.startProfiling": {
      "Name": "writeBenchmark.startProfiling",
      "File": "cmd/promtool/tsdb.go",
      "Line": 232,
      "Receiver": "writeBenchmark"
    },
    "writeBenchmark.stopProfiling": {
      "Name": "writeBenchmark.stopProfiling",
      "File": "cmd/promtool/tsdb.go",
      "Line": 266,
      "Receiver": "writeBenchmark"
    },
    "writeCmdTable": {
      "Name": "writeCmdTable",
      "File": "util/documentcli/documentcli.go",
      "Line": 146,
      "Receiver": ""
    },
    "writeConfigs": {
      "Name": "writeConfigs",
      "File": "discovery/registry.go",
      "Line": 234,
      "Receiver": ""
    },
    "writeFlagTable": {
      "Name": "writeFlagTable",
      "File": "util/documentcli/documentcli.go",
      "Line": 89,
      "Receiver": ""
    },
    "writeHandler.ServeHTTP": {
      "Name": "writeHandler.ServeHTTP",
      "File": "storage/remote/write_handler.go",
      "Line": 120,
      "Receiver": "writeHandler"
    },
    "writeHandler.appendV1Histograms": {
      "Name": "writeHandler.appendV1Histograms",
      "File": "storage/remote/write_handler.go",
      "Line": 313,
      "Receiver": "writeHandler"
    },
    "writeHandler.appendV1Samples": {
      "Name": "writeHandler.appendV1Samples",
      "File": "storage/remote/write_handler.go",
      "Line": 296,
      "Receiver": "writeHandler"
    },
    "writeHandler.appendV2": {
      "Name": "writeHandler.appendV2",
      "File": "storage/remote/write_handler.go",
      "Line": 381,
      "Receiver": "writeHandler"
    },
    "writeHandler.handleHistogramZeroSample": {
      "Name": "writeHandler.handleHistogramZeroSample",
      "File": "storage/remote/write_handler.go",
      "Line": 516,
      "Receiver": "writeHandler"
    },
    "writeHandler.parseProtoMsg": {
      "Name": "writeHandler.parseProtoMsg",
      "File": "storage/remote/write_handler.go",
      "Line": 95,
      "Receiver": "writeHandler"
    },
    "writeHandler.write": {
      "Name": "writeHandler.write",
      "File": "storage/remote/write_handler.go",
      "Line": 225,
      "Receiver": "writeHandler"
    },
    "writeHandler.writeV2": {
      "Name": "writeHandler.writeV2",
      "File": "storage/remote/write_handler.go",
      "Line": 344,
      "Receiver": "writeHandler"
    },
    "writeHistogramChunkLayout": {
      "Name": "writeHistogramChunkLayout",
      "File": "tsdb/chunkenc/histogram_meta.go",
      "Line": 22,
      "Receiver": ""
    },
    "writeIntoFile": {
      "Name": "writeIntoFile",
      "File": "scrape/manager_test.go",
      "Line": 1114,
      "Receiver": ""
    },
    "writeJobQueue.assertInvariants": {
      "Name": "writeJobQueue.assertInvariants",
      "File": "tsdb/chunks/queue_test.go",
      "Line": 26,
      "Receiver": "writeJobQueue"
    },
    "writeJobQueue.close": {
      "Name": "writeJobQueue.close",
      "File": "tsdb/chunks/queue.go",
      "Line": 54,
      "Receiver": "writeJobQueue"
    },
    "writeJobQueue.length": {
      "Name": "writeJobQueue.length",
      "File": "tsdb/chunks/queue.go",
      "Line": 136,
      "Receiver": "writeJobQueue"
    },
    "writeJobQueue.pop": {
      "Name": "writeJobQueue.pop",
      "File": "tsdb/chunks/queue.go",
      "Line": 105,
      "Receiver": "writeJobQueue"
    },
    "writeJobQueue.push": {
      "Name": "writeJobQueue.push",
      "File": "tsdb/chunks/queue.go",
      "Line": 67,
      "Receiver": "writeJobQueue"
    },
    "writeMetaFile": {
      "Name": "writeMetaFile",
      "File": "tsdb/block.go",
      "Line": 265,
      "Receiver": ""
    },
    "writeMetadataToMock.AppendWatcherMetadata": {
      "Name": "writeMetadataToMock.AppendWatcherMetadata",
      "File": "storage/remote/metadata_watcher_test.go",
      "Line": 60,
      "Receiver": "writeMetadataToMock"
    },
    "writeSubcommands": {
      "Name": "writeSubcommands",
      "File": "util/documentcli/documentcli.go",
      "Line": 228,
      "Receiver": ""
    },
    "writeTable": {
      "Name": "writeTable",
      "File": "util/documentcli/documentcli.go",
      "Line": 165,
      "Receiver": ""
    },
    "writeTestFile": {
      "Name": "writeTestFile",
      "File": "promql/promqltest/test_migrate_test.go",
      "Line": 24,
      "Receiver": ""
    },
    "writeToMock.Append": {
      "Name": "writeToMock.Append",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 76,
      "Receiver": "writeToMock"
    },
    "writeToMock.AppendExemplars": {
      "Name": "writeToMock.AppendExemplars",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 82,
      "Receiver": "writeToMock"
    },
    "writeToMock.AppendFloatHistograms": {
      "Name": "writeToMock.AppendFloatHistograms",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 94,
      "Receiver": "writeToMock"
    },
    "writeToMock.AppendHistograms": {
      "Name": "writeToMock.AppendHistograms",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 88,
      "Receiver": "writeToMock"
    },
    "writeToMock.SeriesReset": {
      "Name": "writeToMock.SeriesReset",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 115,
      "Receiver": "writeToMock"
    },
    "writeToMock.StoreMetadata": {
      "Name": "writeToMock.StoreMetadata",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 105,
      "Receiver": "writeToMock"
    },
    "writeToMock.StoreSeries": {
      "Name": "writeToMock.StoreSeries",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 100,
      "Receiver": "writeToMock"
    },
    "writeToMock.UpdateSeriesSegment": {
      "Name": "writeToMock.UpdateSeriesSegment",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 107,
      "Receiver": "writeToMock"
    },
    "writeToMock.checkNumSeries": {
      "Name": "writeToMock.checkNumSeries",
      "File": "tsdb/wlog/watcher_test.go",
      "Line": 127,
      "Receiver": "writeToMock"
    },
    "writer.Reset": {
      "Name": "writer.Reset",
      "File": "tsdb/fileutil/direct_io.go",
      "Line": 36,
      "Receiver": "writer"
    },
    "xdsMetrics.Register": {
      "Name": "xdsMetrics.Register",
      "File": "discovery/xds/metrics.go",
      "Line": 66,
      "Receiver": "xdsMetrics"
    },
    "xdsMetrics.Unregister": {
      "Name": "xdsMetrics.Unregister",
      "File": "discovery/xds/metrics.go",
      "Line": 71,
      "Receiver": "xdsMetrics"
    },
    "xorAppender.Append": {
      "Name": "xorAppender.Append",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 159,
      "Receiver": "xorAppender"
    },
    "xorAppender.AppendFloatHistogram": {
      "Name": "xorAppender.AppendFloatHistogram",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 230,
      "Receiver": "xorAppender"
    },
    "xorAppender.AppendHistogram": {
      "Name": "xorAppender.AppendHistogram",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 226,
      "Receiver": "xorAppender"
    },
    "xorAppender.writeVDelta": {
      "Name": "xorAppender.writeVDelta",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 222,
      "Receiver": "xorAppender"
    },
    "xorIterator.At": {
      "Name": "xorIterator.At",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 262,
      "Receiver": "xorIterator"
    },
    "xorIterator.AtFloatHistogram": {
      "Name": "xorIterator.AtFloatHistogram",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 270,
      "Receiver": "xorIterator"
    },
    "xorIterator.AtHistogram": {
      "Name": "xorIterator.AtHistogram",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 266,
      "Receiver": "xorIterator"
    },
    "xorIterator.AtT": {
      "Name": "xorIterator.AtT",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 274,
      "Receiver": "xorIterator"
    },
    "xorIterator.Err": {
      "Name": "xorIterator.Err",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 278,
      "Receiver": "xorIterator"
    },
    "xorIterator.Next": {
      "Name": "xorIterator.Next",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 297,
      "Receiver": "xorIterator"
    },
    "xorIterator.Reset": {
      "Name": "xorIterator.Reset",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 282,
      "Receiver": "xorIterator"
    },
    "xorIterator.Seek": {
      "Name": "xorIterator.Seek",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 249,
      "Receiver": "xorIterator"
    },
    "xorIterator.readValue": {
      "Name": "xorIterator.readValue",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 394,
      "Receiver": "xorIterator"
    },
    "xorRead": {
      "Name": "xorRead",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 444,
      "Receiver": ""
    },
    "xorWrite": {
      "Name": "xorWrite",
      "File": "tsdb/chunkenc/xor.go",
      "Line": 404,
      "Receiver": ""
    },
    "yoloBytes": {
      "Name": "yoloBytes",
      "File": "model/textparse/promparse.go",
      "Line": 525,
      "Receiver": ""
    },
    "yoloString": {
      "Name": "yoloString",
      "File": "tsdb/index/index.go",
      "Line": 2073,
      "Receiver": ""
    },
    "yyErrorMessage": {
      "Name": "yyErrorMessage",
      "File": "promql/parser/generated_parser.y.go",
      "Line": 819,
      "Receiver": ""
    },
    "yyNewParser": {
      "Name": "yyNewParser",
      "File": "promql/parser/generated_parser.y.go",
      "Line": 795,
      "Receiver": ""
    },
    "yyParse": {
      "Name": "yyParse",
      "File": "promql/parser/generated_parser.y.go",
      "Line": 918,
      "Receiver": ""
    },
    "yyParserImpl.Lookahead": {
      "Name": "yyParserImpl.Lookahead",
      "File": "promql/parser/generated_parser.y.go",
      "Line": 791,
      "Receiver": "yyParserImpl"
    },
    "yyParserImpl.Parse": {
      "Name": "yyParserImpl.Parse",
      "File": "promql/parser/generated_parser.y.go",
      "Line": 922,
      "Receiver": "yyParserImpl"
    },
    "yyStatname": {
      "Name": "yyStatname",
      "File": "promql/parser/generated_parser.y.go",
      "Line": 810,
      "Receiver": ""
    },
    "yyTokname": {
      "Name": "yyTokname",
      "File": "promql/parser/generated_parser.y.go",
      "Line": 801,
      "Receiver": ""
    },
    "yylex1": {
      "Name": "yylex1",
      "File": "promql/parser/generated_parser.y.go",
      "Line": 883,
      "Receiver": ""
    },
    "zeroConfig": {
      "Name": "zeroConfig",
      "File": "scrape/scrape.go",
      "Line": 2210,
      "Receiver": ""
    },
    "zeroOrOneCharacterStringMatcher.Matches": {
      "Name": "zeroOrOneCharacterStringMatcher.Matches",
      "File": "model/labels/regexp.go",
      "Line": 929,
      "Receiver": "zeroOrOneCharacterStringMatcher"
    }
  },
  "Calls": {
    "?.At": [
      "b.at"
    ],
    "?.Err": [
      "p.Err"
    ],
    "?.Get": [
      "p.pointers.Put",
      "p.items.Get"
    ],
    "?.Next": [
      "it.h.Next",
      "it.h.At"
    ],
    "?.Put": [
      "p.pointers.Get",
      "new",
      "p.items.Put"
    ],
    "?.Seek": [
      "it.h.IsEmpty",
      "it.h.At",
      "?.Seek",
      "it.h.Winner",
      "it.h.Fix"
    ],
    "?.String": [
      "sb.WriteRune",
      "fmt.Fprintf",
      "sb.String"
    ],
    "?.at": [
      "BC",
      "getBound",
      "IsCustomBucketsSchema"
    ],
    "?.strippedAt": [
      "BC"
    ],
    "API.InstallCodec": [
      "append"
    ],
    "API.Register": [
      "api.respond",
      "w.WriteHeader",
      "wrap",
      "wrapAgent",
      "r.Put",
      "http.HandlerFunc",
      "httputil.SetCORS",
      "api.respondError",
      "errors.New",
      "r.Get",
      "setUnavailStatusOnTSDBNotReady",
      "f",
      "result.finalizer",
      "r.Options",
      "r.Post",
      "r.Del",
      "r.FormValue",
      "api.ready"
    ],
    "API.alertmanagers": [
      "api.alertmanagerRetriever",
      "r.Context",
      "?.DroppedAlertmanagers",
      "make",
      "len",
      "url.String",
      "?.Alertmanagers"
    ],
    "API.alerts": [
      "alertingRule.ActiveAlerts",
      "?.AlertingRules",
      "api.rulesRetriever",
      "r.Context",
      "append",
      "rulesAlertsToAPIAlerts"
    ],
    "API.cleanTombstones": [
      "api.db.CleanTombstones",
      "errors.New"
    ],
    "API.deleteSeries": [
      "r.Context",
      "errors.New",
      "r.ParseForm",
      "fmt.Errorf",
      "invalidParamError",
      "timestamp.FromTime",
      "len",
      "parseTimeParam",
      "parser.ParseMetricSelector",
      "api.db.Delete"
    ],
    "API.dropSeries": [
      "errors.New"
    ],
    "API.formatQuery": [
      "parser.ParseExpr",
      "r.FormValue",
      "invalidParamError",
      "expr.Pretty"
    ],
    "API.labelNames": [
      "parseMatchersParam",
      "toHintLimit",
      "make",
      "errors.New",
      "parseTimeParam",
      "q.LabelNames",
      "warnings.Merge",
      "append",
      "warnings.Add",
      "q.Close",
      "api.Queryable.Querier",
      "timestamp.FromTime",
      "returnAPIError",
      "invalidParamError",
      "r.FormValue",
      "len",
      "r.Context",
      "slices.Sort",
      "parseLimitParam"
    ],
    "API.labelValues": [
      "q.Close",
      "errors.New",
      "warnings.Merge",
      "append",
      "r.Context",
      "parseTimeParam",
      "parseMatchersParam",
      "api.Queryable.Querier",
      "invalidParamError",
      "toHintLimit",
      "timestamp.FromTime",
      "len",
      "strings.HasPrefix",
      "model.UnescapeName",
      "model.LabelName",
      "fmt.Errorf",
      "make",
      "q.LabelValues",
      "slices.Sort",
      "warnings.Add",
      "route.Param",
      "label.IsValid",
      "parseLimitParam",
      "r.FormValue"
    ],
    "API.metricMetadata": [
      "r.FormValue",
      "errors.New",
      "?.TargetsActive",
      "r.Context",
      "len",
      "append",
      "strconv.Atoi",
      "api.targetRetriever",
      "t.ListMetadata",
      "t.GetMetadata"
    ],
    "API.negotiateCodec": [
      "defaultCodec.CanEncode",
      "fmt.Errorf",
      "defaultCodec.ContentType",
      "goautoneg.ParseAccept",
      "req.Header.Get",
      "?.Satisfies",
      "codec.ContentType",
      "codec.CanEncode"
    ],
    "API.notifications": [
      "api.notificationsGetter",
      "httputil.SetCORS",
      "api.respond"
    ],
    "API.notificationsSSE": [
      "err.Error",
      "fmt.Fprintf",
      "r.Context",
      "w.Header",
      "w.WriteHeader",
      "api.notificationsSub",
      "unsubscribe",
      "http.Error",
      "flusher.Flush",
      "json.Marshal",
      "?.Done",
      "httputil.SetCORS",
      "?.Set"
    ],
    "API.otlpWrite": [
      "api.otlpWriteHandler.ServeHTTP",
      "http.Error"
    ],
    "API.parseQuery": [
      "parser.ParseExpr",
      "r.FormValue",
      "invalidParamError",
      "translateAST"
    ],
    "API.query": [
      "?.Add",
      "extractQueryOpts",
      "api.QueryEngine.NewInstantQuery",
      "qry.Close",
      "parseLimitParam",
      "parseTimeParam",
      "parseDuration",
      "context.WithDeadline",
      "cancel",
      "returnAPIError",
      "truncateResults",
      "warnings.Add",
      "r.FormValue",
      "r.Context",
      "sr",
      "qry.Stats",
      "qry.Exec",
      "res.Value.Type",
      "invalidParamError",
      "api.now",
      "httputil.ContextFromRequest",
      "errors.New"
    ],
    "API.queryExemplars": [
      "end.Before",
      "errors.New",
      "eq.Select",
      "timestamp.FromTime",
      "api.ExemplarQueryable.ExemplarQuerier",
      "parseTimeParam",
      "invalidParamError",
      "parser.ParseExpr",
      "r.FormValue",
      "parser.ExtractSelectors",
      "len",
      "r.Context",
      "returnAPIError"
    ],
    "API.queryRange": [
      "qry.Stats",
      "res.Value.Type",
      "r.FormValue",
      "parseDuration",
      "context.WithTimeout",
      "cancel",
      "qry.Exec",
      "returnAPIError",
      "warnings.Add",
      "sr",
      "invalidParamError",
      "parseTime",
      "r.Context",
      "httputil.ContextFromRequest",
      "qry.Close",
      "truncateResults",
      "parseLimitParam",
      "errors.New",
      "end.Sub",
      "extractQueryOpts",
      "end.Before",
      "api.QueryEngine.NewRangeQuery"
    ],
    "API.remoteRead": [
      "api.remoteReadHandler.ServeHTTP",
      "http.Error"
    ],
    "API.remoteWrite": [
      "api.remoteWriteHandler.ServeHTTP",
      "http.Error"
    ],
    "API.respond": [
      "warnings.AsStrings",
      "api.negotiateCodec",
      "w.Header",
      "codec.ContentType",
      "?.String",
      "w.WriteHeader",
      "api.respondError",
      "codec.Encode",
      "api.logger.Error",
      "http.Error",
      "err.Error",
      "?.Set",
      "w.Write"
    ],
    "API.respondError": [
      "?.Set",
      "w.WriteHeader",
      "apiErr.err.Error",
      "http.Error",
      "err.Error",
      "w.Write",
      "json.Marshal",
      "api.logger.Error",
      "w.Header"
    ],
    "API.rules": [
      "grp.File",
      "?.Seconds",
      "rule.ActiveAlerts",
      "rule.Health",
      "rule.GetEvaluationDuration",
      "append",
      "?.Get",
      "make",
      "parseMatchersParam",
      "api.rulesRetriever",
      "r.Context",
      "rr.LastError",
      "rule.Labels",
      "rule.Annotations",
      "fmt.Errorf",
      "?.Error",
      "?.String",
      "queryFormToSet",
      "r.URL.Query",
      "grp.Name",
      "grp.Interval",
      "rule.State",
      "rule.KeepFiringFor",
      "r.ParseForm",
      "parseExcludeAlerts",
      "rule.Name",
      "rule.Query",
      "rule.GetEvaluationTimestamp",
      "rr.Name",
      "parseListRulesPaginationRequest",
      "rulesAlertsToAPIAlerts",
      "?.RuleGroups",
      "strings.ToLower",
      "invalidParamError",
      "getRuleGroupNextToken",
      "grp.Limit",
      "grp.GetEvaluationTime",
      "grp.GetLastEvaluation",
      "grp.Rules",
      "len",
      "int",
      "rule.HoldDuration"
    ],
    "API.scrapePools": [
      "?.ScrapePools",
      "api.scrapePoolsRetriever",
      "r.Context",
      "sort.Strings"
    ],
    "API.series": [
      "set.At",
      "warnings.Add",
      "api.Queryable.Querier",
      "ctx.Err",
      "set.Err",
      "r.ParseForm",
      "q.Select",
      "parseLimitParam",
      "invalidParamError",
      "timestamp.FromTime",
      "returnAPIError",
      "toHintLimit",
      "storage.NewMergeSeriesSet",
      "fmt.Errorf",
      "errors.New",
      "set.Warnings",
      "set.Next",
      "r.FormValue",
      "parseTimeParam",
      "parseMatchersParam",
      "q.Close",
      "append",
      "?.Labels",
      "r.Context",
      "len"
    ],
    "API.serveConfig": [
      "?.String",
      "api.config"
    ],
    "API.serveRuntimeInfo": [
      "api.runtimeInfo"
    ],
    "API.serveTSDBStatus": [
      "fmt.Errorf",
      "math.NaN",
      "r.FormValue",
      "api.db.Stats",
      "api.gatherer.Gather",
      "int64",
      "m.Gauge.GetValue",
      "TSDBStatsFromIndexStats",
      "strconv.Atoi",
      "errors.New"
    ],
    "API.serveWALReplayStatus": [
      "httputil.SetCORS",
      "api.db.WALReplayStatus",
      "api.respondError",
      "api.respond"
    ],
    "API.snapshot": [
      "invalidParamError",
      "fmt.Errorf",
      "filepath.Join",
      "?.Format",
      "?.UTC",
      "errors.New",
      "r.FormValue",
      "strconv.ParseBool",
      "rand.Int63",
      "api.db.Snapshot",
      "fmt.Sprintf",
      "time.Now",
      "os.MkdirAll"
    ],
    "API.targetMetadata": [
      "strconv.Atoi",
      "invalidParamError",
      "len",
      "r.Context",
      "t.Labels",
      "r.FormValue",
      "errors.New",
      "parser.ParseMetricSelector",
      "labels.EmptyLabels",
      "labels.NewBuilder",
      "?.TargetsActive",
      "t.GetMetadata",
      "api.targetRetriever",
      "matchLabels",
      "t.ListMetadata",
      "append"
    ],
    "API.targets": [
      "len",
      "target.LastError",
      "?.Seconds",
      "target.DiscoveredLabels",
      "?.Get",
      "lastErr.Error",
      "getGlobalURL",
      "make",
      "append",
      "target.LastScrapeDuration",
      "target.GetValue",
      "strings.ToLower",
      "?.TargetsActive",
      "getSortedPools",
      "target.URL",
      "?.Error",
      "fmt.Errorf",
      "target.LastScrape",
      "slices.Sort",
      "r.URL.Query",
      "labels.EmptyLabels",
      "api.targetRetriever",
      "target.Labels",
      "labels.NewBuilder",
      "r.Context",
      "?.String",
      "globalURL.String",
      "target.Health",
      "?.TargetsDroppedCounts",
      "?.TargetsDropped"
    ],
    "Action.UnmarshalYAML": [
      "unmarshal",
      "Action",
      "strings.ToLower",
      "fmt.Errorf"
    ],
    "ActiveQueryTracker.Close": [
      "fmt.Errorf",
      "tracker.closer.Close"
    ],
    "ActiveQueryTracker.Delete": [
      "copy",
      "strings.Repeat"
    ],
    "ActiveQueryTracker.Insert": [
      "newJSONEntry",
      "copy",
      "ctx.Done",
      "ctx.Err"
    ],
    "Adapter.Run": [
      "a.manager.Run",
      "a.manager.StartCustomProvider",
      "a.runCustomSD"
    ],
    "Adapter.refreshTargetGroups": [
      "a.logger.With",
      "generateTargetGroups",
      "reflect.DeepEqual",
      "a.writeOutput",
      "?.Error"
    ],
    "Adapter.runCustomSD": [
      "a.manager.SyncCh",
      "ctx.Done",
      "a.refreshTargetGroups"
    ],
    "Adapter.writeOutput": [
      "tmpfile.Write",
      "os.Rename",
      "tmpfile.Name",
      "mapToArray",
      "json.MarshalIndent",
      "filepath.Split",
      "os.CreateTemp",
      "tmpfile.Close"
    ],
    "AddMetricFamilyToProtobuf": [
      "uint64",
      "len",
      "buffer.Write",
      "proto.Marshal",
      "make",
      "binary.PutUvarint"
    ],
    "AggregateExpr.Pretty": [
      "e.String",
      "e.getAggOpStr",
      "e.Op.IsAggregatorWithParam",
      "fmt.Sprintf",
      "e.Param.Pretty",
      "e.Expr.Pretty",
      "indent",
      "needsSplit"
    ],
    "AggregateExpr.ShortString": [
      "node.getAggOpStr"
    ],
    "AggregateExpr.String": [
      "node.getAggOpStr",
      "node.Op.IsAggregatorWithParam",
      "fmt.Sprintf"
    ],
    "AggregateExpr.getAggOpStr": [
      "node.Op.String",
      "fmt.Sprintf",
      "joinLabels",
      "len"
    ],
    "Alert.Hash": [
      "a.Labels.Hash"
    ],
    "Alert.Name": [
      "a.Labels.Get"
    ],
    "Alert.Resolved": [
      "time.Now",
      "a.ResolvedAt"
    ],
    "Alert.ResolvedAt": [
      "a.EndsAt.After",
      "a.EndsAt.IsZero"
    ],
    "Alert.String": [
      "fmt.Sprintf",
      "a.Name",
      "a.Hash",
      "a.Resolved"
    ],
    "Alert.needsSending": [
      "a.ResolvedAt.After",
      "?.Before",
      "a.LastSentAt.Add"
    ],
    "AlertState.String": [
      "panic",
      "fmt.Errorf"
    ],
    "AlertingConfig.SetDirectory": [
      "c.SetDirectory"
    ],
    "AlertingConfig.UnmarshalYAML": [
      "errors.New",
      "unmarshal"
    ],
    "AlertingRule.ActiveAlerts": [
      "r.currentAlerts",
      "a.ResolvedAt.IsZero",
      "append"
    ],
    "AlertingRule.ActiveAlertsCount": [
      "r.activeMtx.Unlock",
      "len",
      "r.activeMtx.Lock"
    ],
    "AlertingRule.DependencyRules": [
      "r.dependenciesMutex.RLock",
      "r.dependenciesMutex.RUnlock"
    ],
    "AlertingRule.DependentRules": [
      "r.dependenciesMutex.RLock",
      "r.dependenciesMutex.RUnlock"
    ],
    "AlertingRule.Eval": [
      "a.KeepFiringSince.IsZero",
      "r.restored.Load",
      "make",
      "template.AlertTemplateData",
      "lb.Set",
      "r.activeMtx.Unlock",
      "delete",
      "a.ActiveAt.Unix",
      "NewOriginContext",
      "labels.EmptyLabels",
      "sb.Reset",
      "sb.Add",
      "expand",
      "lbs.Hash",
      "r.sample",
      "query",
      "r.vector.String",
      "len",
      "fmt.Sprintf",
      "r.annotations.Range",
      "r.forStateSample",
      "NewRuleDetail",
      "r.Name",
      "tmpl.Expand",
      "lb.Reset",
      "lb.Labels",
      "r.activeMtx.Lock",
      "ts.Sub",
      "fmt.Errorf",
      "ts.Add",
      "labels.NewBuilder",
      "smpl.Metric.Map",
      "template.QueryFunc",
      "timestamp.FromTime",
      "sb.Labels",
      "errors.New",
      "float64",
      "labels.NewScratchBuilder",
      "strings.Join",
      "append",
      "model.Time",
      "template.NewTemplateExpander",
      "r.labels.Range",
      "r.logger.Warn",
      "lb.Del",
      "a.ResolvedAt.IsZero"
    ],
    "AlertingRule.ForEachActiveAlert": [
      "r.activeMtx.Lock",
      "r.activeMtx.Unlock",
      "f"
    ],
    "AlertingRule.GetEvaluationDuration": [
      "r.evaluationDuration.Load"
    ],
    "AlertingRule.GetEvaluationTimestamp": [
      "r.evaluationTimestamp.Load"
    ],
    "AlertingRule.Health": [
      "RuleHealth",
      "r.health.String"
    ],
    "AlertingRule.LastError": [
      "r.lastError.Load"
    ],
    "AlertingRule.NoDependencyRules": [
      "r.dependenciesMutex.RLock",
      "r.dependenciesMutex.RUnlock",
      "len"
    ],
    "AlertingRule.NoDependentRules": [
      "r.dependenciesMutex.RLock",
      "r.dependenciesMutex.RUnlock",
      "len"
    ],
    "AlertingRule.QueryForStateSeries": [
      "append",
      "q.Select",
      "sset.Err",
      "r.forStateSample",
      "time.Now",
      "smpl.Metric.Range",
      "labels.NewMatcher",
      "panic"
    ],
    "AlertingRule.Restored": [
      "r.restored.Load"
    ],
    "AlertingRule.SetDependencyRules": [
      "r.dependenciesMutex.Unlock",
      "make",
      "len",
      "copy",
      "r.dependenciesMutex.Lock"
    ],
    "AlertingRule.SetDependentRules": [
      "make",
      "len",
      "copy",
      "r.dependenciesMutex.Lock",
      "r.dependenciesMutex.Unlock"
    ],
    "AlertingRule.SetEvaluationDuration": [
      "r.evaluationDuration.Store"
    ],
    "AlertingRule.SetEvaluationTimestamp": [
      "r.evaluationTimestamp.Store"
    ],
    "AlertingRule.SetHealth": [
      "r.health.Store",
      "string"
    ],
    "AlertingRule.SetLastError": [
      "r.lastError.Store"
    ],
    "AlertingRule.SetRestored": [
      "r.restored.Store"
    ],
    "AlertingRule.State": [
      "r.activeMtx.Lock",
      "r.activeMtx.Unlock"
    ],
    "AlertingRule.String": [
      "string",
      "r.vector.String",
      "model.Duration",
      "r.labels.Map",
      "r.annotations.Map",
      "yaml.Marshal",
      "fmt.Sprintf",
      "err.Error"
    ],
    "AlertingRule.currentAlerts": [
      "make",
      "len",
      "append",
      "r.activeMtx.Lock",
      "r.activeMtx.Unlock"
    ],
    "AlertingRule.forStateSample": [
      "lb.Set",
      "lb.Labels",
      "timestamp.FromTime",
      "labels.NewBuilder",
      "alert.Labels.Range"
    ],
    "AlertingRule.sample": [
      "lb.Set",
      "alert.State.String",
      "lb.Labels",
      "timestamp.FromTime",
      "labels.NewBuilder",
      "alert.Labels.Range"
    ],
    "AlertingRule.sendAlerts": [
      "append",
      "notifyFunc",
      "r.vector.String",
      "r.ForEachActiveAlert",
      "alert.needsSending",
      "ts.Add",
      "alert.Labels.Copy"
    ],
    "AlertmanagerAPIVersion.UnmarshalYAML": [
      "slices.Contains",
      "fmt.Errorf",
      "AlertmanagerAPIVersion",
      "unmarshal"
    ],
    "AlertmanagerConfig.MarshalYAML": [
      "discovery.MarshalYAMLWithInlineConfigs"
    ],
    "AlertmanagerConfig.SetDirectory": [
      "c.ServiceDiscoveryConfigs.SetDirectory",
      "c.HTTPClientConfig.SetDirectory"
    ],
    "AlertmanagerConfig.UnmarshalYAML": [
      "checkStaticTargets",
      "discovery.UnmarshalYAMLWithInlineConfigs",
      "c.HTTPClientConfig.Validate",
      "errors.New",
      "len"
    ],
    "AlertmanagerConfigs.ToMap": [
      "fmt.Sprintf",
      "make"
    ],
    "AlertmanagerFromGroup": [
      "relabel.ProcessBuilder",
      "config.CheckTargetAddress",
      "lb.Reset",
      "lb.Set",
      "postPath",
      "lb.Labels",
      "append",
      "lb.Get",
      "model.LabelValue",
      "labels.NewBuilder",
      "labels.EmptyLabels",
      "string"
    ],
    "AllSortedPostings": [
      "index.AllPostingsKey",
      "reader.Postings",
      "index.ErrPostings",
      "reader.SortedPostings"
    ],
    "Annotations.Add": [
      "err.Error"
    ],
    "Annotations.AsErrors": [
      "make",
      "len",
      "append"
    ],
    "Annotations.AsStrings": [
      "make",
      "errors.As",
      "errors.Is",
      "len",
      "append",
      "err.Error",
      "fmt.Sprintf"
    ],
    "Annotations.CountWarningsAndInfo": [
      "errors.Is"
    ],
    "AzureADConfig.UnmarshalYAML": [
      "unmarshal",
      "c.Validate"
    ],
    "AzureADConfig.Validate": [
      "errors.New",
      "uuid.Parse",
      "regexp.MatchString"
    ],
    "AzureAdTestSuite.BeforeTest": [
      "new"
    ],
    "AzureAdTestSuite.TestAzureAdRoundTripper": [
      "testTokenExpiry",
      "?.Return",
      "ad.mockCredential.On",
      "newTokenProvider",
      "cli.Do",
      "ad.NotEmpty",
      "?.NoError",
      "http.NewRequest",
      "ad.NotNil",
      "ad.Require",
      "promhttp.RoundTripperFunc",
      "strings.NewReader",
      "origReq.Header.Get",
      "ad.Equal"
    ],
    "BenchmarkAddExemplar": [
      "b.Run",
      "fmt.Sprintf",
      "require.NoError",
      "labels.FromStrings",
      "NewCircularExemplarStorage",
      "int64",
      "b.StartTimer",
      "strconv.Itoa",
      "es.AddExemplar",
      "float64",
      "b.StopTimer"
    ],
    "BenchmarkAlertingRuleAtomicField": [
      "close",
      "b.RunParallel",
      "pb.Next",
      "rule.SetEvaluationTimestamp",
      "time.Now",
      "NewAlertingRule",
      "labels.EmptyLabels",
      "make",
      "b.ReportAllocs",
      "rule.GetEvaluationTimestamp"
    ],
    "BenchmarkAppendable": [
      "NewHistogramChunk",
      "b.Fatal",
      "app.AppendHistogram",
      "hApp.appendable",
      "b.Fail",
      "append",
      "int64",
      "Chunk",
      "c.Appender"
    ],
    "BenchmarkBufferedSeriesIterator": [
      "NewBufferIterator",
      "newFakeSeriesIterator",
      "int64",
      "b.ReportAllocs",
      "b.ResetTimer",
      "it.Next",
      "b.SetBytes",
      "require.NoError",
      "it.Err"
    ],
    "BenchmarkBuildTimeSeries": [
      "filterTsLimit",
      "createProtoTimeseriesWithOld",
      "buildTimeSeries",
      "require.NotNil"
    ],
    "BenchmarkBuildV2WriteRequest": [
      "writev2.NewSymbolTable",
      "populateV2TimeSeries",
      "symbolTable.Symbols",
      "float64",
      "make",
      "b.Run",
      "bench",
      "promslog.NewNopLogger",
      "compression.NewSyncEncodeBuffer",
      "len",
      "b.Fatal",
      "buildV2WriteRequest",
      "b.ReportMetric",
      "createDummyTimeSeries"
    ],
    "BenchmarkBuildWriteRequest": [
      "bench",
      "promslog.NewNopLogger",
      "make",
      "len",
      "proto.NewBuffer",
      "populateTimeSeries",
      "createDummyTimeSeries",
      "b.Run",
      "compression.NewSyncEncodeBuffer",
      "buildWriteRequest",
      "b.Fatal",
      "b.ReportMetric",
      "float64"
    ],
    "BenchmarkBuilder": [
      "l.Len",
      "NewBuilder",
      "EmptyLabels",
      "builder.Reset",
      "builder.Set",
      "builder.Labels",
      "require.Equal"
    ],
    "BenchmarkCheckDuplicates": [
      "require.Empty",
      "b.ResetTimer",
      "checkDuplicates",
      "rulefmt.ParseFile"
    ],
    "BenchmarkChunkWriteQueue_addJob": [
      "fmt.Sprintf",
      "newChunkWriteQueue",
      "b.Cleanup",
      "close",
      "q.get",
      "start.Wait",
      "b.ResetTimer",
      "start.Done",
      "make",
      "start.Add",
      "ChunkDiskMapperRef",
      "q.addJob",
      "done.Done",
      "done.Wait",
      "done.Add",
      "b.Run",
      "HeadSeriesRef"
    ],
    "BenchmarkCompaction": [
      "fmt.Sprintf",
      "createBlock",
      "NewLeveledCompactor",
      "b.Run",
      "append",
      "promslog.NewNopLogger",
      "c.Compact",
      "require.NoError",
      "block.Close",
      "block.Dir",
      "len",
      "b.TempDir",
      "make",
      "OpenBlock",
      "genSeries",
      "context.Background",
      "b.ResetTimer",
      "b.ReportAllocs"
    ],
    "BenchmarkCompactionFromHead": [
      "b.TempDir",
      "b.Run",
      "NewHead",
      "h.Appender",
      "app.Append",
      "filepath.Join",
      "fmt.Sprintf",
      "app.Commit",
      "h.Close",
      "DefaultHeadOptions",
      "context.Background",
      "strconv.Itoa",
      "b.ResetTimer",
      "b.ReportAllocs",
      "require.NoError",
      "labels.FromStrings",
      "createBlockFromHead"
    ],
    "BenchmarkCompactionFromOOOHead": [
      "strconv.Itoa",
      "context.TODO",
      "filepath.Join",
      "b.Run",
      "NewHead",
      "context.Background",
      "require.NoError",
      "float64",
      "b.TempDir",
      "fmt.Sprintf",
      "opts.OutOfOrderTimeWindow.Store",
      "NewOOOCompactionHead",
      "DefaultHeadOptions",
      "labels.FromStrings",
      "b.ReportAllocs",
      "app.Commit",
      "b.ResetTimer",
      "createBlockFromOOOHead",
      "h.Close",
      "int64",
      "h.Appender",
      "app.Append"
    ],
    "BenchmarkConvertBucketLayout": [
      "buckets.SetOffset",
      "fmt.Sprintf",
      "convertBucketsLayout",
      "?.AsRaw",
      "buckets.Offset",
      "pmetric.NewExponentialHistogramDataPointBuckets",
      "?.Append",
      "buckets.BucketCounts",
      "b.Run"
    ],
    "BenchmarkConvertHistogramBucketsToNHCBLayout": [
      "append",
      "uint64",
      "b.Run",
      "fmt.Sprintf",
      "getBucketOffset",
      "convertBucketsLayout",
      "int32"
    ],
    "BenchmarkCreateSeries": [
      "context.Background",
      "labelsForTest",
      "b.ResetTimer",
      "app.getOrCreate",
      "make",
      "labels.New",
      "createTestAgentDB",
      "DefaultOptions",
      "s.Close",
      "s.Appender",
      "s.Labels",
      "newTestHead",
      "b.Cleanup",
      "h.getOrCreate",
      "?.Hash",
      "b.ResetTimer",
      "genSeries",
      "require.NoError",
      "h.Close",
      "b.ReportAllocs"
    ],
    "BenchmarkCreatedTimestampPromProto": [
      "createTestProtoBuf",
      "p.Type",
      "p.Series",
      "require.True",
      "p.Next",
      "p.Histogram",
      "b.ResetTimer",
      "labels.NewSymbolTable",
      "NewProtobufParser",
      "string",
      "?.Bytes",
      "b.Fatal",
      "b.Run",
      "b.ReportAllocs",
      "p.CreatedTimestamp"
    ],
    "BenchmarkCuttingHeadHistogramChunks": [
      "labels.FromStrings",
      "a.AppendHistogram",
      "histogram.GenerateBigTestHistograms",
      "newTestHead",
      "h.Close",
      "h.Appender",
      "b.ResetTimer",
      "require.NoError",
      "context.Background",
      "?.UnixMilli",
      "time.Now"
    ],
    "BenchmarkDecode": [
      "Encode",
      "NewConcurrentEncodeBuffer",
      "fmt.Sprintf",
      "require.NoError",
      "b.ReportAllocs",
      "b.ResetTimer",
      "NewSyncDecodeBuffer",
      "Decode",
      "Types",
      "b.Run"
    ],
    "BenchmarkEncode": [
      "float64",
      "Types",
      "b.Run",
      "b.ResetTimer",
      "Encode",
      "require.NoError",
      "fmt.Sprintf",
      "b.ReportAllocs",
      "NewSyncEncodeBuffer",
      "b.ReportMetric",
      "len"
    ],
    "BenchmarkFastRegexMatcher": [
      "NewFastRegexMatcher",
      "require.NoError",
      "b.ResetTimer",
      "m.MatchString",
      "generateRandomValues",
      "b.Run",
      "getTestNameFromRegexp"
    ],
    "BenchmarkFloatHistogramAllBucketIterator": [
      "rand.New",
      "rand.NewSource",
      "createRandomFloatHistogram",
      "b.ReportAllocs",
      "b.ResetTimer",
      "fh.AllBucketIterator",
      "it.Next"
    ],
    "BenchmarkFloatHistogramDetectReset": [
      "createRandomFloatHistogram",
      "b.ReportAllocs",
      "b.ResetTimer",
      "fh.DetectReset",
      "rand.New",
      "rand.NewSource"
    ],
    "BenchmarkHeadAppender_Append_Commit_ExistingSeries": [
      "h.Appender",
      "app.Append",
      "s.Labels",
      "app.Commit",
      "b.ReportAllocs",
      "b.Run",
      "int64",
      "float64",
      "appendSamples",
      "h.Close",
      "context.Background",
      "require.NoError",
      "b.ResetTimer",
      "genSeries",
      "b.Cleanup",
      "fmt.Sprintf",
      "newTestHead"
    ],
    "BenchmarkHeadChunkQuerier": [
      "querier.Select",
      "it.Next",
      "it.At",
      "openTestDB",
      "db.Appender",
      "app.Append",
      "time.Second.Milliseconds",
      "q.Close",
      "m.Chunk.NumSamples",
      "ss.Err",
      "db.Close",
      "fmt.Sprintf",
      "b.ReportAllocs",
      "ss.Next",
      "ss.At",
      "require.NoError",
      "context.Background",
      "cs.Iterator",
      "b.ResetTimer",
      "labels.MustNewMatcher",
      "labels.FromStrings",
      "app.Commit",
      "int64",
      "float64",
      "db.ChunkQuerier"
    ],
    "BenchmarkHeadLabelValuesWithMatchers": [
      "int64",
      "head.Close",
      "fmt.Sprintf",
      "head.indexRange",
      "newTestHead",
      "context.Background",
      "head.Appender",
      "app.Append",
      "labels.MustNewMatcher",
      "require.Len",
      "require.NoError",
      "labels.FromStrings",
      "app.Commit",
      "b.ReportAllocs",
      "headIdxReader.LabelValues",
      "b.Cleanup",
      "b.ResetTimer"
    ],
    "BenchmarkHeadQuerier": [
      "context.Background",
      "b.ReportAllocs",
      "querier.Select",
      "it.Next",
      "labels.MustNewMatcher",
      "cs.Iterator",
      "ss.Err",
      "db.Close",
      "labels.FromStrings",
      "time.Second.Milliseconds",
      "db.Querier",
      "q.Close",
      "it.At",
      "require.NoError",
      "db.Appender",
      "fmt.Sprintf",
      "b.ResetTimer",
      "ss.At",
      "ss.Next",
      "openTestDB",
      "app.Commit",
      "app.Append",
      "int64",
      "float64"
    ],
    "BenchmarkHeadStripeSeriesCreate": [
      "b.TempDir",
      "NewHead",
      "require.NoError",
      "strconv.Itoa",
      "DefaultHeadOptions",
      "h.Close",
      "h.getOrCreate",
      "uint64",
      "labels.FromStrings"
    ],
    "BenchmarkHeadStripeSeriesCreateParallel": [
      "DefaultHeadOptions",
      "NewHead",
      "b.RunParallel",
      "pb.Next",
      "count.Inc",
      "labels.FromStrings",
      "b.TempDir",
      "require.NoError",
      "h.Close",
      "h.getOrCreate",
      "uint64",
      "strconv.Itoa",
      "int"
    ],
    "BenchmarkHeadStripeSeriesCreate_PreCreationFailure": [
      "DefaultHeadOptions",
      "NewHead",
      "require.NoError",
      "h.getOrCreate",
      "labels.FromStrings",
      "b.TempDir",
      "h.Close",
      "uint64",
      "strconv.Itoa"
    ],
    "BenchmarkHead_Truncate": [
      "int64",
      "panic",
      "prepare",
      "newTestHead",
      "b.Cleanup",
      "strconv.Itoa",
      "mtx.Unlock",
      "?.Hash",
      "int",
      "h.Truncate",
      "require.Equal",
      "require.NoError",
      "mtx.RUnlock",
      "mtx.Lock",
      "labels.FromStrings",
      "fmt.Sprintf",
      "mtx.RLock",
      "make",
      "append",
      "b.Run",
      "h.NumSeries",
      "h.Close",
      "h.initTime",
      "itoa",
      "h.getOrCreate",
      "b.ResetTimer"
    ],
    "BenchmarkHead_WalCommit": [
      "h.Close",
      "w.Close",
      "context.Background",
      "app.Append",
      "float64",
      "labels.FromStrings",
      "rand.Int",
      "fmt.Sprintf",
      "appendSamples",
      "app.Commit",
      "s.Labels",
      "uint64",
      "app.AppendHistogram",
      "strconv.Itoa",
      "b.ResetTimer",
      "genSeries",
      "require.NoError",
      "b.Run",
      "newTestHead",
      "h.Appender",
      "b.StartTimer",
      "rand.Float64",
      "app.AppendExemplar",
      "b.ReportAllocs",
      "b.StopTimer",
      "b.Cleanup"
    ],
    "BenchmarkHistogramValidation": [
      "h.Validate",
      "GenerateBigTestHistograms",
      "b.ResetTimer",
      "require.NoError"
    ],
    "BenchmarkInfoFunction": [
      "b.ResetTimer",
      "require.NoError",
      "testStorage.Close",
      "promql.NewEngine",
      "b.Run",
      "context.Background",
      "teststorage.New",
      "generateInfoFunctionTestSeries",
      "b.StartTimer",
      "time.Unix",
      "start.Add",
      "b.StopTimer",
      "engine.NewRangeQuery",
      "qry.Exec",
      "b.ReportAllocs"
    ],
    "BenchmarkIntersect": [
      "t.Run",
      "consumePostings",
      "Intersect",
      "len",
      "append",
      "storage.SeriesRef",
      "bench.ResetTimer",
      "bench.ReportAllocs",
      "newListPostings",
      "bench.Fatal",
      "make"
    ],
    "BenchmarkIsolation": [
      "make",
      "wg.Add",
      "b.ResetTimer",
      "close",
      "b.Run",
      "strconv.Itoa",
      "newIsolation",
      "wg.Wait",
      "wg.Done",
      "iso.newAppendID",
      "iso.closeAppend"
    ],
    "BenchmarkIsolationWithState": [
      "newIsolation",
      "make",
      "wg.Add",
      "iso.closeAppend",
      "wg.Wait",
      "b.Run",
      "strconv.Itoa",
      "wg.Done",
      "iso.newAppendID",
      "iso.State",
      "s.Close",
      "b.ResetTimer",
      "close"
    ],
    "BenchmarkLabelValuesWithMatchers": [
      "fmt.Sprintf",
      "createBlock",
      "require.NoError",
      "OpenBlock",
      "block.Close",
      "context.Background",
      "append",
      "labels.FromStrings",
      "b.ReportAllocs",
      "require.NotEmpty",
      "b.ResetTimer",
      "indexReader.LabelValues",
      "require.Len",
      "storage.NewListSeries",
      "sequenceFiles",
      "chunkDir",
      "b.TempDir",
      "block.Index",
      "indexReader.Close",
      "labels.MustNewMatcher"
    ],
    "BenchmarkLabels_Compare": [
      "b.Run",
      "b.ResetTimer",
      "Compare"
    ],
    "BenchmarkLabels_Copy": [
      "NewForBenchmark",
      "l.Copy"
    ],
    "BenchmarkLabels_Equals": [
      "b.Run",
      "b.ResetTimer",
      "Equal"
    ],
    "BenchmarkLabels_Get": [
      "labels.Get",
      "make",
      "strings.Repeat",
      "b.Run",
      "fmt.Sprintf",
      "NewForBenchmark",
      "string",
      "byte",
      "labels.Has"
    ],
    "BenchmarkLabels_Hash": [
      "EmptyLabels",
      "b.Set",
      "fmt.Sprintf",
      "lbl.Grow",
      "FromStrings",
      "b.ReportAllocs",
      "b.ResetTimer",
      "len",
      "lbl.WriteString",
      "NewBuilder",
      "lbl.Cap",
      "lbl.String",
      "b.Run",
      "tcase.lbls.Hash",
      "b.Labels"
    ],
    "BenchmarkListPostings": [
      "p.Next",
      "p.At",
      "require.NotZero",
      "make",
      "storage.SeriesRef",
      "b.Run",
      "fmt.Sprintf",
      "NewListPostings"
    ],
    "BenchmarkLoadRealWLs": [
      "b.TempDir",
      "wbl.Close",
      "DefaultHeadOptions",
      "b.StopTimer",
      "require.NoError",
      "b.StartTimer",
      "NewHead",
      "os.RemoveAll",
      "b.SkipNow",
      "fileutil.CopyDirs",
      "wal.Close",
      "b.Cleanup",
      "h.Init",
      "os.Getenv",
      "wlog.New",
      "filepath.Join"
    ],
    "BenchmarkLoadWLs": [
      "strconv.Itoa",
      "builder.Labels",
      "len",
      "chunks.NewChunkDiskMapper",
      "labels.FromStrings",
      "b.TempDir",
      "labels.NewBuilder",
      "newMemSeries",
      "fmt.Sprintf",
      "labels.EmptyLabels",
      "int64",
      "chunkenc.NewPool",
      "float64",
      "require.NoError",
      "append",
      "mmappedChunksDir",
      "s.append",
      "b.ResetTimer",
      "s.cutNewHeadChunk",
      "DefaultHeadOptions",
      "opts.OutOfOrderCapMax.Store",
      "NewHead",
      "wal.Close",
      "b.Run",
      "wlog.New",
      "builder.Set",
      "b.StopTimer",
      "h.Init",
      "int",
      "math.RoundToEven",
      "make",
      "chunks.HeadSeriesRef",
      "populateTestWL",
      "s.mmapChunks",
      "chunkDiskMapper.Close",
      "wbl.Close"
    ],
    "BenchmarkMatchType_String": [
      "?.String",
      "MatchType",
      "int"
    ],
    "BenchmarkMatcher_String": [
      "append",
      "rand.Shuffle",
      "len",
      "b.Run",
      "m.String",
      "MustNewMatcher"
    ],
    "BenchmarkMemPostings_Delete": [
      "mtx.RUnlock",
      "wg.Done",
      "close",
      "make",
      "itoa",
      "labels.FromStrings",
      "panic",
      "context.Background",
      "strconv.Itoa",
      "append",
      "p.Add",
      "storage.SeriesRef",
      "mtx.Lock",
      "b.Run",
      "wg.Add",
      "?.Next",
      "p.Postings",
      "b.Cleanup",
      "wg.Wait",
      "mtx.Unlock",
      "?.Range",
      "fmt.Sprintf",
      "rand.Intn",
      "b.ResetTimer",
      "mtx.RLock",
      "NewMemPostings",
      "p.Delete"
    ],
    "BenchmarkMemPostings_PostingsForLabelMatching": [
      "context.Background",
      "p.Next",
      "p.At",
      "regexp.MustCompile",
      "len",
      "labels.FromStrings",
      "strconv.Itoa",
      "mp.PostingsForLabelMatching",
      "b.Run",
      "NewMemPostings",
      "require.NoError",
      "?.Next",
      "slowRegexpString",
      "b.Logf",
      "mp.Add",
      "ExpandPostings",
      "fmt.Sprintf",
      "storage.SeriesRef"
    ],
    "BenchmarkMemPostings_ensureOrder": [
      "p.EnsureOrder",
      "b.Run",
      "NewUnorderedMemPostings",
      "strconv.Itoa",
      "make",
      "storage.SeriesRef",
      "rand.Uint64",
      "b.ResetTimer"
    ],
    "BenchmarkMemoizedSeriesIterator": [
      "b.SetBytes",
      "b.ReportAllocs",
      "it.Err",
      "it.Next",
      "require.NoError",
      "NewMemoizedIterator",
      "newFakeSeriesIterator",
      "int64",
      "b.ResetTimer"
    ],
    "BenchmarkMerge": [
      "make",
      "len",
      "Merge",
      "append",
      "storage.SeriesRef",
      "newListPostings",
      "t.Run",
      "strconv.Itoa",
      "context.Background",
      "consumePostings",
      "bench.Fatal"
    ],
    "BenchmarkMergeLabelValuesWithLimit": [
      "fmt.Sprintf",
      "newGenericQuerierFrom",
      "b.Run",
      "context.Background",
      "mergeQuerier.LabelValues",
      "append"
    ],
    "BenchmarkMergeSeriesSet": [
      "append",
      "makeSeries",
      "b.Run",
      "fmt.Sprintf",
      "benchmarkDrain",
      "makeMergeSeriesSet"
    ],
    "BenchmarkMergedSeriesSet": [
      "sort.Sort",
      "labels.Slice",
      "b.ResetTimer",
      "ms.Next",
      "ms.Err",
      "storage.NewMergeSeriesSet",
      "b.Run",
      "append",
      "make",
      "fmt.Sprintf",
      "filepath.Join",
      "storage.NewListSeries",
      "newMockSeriesSet",
      "sel",
      "require.Len",
      "labels.ReadLabels",
      "require.NoError"
    ],
    "BenchmarkMergedStringIter": [
      "NewMergedStringIter",
      "it.Next",
      "it.At",
      "require.NoError",
      "b.ReportAllocs",
      "make",
      "fmt.Sprintf",
      "index.NewStringListIter",
      "require.NotNil",
      "it.Err"
    ],
    "BenchmarkNativeHistograms": [
      "b.ResetTimer",
      "b.Run",
      "promqltest.NewTestEngineWithOpts",
      "qry.Exec",
      "teststorage.New",
      "testStorage.Appender",
      "app.Commit",
      "start.Add",
      "ng.NewRangeQuery",
      "context.Background",
      "generateNativeHistogramSeries",
      "b.Fatal",
      "time.Unix",
      "b.ReportAllocs",
      "testStorage.Close",
      "context.TODO"
    ],
    "BenchmarkNativeHistogramsCustomBuckets": [
      "app.Commit",
      "b.ResetTimer",
      "context.Background",
      "ng.NewRangeQuery",
      "qry.Exec",
      "b.Fatal",
      "start.Add",
      "promqltest.NewTestEngineWithOpts",
      "b.ReportAllocs",
      "testStorage.Close",
      "context.TODO",
      "generateNativeHistogramCustomBucketsSeries",
      "b.Run",
      "teststorage.New",
      "testStorage.Appender",
      "time.Unix"
    ],
    "BenchmarkNewCompressionHandler_MaliciousAcceptEncoding": [
      "httptest.NewRecorder",
      "httptest.NewRequest",
      "req.Header.Set",
      "strings.Repeat",
      "b.ReportAllocs",
      "b.ResetTimer",
      "newCompressedResponseWriter"
    ],
    "BenchmarkNewMatcher": [
      "b.Run",
      "b.ReportAllocs",
      "b.ResetTimer",
      "NewMatcher"
    ],
    "BenchmarkNoMergeSeriesSet_100_100": [
      "makeSeries",
      "benchmarkDrain",
      "NewMockSeriesSet"
    ],
    "BenchmarkOTLP": [
      "b.ReportAllocs",
      "require.Equal",
      "dp.SetStartTimestamp",
      "pcommon.NewTimestampFromTime",
      "m.MoveTo",
      "bytes.NewReader",
      "NewOTLPWriteHandler",
      "time.Duration",
      "m.SetEmptyHistogram",
      "dp.SetSum",
      "runtime.GOMAXPROCS",
      "pmetric.NewMetrics",
      "sum.DataPoints",
      "dp.SetScale",
      "append",
      "strconv.Itoa",
      "hist.DataPoints",
      "?.ScopeMetrics",
      "rec.Result",
      "make",
      "?.FromRaw",
      "pmetricotlp.NewExportRequestFromMetrics",
      "data",
      "b.Skip",
      "req.Header.Set",
      "dp.SetTimestamp",
      "?.PutStr",
      "rand.IntN",
      "slog.New",
      "dp.Positive",
      "rand.Shuffle",
      "mode.data",
      "httptest.NewRecorder",
      "sum.SetAggregationTemporality",
      "dps.AppendEmpty",
      "dp.SetCount",
      "?.BucketCounts",
      "len",
      "http.NewRequest",
      "time.Date",
      "float64",
      "m.SetEmptyExponentialHistogram",
      "uint64",
      "b.ResetTimer",
      "handler.ServeHTTP",
      "ex.DataPoints",
      "?.Metrics",
      "ex.MarshalProto",
      "start.Add",
      "dp.SetDoubleValue",
      "ex.SetAggregationTemporality",
      "dp.BucketCounts",
      "?.AppendEmpty",
      "md.ResourceMetrics",
      "slog.NewTextHandler",
      "pmetric.NewMetric",
      "m.SetEmptySum",
      "hist.SetAggregationTemporality",
      "require.NoError",
      "b.FailNow",
      "dp.Attributes",
      "new",
      "ms.AppendEmpty",
      "b.Run",
      "sampleCount",
      "dp.ExplicitBounds",
      "fmt.Sprintf",
      "m.SetName"
    ],
    "BenchmarkOpenBlock": [
      "b.TempDir",
      "createBlock",
      "genSeries",
      "b.Run",
      "OpenBlock",
      "require.NoError",
      "block.Close"
    ],
    "BenchmarkOptimizeEqualOrPrefixStringMatchers": [
      "randStringsWithSuffix",
      "require.IsType",
      "optimizeEqualOrPrefixStringMatchers",
      "unoptimized.Matches",
      "append",
      "strings.Join",
      "optimized.Matches",
      "rand.New",
      "time.Now",
      "b.Logf",
      "syntax.Parse",
      "require.NoError",
      "stringMatcherFromRegexpInternal",
      "rand.NewSource",
      "?.UnixNano",
      "fmt.Sprintf",
      "randStrings",
      "b.Run"
    ],
    "BenchmarkParseOMText": [
      "readTestdataFile",
      "benchParse"
    ],
    "BenchmarkParseOpenMetricsNHCB": [
      "benchParse",
      "readTestdataFile",
      "b.Run",
      "fmt.Sprintf"
    ],
    "BenchmarkParsePromProto": [
      "?.Bytes",
      "createTestProtoBuf",
      "benchParse"
    ],
    "BenchmarkParsePromText": [
      "readTestdataFile",
      "b.Run",
      "fmt.Sprintf",
      "strings.HasPrefix",
      "benchExpFmt",
      "benchParse"
    ],
    "BenchmarkParsePromText_NoMeta": [
      "benchParse",
      "readTestdataFile",
      "b.Run",
      "fmt.Sprintf",
      "strings.HasPrefix",
      "benchExpFmt"
    ],
    "BenchmarkParser": [
      "fmt.Sprintf",
      "b.Run",
      "b.ReportAllocs",
      "parser.ParseExpr"
    ],
    "BenchmarkPostingStatsMaxHep": [
      "stats.push",
      "stats.get",
      "b.ResetTimer",
      "stats.init",
      "uint64"
    ],
    "BenchmarkPostings_Stats": [
      "p.Add",
      "labels.FromStrings",
      "createPostingsLabelValues",
      "b.ResetTimer",
      "p.Stats",
      "NewMemPostings",
      "fmt.Sprintf"
    ],
    "BenchmarkPrometheusConverter_FromMetrics": [
      "converter.FromMetrics",
      "converter.Metadata",
      "fmt.Sprintf",
      "createExportRequest",
      "NewPrometheusConverter",
      "context.Background",
      "payload.Metrics",
      "require.NoError",
      "require.Empty",
      "require.NotNil",
      "b.Run",
      "b.ResetTimer",
      "converter.TimeSeries"
    ],
    "BenchmarkQuerier": [
      "NewHead",
      "h.Close",
      "h.Appender",
      "app.Commit",
      "b.Run",
      "ir.Close",
      "DefaultHeadOptions",
      "b.TempDir",
      "benchmarkPostingsForMatchers",
      "OpenBlock",
      "block.Close",
      "block.Index",
      "labels.FromStrings",
      "createBlockFromHead",
      "strconv.Itoa",
      "require.NoError",
      "app.Append",
      "h.Index",
      "benchmarkLabelValuesWithMatchers",
      "context.Background",
      "addSeries"
    ],
    "BenchmarkQuerierSelect": [
      "createHeadForBenchmarkSelect",
      "b.Fatal",
      "b.Run",
      "b.TempDir",
      "createBlockFromHead",
      "app.Append",
      "labels.FromStrings",
      "fmt.Sprintf",
      "int64",
      "benchmarkSelect",
      "OpenBlock",
      "require.NoError",
      "block.Close"
    ],
    "BenchmarkQuerierSelectWithOutOfOrder": [
      "labels.FromStrings",
      "fmt.Sprintf",
      "app.Append",
      "int64",
      "b.Fatal",
      "b.Run",
      "benchmarkSelect",
      "createHeadForBenchmarkSelect"
    ],
    "BenchmarkQueries": [
      "NewRangeHead",
      "createHeadWithOOOSamples",
      "strconv.Atoi",
      "b.TempDir",
      "genSeries",
      "labels.New",
      "OpenBlock",
      "append",
      "make",
      "createBlock",
      "head.Close",
      "storage.NewMergeQuerier",
      "fmt.Sprintf",
      "strconv.Itoa",
      "storage.NewListSeries",
      "benchQuery",
      "string",
      "s.Labels",
      "NewBlockQuerier",
      "createHead",
      "b.Run",
      "require.NoError",
      "head.oooIso.TrackReadAfter",
      "len",
      "labels.MustNewMatcher",
      "q.querier.Close",
      "?.Range",
      "NewHeadAndOOOQuerier",
      "int"
    ],
    "BenchmarkQueryIterator": [
      "append",
      "populateSeries",
      "make",
      "NewBlockQuerier",
      "benchQuery",
      "fmt.Sprintf",
      "b.TempDir",
      "int64",
      "s.Labels",
      "require.NoError",
      "sq.Close",
      "b.Run",
      "len",
      "genSeries",
      "OpenBlock",
      "?.Map",
      "createBlock",
      "block.Close",
      "storage.NewMergeQuerier",
      "labels.MustNewMatcher"
    ],
    "BenchmarkQuerySeek": [
      "append",
      "s.Labels",
      "ss.Warnings",
      "it.Err",
      "genSeries",
      "populateSeries",
      "?.Iterator",
      "ss.At",
      "block.Close",
      "storage.NewMergeQuerier",
      "ss.Next",
      "fmt.Sprintf",
      "b.Run",
      "NewBlockQuerier",
      "it.Seek",
      "sq.Close",
      "b.ResetTimer",
      "labels.MustNewMatcher",
      "?.Map",
      "createBlock",
      "require.NoError",
      "sq.Select",
      "ss.Err",
      "len",
      "make",
      "b.ReportAllocs",
      "context.Background",
      "require.Empty",
      "b.TempDir",
      "int64",
      "OpenBlock"
    ],
    "BenchmarkRangeQuery": [
      "stor.Close",
      "context.Background",
      "teststorage.New",
      "promqltest.NewTestEngineWithOpts",
      "b.Run",
      "b.ReportAllocs",
      "engine.NewRangeQuery",
      "qry.Exec",
      "fmt.Sprintf",
      "int64",
      "qry.Close",
      "stor.DisableCompactions",
      "setupRangeQueryTestData",
      "b.Fatal",
      "rangeQueryCases",
      "time.Unix"
    ],
    "BenchmarkReader_ShardedPostings": [
      "append",
      "labels.FromStrings",
      "ir.Postings",
      "uint64",
      "ir.ShardedPostings",
      "context.Background",
      "fmt.Sprintf",
      "createFileReader",
      "b.ResetTimer",
      "require.NoError"
    ],
    "BenchmarkRelabel": [
      "Process",
      "labels.FromStrings",
      "yaml.UnmarshalStrict",
      "require.NoError",
      "b.Run"
    ],
    "BenchmarkRemoteWriteHandler": [
      "promslog.NewNopLogger",
      "httptest.NewRecorder",
      "require.NoError",
      "http.NewRequest",
      "bytes.NewReader",
      "prompb.FromIntHistogram",
      "append",
      "NewWriteHandler",
      "b.ResetTimer",
      "handler.ServeHTTP",
      "strings.Repeat",
      "strconv.Itoa",
      "buildWriteRequest"
    ],
    "BenchmarkRemoteWriteOOOSamples": [
      "db.Head",
      "buildWriteRequest",
      "require.Equal",
      "?.NumSeries",
      "tsdb.Open",
      "b.Cleanup",
      "httptest.NewRecorder",
      "handler.ServeHTTP",
      "time.Minute.Milliseconds",
      "NewWriteHandler",
      "tsdb.DefaultOptions",
      "promslog.NewNopLogger",
      "genSeriesWithSample",
      "bytes.NewReader",
      "uint64",
      "int64",
      "b.Skip",
      "b.TempDir",
      "append",
      "http.NewRequest",
      "b.ResetTimer",
      "require.NoError",
      "db.Close"
    ],
    "BenchmarkResizeExemplars": [
      "fmt.Sprintf",
      "b.StopTimer",
      "NewCircularExemplarStorage",
      "strconv.Itoa",
      "es.AddExemplar",
      "es.Resize",
      "b.Run",
      "require.NoError",
      "int",
      "float64",
      "labels.FromStrings",
      "int64",
      "b.StartTimer"
    ],
    "BenchmarkResolvePodRef": [
      "cache.NewIndexer",
      "b.ReportAllocs",
      "b.ResetTimer",
      "e.resolvePodRef",
      "require.Nil"
    ],
    "BenchmarkRespond": [
      "append",
      "b.ReportAllocs",
      "api.respond",
      "http.NewRequest",
      "require.NoError",
      "float64",
      "int64",
      "labels.FromStrings",
      "fmt.Sprintf",
      "labels.EmptyLabels",
      "b.Run",
      "b.ResetTimer",
      "api.InstallCodec"
    ],
    "BenchmarkRuleDependencyController_AnalyseRules": [
      "NewManager",
      "promslog.NewNopLogger",
      "labels.EmptyLabels",
      "require.Empty",
      "ruleManager.opts.RuleDependencyController.AnalyseRules",
      "teststorage.New",
      "storage.Close",
      "context.Background",
      "ruleManager.LoadGroups",
      "require.Len",
      "b.ResetTimer",
      "b.Cleanup"
    ],
    "BenchmarkRuleEval": [
      "context.TODO",
      "EngineQueryFunc",
      "b.Cleanup",
      "storage.Close",
      "testEngine",
      "b.Run",
      "NewRecordingRule",
      "b.ResetTimer",
      "rule.Eval",
      "require.NoError",
      "setUpRuleEvalTest"
    ],
    "BenchmarkSampleSend": [
      "model.Duration",
      "b.StopTimer",
      "testDefaultQueueConfig",
      "newTestQueueManager",
      "m.Start",
      "createTimeseries",
      "b.Run",
      "string",
      "m.StoreSeries",
      "m.SeriesReset",
      "NewNopWriteClient",
      "b.ResetTimer",
      "m.Append",
      "m.UpdateSeriesSegment",
      "m.Stop"
    ],
    "BenchmarkScrapeLoopAppend": [
      "b.Fatal",
      "readTextParseTestMetrics",
      "b.Run",
      "simpleTestScrapeLoop",
      "sl.appender",
      "b.ResetTimer",
      "sl.append",
      "makeTestGauges",
      "fmt.Sprintf",
      "promTextToProto",
      "b.ReportAllocs",
      "ts.Add"
    ],
    "BenchmarkSetMatcher": [
      "sq.Close",
      "len",
      "?.Map",
      "NewBlockQuerier",
      "b.ResetTimer",
      "b.TempDir",
      "s.Labels",
      "createBlock",
      "populateSeries",
      "sq.Select",
      "fmt.Sprintf",
      "OpenBlock",
      "block.Close",
      "make",
      "append",
      "require.NoError",
      "ss.Err",
      "genSeries",
      "labels.MustNewMatcher",
      "ss.Next",
      "require.Empty",
      "ss.Warnings",
      "int64",
      "storage.NewMergeQuerier",
      "b.ReportAllocs",
      "context.Background",
      "b.Run"
    ],
    "BenchmarkSize": [
      "b.Run",
      "lb.Range",
      "SizeOfLabels",
      "lb.ByteSize",
      "New"
    ],
    "BenchmarkStartup": [
      "wlog.NewWatcherMetrics",
      "newEWMARate",
      "m.watcher.SetMetrics",
      "os.Getenv",
      "append",
      "sort.Ints",
      "newQueueManagerMetrics",
      "newHighestTimestampMetric",
      "m.watcher.SetStartTime",
      "m.watcher.Run",
      "b.Skip",
      "strconv.Atoi",
      "dirent.Name",
      "NewQueueManager",
      "testDefaultQueueConfig",
      "NewTestBlockedWriteClient",
      "newPool",
      "os.ReadDir",
      "path.Join",
      "require.NoError",
      "promslog.New",
      "labels.EmptyLabels",
      "timestamp.Time",
      "len"
    ],
    "BenchmarkStoreSeries": [
      "newEWMARate",
      "newPool",
      "newHighestTimestampMetric",
      "m.StoreSeries",
      "relabel.MustNewRegexp",
      "createTimeseries",
      "NewTestWriteClient",
      "NewQueueManager",
      "b.Run",
      "b.TempDir",
      "newQueueManagerMetrics",
      "labels.EmptyLabels"
    ],
    "BenchmarkStreamReadEndpoint": [
      "NewChunkedReader",
      "recorder.Result",
      "stream.NextProto",
      "errors.Is",
      "http.NewRequest",
      "httptest.NewRecorder",
      "require.NoError",
      "ToQuery",
      "b.ReportAllocs",
      "api.ServeHTTP",
      "append",
      "require.Len",
      "b.Cleanup",
      "labels.NewMatcher",
      "bytes.NewBuffer",
      "require.Equal",
      "promqltest.LoadedStorage",
      "proto.Marshal",
      "b.ResetTimer",
      "snappy.Encode",
      "store.Close",
      "NewReadHandler"
    ],
    "BenchmarkString": [
      "New",
      "ls.String"
    ],
    "BenchmarkSyncPoolNewPointer": [
      "make",
      "pool.Get",
      "pool.Put",
      "b.ResetTimer"
    ],
    "BenchmarkSyncPoolPointer": [
      "b.ResetTimer",
      "make",
      "pool.Get",
      "pool.Put"
    ],
    "BenchmarkSyncPoolValue": [
      "make",
      "pool.Get",
      "pool.Put",
      "b.ResetTimer"
    ],
    "BenchmarkTargetScraperGzip": [
      "len",
      "fmt.Sprintf",
      "w.Header",
      "b.Run",
      "context.Background",
      "require.NoError",
      "gzip.NewWriter",
      "fmt.Fprintf",
      "gw.Close",
      "?.Set",
      "server.Close",
      "buf.Bytes",
      "r.URL.Query",
      "url.Parse",
      "config_util.NewClientFromConfig",
      "ts.scrape",
      "http.HandlerFunc",
      "strconv.Itoa",
      "w.Write",
      "w.WriteHeader",
      "httptest.NewServer",
      "panic",
      "labels.FromStrings",
      "b.ResetTimer"
    ],
    "BenchmarkTargetsFromGroup": [
      "loadConfiguration",
      "b.Run",
      "fmt.Sprintf",
      "labels.NewBuilder",
      "len",
      "b.Fatalf",
      "model.LabelValue",
      "model.LabelName",
      "append",
      "labels.EmptyLabels",
      "TargetsFromGroup"
    ],
    "BenchmarkToNormalizedLower": [
      "make",
      "benchCase",
      "len",
      "strings.Repeat",
      "strings.ToUpper",
      "panic",
      "b.Run",
      "fmt.Sprintf",
      "b.ResetTimer",
      "toNormalisedLower"
    ],
    "BenchmarkWAL_HistogramEncoding": [
      "enc.HistogramSamples",
      "len",
      "b.ReportMetric",
      "chunks.HeadSeriesRef",
      "append",
      "uint64",
      "uint32",
      "delete",
      "enc.Series",
      "enc.Samples",
      "fmt.Sprintf",
      "make",
      "int64",
      "b.Run",
      "labels.FromMap",
      "float64",
      "maker.make",
      "enc.CustomBucketsHistogramSamples"
    ],
    "BenchmarkWAL_Log": [
      "b.Run",
      "New",
      "require.NoError",
      "w.Log",
      "b.SetBytes",
      "b.StopTimer",
      "compression.Types",
      "fmt.Sprintf",
      "b.TempDir",
      "w.Close"
    ],
    "BenchmarkWAL_LogBatched": [
      "w.Close",
      "b.StopTimer",
      "fmt.Sprintf",
      "b.Run",
      "b.TempDir",
      "New",
      "require.NoError",
      "b.SetBytes",
      "append",
      "len",
      "compression.Types",
      "w.Log"
    ],
    "BenchmarkXORAppender": [
      "int64",
      "r.Intn",
      "float64",
      "r.Float64",
      "rand.New",
      "rand.NewSource",
      "b.Run",
      "benchmarkAppender"
    ],
    "BenchmarkXORIterator": [
      "benchmarkIterator"
    ],
    "BenchmarkXorRead": [
      "require.NoError",
      "int64",
      "b.ReportAllocs",
      "c.Iterator",
      "c.Appender",
      "app.Append",
      "float64",
      "b.ResetTimer",
      "it.Next",
      "it.At",
      "NewXORChunk"
    ],
    "BenchmarkZeroOrOneCharacterStringMatcher": [
      "b.Fatalf",
      "strings.Repeat",
      "b.ResetTimer",
      "len",
      "matcher.Matches"
    ],
    "BenchmarkZeropoolPool": [
      "zeropool.New",
      "make",
      "pool.Get",
      "pool.Put",
      "b.ResetTimer"
    ],
    "BeyondSizeRetention": [
      "len",
      "make",
      "?.Size",
      "db.Head",
      "block.Size",
      "db.metrics.sizeRetentionCount.Inc"
    ],
    "BeyondTimeRetention": [
      "len",
      "make",
      "?.Meta",
      "block.Meta",
      "db.metrics.timeRetentionCount.Inc"
    ],
    "BinaryExpr.PositionRange": [
      "mergeRanges"
    ],
    "BinaryExpr.Pretty": [
      "needsSplit",
      "e.String",
      "e.getMatchingStr",
      "fmt.Sprintf",
      "e.LHS.Pretty",
      "e.RHS.Pretty",
      "indent"
    ],
    "BinaryExpr.ShortString": [
      "fmt.Sprintf",
      "node.returnBool",
      "node.getMatchingStr"
    ],
    "BinaryExpr.String": [
      "node.getMatchingStr",
      "fmt.Sprintf",
      "node.returnBool"
    ],
    "BinaryExpr.Type": [
      "e.LHS.Type",
      "e.RHS.Type"
    ],
    "BinaryExpr.getMatchingStr": [
      "len",
      "fmt.Sprintf",
      "strings.Join"
    ],
    "Block.Chunks": [
      "pb.startRead"
    ],
    "Block.CleanTombstones": [
      "pb.tombstones.Iter",
      "len",
      "panic",
      "pb.Meta",
      "c.Write"
    ],
    "Block.Close": [
      "?.Err",
      "tsdb_errors.NewMulti",
      "pb.chunkr.Close",
      "pb.indexr.Close",
      "pb.tombstones.Close",
      "pb.mtx.Lock",
      "pb.mtx.Unlock",
      "pb.pendingReaders.Wait"
    ],
    "Block.Delete": [
      "pb.mtx.Unlock",
      "PostingsForMatchers",
      "tombstones.NewMemTombstones",
      "ir.Series",
      "p.At",
      "len",
      "stones.AddInterval",
      "p.Err",
      "writeMetaFile",
      "pb.mtx.Lock",
      "fmt.Errorf",
      "chk.OverlapsClosedInterval",
      "p.Next",
      "pb.tombstones.Iter",
      "pb.tombstones.Total",
      "tombstones.WriteFile",
      "clampInterval"
    ],
    "Block.Index": [
      "pb.startRead"
    ],
    "Block.LabelNames": [
      "pb.indexr.LabelNames"
    ],
    "Block.Snapshot": [
      "os.ReadDir",
      "f.Name",
      "filepath.Join",
      "pb.meta.ULID.String",
      "os.MkdirAll",
      "fmt.Errorf",
      "chunkDir",
      "os.Link"
    ],
    "Block.String": [
      "pb.meta.ULID.String"
    ],
    "Block.Tombstones": [
      "pb.startRead"
    ],
    "Block.setCompactionFailed": [
      "writeMetaFile"
    ],
    "Block.startRead": [
      "pb.mtx.RLock",
      "pb.mtx.RUnlock",
      "pb.pendingReaders.Add"
    ],
    "BlockChunkRef.Unpack": [
      "int"
    ],
    "BlockMetaCompaction.FromOutOfOrder": [
      "slices.Contains"
    ],
    "BlockMetaCompaction.SetOutOfOrder": [
      "bm.FromOutOfOrder",
      "append",
      "slices.Sort"
    ],
    "BlockWriter.Appender": [
      "w.head.Appender"
    ],
    "BlockWriter.Close": [
      "os.RemoveAll",
      "w.logger.Error",
      "w.head.Close"
    ],
    "BlockWriter.Flush": [
      "NewLeveledCompactor",
      "chunkenc.NewPool",
      "len",
      "w.head.NumSeries",
      "timestamp.Time",
      "fmt.Errorf",
      "compactor.Write",
      "w.head.MinTime",
      "w.head.MaxTime",
      "w.logger.Info"
    ],
    "BlockWriter.initHead": [
      "opts.EnableNativeHistograms.Store",
      "NewHead",
      "NewHeadStats",
      "w.head.Init",
      "os.MkdirTemp",
      "os.TempDir",
      "fmt.Errorf",
      "DefaultHeadOptions"
    ],
    "Bucket.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "Bucket.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Bucket.MarshalToSizedBuffer": [
      "math.Float64bits",
      "float64",
      "m.Exemplar.MarshalToSizedBuffer",
      "encodeVarintMetrics",
      "len",
      "copy",
      "encoding_binary.LittleEndian.PutUint64",
      "uint64"
    ],
    "Bucket.Size": [
      "sovMetrics",
      "uint64",
      "m.Exemplar.Size",
      "len"
    ],
    "Bucket.String": [
      "proto.CompactTextString"
    ],
    "Bucket.Unmarshal": [
      "len",
      "uint",
      "fmt.Errorf",
      "float64",
      "m.Exemplar.Unmarshal",
      "skipMetrics",
      "append",
      "uint64",
      "int32",
      "int",
      "encoding_binary.LittleEndian.Uint64",
      "math.Float64frombits"
    ],
    "Bucket.XXX_DiscardUnknown": [
      "xxx_messageInfo_Bucket.DiscardUnknown"
    ],
    "Bucket.XXX_Marshal": [
      "xxx_messageInfo_Bucket.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "Bucket.XXX_Merge": [
      "xxx_messageInfo_Bucket.Merge"
    ],
    "Bucket.XXX_Size": [
      "m.Size"
    ],
    "Bucket.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "BucketFraction": [
      "interpolateLinearly",
      "slices.SortFunc",
      "math.IsInf",
      "len",
      "math.NaN",
      "coalesceBuckets",
      "math.IsNaN",
      "math.Inf"
    ],
    "BucketQuantile": [
      "ensureMonotonicAndIgnoreSmallDeltas",
      "math.IsNaN",
      "math.Inf",
      "math.IsInf",
      "len",
      "math.NaN",
      "slices.SortFunc",
      "coalesceBuckets",
      "sort.Search"
    ],
    "BucketSpan.Marshal": [
      "make",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "BucketSpan.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "BucketSpan.MarshalToSizedBuffer": [
      "len",
      "copy",
      "encodeVarintMetrics",
      "uint64",
      "uint32",
      "encodeVarintTypes",
      "uint64",
      "uint32",
      "len",
      "copy",
      "copy",
      "encodeVarintTypes",
      "uint64",
      "uint32",
      "len"
    ],
    "BucketSpan.Size": [
      "len",
      "sozMetrics",
      "uint64",
      "sovMetrics",
      "len",
      "sozTypes",
      "uint64",
      "sovTypes",
      "uint64",
      "sovTypes",
      "len",
      "sozTypes"
    ],
    "BucketSpan.String": [
      "proto.CompactTextString",
      "proto.CompactTextString",
      "proto.CompactTextString"
    ],
    "BucketSpan.Unmarshal": [
      "uint32",
      "append",
      "int32",
      "int",
      "fmt.Errorf",
      "skipMetrics",
      "len",
      "uint",
      "uint64",
      "len",
      "int32",
      "int",
      "skipTypes",
      "uint",
      "uint64",
      "fmt.Errorf",
      "uint32",
      "append",
      "uint",
      "uint64",
      "uint32",
      "len",
      "int",
      "fmt.Errorf",
      "skipTypes",
      "append",
      "int32"
    ],
    "BucketSpan.XXX_DiscardUnknown": [
      "xxx_messageInfo_BucketSpan.DiscardUnknown",
      "xxx_messageInfo_BucketSpan.DiscardUnknown",
      "xxx_messageInfo_BucketSpan.DiscardUnknown"
    ],
    "BucketSpan.XXX_Marshal": [
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_BucketSpan.Marshal",
      "cap",
      "cap",
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_BucketSpan.Marshal",
      "xxx_messageInfo_BucketSpan.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "BucketSpan.XXX_Merge": [
      "xxx_messageInfo_BucketSpan.Merge",
      "xxx_messageInfo_BucketSpan.Merge",
      "xxx_messageInfo_BucketSpan.Merge"
    ],
    "BucketSpan.XXX_Size": [
      "m.Size",
      "m.Size",
      "m.Size"
    ],
    "BucketSpan.XXX_Unmarshal": [
      "m.Unmarshal",
      "m.Unmarshal",
      "m.Unmarshal"
    ],
    "BufferedSeriesIterator.At": [
      "b.it.At"
    ],
    "BufferedSeriesIterator.AtFloatHistogram": [
      "b.it.AtFloatHistogram"
    ],
    "BufferedSeriesIterator.AtHistogram": [
      "b.it.AtHistogram"
    ],
    "BufferedSeriesIterator.AtT": [
      "b.it.AtT"
    ],
    "BufferedSeriesIterator.Buffer": [
      "b.buf.iterator"
    ],
    "BufferedSeriesIterator.Err": [
      "b.it.Err"
    ],
    "BufferedSeriesIterator.Next": [
      "b.it.AtFloatHistogram",
      "b.buf.addFH",
      "b.it.Next",
      "b.AtT",
      "fmt.Errorf",
      "b.it.At",
      "b.buf.addF",
      "b.it.AtHistogram",
      "b.buf.addH",
      "panic"
    ],
    "BufferedSeriesIterator.PeekBack": [
      "b.buf.nthLast"
    ],
    "BufferedSeriesIterator.ReduceDelta": [
      "b.buf.reduceDelta"
    ],
    "BufferedSeriesIterator.Reset": [
      "it.Next",
      "b.buf.reset"
    ],
    "BufferedSeriesIterator.Seek": [
      "b.buf.reset",
      "b.it.Seek",
      "b.AtT",
      "panic",
      "fmt.Errorf",
      "b.Next"
    ],
    "Builder.Del": [
      "append"
    ],
    "Builder.Get": [
      "slices.Contains",
      "b.base.Get"
    ],
    "Builder.Keep": [
      "b.base.Range",
      "slices.Contains",
      "append"
    ],
    "Builder.Labels": [
      "slices.SortFunc",
      "strings.Compare",
      "len",
      "make",
      "slices.Contains",
      "contains",
      "append",
      "slices.SortFunc",
      "slices.Sort",
      "mapLabelsToNumbers",
      "decodeVarint",
      "append",
      "yoloString",
      "len",
      "strings.Compare",
      "make",
      "decodeString",
      "appendLabelTo",
      "len",
      "decodeString",
      "append",
      "slices.SortFunc",
      "strings.Compare",
      "slices.Sort",
      "labelsSize",
      "make",
      "appendLabelTo",
      "yoloString"
    ],
    "Builder.Range": [
      "append",
      "b.base.Range",
      "slices.Contains",
      "contains",
      "f"
    ],
    "Builder.Reset": [
      "b.base.Range",
      "append",
      "NewSymbolTable",
      "base.Range",
      "append",
      "b.base.Range",
      "append"
    ],
    "Builder.Set": [
      "b.Del",
      "append"
    ],
    "ByLabelName.Len": [
      "len"
    ],
    "Call.Pretty": [
      "e.Args.Pretty",
      "indent",
      "needsSplit",
      "e.String",
      "fmt.Sprintf"
    ],
    "Call.String": [
      "fmt.Sprintf"
    ],
    "ChainSampleIteratorFromIterables": [
      "getChainSampleIterator",
      "len",
      "c.Iterator"
    ],
    "ChainSampleIteratorFromIterators": [
      "getChainSampleIterator"
    ],
    "ChainSampleIteratorFromSeries": [
      "getChainSampleIterator",
      "len",
      "s.Iterator"
    ],
    "ChainedSeriesMerge": [
      "len",
      "?.Labels",
      "ChainSampleIteratorFromSeries"
    ],
    "CheckConfig": [
      "lintScrapeConfigs",
      "checkRules",
      "checkConfig",
      "fmt.Fprintln",
      "len",
      "fmt.Printf",
      "fmt.Println"
    ],
    "CheckMetrics": [
      "io.TeeReader",
      "len",
      "checkMetricsExtended",
      "fmt.Fprintf",
      "w.Flush",
      "promlint.New",
      "l.Lint",
      "fmt.Fprintln",
      "tabwriter.NewWriter"
    ],
    "CheckRules": [
      "len",
      "checkRulesFromStdin",
      "checkRules"
    ],
    "CheckSD": [
      "promslog.New",
      "config.LoadFile",
      "fmt.Fprintln",
      "fmt.Fprintf",
      "refreshMetrics.Unregister",
      "ctx.Done",
      "fmt.Printf",
      "getSDCheckResult",
      "json.MarshalIndent",
      "cfg.GetScrapeConfigs",
      "make",
      "context.WithTimeout",
      "context.Background",
      "cancel",
      "prometheus.NewRegistry",
      "cfg.NewDiscovererMetrics",
      "metrics.Register",
      "d.Run",
      "metrics.Unregister",
      "append",
      "discovery.NewRefreshMetrics",
      "cfg.NewDiscoverer"
    ],
    "CheckServerStatus": [
      "context.WithTimeout",
      "context.Background",
      "fmt.Errorf",
      "fmt.Fprintln",
      "api.NewClient",
      "http.NewRequest",
      "cancel",
      "c.Do",
      "string",
      "serverURL.String"
    ],
    "CheckTargetAddress": [
      "strings.Contains",
      "string",
      "fmt.Errorf"
    ],
    "CheckWebConfig": [
      "fmt.Fprintln",
      "web.Validate"
    ],
    "Checkpoint": [
      "checkpointDir",
      "w.CompressionType",
      "NewReader",
      "len",
      "enc.Exemplars",
      "df.Close",
      "dec.Series",
      "keep",
      "dec.Samples",
      "dec.Exemplars",
      "cp.Log",
      "w.Dir",
      "append",
      "fileutil.OpenDir",
      "errors.Is",
      "r.Next",
      "r.Record",
      "enc.Samples",
      "enc.CustomBucketsFloatHistogramSamples",
      "r.Err",
      "df.Sync",
      "fmt.Errorf",
      "dec.HistogramSamples",
      "enc.CustomBucketsHistogramSamples",
      "dec.FloatHistogramSamples",
      "dec.Tombstones",
      "dec.Metadata",
      "fileutil.Replace",
      "LastCheckpoint",
      "NewSegmentsRangeReader",
      "sgmReader.Close",
      "record.NewDecoder",
      "make",
      "dec.Type",
      "enc.FloatHistogramSamples",
      "enc.Metadata",
      "logger.Info",
      "os.RemoveAll",
      "os.MkdirAll",
      "New",
      "enc.Series",
      "enc.HistogramSamples",
      "cp.Close",
      "labels.NewSymbolTable",
      "enc.Tombstones"
    ],
    "Children": [
      "make",
      "len",
      "panic",
      "fmt.Errorf"
    ],
    "Chunk.Marshal": [
      "m.MarshalToSizedBuffer",
      "m.Size",
      "make"
    ],
    "Chunk.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Chunk.MarshalToSizedBuffer": [
      "len",
      "copy",
      "encodeVarintTypes",
      "uint64"
    ],
    "Chunk.Size": [
      "sovTypes",
      "uint64",
      "len"
    ],
    "Chunk.String": [
      "proto.CompactTextString"
    ],
    "Chunk.Unmarshal": [
      "len",
      "uint64",
      "int32",
      "append",
      "skipTypes",
      "uint",
      "int",
      "fmt.Errorf",
      "int64",
      "Chunk_Encoding"
    ],
    "Chunk.XXX_DiscardUnknown": [
      "xxx_messageInfo_Chunk.DiscardUnknown"
    ],
    "Chunk.XXX_Marshal": [
      "cap",
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_Chunk.Marshal"
    ],
    "Chunk.XXX_Merge": [
      "xxx_messageInfo_Chunk.Merge"
    ],
    "Chunk.XXX_Size": [
      "m.Size"
    ],
    "Chunk.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "ChunkDiskMapper.ApplyOutOfOrderMask": [
      "uint8",
      "chunkenc.Encoding"
    ],
    "ChunkDiskMapper.Chunk": [
      "cdm.readPathMtx.RLock",
      "cdm.readPathMtx.RUnlock",
      "cdm.dir.Name",
      "mmapFile.byteSlice.Len",
      "byte",
      "int",
      "copy",
      "ref.Unpack",
      "cdm.RemoveMasks",
      "cdm.chunkBuffer.get",
      "fmt.Errorf",
      "binary.Uvarint",
      "checkCRC32",
      "make",
      "len",
      "cdm.pool.Get",
      "cdm.writeQueue.get",
      "mmapFile.byteSlice.Range",
      "chunkenc.Encoding"
    ],
    "ChunkDiskMapper.Close": [
      "cdm.evtlPosMtx.Unlock",
      "cdm.readPathMtx.Lock",
      "cdm.readPathMtx.Unlock",
      "closeAllFromMap",
      "cdm.finalizeCurFile",
      "errs.Err",
      "cdm.evtlPosMtx.Lock",
      "cdm.writeQueue.stop",
      "cdm.writePathMtx.Lock",
      "cdm.writePathMtx.Unlock",
      "tsdb_errors.NewMulti",
      "cdm.dir.Close"
    ],
    "ChunkDiskMapper.CutNewFile": [
      "cdm.evtlPosMtx.Lock",
      "cdm.evtlPosMtx.Unlock",
      "cdm.evtlPos.cutFileOnNextChunk"
    ],
    "ChunkDiskMapper.DeleteCorrupted": [
      "cdm.evtlPos.setSeq",
      "uint64",
      "errors.As",
      "cdm.readPathMtx.RLock",
      "append",
      "cdm.evtlPosMtx.Lock",
      "len",
      "cdm.evtlPosMtx.Unlock",
      "fmt.Errorf",
      "cdm.readPathMtx.RUnlock",
      "cdm.deleteFiles"
    ],
    "ChunkDiskMapper.IsOutOfOrderChunk": [
      "uint8"
    ],
    "ChunkDiskMapper.IsQueueEmpty": [
      "cdm.writeQueue.queueIsEmpty"
    ],
    "ChunkDiskMapper.IterateAllChunks": [
      "int64",
      "chunkenc.Encoding",
      "slices.Sort",
      "binary.BigEndian.Uint64",
      "cdm.curFileSize",
      "fmt.Errorf",
      "newChunkDiskMapperRef",
      "uint64",
      "HeadSeriesRef",
      "binary.BigEndian.Uint16",
      "cdm.writePathMtx.Unlock",
      "append",
      "cdm.IsOutOfOrderChunk",
      "mmapFile.byteSlice.Range",
      "cdm.dir.Name",
      "binary.Uvarint",
      "checkCRC32",
      "cdm.RemoveMasks",
      "errors.As",
      "make",
      "int",
      "mmapFile.byteSlice.Len",
      "byte",
      "f",
      "cdm.writePathMtx.Lock",
      "len"
    ],
    "ChunkDiskMapper.RemoveMasks": [
      "chunkenc.Encoding",
      "uint8"
    ],
    "ChunkDiskMapper.Size": [
      "fileutil.DirSize",
      "cdm.dir.Name"
    ],
    "ChunkDiskMapper.Truncate": [
      "cdm.readPathMtx.RLock",
      "slices.Sort",
      "uint32",
      "cdm.curFileSize",
      "cdm.evtlPos.setSeq",
      "cdm.evtlPosMtx.Unlock",
      "cdm.CutNewFile",
      "len",
      "append",
      "cdm.writeQueue.queueIsEmpty",
      "uint64",
      "make",
      "cdm.readPathMtx.RUnlock",
      "tsdb_errors.NewMulti",
      "cdm.deleteFiles",
      "errs.Add",
      "cdm.evtlPosMtx.Lock",
      "errs.Err"
    ],
    "ChunkDiskMapper.WriteChunk": [
      "cdm.evtlPosMtx.Unlock",
      "cdm.evtlPos.getNextChunkRef",
      "cdm.writeChunkViaQueue",
      "cdm.writeChunk",
      "callback",
      "cdm.evtlPosMtx.Lock"
    ],
    "ChunkDiskMapper.curFileSize": [
      "cdm.curFileOffset.Load"
    ],
    "ChunkDiskMapper.cut": [
      "cdm.readPathMtx.Unlock",
      "cdm.chkWriter.Reset",
      "fileutil.OpenMmapFileWithSize",
      "bufio.NewWriterSize",
      "?.Err",
      "tsdb_errors.NewMulti",
      "realByteSlice",
      "mmapFile.Bytes",
      "uint64",
      "cdm.readPathMtx.Lock",
      "newFile.Name",
      "cdm.finalizeCurFile",
      "cutSegmentFile",
      "newFile.Close",
      "cdm.curFileOffset.Store"
    ],
    "ChunkDiskMapper.cutAndExpectRef": [
      "chkRef.Unpack",
      "fmt.Errorf",
      "cdm.cut"
    ],
    "ChunkDiskMapper.deleteFiles": [
      "slices.Sort",
      "cdm.readPathMtx.Lock",
      "?.Close",
      "cdm.readPathMtx.Unlock",
      "delete",
      "os.Remove",
      "segmentFile",
      "cdm.dir.Name"
    ],
    "ChunkDiskMapper.finalizeCurFile": [
      "cdm.curFile.Sync",
      "cdm.curFile.Close",
      "cdm.flushBuffer"
    ],
    "ChunkDiskMapper.flushBuffer": [
      "cdm.chkWriter.Flush",
      "cdm.chunkBuffer.clear"
    ],
    "ChunkDiskMapper.openMMapFiles": [
      "slices.Sort",
      "cdm.dir.Name",
      "fmt.Errorf",
      "len",
      "binary.BigEndian.Uint32",
      "uint64",
      "?.Err",
      "tsdb_errors.NewMulti",
      "fileutil.OpenMmapFile",
      "f.Bytes",
      "append",
      "b.byteSlice.Range",
      "closeAllFromMap",
      "listChunkFiles",
      "realByteSlice",
      "b.byteSlice.Len",
      "int",
      "cdm.evtlPos.setSeq",
      "repairLastChunkFile",
      "make"
    ],
    "ChunkDiskMapper.write": [
      "uint64",
      "cdm.chkWriter.Write",
      "cdm.curFileOffset.Add"
    ],
    "ChunkDiskMapper.writeAndAppendToCRC32": [
      "cdm.write",
      "cdm.crc32.Write"
    ],
    "ChunkDiskMapper.writeCRC32": [
      "cdm.write",
      "cdm.crc32.Sum"
    ],
    "ChunkDiskMapper.writeChunk": [
      "byte",
      "cdm.writePathMtx.Lock",
      "cdm.chkWriter.Available",
      "binary.BigEndian.PutUint64",
      "chk.Encoding",
      "cdm.writeAndAppendToCRC32",
      "len",
      "chk.Bytes",
      "uint64",
      "cdm.ApplyOutOfOrderMask",
      "binary.PutUvarint",
      "cdm.writeCRC32",
      "cdm.chunkBuffer.put",
      "cdm.writePathMtx.Unlock",
      "cdm.cutAndExpectRef",
      "cdm.flushBuffer",
      "cdm.crc32.Reset"
    ],
    "ChunkDiskMapper.writeChunkViaQueue": [
      "callback",
      "cdm.writeQueue.addJob"
    ],
    "ChunkDiskMapperRef.GreaterThan": [
      "ref.Unpack",
      "r.Unpack"
    ],
    "ChunkDiskMapperRef.GreaterThanOrEqualTo": [
      "ref.Unpack",
      "r.Unpack"
    ],
    "ChunkDiskMapperRef.Unpack": [
      "int"
    ],
    "ChunkFromSamples": [
      "ChunkFromSamplesGeneric",
      "SampleSlice"
    ],
    "ChunkFromSamplesGeneric": [
      "ca.Append",
      "ca.AppendHistogram",
      "fmt.Sprintf",
      "sampleType.String",
      "chunkenc.NewXORChunk",
      "s.Len",
      "?.Type",
      "?.FH",
      "?.T",
      "sampleType.ChunkEncoding",
      "?.H",
      "errors.New",
      "ca.AppendFloatHistogram",
      "panic",
      "int64",
      "s.Get",
      "chunkenc.NewEmptyChunk",
      "c.Appender",
      "?.F"
    ],
    "ChunkMetasToSamples": [
      "chunk.Chunk.Iterator",
      "it.Next",
      "it.At",
      "append",
      "it.AtHistogram",
      "it.AtFloatHistogram",
      "panic",
      "len"
    ],
    "ChunkSeriesEntry.Iterator": [
      "s.ChunkIteratorFn"
    ],
    "Chunk_Encoding.String": [
      "proto.EnumName",
      "int32"
    ],
    "ChunkedReadResponse.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "ChunkedReadResponse.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "ChunkedReadResponse.MarshalToSizedBuffer": [
      "encodeVarintRemote",
      "uint64",
      "?.MarshalToSizedBuffer",
      "len",
      "copy"
    ],
    "ChunkedReadResponse.PooledMarshal": [
      "r.MarshalToSizedBuffer",
      "r.Marshal",
      "r.Size",
      "p.Get",
      "cap"
    ],
    "ChunkedReadResponse.Size": [
      "len",
      "e.Size",
      "sovRemote",
      "uint64"
    ],
    "ChunkedReadResponse.String": [
      "proto.CompactTextString"
    ],
    "ChunkedReadResponse.Unmarshal": [
      "int",
      "fmt.Errorf",
      "?.Unmarshal",
      "len",
      "uint",
      "uint64",
      "skipRemote",
      "int32",
      "append",
      "int64"
    ],
    "ChunkedReadResponse.XXX_DiscardUnknown": [
      "xxx_messageInfo_ChunkedReadResponse.DiscardUnknown"
    ],
    "ChunkedReadResponse.XXX_Marshal": [
      "xxx_messageInfo_ChunkedReadResponse.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "ChunkedReadResponse.XXX_Merge": [
      "xxx_messageInfo_ChunkedReadResponse.Merge"
    ],
    "ChunkedReadResponse.XXX_Size": [
      "m.Size"
    ],
    "ChunkedReadResponse.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "ChunkedReader.Next": [
      "r.crc32.Sum32",
      "binary.ReadUvarint",
      "fmt.Errorf",
      "cap",
      "int",
      "make",
      "binary.Read",
      "r.crc32.Reset",
      "io.ReadFull",
      "io.TeeReader",
      "errors.New"
    ],
    "ChunkedReader.NextProto": [
      "r.Next",
      "proto.Unmarshal"
    ],
    "ChunkedSeries.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "ChunkedSeries.MarshalTo": [
      "m.MarshalToSizedBuffer",
      "m.Size"
    ],
    "ChunkedSeries.MarshalToSizedBuffer": [
      "len",
      "copy",
      "?.MarshalToSizedBuffer",
      "encodeVarintTypes",
      "uint64"
    ],
    "ChunkedSeries.Size": [
      "len",
      "e.Size",
      "sovTypes",
      "uint64"
    ],
    "ChunkedSeries.String": [
      "proto.CompactTextString"
    ],
    "ChunkedSeries.ToLabels": [
      "labelProtosToLabels",
      "m.GetLabels"
    ],
    "ChunkedSeries.Unmarshal": [
      "uint",
      "uint64",
      "int",
      "append",
      "len",
      "int32",
      "fmt.Errorf",
      "?.Unmarshal",
      "skipTypes"
    ],
    "ChunkedSeries.XXX_DiscardUnknown": [
      "xxx_messageInfo_ChunkedSeries.DiscardUnknown"
    ],
    "ChunkedSeries.XXX_Marshal": [
      "cap",
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_ChunkedSeries.Marshal"
    ],
    "ChunkedSeries.XXX_Merge": [
      "xxx_messageInfo_ChunkedSeries.Merge"
    ],
    "ChunkedSeries.XXX_Size": [
      "m.Size"
    ],
    "ChunkedSeries.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "ChunkedWriter.Write": [
      "len",
      "uint64",
      "w.crc32.Reset",
      "w.crc32.Write",
      "binary.Write",
      "binary.PutUvarint",
      "w.writer.Write",
      "w.crc32.Sum32",
      "w.flusher.Flush"
    ],
    "CircularExemplarStorage.AddExemplar": [
      "string",
      "errors.Is",
      "delete",
      "ce.metrics.exemplarsAppended.Inc",
      "ce.lock.Unlock",
      "len",
      "l.Bytes",
      "ce.validateExemplar",
      "prev.ref.seriesLabels.Bytes",
      "ce.computeMetrics",
      "ce.lock.Lock"
    ],
    "CircularExemplarStorage.ApplyConfig": [
      "ce.Resize"
    ],
    "CircularExemplarStorage.IterateExemplars": [
      "len",
      "f",
      "ce.lock.RLock",
      "ce.lock.RUnlock"
    ],
    "CircularExemplarStorage.ResetSymbolTable": [
      "lbls.Range",
      "builder.Add",
      "builder.Labels",
      "ce.lock.RLock",
      "ce.lock.RUnlock",
      "rebuildLabels",
      "labels.NewScratchBuilderWithSymbolTable",
      "builder.Reset"
    ],
    "CircularExemplarStorage.Resize": [
      "ce.computeMetrics",
      "ce.metrics.maxExemplars.Set",
      "float64",
      "ce.lock.Unlock",
      "len",
      "ce.migrate",
      "min",
      "ce.lock.Lock",
      "int64",
      "make"
    ],
    "CircularExemplarStorage.Select": [
      "ce.lock.RUnlock",
      "len",
      "matchesSomeMatcherSet",
      "append",
      "slices.SortFunc",
      "labels.Compare",
      "make",
      "ce.lock.RLock"
    ],
    "CircularExemplarStorage.ValidateExemplar": [
      "string",
      "l.Bytes",
      "ce.lock.RLock",
      "ce.lock.RUnlock",
      "ce.validateExemplar"
    ],
    "CircularExemplarStorage.computeMetrics": [
      "ce.metrics.seriesWithExemplarsInStorage.Set",
      "float64",
      "len",
      "ce.metrics.exemplarsInStorage.Set",
      "ce.metrics.lastExemplarsTs.Set"
    ],
    "CircularExemplarStorage.migrate": [
      "entry.ref.seriesLabels.Bytes",
      "string",
      "len"
    ],
    "CircularExemplarStorage.validateExemplar": [
      "newestExemplar.Labels.Hash",
      "ce.metrics.outOfOrderExemplars.Inc",
      "len",
      "e.Labels.Validate",
      "utf8.RuneCountInString",
      "newestExemplar.Equals",
      "e.Labels.Hash"
    ],
    "Client.Describe": [
      "c.ignoredSamples.Desc"
    ],
    "Client.Read": [
      "c.client.QueryAPI",
      "resp.Record",
      "make",
      "append",
      "len",
      "c.buildCommand",
      "queryAPI.Query",
      "resp.Err",
      "resp.Next",
      "mergeResult",
      "c.readQueries.Dec",
      "fmt.Errorf",
      "snappy.Encode",
      "otel.Tracer",
      "span.End",
      "c.handleSampledResponse",
      "?.Start",
      "strings.HasPrefix",
      "errors.Is",
      "httpResp.Header.Get",
      "?.Seconds",
      "?.Inc",
      "http.NewRequest",
      "bytes.NewReader",
      "httpReq.WithContext",
      "strings.Trim",
      "?.Observe",
      "errors.New",
      "time.Since",
      "NewChunkedSeriesSet",
      "c.readQueries.Inc",
      "context.WithTimeoutCause",
      "trace.WithSpanKind",
      "time.Now",
      "httpResp.Body.Close",
      "c.readQueriesDuration.WithLabelValues",
      "c.readQueriesTotal.WithLabelValues",
      "strconv.Itoa",
      "proto.Marshal",
      "httpReq.Header.Add",
      "httpReq.Header.Set",
      "NewChunkedReader",
      "c.Client.Do",
      "cancel",
      "io.ReadAll",
      "string"
    ],
    "Client.Store": [
      "httpReq.Header.Add",
      "cancel",
      "httpReq.WithContext",
      "fmt.Errorf",
      "bytes.NewReader",
      "httpReq.Header.Set",
      "context.WithTimeout",
      "?.Start",
      "span.End",
      "io.Copy",
      "ParseWriteResponseStats",
      "http.NewRequest",
      "strconv.Itoa",
      "otel.Tracer",
      "trace.WithSpanKind",
      "c.Client.Do",
      "httpResp.Body.Close",
      "io.ReadAll",
      "io.LimitReader",
      "retryAfterDuration",
      "httpResp.Header.Get"
    ],
    "Client.Write": [
      "pathFromMetric",
      "float64",
      "s.Timestamp.UnixNano",
      "math.IsNaN",
      "math.IsInf",
      "buf.Bytes",
      "net.DialTimeout",
      "conn.Close",
      "c.logger.Debug",
      "fmt.Fprintf",
      "conn.Write",
      "writeAPI.WritePoint",
      "c.logger.Debug",
      "tagsFromMetric",
      "c.client.WriteAPIBlocking",
      "writeAPI.Flush",
      "string",
      "s.Timestamp.Time",
      "append",
      "writeAPI.EnableBatching",
      "float64",
      "math.IsInf",
      "c.ignoredSamples.Inc",
      "influx.NewPoint",
      "make",
      "len",
      "math.IsNaN",
      "io.Copy",
      "fmt.Errorf",
      "len",
      "cancel",
      "req.WithContext",
      "url.Parse",
      "json.Marshal",
      "http.NewRequest",
      "bytes.NewBuffer",
      "req.Header.Set",
      "float64",
      "math.IsNaN",
      "c.logger.Debug",
      "http.DefaultClient.Do",
      "resp.Body.Close",
      "s.Timestamp.Unix",
      "context.WithTimeout",
      "u.String",
      "io.ReadAll",
      "json.Unmarshal",
      "make",
      "math.IsInf",
      "append",
      "TagValue",
      "tagsFromMetric",
      "context.Background"
    ],
    "Client.buildCommand": [
      "make",
      "escapeSlashes",
      "errors.New",
      "escapeSingleQuotes",
      "fmt.Errorf",
      "strings.Join",
      "fmt.Sprintf",
      "time.Millisecond.Nanoseconds",
      "len",
      "append"
    ],
    "Client.handleSampledResponse": [
      "httpResp.Body.Close",
      "snappy.Decode",
      "proto.Unmarshal",
      "len",
      "FromQueryResult",
      "io.ReadAll",
      "fmt.Errorf",
      "io.Copy"
    ],
    "CloseAll": [
      "NewMulti",
      "errs.Add",
      "c.Close",
      "errs.Err"
    ],
    "CloudConfigurationFromName": [
      "strings.ToUpper",
      "fmt.Errorf"
    ],
    "CompactBlockMetas": [
      "append",
      "slices.SortFunc",
      "a.Compare"
    ],
    "Compare": [
      "labels.Compare",
      "len",
      "len",
      "decodeString",
      "unsafe.StringData",
      "unsafe.Add",
      "decodeSize",
      "decodeString",
      "len",
      "unsafe.Pointer"
    ],
    "CompressionHandler.ServeHTTP": [
      "newCompressedResponseWriter",
      "c.Handler.ServeHTTP",
      "compWriter.Close"
    ],
    "CondensedString": [
      "ls.Range",
      "b.WriteString",
      "strconv.Quote",
      "b.String",
      "b.WriteByte"
    ],
    "Config.GetScrapeConfigs": [
      "make",
      "filepath.Dir",
      "yaml.UnmarshalStrict",
      "len",
      "fmt.Errorf",
      "scfg.Validate",
      "fmt.Sprintf",
      "scfg.SetDirectory",
      "append",
      "filepath.Glob",
      "os.ReadFile",
      "filePath",
      "errors.New",
      "fileErr"
    ],
    "Config.SetDirectory": [
      "c.GlobalConfig.SetDirectory",
      "c.AlertingConfig.SetDirectory",
      "c.TracingConfig.SetDirectory",
      "config.JoinDir",
      "c.SetDirectory"
    ],
    "Config.String": [
      "yaml.Marshal",
      "fmt.Sprintf",
      "string"
    ],
    "Config.UnmarshalYAML": [
      "unmarshal",
      "c.GlobalConfig.isZero",
      "c.Runtime.isZero",
      "patRulePath.MatchString",
      "fmt.Errorf",
      "scfg.Validate",
      "errors.New",
      "c.Validate",
      "unmarshal",
      "MustNewRegexp"
    ],
    "Config.Validate": [
      "varInRegexTemplate",
      "?.IsValid",
      "model.LabelName",
      "isValidLabelNameWithRegexVarFn",
      "errors.New",
      "fmt.Errorf"
    ],
    "Configs.MarshalYAML": [
      "reflect.StructOf",
      "reflect.New",
      "cfgPtr.Elem",
      "writeConfigs",
      "cfgPtr.Interface"
    ],
    "Configs.SetDirectory": [
      "v.SetDirectory"
    ],
    "Configs.UnmarshalYAML": [
      "reflect.StructOf",
      "reflect.New",
      "cfgPtr.Elem",
      "unmarshal",
      "cfgPtr.Interface",
      "replaceYAMLTypeError",
      "readConfigs"
    ],
    "ContextFromRequest": [
      "net.SplitHostPort",
      "ctx.Value",
      "promql.NewOriginContext"
    ],
    "ContextWithMetricMetadataStore": [
      "context.WithValue"
    ],
    "ContextWithPath": [
      "context.WithValue"
    ],
    "ContextWithTarget": [
      "context.WithValue"
    ],
    "CopyDirs": [
      "copyFile",
      "os.MkdirAll",
      "readDirs",
      "filepath.Join",
      "os.Stat",
      "stat.IsDir"
    ],
    "CorruptionErr.Error": [
      "fmt.Errorf",
      "segmentFile",
      "?.Error",
      "fmt.Sprintf",
      "SegmentName"
    ],
    "Counter.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "Counter.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Counter.MarshalToSizedBuffer": [
      "len",
      "math.Float64bits",
      "uint64",
      "m.Exemplar.MarshalToSizedBuffer",
      "encoding_binary.LittleEndian.PutUint64",
      "float64",
      "copy",
      "m.CreatedTimestamp.MarshalToSizedBuffer",
      "encodeVarintMetrics"
    ],
    "Counter.Size": [
      "m.Exemplar.Size",
      "sovMetrics",
      "uint64",
      "m.CreatedTimestamp.Size",
      "len"
    ],
    "Counter.String": [
      "proto.CompactTextString"
    ],
    "Counter.Unmarshal": [
      "len",
      "math.Float64frombits",
      "m.CreatedTimestamp.Unmarshal",
      "append",
      "float64",
      "m.Exemplar.Unmarshal",
      "uint",
      "uint64",
      "int32",
      "int",
      "fmt.Errorf",
      "encoding_binary.LittleEndian.Uint64",
      "skipMetrics"
    ],
    "Counter.XXX_DiscardUnknown": [
      "xxx_messageInfo_Counter.DiscardUnknown"
    ],
    "Counter.XXX_Marshal": [
      "xxx_messageInfo_Counter.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "Counter.XXX_Merge": [
      "xxx_messageInfo_Counter.Merge"
    ],
    "Counter.XXX_Size": [
      "m.Size"
    ],
    "Counter.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "CreateAndRegisterSDMetrics": [
      "RegisterSDMetrics",
      "fmt.Errorf",
      "NewRefreshMetrics"
    ],
    "CreateBlock": [
      "w.Close",
      "fmt.Errorf",
      "ulid.String",
      "app.Append",
      "it.AtHistogram",
      "it.Err",
      "w.Flush",
      "err.Error",
      "storage.SeriesRef",
      "it.Next",
      "it.At",
      "app.AppendHistogram",
      "NewBlockWriter",
      "context.Background",
      "s.Iterator",
      "app.Commit",
      "typ.String",
      "filepath.Join",
      "logger.Error",
      "w.Appender",
      "s.Labels",
      "it.AtFloatHistogram"
    ],
    "CreateSegment": [
      "SegmentName",
      "os.OpenFile"
    ],
    "DB.Appender": [
      "db.appenderPool.Get",
      "db.head.Appender"
    ],
    "DB.ApplyConfig": [
      "int64",
      "db.oooWasEnabled.Load",
      "filepath.Join",
      "wlog.NewSize",
      "db.head.ApplyConfig",
      "db.oooWasEnabled.Store"
    ],
    "DB.Blocks": [
      "db.mtx.RLock",
      "db.mtx.RUnlock"
    ],
    "DB.ChunkQuerier": [
      "storage.NewCompactingChunkSeriesMerger",
      "db.blockChunkQuerierForRange",
      "storage.NewMergeChunkQuerier"
    ],
    "DB.CleanTombstones": [
      "uid.String",
      "?.Seconds",
      "db.Blocks",
      "pb.CleanTombstones",
      "db.Dir",
      "db.mtx.Lock",
      "db.mtx.Unlock",
      "filepath.Join",
      "os.RemoveAll",
      "db.cmtx.Lock",
      "db.cmtx.Unlock",
      "time.Now",
      "time.Since",
      "fmt.Errorf",
      "db.logger.Error",
      "db.metrics.tombCleanTimer.Observe",
      "pb.Dir",
      "db.reloadBlocks"
    ],
    "DB.Close": [
      "db.metrics.Unregister",
      "?.Err",
      "tsdb_errors.NewMulti",
      "db.locker.Release",
      "db.wal.Close",
      "db.mtx.Lock",
      "db.mtx.Unlock",
      "close",
      "g.Go",
      "g.Wait",
      "errs.Add",
      "close",
      "db.compactCancel",
      "db.mtx.Lock",
      "db.head.Close",
      "errs.Err",
      "db.mtx.Unlock",
      "tsdb_errors.NewMulti",
      "db.locker.Release"
    ],
    "DB.Compact": [
      "db.head.compactable",
      "db.timeWhenCompactionDelayStarted.IsZero",
      "rh.MaxTime",
      "db.logger.Warn",
      "int64",
      "rangeForTimestamp",
      "db.compactHead",
      "compactionDuration.Milliseconds",
      "compactionDuration.String",
      "db.metrics.compactionsFailed.Inc",
      "db.cmtx.Unlock",
      "fmt.Errorf",
      "errs.Err",
      "NewRangeHeadWithIsolationDisabled",
      "time.Since",
      "db.head.chunkRange.Load",
      "db.head.MinTime",
      "db.compactOOOHead",
      "db.head.truncateWAL",
      "errs.Add",
      "time.Now",
      "db.waitingForCompactionDelay",
      "db.cmtx.Lock",
      "tsdb_errors.NewMulti",
      "db.head.WaitForAppendersOverlapping",
      "db.compactBlocks",
      "errors.Is"
    ],
    "DB.CompactHead": [
      "db.head.truncateWAL",
      "head.BlockMaxTime",
      "db.cmtx.Lock",
      "db.cmtx.Unlock",
      "db.compactHead",
      "fmt.Errorf"
    ],
    "DB.CompactOOOHead": [
      "db.cmtx.Lock",
      "db.cmtx.Unlock",
      "db.compactOOOHead"
    ],
    "DB.Delete": [
      "db.mtx.RUnlock",
      "b.OverlapsClosedInterval",
      "g.Go",
      "b.Delete",
      "db.head.OverlapsClosedInterval",
      "db.cmtx.Lock",
      "db.cmtx.Unlock",
      "db.mtx.RLock",
      "db.head.Delete",
      "g.Wait"
    ],
    "DB.DisableCompactions": [
      "db.autoCompactMtx.Lock",
      "db.autoCompactMtx.Unlock",
      "db.logger.Info"
    ],
    "DB.DisableNativeHistograms": [
      "db.head.DisableNativeHistograms"
    ],
    "DB.EnableCompactions": [
      "db.autoCompactMtx.Lock",
      "db.autoCompactMtx.Unlock",
      "db.logger.Info"
    ],
    "DB.EnableNativeHistograms": [
      "db.head.EnableNativeHistograms"
    ],
    "DB.ExemplarQuerier": [
      "db.head.exemplars.ExemplarQuerier"
    ],
    "DB.ForceHeadMMap": [
      "db.head.mmapHeadChunks"
    ],
    "DB.Querier": [
      "db.mtx.RLock",
      "append",
      "make",
      "len",
      "NewRangeHead",
      "fmt.Errorf",
      "NewHeadAndOOOQuerier",
      "storage.NewMergeQuerier",
      "db.mtx.RUnlock",
      "db.head.MinOOOTime",
      "db.head.IsQuerierCollidingWithTruncation",
      "b.OverlapsClosedInterval",
      "overlapsClosedInterval",
      "db.head.MaxOOOTime",
      "db.head.MinTime",
      "db.blockQuerierFunc",
      "q.Close",
      "max",
      "headQuerier.Close",
      "db.head.oooIso.TrackReadAfter"
    ],
    "DB.Snapshot": [
      "db.head.MaxTime",
      "db.compactor.Write",
      "db.head.MinTime",
      "NewRangeHead",
      "db.mtx.RLock",
      "b.Snapshot",
      "b.Dir",
      "db.cmtx.Lock",
      "db.cmtx.Unlock",
      "db.logger.Info",
      "fmt.Errorf",
      "errors.New",
      "ulid.ParseStrict",
      "db.mtx.RUnlock"
    ],
    "DB.StartTime": [
      "int64",
      "db.mtx.RLock",
      "db.mtx.RUnlock",
      "len",
      "?.Meta",
      "db.head.MinTime"
    ],
    "DB.blockChunkQuerierForRange": [
      "len",
      "db.head.MaxOOOTime",
      "max",
      "fmt.Errorf",
      "db.head.IsQuerierCollidingWithTruncation",
      "db.mtx.RLock",
      "make",
      "db.head.MinOOOTime",
      "NewRangeHead",
      "db.blockChunkQuerierFunc",
      "headQuerier.Close",
      "db.head.oooIso.TrackReadAfter",
      "b.OverlapsClosedInterval",
      "overlapsClosedInterval",
      "db.head.MinTime",
      "append",
      "q.Close",
      "NewHeadAndOOOChunkQuerier",
      "db.mtx.RUnlock"
    ],
    "DB.compactBlocks": [
      "db.logger.Warn",
      "errs.Err",
      "db.compactor.Plan",
      "db.compactor.Compact",
      "tsdb_errors.NewMulti",
      "filepath.Join",
      "errs.Add",
      "db.head.compactable",
      "db.waitingForCompactionDelay",
      "len",
      "db.reloadBlocks",
      "fmt.Errorf",
      "os.RemoveAll",
      "uid.String"
    ],
    "DB.compactHead": [
      "head.BlockMaxTime",
      "fmt.Errorf",
      "db.reloadBlocks",
      "filepath.Join",
      "uid.String",
      "multiErr.Add",
      "multiErr.Err",
      "db.compactor.Write",
      "db.head.truncateMemory",
      "tsdb_errors.NewMulti",
      "os.RemoveAll",
      "db.head.RebuildSymbolTable",
      "head.MinTime"
    ],
    "DB.compactOOO": [
      "len",
      "db.logger.Info",
      "time.Since",
      "oooHead.ChunkRange",
      "oooHead.MaxTime",
      "filepath.Join",
      "meta.Compaction.SetOutOfOrder",
      "append",
      "time.Now",
      "oooHead.MinTime",
      "make",
      "os.RemoveAll",
      "oooHead.CloneForTimeRange",
      "uid.String",
      "db.compactor.Write",
      "fmt.Sprintf"
    ],
    "DB.compactOOOHead": [
      "db.oooWasEnabled.Load",
      "db.compactOOO",
      "db.reloadBlocks",
      "uid.String",
      "db.mtx.Lock",
      "compactOOOHeadTestingCallback",
      "tsdb_errors.NewMulti",
      "filepath.Join",
      "NewOOOCompactionHead",
      "fmt.Errorf",
      "errs.Err",
      "oooHead.LastWBLFile",
      "oooHead.LastMmapRef",
      "db.mtx.Unlock",
      "db.head.truncateOOO",
      "os.RemoveAll",
      "errs.Add"
    ],
    "DB.deleteBlocks": [
      "os.IsNotExist",
      "fmt.Errorf",
      "fmt.Sprintf",
      "fileutil.Replace",
      "os.RemoveAll",
      "db.logger.Info",
      "block.Close",
      "filepath.Join",
      "os.Stat",
      "db.logger.Warn",
      "ulid.String"
    ],
    "DB.gc": [
      "db.metrics.numWALSeriesPendingDeletion.Set",
      "db.series.GC",
      "db.metrics.numActiveSeries.Sub",
      "float64",
      "len",
      "wlog.Segments",
      "db.wal.Dir"
    ],
    "DB.generateCompactionDelay": [
      "int64",
      "time.Duration",
      "rand.Int63n",
      "db.head.chunkRange.Load"
    ],
    "DB.inOrderBlocksMaxTime": [
      "db.Blocks",
      "b.meta.Compaction.FromOutOfOrder",
      "int64"
    ],
    "DB.keepSeriesInWALCheckpoint": [
      "db.series.GetByID"
    ],
    "DB.loadWAL": [
      "db.walReplaySeriesPool.Put",
      "record.NewDecoder",
      "db.walReplayFloatHistogramsPool.Get",
      "db.series.GetByID",
      "db.series.Set",
      "entry.Labels.Hash",
      "db.logger.Warn",
      "chunks.HeadSeriesRef",
      "r.Offset",
      "db.walReplaySamplesPool.Get",
      "dec.HistogramSamples",
      "dec.FloatHistogramSamples",
      "db.walReplayFloatHistogramsPool.Put",
      "dec.Type",
      "dec.Series",
      "fmt.Errorf",
      "db.walReplayHistogramsPool.Get",
      "db.walReplayHistogramsPool.Put",
      "make",
      "r.Next",
      "db.walReplaySeriesPool.Get",
      "r.Segment",
      "labels.NewSymbolTable",
      "r.Record",
      "db.walReplaySamplesPool.Put",
      "db.nextRef.Load",
      "dec.Samples",
      "uint64",
      "nonExistentSeriesRefs.Load",
      "db.nextRef.Store",
      "r.Err",
      "close",
      "db.metrics.numActiveSeries.Inc",
      "nonExistentSeriesRefs.Inc",
      "panic"
    ],
    "DB.reload": [
      "db.reloadBlocks",
      "fmt.Errorf",
      "db.inOrderBlocksMaxTime",
      "db.head.Truncate"
    ],
    "DB.reloadBlocks": [
      "errs.Err",
      "db.metrics.blocksBytes.Set",
      "b.Meta",
      "db.deleteBlocks",
      "db.metrics.reloads.Inc",
      "db.mtx.RLock",
      "tsdb_errors.NewMulti",
      "OverlappingBlocks",
      "block.Close",
      "errs.Add",
      "a.Meta",
      "db.metrics.reloadsFailed.Inc",
      "openBlocks",
      "delete",
      "make",
      "block.Meta",
      "db.logger.Warn",
      "db.mtx.RUnlock",
      "ulid.String",
      "append",
      "block.Size",
      "float64",
      "db.mtx.Lock",
      "len",
      "getBlock",
      "fmt.Errorf",
      "slices.SortFunc",
      "overlaps.String",
      "db.blocksToDelete",
      "db.mtx.Unlock"
    ],
    "DB.replayWAL": [
      "db.resetWALReplayResources",
      "wlog.NewSegmentsReader",
      "db.logger.Warn",
      "db.loadWAL",
      "wlog.NewReader",
      "wlog.Segments",
      "wlog.OpenReadSegment",
      "wlog.SegmentName",
      "walReplayDuration.Seconds",
      "db.logger.Info",
      "db.wal.Dir",
      "time.Now",
      "wlog.LastCheckpoint",
      "fmt.Errorf",
      "wlog.NewSegmentBufReader",
      "time.Since",
      "errors.Is",
      "sr.Close",
      "db.metrics.walTotalReplayDuration.Set"
    ],
    "DB.run": [
      "time.After",
      "max",
      "db.rs.LowestSentTimestamp",
      "db.logger.Debug",
      "db.logger.Warn",
      "close",
      "time.Now",
      "db.truncate",
      "timestamp.FromTime",
      "exponential",
      "db.metrics.compactionsSkipped.Inc",
      "db.reloadBlocks",
      "db.head.mmapHeadChunks",
      "db.autoCompactMtx.Lock",
      "db.Compact",
      "time.Duration",
      "time.After",
      "db.cmtx.Lock",
      "db.autoCompactMtx.Unlock",
      "close",
      "db.logger.Error",
      "db.cmtx.Unlock",
      "db.metrics.compactionsTriggered.Inc"
    ],
    "DB.truncate": [
      "db.metrics.checkpointDeleteFail.Inc",
      "?.Seconds",
      "time.Now",
      "db.gc",
      "db.metrics.checkpointCreationFail.Inc",
      "errors.As",
      "delete",
      "len",
      "db.mtx.RLock",
      "fmt.Errorf",
      "wlog.Checkpoint",
      "db.metrics.walCorruptionsTotal.Inc",
      "float64",
      "wlog.DeleteCheckpoints",
      "db.mtx.RUnlock",
      "wlog.Segments",
      "db.wal.NextSegment",
      "db.metrics.checkpointCreationTotal.Inc",
      "db.metrics.numWALSeriesPendingDeletion.Set",
      "db.metrics.checkpointDeleteTotal.Inc",
      "db.metrics.walTruncateDuration.Observe",
      "db.logger.Info",
      "time.Since",
      "db.wal.Dir",
      "db.wal.Truncate",
      "db.logger.Error"
    ],
    "DB.waitingForCompactionDelay": [
      "time.Since"
    ],
    "DBReadOnly.Block": [
      "append",
      "os.Stat",
      "filepath.Join",
      "os.IsNotExist",
      "fmt.Errorf",
      "OpenBlock"
    ],
    "DBReadOnly.Blocks": [
      "errs.Err",
      "overlaps.String",
      "closer.Close",
      "delete",
      "len",
      "db.logger.Warn",
      "errs.Add",
      "b.Meta",
      "openBlocks",
      "block.Meta",
      "ulid.String",
      "slices.SortFunc",
      "tsdb_errors.NewMulti",
      "a.Meta",
      "OverlappingBlocks",
      "b.Close",
      "fmt.Errorf",
      "make",
      "append"
    ],
    "DBReadOnly.ChunkQuerier": [
      "db.loadDataAsQueryable",
      "q.ChunkQuerier"
    ],
    "DBReadOnly.Close": [
      "tsdb_errors.CloseAll",
      "os.RemoveAll",
      "db.logger.Error",
      "close"
    ],
    "DBReadOnly.FlushWAL": [
      "filepath.Join",
      "os.Stat",
      "os.IsNotExist",
      "NewHeadStats",
      "tsdb_errors.NewMulti",
      "head.MaxTime",
      "NewLeveledCompactor",
      "fmt.Errorf",
      "len",
      "?.Meta",
      "DefaultHeadOptions",
      "head.Close",
      "errs.Err",
      "db.Blocks",
      "errs.Add",
      "context.Background",
      "ExponentialBlockRanges",
      "chunkenc.NewPool",
      "compactor.Write",
      "wlog.Open",
      "NewHead",
      "head.Init",
      "head.MinTime",
      "NewRangeHead",
      "DefaultOptions",
      "int64"
    ],
    "DBReadOnly.LastBlockID": [
      "ulidObj.Time",
      "errors.New",
      "os.ReadDir",
      "uint64",
      "e.Name",
      "ulid.ParseStrict"
    ],
    "DBReadOnly.Querier": [
      "db.loadDataAsQueryable",
      "q.Querier"
    ],
    "DBReadOnly.loadDataAsQueryable": [
      "fmt.Errorf",
      "append",
      "NewHeadStats",
      "head.Close",
      "wlog.Open",
      "filepath.Join",
      "os.IsNotExist",
      "make",
      "mmappedChunksDir",
      "?.Meta",
      "os.Stat",
      "db.Blocks",
      "DefaultHeadOptions",
      "NewHead",
      "head.Init",
      "len",
      "errors.New",
      "chunks.HardLinkChunkFiles",
      "int64"
    ],
    "Decbuf.Be32": [
      "len",
      "binary.BigEndian.Uint32"
    ],
    "Decbuf.Be32int": [
      "int",
      "d.Be32"
    ],
    "Decbuf.Be64": [
      "len",
      "binary.BigEndian.Uint64"
    ],
    "Decbuf.Be64Float64": [
      "math.Float64frombits",
      "d.Be64"
    ],
    "Decbuf.Be64int64": [
      "int64",
      "d.Be64"
    ],
    "Decbuf.Byte": [
      "len"
    ],
    "Decbuf.ConsumePadding": [
      "len"
    ],
    "Decbuf.Crc32": [
      "crc32.Checksum"
    ],
    "Decbuf.Len": [
      "len"
    ],
    "Decbuf.Skip": [
      "len"
    ],
    "Decbuf.Uvarint": [
      "int",
      "d.Uvarint64"
    ],
    "Decbuf.Uvarint32": [
      "uint32",
      "d.Uvarint64"
    ],
    "Decbuf.Uvarint64": [
      "varint.Uvarint"
    ],
    "Decbuf.UvarintBytes": [
      "int",
      "d.Uvarint64",
      "len"
    ],
    "Decbuf.UvarintStr": [
      "string",
      "d.UvarintBytes"
    ],
    "Decbuf.Varint64": [
      "varint.Uvarint",
      "int64"
    ],
    "Decode": [
      "d.Err",
      "d.Len",
      "stonesMap.AddInterval",
      "d.Byte",
      "fmt.Errorf",
      "NewMemTombstones",
      "storage.SeriesRef",
      "d.Uvarint64",
      "d.Varint64",
      "errors.New",
      "buf.set",
      "cap",
      "snappy.Decode",
      "?.DecodeAll",
      "buf.zstdDecBuf",
      "fmt.Errorf",
      "len",
      "buf.get"
    ],
    "DecodeFloatHistogram": [
      "buf.Byte",
      "int32",
      "histogram.IsCustomBucketsSchema",
      "histogram.CounterResetHint",
      "buf.Varint64",
      "buf.Be64Float64",
      "buf.Uvarint",
      "make",
      "buf.Uvarint32"
    ],
    "DecodeHistogram": [
      "histogram.CounterResetHint",
      "buf.Byte",
      "int32",
      "buf.Varint64",
      "buf.Uvarint64",
      "make",
      "buf.Uvarint32",
      "math.Float64frombits",
      "buf.Be64",
      "buf.Uvarint",
      "histogram.IsCustomBucketsSchema",
      "buf.Be64Float64"
    ],
    "DecodeOTLPWriteRequest": [
      "pmetricotlp.NewExportRequest",
      "req.UnmarshalProto",
      "req.UnmarshalJSON",
      "r.Body.Close",
      "r.Header.Get",
      "fmt.Errorf",
      "gzip.NewReader",
      "io.ReadAll",
      "decoderFunc"
    ],
    "DecodePostingsRaw": [
      "d.Get",
      "d.Err",
      "len",
      "fmt.Errorf",
      "newBigEndianPostings",
      "d.Be32int"
    ],
    "DecodeReadRequest": [
      "io.ReadAll",
      "io.LimitReader",
      "snappy.Decode",
      "proto.Unmarshal"
    ],
    "DecodeWriteRequest": [
      "proto.Unmarshal",
      "io.ReadAll",
      "snappy.Decode"
    ],
    "DecodeWriteV2Request": [
      "io.ReadAll",
      "snappy.Decode",
      "proto.Unmarshal"
    ],
    "Decoder.DecodeLabels": [
      "d.builder.Reset",
      "dec.Uvarint",
      "dec.UvarintBytes",
      "d.builder.UnsafeAddBytes",
      "d.builder.Labels"
    ],
    "Decoder.Exemplars": [
      "Type",
      "dec.Byte",
      "errors.New",
      "d.ExemplarsFromBuffer"
    ],
    "Decoder.ExemplarsFromBuffer": [
      "dec.Be64",
      "dec.Err",
      "dec.Varint64",
      "d.DecodeLabels",
      "append",
      "chunks.HeadSeriesRef",
      "dec.Len",
      "dec.Be64int64",
      "len",
      "uint64",
      "math.Float64frombits",
      "fmt.Errorf"
    ],
    "Decoder.FloatHistogramSamples": [
      "dec.Len",
      "dec.Byte",
      "dec.Be64",
      "dec.Be64int64",
      "len",
      "chunks.HeadSeriesRef",
      "uint64",
      "append",
      "Type",
      "dec.Err",
      "dec.Varint64",
      "DecodeFloatHistogram",
      "fmt.Errorf",
      "errors.New"
    ],
    "Decoder.HistogramSamples": [
      "dec.Byte",
      "dec.Be64",
      "dec.Varint64",
      "Type",
      "dec.Len",
      "uint64",
      "fmt.Errorf",
      "errors.New",
      "len",
      "dec.Err",
      "chunks.HeadSeriesRef",
      "DecodeHistogram",
      "append",
      "dec.Be64int64"
    ],
    "Decoder.LabelNamesOffsetsFor": [
      "d.Uvarint",
      "make",
      "uint32",
      "d.Err",
      "fmt.Errorf"
    ],
    "Decoder.LabelValueFor": [
      "d.Uvarint",
      "uint32",
      "d.Err",
      "fmt.Errorf",
      "dec.LookupSymbol"
    ],
    "Decoder.Metadata": [
      "append",
      "dec.Byte",
      "len",
      "dec.Uvarint64",
      "dec.UvarintStr",
      "chunks.HeadSeriesRef",
      "fmt.Errorf",
      "Type",
      "errors.New",
      "dec.Err",
      "dec.Uvarint"
    ],
    "Decoder.MmapMarkers": [
      "Type",
      "errors.New",
      "len",
      "dec.Be64",
      "chunks.ChunkDiskMapperRef",
      "fmt.Errorf",
      "dec.Byte",
      "dec.Len",
      "dec.Err",
      "chunks.HeadSeriesRef",
      "append"
    ],
    "Decoder.Samples": [
      "math.Float64frombits",
      "fmt.Errorf",
      "dec.Err",
      "dec.Varint64",
      "append",
      "make",
      "dec.Byte",
      "errors.New",
      "dec.Be64int64",
      "cap",
      "len",
      "chunks.HeadSeriesRef",
      "int64",
      "Type",
      "dec.Len",
      "dec.Be64"
    ],
    "Decoder.Series": [
      "d.Uvarint",
      "uint32",
      "d.Err",
      "fmt.Errorf",
      "context.TODO",
      "builder.Add",
      "int64",
      "append",
      "chunks.ChunkRef",
      "builder.Reset",
      "dec.LookupSymbol",
      "d.Varint64",
      "d.Uvarint64",
      "Type",
      "dec.Byte",
      "errors.New",
      "dec.Err",
      "dec.Be64",
      "chunks.HeadSeriesRef",
      "len",
      "storage.SeriesRef",
      "d.DecodeLabels",
      "append",
      "fmt.Errorf"
    ],
    "Decoder.Tombstones": [
      "Type",
      "dec.Byte",
      "dec.Err",
      "dec.Be64",
      "len",
      "errors.New",
      "dec.Len",
      "append",
      "storage.SeriesRef",
      "dec.Varint64",
      "fmt.Errorf"
    ],
    "Decoder.Type": [
      "len",
      "Type"
    ],
    "Dedupe": [
      "make",
      "new",
      "d.run"
    ],
    "Deduper.Enabled": [
      "d.next.Enabled"
    ],
    "Deduper.Handle": [
      "?.Handle",
      "r.Clone",
      "d.mtx.RLock",
      "d.mtx.RUnlock",
      "time.Since",
      "d.mtx.Lock",
      "len",
      "time.Now",
      "d.mtx.Unlock",
      "d.next.Handler"
    ],
    "Deduper.Stop": [
      "close"
    ],
    "Deduper.WithAttrs": [
      "slog.New",
      "?.WithAttrs",
      "d.next.Handler"
    ],
    "Deduper.WithGroup": [
      "slog.New",
      "?.WithGroup",
      "d.next.Handler"
    ],
    "Deduper.run": [
      "time.Now",
      "now.Sub",
      "delete",
      "d.mtx.Unlock",
      "time.NewTicker",
      "ticker.Stop",
      "d.mtx.Lock"
    ],
    "DefaultBlockPopulator.PopulateBlock": [
      "NewBlockChunkSeriesSet",
      "NewMergedStringIter",
      "uint64",
      "errs.Err",
      "metrics.PopulatingBlocks.Set",
      "ctx.Err",
      "logger.Info",
      "b.Tombstones",
      "set.Next",
      "chksIter.At",
      "chksIter.Err",
      "tsdb_errors.NewMulti",
      "errs.Add",
      "fmt.Errorf",
      "b.Index",
      "indexw.AddSeries",
      "symbols.Err",
      "chk.Chunk.Encoding",
      "set.Err",
      "?.Meta",
      "postingsFunc",
      "indexr.Symbols",
      "indexw.AddSymbol",
      "append",
      "s.Iterator",
      "chunkw.WriteChunks",
      "chk.Chunk.NumSamples",
      "symbols.At",
      "storage.NewMergeChunkSeriesSet",
      "s.Labels",
      "chunkPool.Put",
      "len",
      "errors.New",
      "b.Chunks",
      "symbols.Next",
      "ctx.Done",
      "b.Meta",
      "metrics.OverlappingBlocks.Inc",
      "storage.SeriesRef",
      "tsdb_errors.CloseAll",
      "set.At",
      "chksIter.Next"
    ],
    "DefaultBlocksToDelete": [
      "deletableBlocks"
    ],
    "DefaultEvalIterationFunc": [
      "g.metrics.IterationsScheduled.WithLabelValues",
      "time.Now",
      "g.Eval",
      "time.Since",
      "g.setLastEvaluation",
      "?.Inc",
      "GroupKey",
      "g.metrics.IterationDuration.Observe",
      "timeSinceStart.Seconds",
      "g.updateRuleEvaluationTimeSum",
      "g.setEvaluationTime",
      "g.setLastEvalTimestamp"
    ],
    "DefaultHeadOptions": [
      "chunkenc.NewPool",
      "ho.OutOfOrderCapMax.Store"
    ],
    "DefaultOptions": [
      "int64",
      "time.Duration"
    ],
    "DefaultStatsRenderer": [
      "stats.NewQueryStats"
    ],
    "DeleteCheckpoints": [
      "os.RemoveAll",
      "filepath.Join",
      "errs.Err",
      "listCheckpoints",
      "tsdb_errors.NewMulti",
      "errs.Add"
    ],
    "DeleteChunkSnapshots": [
      "fi.Name",
      "strconv.Atoi",
      "filepath.Join",
      "errs.Add",
      "os.ReadDir",
      "tsdb_errors.NewMulti",
      "strings.HasPrefix",
      "strings.Split",
      "len",
      "os.RemoveAll",
      "errs.Err"
    ],
    "DeletedIterator.At": [
      "it.Iter.At"
    ],
    "DeletedIterator.AtFloatHistogram": [
      "it.Iter.AtFloatHistogram"
    ],
    "DeletedIterator.AtHistogram": [
      "it.Iter.AtHistogram"
    ],
    "DeletedIterator.AtT": [
      "it.Iter.AtT"
    ],
    "DeletedIterator.Err": [
      "it.Iter.Err"
    ],
    "DeletedIterator.Next": [
      "it.AtT",
      "tr.InBounds",
      "it.Iter.Next"
    ],
    "DeletedIterator.Seek": [
      "it.Iter.Err",
      "it.Iter.Seek",
      "it.AtT",
      "it.Next"
    ],
    "DigitalOceanSDTestSuite.SetupTest": [
      "NewSDMock",
      "s.Mock.Setup",
      "s.Mock.HandleDropletsList"
    ],
    "DigitalOceanSDTestSuite.TearDownSuite": [
      "s.Mock.ShutdownServer"
    ],
    "DirHash": [
      "sha256.New",
      "strconv.Itoa",
      "info.Size",
      "io.Copy",
      "int",
      "hash.Write",
      "hash.Sum",
      "require.NoError",
      "info.Name",
      "info.ModTime",
      "?.GobEncode",
      "filepath.Walk",
      "info.IsDir",
      "os.Open",
      "f.Close",
      "io.WriteString"
    ],
    "DirLocker.Lock": [
      "fileutil.Flock",
      "fmt.Errorf",
      "errors.New",
      "os.Stat",
      "l.logger.Warn",
      "l.createdCleanly.Set"
    ],
    "DirLocker.Release": [
      "os.Remove",
      "errs.Err",
      "tsdb_errors.NewMulti",
      "errs.Add",
      "l.releaser.Release"
    ],
    "DirSize": [
      "filepath.Walk",
      "info.IsDir",
      "info.Size"
    ],
    "Discovery.Refresh": [
      "http.NewRequest",
      "d.refreshInterval.Seconds",
      "req.WithContext",
      "strings.TrimSpace",
      "json.Unmarshal",
      "urlSource",
      "req.Header.Set",
      "d.metrics.failuresCount.Inc",
      "io.Copy",
      "resp.Body.Close",
      "matchContentType.MatchString",
      "model.LabelValue",
      "append",
      "fmt.Errorf",
      "resp.Header.Get",
      "io.ReadAll",
      "errors.New",
      "len",
      "strconv.FormatFloat",
      "d.client.Do"
    ],
    "Discovery.Run": [
      "d.watchService",
      "d.finalizer",
      "d.initialize",
      "time.NewTicker",
      "ticker.Stop",
      "d.watchServices",
      "len",
      "make",
      "ctx.Done",
      "d.stop",
      "time.NewTicker",
      "ctx.Done",
      "len",
      "fsnotify.NewWatcher",
      "d.logger.Error",
      "d.metrics.fileWatcherErrorsCount.Inc",
      "d.refresh",
      "ticker.Stop",
      "d.Lock",
      "d.client.DiscoveryV1",
      "d.mustNewSharedInformer",
      "ingress.informer.Run",
      "eps.serviceInf.Run",
      "NewEndpoints",
      "eps.endpointsInf.Run",
      "NewService",
      "e.Watch",
      "s.Watch",
      "nodeInf.Run",
      "eps.endpointSliceInf.Run",
      "wg.Add",
      "d.Unlock",
      "ctx.Done",
      "nodeInformer.Run",
      "d.newPodsByNodeInformer",
      "svc.informer.Run",
      "d.newEndpointSlicesByNodeInformer",
      "?.Services",
      "?.Pods",
      "p.Watch",
      "NewNode",
      "d.logger.Error",
      "append",
      "NewIngress",
      "wg.Wait",
      "d.getNamespaces",
      "s.List",
      "p.List",
      "d.logger.With",
      "?.Endpoints",
      "NewPod",
      "?.EndpointSlices",
      "d.client.CoreV1",
      "NewEndpointSlice",
      "eps.podInf.Run",
      "i.Watch",
      "e.List",
      "d.newNodeInformer",
      "pod.podInf.Run",
      "i.List",
      "?.Ingresses",
      "wg.Done",
      "d.Run",
      "context.Background",
      "d.newEndpointsByNodeInformer",
      "d.client.NetworkingV1",
      "node.informer.Run",
      "ctx.Err",
      "d.logger.Error",
      "err.Error",
      "ctx.Done",
      "time.NewTicker",
      "ticker.Stop",
      "d.refresh",
      "errors.Is",
      "tc.Stop",
      "d.conn.Close",
      "ctx.Done",
      "d.parse",
      "delete"
    ],
    "Discovery.addToCache": [
      "exptime.Seconds",
      "rand.Int63n",
      "int64",
      "?.Seconds",
      "time.Duration",
      "d.cache.Set",
      "cache.WithExpiration",
      "d.logger.Debug"
    ],
    "Discovery.createAzureClient": [
      "version.PrometheusUserAgent",
      "newCredential",
      "config_util.NewClientFromConfig",
      "armcompute.NewVirtualMachinesClient",
      "armnetwork.NewInterfacesClient",
      "armcompute.NewVirtualMachineScaleSetsClient",
      "armcompute.NewVirtualMachineScaleSetVMsClient",
      "CloudConfigurationFromName"
    ],
    "Discovery.deleteTimestamp": [
      "d.lock.Lock",
      "delete",
      "d.lock.Unlock"
    ],
    "Discovery.fetchTargetGroups": [
      "d.appsClient",
      "appsToTargetGroups",
      "randomAppsURL"
    ],
    "Discovery.getDatacenter": [
      "d.metrics.rpcFailuresCount.Inc",
      "fmt.Errorf",
      "d.logger.With",
      "?.Self",
      "d.client.Agent",
      "d.logger.Error"
    ],
    "Discovery.getEndpointLabels": [
      "getSystemGroupNames",
      "fmt.Sprintf",
      "model.LabelValue",
      "strconv.Itoa",
      "strings.Join"
    ],
    "Discovery.getFromCache": [
      "d.cache.Get"
    ],
    "Discovery.getNamespaces": [
      "len",
      "append"
    ],
    "Discovery.getNodesLabels": [
      "strutil.SanitizeLabelName",
      "d.client.NodeList",
      "fmt.Errorf",
      "make",
      "len",
      "string"
    ],
    "Discovery.getServicesLabelsAndPorts": [
      "d.client.ServiceList",
      "make",
      "len",
      "getServiceValueMode",
      "strutil.SanitizeLabelName"
    ],
    "Discovery.getTargetsForSystems": [
      "fmt.Errorf",
      "len",
      "append",
      "getEndpointInfoForSystems",
      "getNetworkInformationForSystems",
      "d.getEndpointLabels",
      "make",
      "getSystemGroupsInfoOfMonitoredClients"
    ],
    "Discovery.hasSynced": [
      "d.RLock",
      "d.RUnlock",
      "hasSynceddiscoverer.hasSynced"
    ],
    "Discovery.informerWatchErrorHandler": [
      "d.metrics.failuresCount.Inc",
      "cache.DefaultWatchErrorHandler"
    ],
    "Discovery.initialize": [
      "ctx.Done",
      "d.getDatacenter",
      "time.Sleep"
    ],
    "Discovery.listDroplets": [
      "resp.Links.CurrentPage",
      "d.client.Droplets.List",
      "fmt.Errorf",
      "append",
      "resp.Links.IsLastPage"
    ],
    "Discovery.listFiles": [
      "filepath.Glob",
      "d.logger.Error",
      "append"
    ],
    "Discovery.listInstances": [
      "d.client.Instance.List",
      "append"
    ],
    "Discovery.mustNewSharedIndexInformer": [
      "cache.NewSharedIndexInformer",
      "informer.SetWatchErrorHandler",
      "panic"
    ],
    "Discovery.mustNewSharedInformer": [
      "cache.NewSharedInformer",
      "informer.SetWatchErrorHandler",
      "panic"
    ],
    "Discovery.newEndpointSlicesByNodeInformer": [
      "make",
      "errors.New",
      "namespacedName",
      "d.mustNewSharedIndexInformer",
      "append"
    ],
    "Discovery.newEndpointsByNodeInformer": [
      "errors.New",
      "append",
      "namespacedName",
      "d.mustNewSharedIndexInformer",
      "make"
    ],
    "Discovery.newNodeInformer": [
      "?.List",
      "?.Nodes",
      "d.client.CoreV1",
      "?.Watch",
      "d.mustNewSharedInformer"
    ],
    "Discovery.newPodsByNodeInformer": [
      "make",
      "errors.New",
      "d.mustNewSharedIndexInformer"
    ],
    "Discovery.processComputeNodeResponse": [
      "json.Unmarshal",
      "fmt.Errorf",
      "model.LabelValue",
      "fmt.Sprintf",
      "append"
    ],
    "Discovery.processContainerResponse": [
      "fmt.Errorf",
      "model.LabelValue",
      "fmt.Sprintf",
      "len",
      "strings.Join",
      "append",
      "json.Unmarshal"
    ],
    "Discovery.readFile": [
      "fd.Stat",
      "json.Unmarshal",
      "fmt.Errorf",
      "errors.New",
      "model.LabelValue",
      "d.writeTimestamp",
      "?.Unix",
      "io.ReadAll",
      "fd.Close",
      "yaml.UnmarshalStrict",
      "info.ModTime",
      "os.Open",
      "panic",
      "fileSource",
      "strings.ToLower",
      "float64",
      "filepath.Ext"
    ],
    "Discovery.refresh": [
      "d.metrics.failuresCount.Inc",
      "fmt.Errorf",
      "d.refreshAzureClient",
      "d.logger.Debug",
      "d.createAzureClient",
      "droplet.PrivateIPv4",
      "droplet.PublicIPv6",
      "strconv.Itoa",
      "strconv.FormatUint",
      "uint64",
      "d.listDroplets",
      "len",
      "fmt.Errorf",
      "droplet.PublicIPv4",
      "model.LabelValue",
      "net.JoinHostPort",
      "strings.Join",
      "append",
      "make",
      "wg.Wait",
      "close",
      "len",
      "wg.Add",
      "d.refreshOne",
      "errors.Is",
      "d.logger.Error",
      "wg.Done",
      "append",
      "fetchApps",
      "targetsForApp",
      "append",
      "ctx.Done",
      "fileSource",
      "?.Seconds",
      "d.listFiles",
      "d.metrics.fileSDReadErrorsCount.Inc",
      "d.logger.Error",
      "d.logger.Debug",
      "time.Now",
      "d.metrics.fileSDScanDuration.Observe",
      "time.Since",
      "d.readFile",
      "len",
      "d.deleteTimestamp",
      "d.watchFiles",
      "append",
      "fmt.Sprintf",
      "d.isvc.List",
      "strconv.FormatUint",
      "model.LabelName",
      "strutil.SanitizeLabelName",
      "fmt.Errorf",
      "len",
      "ilc.Filter",
      "ilc.Pages",
      "model.LabelValue",
      "strings.Join",
      "errors.As",
      "len",
      "d.refreshData",
      "?.UTC",
      "time.Now",
      "fmt.Sprintf",
      "d.lastRefreshTimestamp.Format",
      "d.client.ListEvents",
      "ctx.Err",
      "d.fetchTargetGroups",
      "make",
      "len",
      "append",
      "ctx.Done",
      "d.refreshServices",
      "d.refreshNodes",
      "d.refreshTasks",
      "panic",
      "fmt.Errorf",
      "len",
      "?.List",
      "d.client.Services",
      "d.metrics.failuresCount.Inc",
      "model.LabelValue",
      "strconv.Itoa",
      "int64",
      "?.Get",
      "fmt.Errorf",
      "net.JoinHostPort",
      "strconv.FormatInt",
      "strings.Join",
      "append",
      "fmt.Errorf",
      "resp.Header.Get",
      "matchContentType.MatchString",
      "io.ReadAll",
      "json.Unmarshal",
      "http.NewRequest",
      "req.WithContext",
      "resp.Body.Close",
      "len",
      "strings.Join",
      "net.JoinHostPort",
      "json.Marshal",
      "req.Header.Set",
      "d.client.Do",
      "io.Copy",
      "model.LabelValue",
      "strconv.FormatBool",
      "bytes.NewBuffer",
      "strconv.FormatUint",
      "uint64",
      "resource.Parameters.toLabels",
      "append",
      "d.metrics.Failures.Inc",
      "time.Now",
      "d.metrics.Duration.Observe",
      "?.Seconds",
      "time.Since",
      "d.refreshf",
      "d.client.Do",
      "resp.Body.Close",
      "d.processContainerResponse",
      "fmt.Errorf",
      "fmt.Sprintf",
      "url.QueryEscape",
      "http.NewRequest",
      "req.WithContext",
      "len",
      "strings.Join",
      "io.Copy",
      "io.ReadAll",
      "d.processComputeNodeResponse",
      "d.apiURL.String",
      "time.Now",
      "login",
      "tokenDuration.Seconds",
      "fmt.Errorf",
      "d.getTargetsForSystems",
      "xmlrpc.NewClient",
      "?.After",
      "int",
      "?.Add",
      "rpcClient.Close",
      "len",
      "strconv.Itoa",
      "net.JoinHostPort",
      "strconv.FormatUint",
      "uint64",
      "strings.Join",
      "append",
      "d.listInstances",
      "model.LabelValue"
    ],
    "Discovery.refreshAzureClient": [
      "fmt.Errorf",
      "client.getScaleSetVMs",
      "append",
      "close",
      "d.metrics.failuresCount.Inc",
      "d.logger.Debug",
      "client.getScaleSets",
      "client.getVMs",
      "wg.Add",
      "make",
      "len",
      "wg.Done",
      "d.vmToLabelSet",
      "wg.Wait"
    ],
    "Discovery.refreshData": [
      "ip.String",
      "strconv.FormatInt",
      "strconv.FormatUint",
      "uint64",
      "strings.Join",
      "fmt.Sprintf",
      "d.client.ListInstances",
      "d.client.ListIPAddresses",
      "len",
      "strings.Split",
      "net.JoinHostPort",
      "append",
      "strconv.Itoa",
      "d.metrics.failuresCount.Inc",
      "d.client.ListIPv6Ranges",
      "model.LabelValue",
      "int64"
    ],
    "Discovery.refreshNodes": [
      "model.LabelValue",
      "strconv.FormatBool",
      "strconv.FormatUint",
      "d.client.NodeList",
      "fmt.Errorf",
      "net.JoinHostPort",
      "uint64",
      "append",
      "strutil.SanitizeLabelName",
      "model.LabelName"
    ],
    "Discovery.refreshOne": [
      "strconv.Itoa",
      "addr.A.String",
      "d.logger.Warn",
      "append",
      "ctx.Done",
      "d.lookupFn",
      "model.LabelValue",
      "net.JoinHostPort",
      "addr.AAAA.String",
      "d.metrics.dnsSDLookupFailuresCount.Inc",
      "int",
      "strings.TrimRight",
      "d.metrics.dnsSDLookupsCount.Inc",
      "hostPort",
      "ctx.Err"
    ],
    "Discovery.refreshServices": [
      "getServiceValueMode",
      "uint64",
      "string",
      "net.ParseCIDR",
      "strconv.FormatUint",
      "strconv.Itoa",
      "d.client.ServiceList",
      "fmt.Errorf",
      "model.LabelValue",
      "net.JoinHostPort",
      "getNetworksLabels",
      "strutil.SanitizeLabelName",
      "append",
      "model.LabelName",
      "ip.String"
    ],
    "Discovery.refreshTasks": [
      "d.client.TaskList",
      "d.getNodesLabels",
      "strconv.FormatInt",
      "strutil.SanitizeLabelName",
      "string",
      "net.JoinHostPort",
      "append",
      "strconv.Itoa",
      "fmt.Errorf",
      "d.getServicesLabelsAndPorts",
      "getNetworksLabels",
      "model.LabelName",
      "strconv.FormatUint",
      "uint64",
      "net.ParseCIDR",
      "int64",
      "model.LabelValue",
      "ip.String"
    ],
    "Discovery.shouldWatch": [
      "d.shouldWatchFromName",
      "d.shouldWatchFromTags"
    ],
    "Discovery.shouldWatchFromName": [
      "len",
      "slices.Contains"
    ],
    "Discovery.shouldWatchFromTags": [
      "len"
    ],
    "Discovery.stop": [
      "fmt.Sprintf",
      "make",
      "close",
      "d.metrics.fileSDTimeStamp.removeDiscoverer",
      "d.watcher.Close",
      "d.logger.Error",
      "d.logger.Debug"
    ],
    "Discovery.vmToLabelSet": [
      "newAzureResourceFromID",
      "model.LabelName",
      "client.getVMNetworkInterfaceByID",
      "d.logger.Warn",
      "d.logger.Debug",
      "strutil.SanitizeLabelName",
      "d.metrics.cacheHitCount.Add",
      "client.getVMScaleSetVMNetworkInterfaceByID",
      "net.JoinHostPort",
      "strconv.Itoa",
      "fmt.Errorf",
      "model.LabelValue",
      "d.getFromCache",
      "errors.Is",
      "d.addToCache"
    ],
    "Discovery.watchFiles": [
      "panic",
      "filepath.Split",
      "d.watcher.Add",
      "d.logger.Error"
    ],
    "Discovery.watchService": [
      "model.LabelValue",
      "time.NewTicker",
      "ticker.Stop",
      "srv.client.Health",
      "ctx.Done",
      "srv.watch"
    ],
    "Discovery.watchServices": [
      "d.logger.Debug",
      "opts.WithContext",
      "cancel",
      "time.Now",
      "elapsed.Seconds",
      "d.logger.Error",
      "time.Sleep",
      "context.WithCancel",
      "len",
      "time.Since",
      "d.watchService",
      "d.client.Catalog",
      "strings.Join",
      "catalog.Services",
      "d.metrics.servicesRPCDuration.Observe",
      "ctx.Done",
      "d.metrics.rpcFailuresCount.Inc",
      "d.shouldWatch",
      "delete"
    ],
    "Discovery.writeTimestamp": [
      "d.lock.Lock",
      "d.lock.Unlock"
    ],
    "DockerDiscovery.refresh": [
      "d.client.ContainerList",
      "fmt.Errorf",
      "strutil.SanitizeLabelName",
      "append",
      "sort.Strings",
      "strconv.FormatUint",
      "getNetworksLabels",
      "uint64",
      "make",
      "len",
      "container.NetworkMode",
      "model.LabelValue",
      "net.JoinHostPort",
      "containerNetworkMode.IsContainer",
      "containerNetworkMode.ConnectedContainer",
      "model.LabelName"
    ],
    "DockerSDConfig.NewDiscoverer": [
      "NewDockerDiscovery"
    ],
    "DockerSDConfig.SetDirectory": [
      "c.HTTPClientConfig.SetDirectory"
    ],
    "DockerSDConfig.UnmarshalYAML": [
      "unmarshal",
      "errors.New",
      "url.Parse",
      "c.HTTPClientConfig.Validate"
    ],
    "DockerSwarmSDConfig.NewDiscoverer": [
      "NewDiscovery"
    ],
    "DockerSwarmSDConfig.SetDirectory": [
      "c.HTTPClientConfig.SetDirectory"
    ],
    "DockerSwarmSDConfig.UnmarshalYAML": [
      "unmarshal",
      "errors.New",
      "url.Parse",
      "fmt.Errorf",
      "c.HTTPClientConfig.Validate"
    ],
    "DocumentedType": [
      "string"
    ],
    "DurationExpr.PositionRange": [
      "e.RHS.PositionRange",
      "mergeRanges"
    ],
    "DurationExpr.Pretty": [
      "fmt.Println",
      "fmt.Sprintf",
      "e.RHS.Pretty",
      "e.LHS.Pretty"
    ],
    "DurationExpr.ShortString": [
      "node.Op.String"
    ],
    "DurationExpr.String": [
      "fmt.Sprintf",
      "node.RHS.String",
      "panic"
    ],
    "EC2Discovery.ec2Client": [
      "ec2.New",
      "credentials.NewStaticCredentials",
      "string",
      "config.NewClientFromConfig",
      "session.NewSessionWithOptions",
      "fmt.Errorf",
      "stscreds.NewCredentials"
    ],
    "EC2Discovery.refresh": [
      "net.JoinHostPort",
      "len",
      "fmt.Errorf",
      "strutil.SanitizeLabelName",
      "aws.String",
      "d.refreshAZIDs",
      "d.logger.Debug",
      "ec2Client.DescribeInstancesPagesWithContext",
      "make",
      "model.LabelName",
      "errors.As",
      "append",
      "aws.StringSlice",
      "model.LabelValue",
      "strconv.Itoa",
      "int64",
      "d.ec2Client",
      "strings.Join",
      "awsErr.Code"
    ],
    "EC2Discovery.refreshAZIDs": [
      "d.ec2.DescribeAvailabilityZonesWithContext",
      "make",
      "len"
    ],
    "EC2SDConfig.NewDiscoverer": [
      "NewEC2Discovery"
    ],
    "EC2SDConfig.UnmarshalYAML": [
      "unmarshal",
      "session.NewSession",
      "ec2metadata.New",
      "metadata.Region",
      "errors.New",
      "len",
      "c.HTTPClientConfig.Validate"
    ],
    "Encbuf.Len": [
      "len"
    ],
    "Encbuf.PutBE32": [
      "binary.BigEndian.PutUint32",
      "append"
    ],
    "Encbuf.PutBE32int": [
      "e.PutBE32",
      "uint32"
    ],
    "Encbuf.PutBE64": [
      "binary.BigEndian.PutUint64",
      "append"
    ],
    "Encbuf.PutBE64int64": [
      "e.PutBE64",
      "uint64"
    ],
    "Encbuf.PutBEFloat64": [
      "e.PutBE64",
      "math.Float64bits"
    ],
    "Encbuf.PutByte": [
      "append"
    ],
    "Encbuf.PutBytes": [
      "append"
    ],
    "Encbuf.PutHash": [
      "h.Reset",
      "e.WriteToHash",
      "e.PutHashSum"
    ],
    "Encbuf.PutHashSum": [
      "h.Sum"
    ],
    "Encbuf.PutString": [
      "append"
    ],
    "Encbuf.PutUvarint": [
      "e.PutUvarint64",
      "uint64"
    ],
    "Encbuf.PutUvarint32": [
      "e.PutUvarint64",
      "uint64"
    ],
    "Encbuf.PutUvarint64": [
      "binary.PutUvarint",
      "append"
    ],
    "Encbuf.PutUvarintBytes": [
      "e.PutBytes",
      "e.PutUvarint",
      "len"
    ],
    "Encbuf.PutUvarintStr": [
      "e.PutUvarint",
      "len",
      "e.PutString"
    ],
    "Encbuf.PutVarint64": [
      "binary.PutVarint",
      "append"
    ],
    "Encbuf.WriteToHash": [
      "h.Write",
      "panic"
    ],
    "Encode": [
      "tr.Iter",
      "buf.PutUvarint64",
      "uint64",
      "buf.PutVarint64",
      "buf.Get",
      "buf.PutByte",
      "?.EncodeAll",
      "buf.zstdEncBuf",
      "buf.get",
      "buf.set",
      "fmt.Errorf",
      "cap",
      "snappy.Encode",
      "errors.New",
      "len",
      "snappy.MaxEncodedLen"
    ],
    "EncodeFloatHistogram": [
      "buf.PutByte",
      "byte",
      "buf.PutBEFloat64",
      "buf.PutUvarint32",
      "buf.PutVarint64",
      "int64",
      "buf.PutUvarint",
      "len",
      "histogram.IsCustomBucketsSchema"
    ],
    "EncodeHistogram": [
      "buf.PutUvarint64",
      "len",
      "buf.PutUvarint32",
      "histogram.IsCustomBucketsSchema",
      "int64",
      "math.Float64bits",
      "buf.PutVarint64",
      "buf.PutBE64",
      "buf.PutUvarint",
      "buf.PutBEFloat64",
      "buf.PutByte",
      "byte"
    ],
    "EncodeLabels": [
      "buf.PutUvarintStr",
      "buf.PutUvarint",
      "lbls.Len",
      "lbls.Range"
    ],
    "EncodePostingsRaw": [
      "e.PutBE32int",
      "len",
      "fmt.Errorf",
      "e.PutBE32"
    ],
    "EncodeReadResponse": [
      "w.Write",
      "proto.Marshal",
      "snappy.Encode"
    ],
    "Encoder.CustomBucketsFloatHistogramSamples": [
      "uint64",
      "buf.PutBE64int64",
      "int64",
      "EncodeFloatHistogram",
      "buf.PutByte",
      "byte",
      "len",
      "buf.Get",
      "buf.PutBE64",
      "buf.PutVarint64"
    ],
    "Encoder.CustomBucketsHistogramSamples": [
      "len",
      "buf.PutBE64int64",
      "buf.PutVarint64",
      "int64",
      "buf.PutByte",
      "byte",
      "buf.Get",
      "buf.PutBE64",
      "uint64",
      "EncodeHistogram"
    ],
    "Encoder.EncodeExemplarsIntoBuffer": [
      "buf.PutBE64int64",
      "buf.PutVarint64",
      "int64",
      "math.Float64bits",
      "EncodeLabels",
      "buf.PutBE64",
      "uint64"
    ],
    "Encoder.Exemplars": [
      "buf.PutByte",
      "byte",
      "len",
      "buf.Get",
      "e.EncodeExemplarsIntoBuffer"
    ],
    "Encoder.FloatHistogramSamples": [
      "buf.Reset",
      "byte",
      "len",
      "h.FH.UsesCustomBuckets",
      "int64",
      "EncodeFloatHistogram",
      "append",
      "buf.PutVarint64",
      "buf.PutByte",
      "buf.Get",
      "buf.PutBE64",
      "uint64",
      "buf.PutBE64int64"
    ],
    "Encoder.HistogramSamples": [
      "buf.PutVarint64",
      "int64",
      "buf.PutBE64",
      "uint64",
      "buf.PutBE64int64",
      "buf.Get",
      "h.H.UsesCustomBuckets",
      "append",
      "EncodeHistogram",
      "buf.Reset",
      "buf.PutByte",
      "byte",
      "len"
    ],
    "Encoder.Metadata": [
      "buf.PutUvarint64",
      "uint64",
      "buf.PutUvarint",
      "buf.PutUvarintStr",
      "buf.Get",
      "buf.PutByte",
      "byte"
    ],
    "Encoder.MmapMarkers": [
      "uint64",
      "buf.Get",
      "buf.PutByte",
      "byte",
      "buf.PutBE64"
    ],
    "Encoder.Samples": [
      "buf.PutBE64int64",
      "buf.PutVarint64",
      "math.Float64bits",
      "buf.PutByte",
      "len",
      "buf.Get",
      "buf.PutBE64",
      "byte",
      "uint64",
      "int64"
    ],
    "Encoder.Series": [
      "EncodeLabels",
      "buf.Get",
      "buf.PutByte",
      "byte",
      "buf.PutBE64",
      "uint64"
    ],
    "Encoder.Tombstones": [
      "byte",
      "buf.PutBE64",
      "uint64",
      "buf.PutVarint64",
      "buf.Get",
      "buf.PutByte"
    ],
    "EndpointSlice.Run": [
      "errors.Is",
      "ctx.Err",
      "e.logger.Error",
      "e.process",
      "e.queue.ShutDown",
      "append",
      "cache.WaitForCacheSync",
      "ctx.Done"
    ],
    "EndpointSlice.addServiceLabels": [
      "serviceLabels",
      "e.serviceStore.GetByKey",
      "namespacedName",
      "e.logger.Error",
      "tg.Labels.Merge"
    ],
    "EndpointSlice.buildEndpointSlice": [
      "lv",
      "addObjectMetaLabels",
      "addNodeLabels",
      "podLabels",
      "hasSeenPort",
      "strconv.FormatBool",
      "model.LabelName",
      "e.resolvePodRef",
      "target.Merge",
      "len",
      "endpointSliceSource",
      "e.addServiceLabels",
      "strconv.FormatUint",
      "uint64",
      "append",
      "namespacedName",
      "add",
      "string",
      "net.JoinHostPort",
      "strutil.SanitizeLabelName"
    ],
    "EndpointSlice.enqueue": [
      "cache.DeletionHandlingMetaNamespaceKeyFunc",
      "e.queue.Add"
    ],
    "EndpointSlice.enqueueNode": [
      "?.ByIndex",
      "e.endpointSliceInf.GetIndexer",
      "e.logger.Error",
      "e.enqueue"
    ],
    "EndpointSlice.hasSynced": [
      "e.serviceInf.HasSynced",
      "e.podInf.HasSynced",
      "e.endpointSliceInf.HasSynced"
    ],
    "EndpointSlice.process": [
      "send",
      "endpointSliceSourceFromNamespaceAndName",
      "e.buildEndpointSlice",
      "e.queue.Get",
      "e.queue.Done",
      "cache.SplitMetaNamespaceKey",
      "e.logger.Error",
      "e.endpointSliceStore.GetByKey"
    ],
    "EndpointSlice.resolvePodRef": [
      "e.podStore.GetByKey",
      "namespacedName",
      "e.logger.Error"
    ],
    "Endpoints.Run": [
      "ctx.Err",
      "e.logger.Error",
      "e.process",
      "e.queue.ShutDown",
      "append",
      "cache.WaitForCacheSync",
      "ctx.Done",
      "errors.Is"
    ],
    "Endpoints.addServiceLabels": [
      "serviceLabels",
      "e.serviceStore.GetByKey",
      "namespacedName",
      "e.logger.Error",
      "tg.Labels.Merge"
    ],
    "Endpoints.buildEndpoints": [
      "lv",
      "net.JoinHostPort",
      "addNodeLabels",
      "e.resolvePodRef",
      "append",
      "namespacedName",
      "podLabels",
      "strconv.FormatBool",
      "addObjectMetaLabels",
      "uint64",
      "e.logger.Warn",
      "add",
      "hasSeenPort",
      "strconv.FormatUint",
      "target.Merge",
      "string",
      "model.LabelName",
      "len",
      "endpointsSource",
      "e.addServiceLabels"
    ],
    "Endpoints.enqueue": [
      "e.queue.Add",
      "cache.DeletionHandlingMetaNamespaceKeyFunc"
    ],
    "Endpoints.enqueueNode": [
      "?.ByIndex",
      "e.endpointsInf.GetIndexer",
      "e.logger.Error",
      "e.enqueue"
    ],
    "Endpoints.enqueuePod": [
      "?.ByIndex",
      "e.endpointsInf.GetIndexer",
      "e.logger.Error",
      "e.enqueue"
    ],
    "Endpoints.hasSynced": [
      "e.endpointsInf.HasSynced",
      "e.serviceInf.HasSynced",
      "e.podInf.HasSynced"
    ],
    "Endpoints.process": [
      "e.logger.Error",
      "e.endpointsStore.GetByKey",
      "send",
      "endpointsSourceFromNamespaceAndName",
      "convertToEndpoints",
      "e.queue.Get",
      "e.queue.Done",
      "cache.SplitMetaNamespaceKey",
      "e.buildEndpoints"
    ],
    "Endpoints.resolvePodRef": [
      "namespacedName",
      "e.logger.Error",
      "e.podStore.GetByKey"
    ],
    "Engine.Close": [
      "ng.activeQueryTracker.Close"
    ],
    "Engine.NewInstantQuery": [
      "PreprocessExpr",
      "ng.newQuery",
      "ng.queueActive",
      "finishQueue",
      "parser.ParseExpr",
      "ng.validateOpts"
    ],
    "Engine.NewRangeQuery": [
      "ng.queueActive",
      "parser.ParseExpr",
      "ng.validateOpts",
      "ng.newQuery",
      "finishQueue",
      "expr.Type",
      "fmt.Errorf",
      "parser.DocumentedType",
      "PreprocessExpr"
    ],
    "Engine.NewTestQuery": [
      "parser.TestStmt",
      "stats.NewQueryTimers",
      "stats.NewQuerySamples"
    ],
    "Engine.SetQueryLogger": [
      "ng.queryLoggerLock.Lock",
      "ng.queryLoggerLock.Unlock",
      "ng.queryLogger.Close",
      "ng.logger.Warn",
      "ng.metrics.queryLogEnabled.Set"
    ],
    "Engine.exec": [
      "context.WithTimeout",
      "?.SpanID",
      "ctx.Value",
      "ng.queueActive",
      "trace.SpanFromContext",
      "contextDone",
      "slog.Any",
      "finishQueue",
      "evalSpanTimer.Finish",
      "panic",
      "ng.metrics.currentQueries.Inc",
      "ng.metrics.currentQueries.Dec",
      "stats.NewQueryStats",
      "logger.LogAttrs",
      "fmt.Errorf",
      "q.Statement",
      "append",
      "context.Background",
      "ng.queryLoggerLock.RUnlock",
      "execSpanTimer.Finish",
      "q.cancel",
      "ng.execEvalStmt",
      "ng.metrics.querySamples.Add",
      "ng.queryLoggerLock.RLock",
      "span.SpanContext",
      "q.stats.GetSpanTimer",
      "int64",
      "q.Stats",
      "s",
      "float64",
      "slog.New",
      "make",
      "formatDate"
    ],
    "Engine.execEvalStmt": [
      "ng.populateSeries",
      "timeMilliseconds",
      "s.Start.Equal",
      "s.Expr.Type",
      "durationMilliseconds",
      "FindMinMaxTime",
      "querier.Close",
      "setOffsetForAtModifier",
      "evaluator.Eval",
      "len",
      "contextDone",
      "query.stats.GetSpanTimer",
      "query.sampleStats.InitStepTracking",
      "evalSpanTimer.Finish",
      "panic",
      "fmt.Errorf",
      "val.Type",
      "query.queryable.Querier",
      "prepareSpanTimer.Finish",
      "make",
      "ng.sortMatrixResult"
    ],
    "Engine.getLastSubqueryInterval": [
      "time.Duration",
      "ng.noStepSubqueryIntervalFn",
      "durationMilliseconds"
    ],
    "Engine.newQuery": [
      "opts.EnablePerStepStats",
      "NewPrometheusQueryOpts",
      "opts.LookbackDelta",
      "stats.NewQueryTimers",
      "stats.NewQuerySamples"
    ],
    "Engine.populateSeries": [
      "ng.getLastSubqueryInterval",
      "durationMilliseconds",
      "extractFuncFromPath",
      "extractGroupsFromPath",
      "querier.Select",
      "parser.Inspect",
      "getTimeRangesForSelector"
    ],
    "Engine.queueActive": [
      "q.stats.GetSpanTimer",
      "ng.activeQueryTracker.Insert",
      "queueSpanTimer.Finish",
      "ng.activeQueryTracker.Delete"
    ],
    "Engine.sortMatrixResult": [
      "query.stats.GetSpanTimer",
      "sort.Sort",
      "sortSpanTimer.Finish"
    ],
    "Engine.validateOpts": [
      "parser.Inspect"
    ],
    "EngineQueryFunc": [
      "engine.NewInstantQuery",
      "q.Exec",
      "errors.New"
    ],
    "EnrichParseError": [
      "errors.As",
      "enrich"
    ],
    "Equal": [
      "slices.Equal",
      "len",
      "decodeString",
      "value.IsStaleNaN",
      "math.IsNaN",
      "math.Abs",
      "math.Min"
    ],
    "ErrQueryCanceled.Error": [
      "fmt.Sprintf",
      "string"
    ],
    "ErrQueryTimeout.Error": [
      "fmt.Sprintf",
      "string"
    ],
    "ErrStorage.Error": [
      "e.Err.Error"
    ],
    "ErrTooManySamples.Error": [
      "fmt.Sprintf",
      "string"
    ],
    "Error.Error": [
      "fmt.Sprintf"
    ],
    "EvalNodeHelper.resetBuilder": [
      "labels.NewBuilder",
      "enh.lb.Reset"
    ],
    "EvalNodeHelper.resetHistograms": [
      "append",
      "annotations.NewBadBucketLabelWarning",
      "arg.PositionRange",
      "annotations.NewMixedClassicNativeHistogramsWarning",
      "strconv.ParseFloat",
      "sample.Metric.BytesWithoutLabels",
      "string",
      "sample.Metric.Bytes",
      "sample.Metric.Get",
      "annos.Add",
      "labels.NewBuilder",
      "len",
      "?.Labels",
      "?.Del",
      "delete"
    ],
    "EvalStmt.PositionRange": [
      "e.Expr.PositionRange"
    ],
    "EvalStmt.Pretty": [
      "e.Expr.String"
    ],
    "EvalStmt.String": [
      "node.Expr.String"
    ],
    "Example": [
      "ss.Next",
      "ss.At",
      "db.Querier",
      "len",
      "os.RemoveAll",
      "labels.MustNewMatcher",
      "series.Labels",
      "it.Next",
      "ss.Warnings",
      "querier.Select",
      "?.Unix",
      "series.Iterator",
      "labels.FromStrings",
      "app.Append",
      "time.Sleep",
      "ss.Err",
      "noErr",
      "db.Appender",
      "time.Now",
      "os.MkdirTemp",
      "fmt.Println",
      "it.Err",
      "querier.Close",
      "db.Close",
      "context.Background",
      "DefaultOptions",
      "app.Commit",
      "?.String",
      "it.At",
      "Open"
    ],
    "Exemplar.Equals": [
      "labels.Equal"
    ],
    "Exemplar.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "Exemplar.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "m.MarshalToSizedBuffer",
      "m.MarshalToSizedBuffer",
      "m.Size"
    ],
    "Exemplar.MarshalToSizedBuffer": [
      "math.Float64bits",
      "len",
      "copy",
      "m.Timestamp.MarshalToSizedBuffer",
      "encodeVarintMetrics",
      "uint64",
      "encoding_binary.LittleEndian.PutUint64",
      "float64",
      "?.MarshalToSizedBuffer",
      "float64",
      "make",
      "uint8",
      "len",
      "math.Float64bits",
      "uint64",
      "encoding_binary.LittleEndian.PutUint64",
      "copy",
      "encodeVarintTypes",
      "float64",
      "?.MarshalToSizedBuffer",
      "len",
      "copy",
      "encodeVarintTypes",
      "uint64",
      "encoding_binary.LittleEndian.PutUint64",
      "math.Float64bits"
    ],
    "Exemplar.Size": [
      "uint64",
      "m.Timestamp.Size",
      "len",
      "e.Size",
      "sovMetrics",
      "uint64",
      "len",
      "sovTypes",
      "sovTypes",
      "uint64",
      "len",
      "e.Size"
    ],
    "Exemplar.String": [
      "proto.CompactTextString",
      "proto.CompactTextString",
      "proto.CompactTextString"
    ],
    "Exemplar.ToExemplar": [
      "labelProtosToLabels",
      "m.GetLabels",
      "desymbolizeLabels"
    ],
    "Exemplar.Unmarshal": [
      "encoding_binary.LittleEndian.Uint64",
      "float64",
      "math.Float64frombits",
      "uint",
      "int",
      "fmt.Errorf",
      "append",
      "?.Unmarshal",
      "len",
      "uint64",
      "int32",
      "m.Timestamp.Unmarshal",
      "skipMetrics",
      "int32",
      "uint32",
      "encoding_binary.LittleEndian.Uint64",
      "int64",
      "len",
      "uint",
      "append",
      "make",
      "uint64",
      "int",
      "float64",
      "skipTypes",
      "fmt.Errorf",
      "math.Float64frombits",
      "int",
      "fmt.Errorf",
      "?.Unmarshal",
      "encoding_binary.LittleEndian.Uint64",
      "math.Float64frombits",
      "len",
      "uint64",
      "int32",
      "int64",
      "skipTypes",
      "uint",
      "append",
      "float64"
    ],
    "Exemplar.XXX_DiscardUnknown": [
      "xxx_messageInfo_Exemplar.DiscardUnknown",
      "xxx_messageInfo_Exemplar.DiscardUnknown",
      "xxx_messageInfo_Exemplar.DiscardUnknown"
    ],
    "Exemplar.XXX_Marshal": [
      "cap",
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_Exemplar.Marshal",
      "xxx_messageInfo_Exemplar.Marshal",
      "cap",
      "m.MarshalToSizedBuffer",
      "cap",
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_Exemplar.Marshal"
    ],
    "Exemplar.XXX_Merge": [
      "xxx_messageInfo_Exemplar.Merge",
      "xxx_messageInfo_Exemplar.Merge",
      "xxx_messageInfo_Exemplar.Merge"
    ],
    "Exemplar.XXX_Size": [
      "m.Size",
      "m.Size",
      "m.Size"
    ],
    "Exemplar.XXX_Unmarshal": [
      "m.Unmarshal",
      "m.Unmarshal",
      "m.Unmarshal"
    ],
    "ExpandChunks": [
      "iter.Next",
      "append",
      "iter.At",
      "iter.Err"
    ],
    "ExpandPostings": [
      "p.Err",
      "p.Next",
      "append",
      "p.At"
    ],
    "ExpandSamples": [
      "iter.At",
      "math.IsNaN",
      "append",
      "newSampleFn",
      "iter.AtHistogram",
      "iter.AtFloatHistogram",
      "iter.Next",
      "iter.Err"
    ],
    "Expander.Expand": [
      "templateTextExpansionFailures.Inc",
      "?.Funcs",
      "text_template.New",
      "tmpl.Parse",
      "recover",
      "fmt.Errorf",
      "templateTextExpansionTotal.Inc",
      "tmpl.Option",
      "tmpl.Execute",
      "buffer.String"
    ],
    "Expander.ExpandHTML": [
      "recover",
      "fmt.Errorf",
      "html_template.New",
      "buffer.String",
      "html_template.HTML",
      "len",
      "tmpl.ParseFiles",
      "html_template.FuncMap",
      "tmpl.Option",
      "tmpl.Funcs",
      "tmpl.ExecuteTemplate",
      "tmpl.Execute",
      "?.Funcs",
      "tmpl.Parse"
    ],
    "Expander.ParseTest": [
      "?.Option",
      "?.Funcs",
      "text_template.New",
      "?.Parse"
    ],
    "ExponentialBlockRanges": [
      "make",
      "append",
      "int64"
    ],
    "Expressions.PositionRange": [
      "len",
      "mergeRanges"
    ],
    "Expressions.Pretty": [
      "fmt.Sprintf",
      "?.Pretty",
      "len"
    ],
    "Expressions.String": [
      "e.String",
      "len"
    ],
    "ExtractSelectors": [
      "Inspect",
      "append"
    ],
    "FPoint.MarshalJSON": [
      "strconv.FormatFloat",
      "json.Marshal",
      "float64"
    ],
    "FPoint.String": [
      "strconv.FormatFloat",
      "fmt.Sprintf"
    ],
    "FakeTestSuites": [
      "ju.Suite",
      "good.Case",
      "mixed.Case",
      "bad.Fail",
      "?.Abort",
      "errors.New",
      "?.Fail"
    ],
    "FastRegexMatcher.IsOptimized": [
      "len"
    ],
    "FastRegexMatcher.MatchString": [
      "m.matchString"
    ],
    "FastRegexMatcher.SetMatches": [
      "slices.Clone"
    ],
    "FastRegexMatcher.compileMatchStringFunction": [
      "len",
      "slices.Contains",
      "strings.HasPrefix",
      "strings.HasSuffix",
      "containsInOrder",
      "m.stringMatcher.Matches",
      "m.re.MatchString"
    ],
    "FdLimits": [
      "getLimits"
    ],
    "Fdatasync": [
      "f.Sync",
      "f.Sync",
      "syscall.Fdatasync",
      "int",
      "f.Fd"
    ],
    "FileLoader.Load": [
      "rulefmt.ParseFile"
    ],
    "FileLoader.Parse": [
      "parser.ParseExpr"
    ],
    "FileWriter.AddPadding": [
      "make",
      "fmt.Errorf",
      "uint64",
      "fw.Write"
    ],
    "FileWriter.Close": [
      "fw.f.Sync",
      "fw.f.Close",
      "fw.Flush"
    ],
    "FileWriter.Flush": [
      "fw.fbuf.Flush"
    ],
    "FileWriter.Remove": [
      "os.Remove"
    ],
    "FileWriter.Write": [
      "uint64",
      "fmt.Errorf",
      "fw.fbuf.Write"
    ],
    "FileWriter.WriteAt": [
      "fw.Flush",
      "fw.f.WriteAt",
      "int64"
    ],
    "FindIntersectingPostings": [
      "len",
      "heap.Init",
      "p.Err",
      "make",
      "it.Next",
      "append",
      "it.Err",
      "h.empty",
      "p.Seek",
      "h.at",
      "p.At",
      "h.popIndex",
      "h.next"
    ],
    "FindMinMaxTime": [
      "parser.Inspect",
      "getTimeRangesForSelector"
    ],
    "FloatBucketsMatch": [
      "math.Float64bits",
      "len"
    ],
    "FloatHistogram.Add": [
      "FloatBucketsMatch",
      "h.reconcileZeroBuckets",
      "addBuckets",
      "reduceResolution",
      "h.UsesCustomBuckets",
      "other.UsesCustomBuckets"
    ],
    "FloatHistogram.AllBucketIterator": [
      "newReverseFloatBucketIterator",
      "h.floatBucketIterator"
    ],
    "FloatHistogram.AllReverseBucketIterator": [
      "newReverseFloatBucketIterator",
      "h.floatBucketIterator"
    ],
    "FloatHistogram.Compact": [
      "compactBuckets"
    ],
    "FloatHistogram.Copy": [
      "h.UsesCustomBuckets",
      "len",
      "make",
      "copy"
    ],
    "FloatHistogram.CopyTo": [
      "clearIfNotNil",
      "resize",
      "len",
      "copy",
      "h.UsesCustomBuckets"
    ],
    "FloatHistogram.CopyToSchema": [
      "h.UsesCustomBuckets",
      "panic",
      "fmt.Errorf",
      "IsCustomBucketsSchema",
      "reduceResolution",
      "h.Copy"
    ],
    "FloatHistogram.DetectReset": [
      "FloatBucketsMatch",
      "previous.zeroCountForLargerThreshold",
      "h.floatBucketIterator",
      "previous.floatBucketIterator",
      "detectReset",
      "h.UsesCustomBuckets",
      "previous.UsesCustomBuckets"
    ],
    "FloatHistogram.Equals": [
      "math.Float64bits",
      "h.UsesCustomBuckets",
      "FloatBucketsMatch",
      "spansMatch"
    ],
    "FloatHistogram.NegativeBucketIterator": [
      "h.floatBucketIterator"
    ],
    "FloatHistogram.NegativeReverseBucketIterator": [
      "newReverseFloatBucketIterator"
    ],
    "FloatHistogram.PositiveBucketIterator": [
      "h.floatBucketIterator"
    ],
    "FloatHistogram.PositiveReverseBucketIterator": [
      "newReverseFloatBucketIterator"
    ],
    "FloatHistogram.ReduceResolution": [
      "panic",
      "IsCustomBucketsSchema",
      "fmt.Errorf",
      "reduceResolution",
      "h.UsesCustomBuckets"
    ],
    "FloatHistogram.Size": [
      "len"
    ],
    "FloatHistogram.String": [
      "fmt.Fprintf",
      "it.Next",
      "it.At",
      "h.PositiveBucketIterator",
      "bucket.String",
      "sb.WriteRune",
      "h.NegativeBucketIterator",
      "append",
      "len",
      "?.String",
      "h.ZeroBucket",
      "sb.String"
    ],
    "FloatHistogram.Sub": [
      "h.UsesCustomBuckets",
      "other.UsesCustomBuckets",
      "FloatBucketsMatch",
      "h.reconcileZeroBuckets",
      "addBuckets",
      "reduceResolution"
    ],
    "FloatHistogram.TestExpression": [
      "fmt.Sprintf",
      "panic",
      "strings.Join",
      "addBuckets",
      "h.Copy",
      "m.Compact",
      "append",
      "m.UsesCustomBuckets",
      "len"
    ],
    "FloatHistogram.UsesCustomBuckets": [
      "IsCustomBucketsSchema"
    ],
    "FloatHistogram.Validate": [
      "checkHistogramCustomBounds",
      "len",
      "fmt.Errorf",
      "errors.New",
      "checkHistogramSpans",
      "checkHistogramBuckets",
      "h.UsesCustomBuckets"
    ],
    "FloatHistogram.ZeroBucket": [
      "h.UsesCustomBuckets",
      "panic"
    ],
    "FloatHistogram.floatBucketIterator": [
      "h.UsesCustomBuckets",
      "panic",
      "errors.New",
      "IsCustomBucketsSchema",
      "fmt.Errorf"
    ],
    "FloatHistogram.reconcileZeroBuckets": [
      "h.zeroCountForLargerThreshold",
      "h.trimBucketsInZeroBucket",
      "other.zeroCountForLargerThreshold"
    ],
    "FloatHistogram.trimBucketsInZeroBucket": [
      "h.NegativeBucketIterator",
      "h.Compact",
      "h.PositiveBucketIterator",
      "i.Next",
      "i.At"
    ],
    "FloatHistogram.zeroCountForLargerThreshold": [
      "i.At",
      "h.NegativeBucketIterator",
      "panic",
      "fmt.Errorf",
      "h.PositiveBucketIterator",
      "i.Next"
    ],
    "FloatHistogramAppender.Append": [
      "panic"
    ],
    "FloatHistogramAppender.AppendFloatHistogram": [
      "a.appendable",
      "a.appendFloatHistogram",
      "a.setCounterResetHeader",
      "happ.appendFloatHistogram",
      "len",
      "copy",
      "a.appendableGauge",
      "a.NumSamples",
      "make",
      "adjustForInserts",
      "fmt.Errorf",
      "newChunk.Appender",
      "errors.New",
      "NewFloatHistogramChunk",
      "panic",
      "happ.setCounterResetHeader",
      "a.recodeHistogram",
      "a.recode",
      "?.appendFloatHistogram",
      "prev.appendable"
    ],
    "FloatHistogramAppender.AppendHistogram": [
      "panic"
    ],
    "FloatHistogramAppender.GetCounterResetHeader": [
      "CounterResetHeader",
      "a.b.bytes"
    ],
    "FloatHistogramAppender.NumSamples": [
      "int",
      "binary.BigEndian.Uint16",
      "a.b.bytes"
    ],
    "FloatHistogramAppender.appendFloatHistogram": [
      "binary.BigEndian.Uint16",
      "len",
      "a.b.writeBits",
      "math.Float64bits",
      "a.b.bytes",
      "value.IsStaleNaN",
      "writeHistogramChunkLayout",
      "make",
      "copy",
      "countSpans",
      "putVarbitInt",
      "a.writeXorValue",
      "binary.BigEndian.PutUint16"
    ],
    "FloatHistogramAppender.appendable": [
      "a.NumSamples",
      "a.GetCounterResetHeader",
      "value.IsStaleNaN",
      "histogram.IsCustomBucketsSchema",
      "histogram.FloatBucketsMatch",
      "expandFloatSpansAndBuckets"
    ],
    "FloatHistogramAppender.appendableGauge": [
      "histogram.FloatBucketsMatch",
      "expandSpansBothWays",
      "a.NumSamples",
      "a.GetCounterResetHeader",
      "value.IsStaleNaN",
      "histogram.IsCustomBucketsSchema"
    ],
    "FloatHistogramAppender.recode": [
      "newFloatHistogramIterator",
      "countSpans",
      "a.b.bytes",
      "hc.Appender",
      "it.AtFloatHistogram",
      "make",
      "panic",
      "it.Next",
      "insert",
      "happ.setCounterResetHeader",
      "CounterResetHeader",
      "NewFloatHistogramChunk",
      "len",
      "happ.appendFloatHistogram"
    ],
    "FloatHistogramAppender.recodeHistogram": [
      "len",
      "countSpans",
      "insert",
      "make"
    ],
    "FloatHistogramAppender.setCounterResetHeader": [
      "a.b.bytes",
      "byte"
    ],
    "FloatHistogramAppender.writeXorValue": [
      "xorWrite"
    ],
    "FloatHistogramChunk.Appender": [
      "len",
      "c.iterator",
      "it.Next",
      "it.Err",
      "make"
    ],
    "FloatHistogramChunk.Bytes": [
      "c.b.bytes"
    ],
    "FloatHistogramChunk.Compact": [
      "len",
      "cap",
      "make",
      "copy"
    ],
    "FloatHistogramChunk.GetCounterResetHeader": [
      "CounterResetHeader",
      "c.Bytes"
    ],
    "FloatHistogramChunk.Iterator": [
      "c.iterator"
    ],
    "FloatHistogramChunk.Layout": [
      "c.NumSamples",
      "panic",
      "newBReader",
      "c.Bytes",
      "readHistogramChunkLayout"
    ],
    "FloatHistogramChunk.NumSamples": [
      "c.Bytes",
      "int",
      "binary.BigEndian.Uint16"
    ],
    "FloatHistogramChunk.Reset": [
      "c.b.Reset"
    ],
    "FloatHistogramChunk.iterator": [
      "histogramIter.Reset",
      "c.b.bytes",
      "newFloatHistogramIterator"
    ],
    "Flock": [
      "os.MkdirAll",
      "filepath.Dir",
      "os.Stat",
      "newLock"
    ],
    "FromData": [
      "fmt.Errorf"
    ],
    "FromFloatHistogram": [
      "spansToSpansProto",
      "Histogram_ResetHint",
      "spansToSpansProto",
      "Histogram_ResetHint"
    ],
    "FromFloatSeconds": [
      "int64",
      "math.Round"
    ],
    "FromIntHistogram": [
      "spansToSpansProto",
      "Histogram_ResetHint",
      "spansToSpansProto",
      "Histogram_ResetHint"
    ],
    "FromLabelMatchers": [
      "append",
      "make",
      "len",
      "errors.New",
      "labels.NewMatcher"
    ],
    "FromLabels": [
      "lbls.Range",
      "append"
    ],
    "FromMap": [
      "make",
      "len",
      "append",
      "New"
    ],
    "FromMaps": [
      "make",
      "labels.FromMap"
    ],
    "FromMetadataType": [
      "strings.ToUpper",
      "string",
      "MetricMetadata_MetricType"
    ],
    "FromOriginContext": [
      "ctx.Value"
    ],
    "FromQueryResult": [
      "validateLabelsAndMetricName",
      "labels.Compare",
      "slices.SortFunc",
      "a.Labels",
      "b.Labels",
      "labels.NewScratchBuilder",
      "make",
      "len",
      "ts.ToLabels",
      "append"
    ],
    "FromStrings": [
      "panic",
      "make",
      "append",
      "slices.SortFunc",
      "strings.Compare",
      "len",
      "len",
      "panic",
      "make",
      "append",
      "New",
      "len",
      "panic",
      "make",
      "append",
      "New"
    ],
    "FromStringsForBenchmark": [
      "ScratchBuilderForBenchmark",
      "b.Add",
      "b.Sort",
      "b.Labels",
      "len",
      "panic"
    ],
    "FromTime": [
      "t.Nanosecond",
      "t.Unix",
      "int64"
    ],
    "FuzzParseExpr": [
      "len",
      "parser.ParseExpr",
      "string"
    ],
    "FuzzParseMetric": [
      "fuzzParseMetricWithContentType"
    ],
    "FuzzParseMetricSelector": [
      "len",
      "parser.ParseMetricSelector",
      "string"
    ],
    "FuzzParseOpenMetric": [
      "fuzzParseMetricWithContentType"
    ],
    "Gate.Done": [
      "panic"
    ],
    "Gate.Start": [
      "ctx.Done",
      "ctx.Err"
    ],
    "Gauge.Marshal": [
      "make",
      "m.MarshalToSizedBuffer",
      "m.Size"
    ],
    "Gauge.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Gauge.MarshalToSizedBuffer": [
      "len",
      "copy",
      "encoding_binary.LittleEndian.PutUint64",
      "uint64",
      "math.Float64bits",
      "float64"
    ],
    "Gauge.Size": [
      "len"
    ],
    "Gauge.String": [
      "proto.CompactTextString"
    ],
    "Gauge.Unmarshal": [
      "skipMetrics",
      "uint",
      "fmt.Errorf",
      "math.Float64frombits",
      "int",
      "encoding_binary.LittleEndian.Uint64",
      "float64",
      "append",
      "len",
      "uint64",
      "int32"
    ],
    "Gauge.XXX_DiscardUnknown": [
      "xxx_messageInfo_Gauge.DiscardUnknown"
    ],
    "Gauge.XXX_Marshal": [
      "xxx_messageInfo_Gauge.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "Gauge.XXX_Merge": [
      "xxx_messageInfo_Gauge.Merge"
    ],
    "Gauge.XXX_Size": [
      "m.Size"
    ],
    "Gauge.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "GenerateBigTestHistograms": [
      "float64",
      "make",
      "append",
      "uint32",
      "uint64"
    ],
    "GenerateChecksum": [
      "promconfig.JoinDir",
      "filepath.Glob",
      "append",
      "hex.EncodeToString",
      "hash.Sum",
      "sha256.New",
      "os.ReadFile",
      "fmt.Errorf",
      "hash.Write",
      "yaml.Unmarshal",
      "filepath.Dir"
    ],
    "GenerateMarkdown": [
      "header",
      "writer.Write",
      "writeFlagTable",
      "writeArgTable",
      "writeCmdTable",
      "writeSubcommands"
    ],
    "GenerateSamples": [
      "generateSamples",
      "int64",
      "float64"
    ],
    "GenerateTestCustomBucketsFloatHistogram": [
      "float64"
    ],
    "GenerateTestCustomBucketsFloatHistograms": [
      "GenerateTestCustomBucketsFloatHistogram",
      "int64",
      "append"
    ],
    "GenerateTestCustomBucketsHistogram": [
      "uint64",
      "float64"
    ],
    "GenerateTestCustomBucketsHistograms": [
      "GenerateTestCustomBucketsHistogram",
      "int64",
      "append"
    ],
    "GenerateTestFloatHistogram": [
      "float64"
    ],
    "GenerateTestFloatHistograms": [
      "GenerateTestFloatHistogram",
      "int64",
      "append"
    ],
    "GenerateTestGaugeFloatHistogram": [
      "GenerateTestFloatHistogram"
    ],
    "GenerateTestGaugeFloatHistograms": [
      "int64",
      "math.Sin",
      "float64",
      "append",
      "GenerateTestGaugeFloatHistogram"
    ],
    "GenerateTestGaugeHistogram": [
      "GenerateTestHistogram"
    ],
    "GenerateTestGaugeHistograms": [
      "int64",
      "math.Sin",
      "float64",
      "append",
      "GenerateTestGaugeHistogram"
    ],
    "GenerateTestHistogram": [
      "float64",
      "uint64"
    ],
    "GenerateTestHistogramWithHint": [
      "GenerateTestHistogram",
      "int64"
    ],
    "GenerateTestHistograms": [
      "GenerateTestHistogram",
      "int64",
      "append"
    ],
    "GetControllerOf": [
      "controllee.GetOwnerReferences"
    ],
    "GetFQDN": [
      "os.Hostname",
      "len",
      "addr.To4",
      "addr.To16",
      "net.LookupIP",
      "ipStr.MarshalText",
      "net.LookupAddr",
      "string",
      "lookup"
    ],
    "GetHistogramMetricBase": [
      "?.Labels",
      "?.Del",
      "?.Set",
      "labels.NewBuilder"
    ],
    "GetHistogramMetricBaseName": [
      "strings.CutSuffix"
    ],
    "GetMetricType": [
      "uint8"
    ],
    "GlobalConfig.SetDirectory": [
      "config.JoinDir"
    ],
    "GlobalConfig.UnmarshalYAML": [
      "errors.New",
      "validateAcceptScrapeProtocols",
      "unmarshal",
      "gc.ExternalLabels.Validate",
      "?.IsValid",
      "model.LabelName",
      "fmt.Errorf",
      "model.LabelValue"
    ],
    "GlobalConfig.isZero": [
      "c.ExternalLabels.IsEmpty"
    ],
    "GraphLinkForExpression": [
      "url.QueryEscape",
      "fmt.Sprintf"
    ],
    "Group.AlertingRules": [
      "b.State",
      "strings.Compare",
      "a.Name",
      "b.Name",
      "g.mtx.Unlock",
      "append",
      "slices.SortFunc",
      "a.State",
      "int",
      "g.mtx.Lock"
    ],
    "Group.CopyState": [
      "nameAndLabels",
      "append",
      "make",
      "len"
    ],
    "Group.Equals": [
      "?.String",
      "len",
      "gr.String"
    ],
    "Group.Eval": [
      "otel.Tracer",
      "sp.SetAttributes",
      "sp.End",
      "time.Now",
      "samplesTotal.Add",
      "cleanup",
      "timestamp.FromTime",
      "ctrl.SplitGroupIntoBatches",
      "GroupKey",
      "g.opts.Appendable.Appender",
      "ts.Add",
      "rule.Name",
      "g.Limit",
      "make",
      "wg.Add",
      "?.IsSampled",
      "rule.SetLastError",
      "errors.As",
      "g.Name",
      "errors.Unwrap",
      "logger.Debug",
      "s.Metric.Bytes",
      "g.metrics.GroupSamples.WithLabelValues",
      "ar.sendAlerts",
      "g.metrics.EvalFailures.WithLabelValues",
      "len",
      "app.AppendHistogram",
      "string",
      "eval",
      "ctrl.Allow",
      "attribute.String",
      "errors.Is",
      "samplesTotal.Load",
      "app.Commit",
      "g.logger.With",
      "g.File",
      "rule.SetHealth",
      "math.Float64frombits",
      "g.QueryOffset",
      "app.SetOptions",
      "wg.Done",
      "ctrl.Done",
      "?.Set",
      "sp.SetStatus",
      "?.Inc",
      "app.Append",
      "?.HasTraceID",
      "wg.Wait",
      "?.TraceID",
      "rule.SetEvaluationDuration",
      "sp.SpanContext",
      "g.metrics.EvalTotal.WithLabelValues",
      "rule.Eval",
      "err.Error",
      "g.cleanupStaleSeries",
      "time.Since",
      "rule.SetEvaluationTimestamp",
      "logger.With",
      "logger.Warn",
      "float64",
      "?.Start",
      "since.Seconds",
      "lset.String",
      "g.metrics.EvalDuration.Observe"
    ],
    "Group.EvalTimestamp": [
      "int64",
      "g.hash",
      "uint64",
      "?.UTC",
      "time.Unix"
    ],
    "Group.GetEvaluationTime": [
      "g.mtx.Lock",
      "g.mtx.Unlock"
    ],
    "Group.GetLastEvalTimestamp": [
      "g.mtx.Lock",
      "g.mtx.Unlock"
    ],
    "Group.GetLastEvaluation": [
      "g.mtx.Unlock",
      "g.mtx.Lock"
    ],
    "Group.GetRuleEvaluationTimeSum": [
      "g.mtx.Unlock",
      "g.mtx.Lock"
    ],
    "Group.HasAlertingRules": [
      "g.mtx.Lock",
      "g.mtx.Unlock"
    ],
    "Group.MarshalJSON": [
      "len",
      "append",
      "string",
      "json.Marshal",
      "make"
    ],
    "Group.MarshalYAML": [
      "make",
      "len",
      "append",
      "string"
    ],
    "Group.QueryOffset": [
      "time.Duration",
      "g.opts.DefaultRuleQueryOffset"
    ],
    "Group.RestoreForState": [
      "?.Set",
      "alertRule.HoldDuration",
      "ts.Sub",
      "restoredActiveAt.Add",
      "time.Since",
      "model.TimeFromUnixNano",
      "alertRule.Name",
      "value.IsStaleNaN",
      "time.Unix",
      "int64",
      "len",
      "downAt.Sub",
      "?.Labels",
      "g.logger.Error",
      "q.Close",
      "GroupKey",
      "g.Rules",
      "sset.At",
      "alertRule.ForEachActiveAlert",
      "?.UTC",
      "?.Add",
      "?.Seconds",
      "a.Labels.String",
      "it.Next",
      "it.At",
      "alertRule.SetRestored",
      "ts.Add",
      "mint.UnixNano",
      "g.opts.Queryable.Querier",
      "alertRule.QueryForStateSeries",
      "make",
      "alertRule.ActiveAlertsCount",
      "sset.Next",
      "g.logger.Debug",
      "s.Iterator",
      "ts.UnixNano",
      "?.String",
      "?.DropMetricName",
      "it.Err",
      "a.ActiveAt.Format",
      "g.metrics.GroupLastRestoreDuration.WithLabelValues"
    ],
    "Group.Rules": [
      "len",
      "matchesMatcherSets",
      "rule.Labels",
      "append"
    ],
    "Group.UnmarshalJSON": [
      "model.LabelValue",
      "json.NewDecoder",
      "bytes.NewReader",
      "dec.DisallowUnknownFields",
      "dec.Decode",
      "make",
      "len",
      "append"
    ],
    "Group.UnmarshalYAML": [
      "unmarshal",
      "make",
      "len",
      "append",
      "model.LabelValue"
    ],
    "Group.cleanupStaleSeries": [
      "app.Append",
      "ts.Add",
      "errors.Unwrap",
      "len",
      "g.QueryOffset",
      "timestamp.FromTime",
      "math.Float64frombits",
      "errors.Is",
      "g.logger.Warn",
      "app.Commit",
      "g.opts.Appendable.Appender",
      "app.SetOptions"
    ],
    "Group.hash": [
      "labels.New",
      "l.Hash"
    ],
    "Group.run": [
      "time.NewTicker",
      "GroupKey",
      "promql.NewOriginContext",
      "time.Now",
      "g.File",
      "g.Name",
      "tick.Stop",
      "append",
      "g.evalIterationFunc",
      "g.metrics.IterationsMissed.WithLabelValues",
      "close",
      "evalTimestamp.Add",
      "time.Until",
      "g.cleanupStaleSeries",
      "time.Since",
      "g.metrics.IterationsScheduled.WithLabelValues",
      "?.Add",
      "?.UnixNano",
      "time.After",
      "float64",
      "g.RestoreForState",
      "g.EvalTimestamp"
    ],
    "Group.setEvaluationTime": [
      "?.Set",
      "g.metrics.GroupLastDuration.WithLabelValues",
      "GroupKey",
      "dur.Seconds",
      "g.mtx.Lock",
      "g.mtx.Unlock"
    ],
    "Group.setLastEvalTimestamp": [
      "g.mtx.Lock",
      "g.mtx.Unlock"
    ],
    "Group.setLastEvaluation": [
      "g.mtx.Lock",
      "g.mtx.Unlock",
      "?.Set",
      "g.metrics.GroupLastEvalTime.WithLabelValues",
      "GroupKey",
      "float64",
      "ts.UnixNano"
    ],
    "Group.stop": [
      "g.stopAsync",
      "g.waitStopped"
    ],
    "Group.stopAsync": [
      "close"
    ],
    "Group.updateRuleEvaluationTimeSum": [
      "g.metrics.GroupLastRuleDurationSum.WithLabelValues",
      "GroupKey",
      "sum.Seconds",
      "g.mtx.Lock",
      "g.mtx.Unlock",
      "rule.GetEvaluationDuration",
      "?.Set"
    ],
    "HPoint.MarshalJSON": [
      "p.H.AllBucketIterator",
      "it.Next",
      "it.At",
      "append",
      "json.Marshal",
      "float64",
      "strconv.FormatFloat"
    ],
    "HPoint.String": [
      "fmt.Sprintf",
      "p.H.String"
    ],
    "HPoint.size": [
      "p.H.Size"
    ],
    "HTTPResourceClient.Close": [
      "rc.client.CloseIdleConnections"
    ],
    "HTTPResourceClient.Fetch": [
      "http.NewRequest",
      "bytes.NewBuffer",
      "request.WithContext",
      "request.Header.Add",
      "io.ReadAll",
      "protoJSONUnmarshalOptions.Unmarshal",
      "rc.ResourceTypeURL",
      "protoJSONMarshalOptions.Marshal",
      "io.Copy",
      "resp.Body.Close",
      "fmt.Errorf",
      "rc.ID",
      "rc.client.Do"
    ],
    "Handler.ApplyConfig": [
      "h.mtx.Lock",
      "h.mtx.Unlock"
    ],
    "Handler.Listener": [
      "conntrack.NewListener",
      "conntrack.TrackWithName",
      "conntrack.TrackWithTracing",
      "h.logger.Info",
      "net.Listen",
      "netconnlimit.SharedLimitListener"
    ],
    "Handler.Listeners": [
      "netconnlimit.NewSharedSemaphore",
      "h.Listener",
      "append"
    ],
    "Handler.Run": [
      "h.metrics.instrumentHandlerWithPrefix",
      "setPathWithPrefix",
      "h.logger.Handler",
      "httpSrv.Shutdown",
      "mux.Handle",
      "http.StripPrefix",
      "slog.NewLogLogger",
      "otelhttp.WithSpanNameFormatter",
      "withStackTracer",
      "otelhttp.NewHandler",
      "make",
      "h.logger.Info",
      "h.Listeners",
      "route.New",
      "h.apiV1.Register",
      "ctx.Done",
      "len",
      "?.WithInstrumentation",
      "fmt.Sprintf",
      "toolkit_web.ServeMultiple",
      "http.NewServeMux"
    ],
    "Handler.SetReady": [
      "h.ready.Store",
      "uint32",
      "h.metrics.readyStatus.Set"
    ],
    "Handler.consoles": [
      "route.Param",
      "h.mtx.RUnlock",
      "strings.TrimLeft",
      "append",
      "io.WriteString",
      "err.Error",
      "file.Close",
      "h.now",
      "tmpl.ExpandHTML",
      "r.Context",
      "?.Open",
      "http.Error",
      "strings.Join",
      "http.Dir",
      "io.ReadAll",
      "httputil.ContextFromRequest",
      "url.ParseQuery",
      "h.mtx.RLock",
      "els.Map",
      "template.NewTemplateExpander",
      "string",
      "template.QueryFunc",
      "rules.EngineQueryFunc",
      "filepath.Glob"
    ],
    "Handler.consolesPath": [
      "os.Stat",
      "os.IsNotExist"
    ],
    "Handler.federation": [
      "req.ParseForm",
      "expfmt.Negotiate",
      "h.localStorage.Querier",
      "q.Select",
      "append",
      "int64",
      "h.mtx.RUnlock",
      "?.Add",
      "?.Time",
      "h.config.GlobalConfig.ExternalLabels.Map",
      "format.FormatType",
      "s.Metric.Validate",
      "dto.MetricType_HISTOGRAM.Enum",
      "set.Next",
      "len",
      "federationWarnings.Add",
      "proto.Int64",
      "fmt.Sprintf",
      "h.logger.Debug",
      "sort.Strings",
      "timestamp.FromTime",
      "s.Iterator",
      "b.Metric.Get",
      "it.Seek",
      "dto.MetricType_GAUGE_HISTOGRAM.Enum",
      "w.Header",
      "storage.NewMergeSeriesSet",
      "it.Reset",
      "h.logger.Warn",
      "expfmt.NewEncoder",
      "it.PeekBack",
      "set.Err",
      "storage.NewBuffer",
      "it.AtFloatHistogram",
      "float64",
      "sample.T",
      "proto.Float64",
      "sample.FH",
      "enc.Encode",
      "h.logger.Error",
      "parser.ParseMetricSelectors",
      "errors.Is",
      "slices.SortFunc",
      "sample.F",
      "value.IsStaleNaN",
      "strings.Compare",
      "http.Error",
      "err.Error",
      "?.Set",
      "make",
      "set.At",
      "it.At",
      "?.ToFloat",
      "sample.H",
      "set.Warnings",
      "?.Error",
      "dto.MetricType_UNTYPED.Enum",
      "h.now",
      "string",
      "q.Close",
      "proto.Uint32",
      "a.Metric.Get",
      "sample.Type",
      "s.Labels",
      "proto.String",
      "proto.Int32",
      "h.mtx.RLock",
      "req.Context",
      "federationErrors.Inc"
    ],
    "Handler.isReady": [
      "ReadyStatus",
      "h.ready.Load"
    ],
    "Handler.quit": [
      "close",
      "fmt.Fprintf",
      "h.quitOnce.Do"
    ],
    "Handler.reload": [
      "http.Error",
      "fmt.Sprintf",
      "make"
    ],
    "Handler.runtimeInfo": [
      "toFloat64",
      "time.Unix",
      "runtime.GOMAXPROCS",
      "os.Getenv",
      "int64",
      "debug.SetMemoryLimit",
      "?.UTC",
      "time.Now",
      "h.options.TSDBRetentionDuration.String",
      "fmt.Errorf",
      "h.options.TSDBMaxBytes.String",
      "h.gatherer.Gather",
      "runtime.NumGoroutine",
      "os.Hostname"
    ],
    "Handler.testReady": [
      "?.Set",
      "w.Header",
      "fmt.Fprintf",
      "ReadyStatus",
      "h.ready.Load",
      "f",
      "w.WriteHeader"
    ],
    "Handler.version": [
      "json.NewEncoder",
      "dec.Encode",
      "http.Error",
      "fmt.Sprintf"
    ],
    "HardLinkChunkFiles": [
      "os.Link",
      "filepath.Join",
      "os.Stat",
      "os.IsNotExist",
      "fmt.Errorf",
      "os.MkdirAll",
      "listChunkFiles",
      "filepath.Split"
    ],
    "HashRatioSampler.AddRatioSample": [
      "s.sampleOffset"
    ],
    "HashRatioSampler.sampleOffset": [
      "float64",
      "sample.Metric.Hash"
    ],
    "Head.AppendableMinValidTime": [
      "h.initialized",
      "h.appendableMinValidTime"
    ],
    "Head.Appender": [
      "h.metrics.activeAppenders.Inc",
      "h.initialized",
      "h.appender"
    ],
    "Head.ApplyConfig": [
      "h.opts.MaxExemplars.Store",
      "?.Resize",
      "h.logger.Info",
      "int64",
      "h.SetOutOfOrderTimeWindow",
      "h.opts.MaxExemplars.Load"
    ],
    "Head.ChunkSnapshot": [
      "os.MkdirAll",
      "encodeTombstonesToSnapshotRecord",
      "make",
      "h.series.getByHash",
      "h.logger.Warn",
      "h.chunkSnapshotMtx.Unlock",
      "flushExemplars",
      "seriesLabels.Hash",
      "DeleteChunkSnapshots",
      "h.wal.CompressionType",
      "?.RLock",
      "h.exemplars.IterateExemplars",
      "os.RemoveAll",
      "encbuf.PutByte",
      "len",
      "enc.EncodeExemplarsIntoBuffer",
      "encbuf.Get",
      "h.wal.LastSegmentAndOffset",
      "h.Tombstones",
      "cp.Close",
      "fileutil.Replace",
      "fmt.Errorf",
      "LastChunkSnapshot",
      "chunkSnapshotDir",
      "s.encodeToSnapshotRecord",
      "append",
      "?.RUnlock",
      "h.chunkSnapshotMtx.Lock",
      "errors.Is",
      "cp.Log",
      "h.logger.Error",
      "filepath.Join",
      "wlog.New"
    ],
    "Head.Chunks": [
      "h.chunksRange",
      "h.iso.State"
    ],
    "Head.Close": [
      "h.closedMtx.Lock",
      "h.mmapHeadChunks",
      "tsdb_errors.NewMulti",
      "h.chunkDiskMapper.Close",
      "h.performChunkSnapshot",
      "h.closedMtx.Unlock",
      "errs.Add",
      "h.wal.Close",
      "h.wbl.Close",
      "errs.Err"
    ],
    "Head.Delete": [
      "h.MinTime",
      "enc.Tombstones",
      "clampInterval",
      "h.indexRange",
      "ctx.Err",
      "h.logger.Debug",
      "series.Unlock",
      "series.minTime",
      "append",
      "p.Err",
      "h.MaxTime",
      "fmt.Errorf",
      "p.Next",
      "p.At",
      "series.Lock",
      "h.wal.Log",
      "PostingsForMatchers",
      "h.series.getByID",
      "chunks.HeadSeriesRef",
      "series.maxTime",
      "h.tombstones.AddInterval"
    ],
    "Head.DisableNativeHistograms": [
      "h.opts.EnableNativeHistograms.Store"
    ],
    "Head.EnableNativeHistograms": [
      "h.opts.EnableNativeHistograms.Store"
    ],
    "Head.ExemplarQuerier": [
      "h.exemplars.ExemplarQuerier"
    ],
    "Head.Index": [
      "h.indexRange"
    ],
    "Head.Init": [
      "checkpointReplayDuration.String",
      "h.wal.Dir",
      "mmapChunkReplayDuration.String",
      "h.loadWAL",
      "wlog.SegmentName",
      "wlog.NewSegmentBufReader",
      "totalReplayDuration.String",
      "h.gc",
      "h.minValidTime.Load",
      "h.metrics.snapshotReplayErrorTotal.Inc",
      "chunkSnapshotLoadDuration.String",
      "h.loadMmappedChunks",
      "h.metrics.dataTotalReplayDuration.Set",
      "h.minTime.Store",
      "h.loadChunkSnapshot",
      "time.Since",
      "fmt.Errorf",
      "DeleteChunkSnapshots",
      "h.removeCorruptedMmappedChunks",
      "h.updateWALReplayStatusRead",
      "h.loadWBL",
      "h.resetWLReplayResources",
      "h.logger.Info",
      "make",
      "LastChunkSnapshot",
      "wlog.NewSegmentsReader",
      "sr.Close",
      "h.wbl.Dir",
      "h.MinTime",
      "time.Now",
      "wlog.Segments",
      "wblReplayDuration.String",
      "errors.As",
      "wlog.LastCheckpoint",
      "wlog.NewReader",
      "h.resetInMemoryState",
      "labels.NewSymbolTable",
      "wlog.OpenReadSegment",
      "walReplayDuration.String",
      "h.postings.EnsureOrder",
      "errors.Is",
      "h.logger.Error",
      "h.startWALReplayStatus",
      "wlog.NewSegmentBufReaderWithOffset",
      "totalReplayDuration.Seconds",
      "h.minValidTime.Store",
      "h.logger.Warn",
      "h.metrics.mmapChunkCorruptionTotal.Inc"
    ],
    "Head.IsQuerierCollidingWithTruncation": [
      "h.memTruncationInProcess.Load",
      "h.lastMemoryTruncationTime.Load"
    ],
    "Head.MaxOOOTime": [
      "h.maxOOOTime.Load"
    ],
    "Head.MaxTime": [
      "h.maxTime.Load"
    ],
    "Head.Meta": [
      "h.NumSeries",
      "h.MinTime",
      "h.MaxTime"
    ],
    "Head.MinOOOTime": [
      "h.minOOOTime.Load"
    ],
    "Head.MinTime": [
      "h.minTime.Load"
    ],
    "Head.NumSeries": [
      "h.numSeries.Load"
    ],
    "Head.OverlapsClosedInterval": [
      "h.MinTime",
      "h.MaxTime"
    ],
    "Head.PostingsCardinalityStats": [
      "time.Now",
      "h.postings.Stats",
      "strconv.Itoa",
      "h.cardinalityMutex.Lock",
      "h.cardinalityMutex.Unlock",
      "time.Duration",
      "?.Unix"
    ],
    "Head.RebuildSymbolTable": [
      "logger.Info",
      "s.Lock",
      "labels.NewSymbolTable",
      "builder.Reset",
      "builder.Labels",
      "rebuildLabels",
      "e.ResetSymbolTable",
      "s.Unlock",
      "st.Len",
      "labels.NewScratchBuilderWithSymbolTable",
      "lbls.Range",
      "builder.Add",
      "?.Lock",
      "?.Unlock"
    ],
    "Head.SetMinValidTime": [
      "h.minValidTime.Store"
    ],
    "Head.SetOutOfOrderTimeWindow": [
      "h.opts.OutOfOrderTimeWindow.Store"
    ],
    "Head.Size": [
      "h.wbl.Size",
      "h.chunkDiskMapper.Size",
      "h.wal.Size"
    ],
    "Head.Stats": [
      "h.NumSeries",
      "h.MaxTime",
      "h.MinTime",
      "h.PostingsCardinalityStats"
    ],
    "Head.Truncate": [
      "h.initialized",
      "h.truncateMemory",
      "h.truncateWAL"
    ],
    "Head.WaitForAppendersOverlapping": [
      "h.iso.lowestAppendTime",
      "time.Sleep"
    ],
    "Head.WaitForPendingReadersForOOOChunksAtOrBefore": [
      "h.oooIso.HasOpenReadsAtOrBefore",
      "time.Sleep"
    ],
    "Head.WaitForPendingReadersInTimeRange": [
      "time.Sleep",
      "h.iso.TraverseOpenReads",
      "overlaps"
    ],
    "Head.appendableMinValidTime": [
      "h.MaxTime",
      "h.chunkRange.Load",
      "h.minValidTime.Load",
      "max"
    ],
    "Head.appender": [
      "h.appendableMinValidTime",
      "h.getExemplarBuffer",
      "h.MaxTime",
      "h.opts.OutOfOrderTimeWindow.Load",
      "h.getAppendBuffer",
      "h.getHistogramBuffer",
      "h.getFloatHistogramBuffer",
      "h.getMetadataBuffer",
      "h.iso.newAppendID",
      "h.getSeriesBuffer"
    ],
    "Head.chunkFromSeries": [
      "s.oooChunk",
      "c.OverlapsClosedInterval",
      "copy",
      "s.headChunks.chunk.Encoding",
      "s.chunk",
      "h.memChunkPool.Put",
      "s.headChunks.chunk.Bytes",
      "make",
      "len",
      "h.opts.ChunkPool.Get"
    ],
    "Head.chunksRange": [
      "h.closedMtx.Unlock",
      "errors.New",
      "h.MinTime",
      "h.closedMtx.Lock"
    ],
    "Head.compactable": [
      "h.initialized",
      "h.MaxTime",
      "h.MinTime",
      "h.chunkRange.Load"
    ],
    "Head.gc": [
      "h.metrics.seriesRemoved.Add",
      "h.metrics.chunksRemoved.Add",
      "h.tombstones.DeleteTombstones",
      "h.minOOOMmapRef.Load",
      "h.series.gc",
      "len",
      "h.numSeries.Sub",
      "uint64",
      "h.tombstones.TruncateBefore",
      "h.walExpiriesMtx.Lock",
      "h.MinTime",
      "float64",
      "h.metrics.chunks.Sub",
      "h.wal.Dir",
      "chunks.HeadSeriesRef",
      "h.walExpiriesMtx.Unlock",
      "chunks.ChunkDiskMapperRef",
      "h.postings.Delete",
      "wlog.Segments"
    ],
    "Head.getAppendBuffer": [
      "h.appendPool.Get",
      "make"
    ],
    "Head.getBytesBuffer": [
      "h.bytesPool.Get",
      "make"
    ],
    "Head.getExemplarBuffer": [
      "h.exemplarsPool.Get",
      "make"
    ],
    "Head.getFloatHistogramBuffer": [
      "make",
      "h.floatHistogramsPool.Get"
    ],
    "Head.getHistogramBuffer": [
      "h.histogramsPool.Get",
      "make"
    ],
    "Head.getMetadataBuffer": [
      "make",
      "h.metadataPool.Get"
    ],
    "Head.getOrCreate": [
      "h.series.getByHash",
      "chunks.HeadSeriesRef",
      "h.lastSeriesID.Inc",
      "h.getOrCreateWithID"
    ],
    "Head.getOrCreateWithID": [
      "h.series.getOrSet",
      "h.metrics.seriesCreated.Inc",
      "uint64",
      "labels.StableHash",
      "newMemSeries",
      "h.numSeries.Inc",
      "h.postings.Add",
      "storage.SeriesRef",
      "h.series.postCreation"
    ],
    "Head.getSeriesBuffer": [
      "h.seriesPool.Get",
      "make"
    ],
    "Head.getWALExpiry": [
      "h.walExpiriesMtx.Lock",
      "h.walExpiriesMtx.Unlock"
    ],
    "Head.indexRange": [
      "h.MinTime"
    ],
    "Head.initTime": [
      "h.minTime.CompareAndSwap",
      "h.maxTime.CompareAndSwap"
    ],
    "Head.initialized": [
      "h.MinTime"
    ],
    "Head.keepSeriesInWALCheckpoint": [
      "h.series.getByID",
      "h.getWALExpiry"
    ],
    "Head.loadChunkSnapshot": [
      "errors.Is",
      "wlog.NewSegmentsReader",
      "h.getOrCreateWithID",
      "r.Next",
      "merr.Err",
      "decodeSeriesFromChunkSnapshot",
      "decodeTombstonesSnapshotRecord",
      "h.tombstones.AddInterval",
      "time.Since",
      "int64",
      "h.lastSeriesID.Load",
      "h.lastSeriesID.CompareAndSwap",
      "len",
      "h.opts.MaxExemplars.Load",
      "merr.Add",
      "h.logger.Warn",
      "make",
      "csr.lset.Hash",
      "series.headChunks.chunk.Appender",
      "tr.Iter",
      "close",
      "dec.ExemplarsFromBuffer",
      "h.exemplars.AddExemplar",
      "tsdb_errors.NewMulti",
      "h.logger.Info",
      "r.Record",
      "wg.Wait",
      "LastChunkSnapshot",
      "time.Now",
      "sr.Close",
      "wg.Add",
      "wg.Done",
      "h.updateMinMaxTime",
      "ms.labels",
      "elapsed.String",
      "fmt.Errorf",
      "labels.NewSymbolTable",
      "record.NewDecoder",
      "uint64",
      "wlog.NewReader",
      "r.Err"
    ],
    "Head.loadMmappedChunks": [
      "append",
      "h.updateMinMaxTime",
      "h.chunkDiskMapper.IterateAllChunks",
      "chunkenc.IsValidEncoding",
      "h.metrics.chunks.Inc",
      "h.metrics.chunksCreated.Inc",
      "h.updateMinOOOMaxOOOTime",
      "len",
      "h.metrics.mmapChunkCorruptionTotal.Inc",
      "fmt.Errorf",
      "h.minValidTime.Load"
    ],
    "Head.loadWAL": [
      "unknownHistogramRefs.Add",
      "dec.Tombstones",
      "h.lastSeriesID.Load",
      "?.reuseHistogramBuf",
      "panic",
      "float64",
      "h.logger.Warn",
      "h.wlReplayMetadataPool.Get",
      "h.wlReplayHistogramsPool.Get",
      "h.getOrCreateWithID",
      "walSeries.Labels.Hash",
      "wg.Done",
      "h.tombstones.AddInterval",
      "unknownExemplarRefs.Load",
      "unknownTombstoneRefs.Load",
      "h.logger.Info",
      "unknownSeriesRefs.merge",
      "h.exemplars.AddExemplar",
      "h.wlReplaytStonesPool.Get",
      "h.wlReplayExemplarsPool.Get",
      "uint64",
      "unknownMetadataRefs.Inc",
      "unknownHistogramRefs.Load",
      "dec.Exemplars",
      "h.wlReplaySeriesPool.Put",
      "?.reuseBuf",
      "h.wlReplayHistogramsPool.Put",
      "h.wlReplayMetadataPool.Put",
      "len",
      "h.wlReplaySamplesPool.Put",
      "storage.SeriesRef",
      "unknownSampleRefs.Load",
      "ms.labels",
      "r.Next",
      "dec.Type",
      "append",
      "h.wlReplaySamplesPool.Get",
      "dec.FloatHistogramSamples",
      "unknownTombstoneRefs.Inc",
      "min",
      "?.closeAndDrain",
      "h.series.getByID",
      "r.Record",
      "h.wlReplaySeriesPool.Get",
      "r.Offset",
      "dec.HistogramSamples",
      "chunks.HeadSeriesRef",
      "unknownMetadataRefs.Load",
      "unknownSeriesRefs.count",
      "close",
      "wg.Wait",
      "?.setup",
      "h.lastSeriesID.Store",
      "h.wlReplayExemplarsPool.Put",
      "h.wlReplayFloatHistogramsPool.Put",
      "record.ToMetricType",
      "fmt.Errorf",
      "r.Segment",
      "h.wlReplayFloatHistogramsPool.Get",
      "h.minValidTime.Load",
      "h.wlReplaytStonesPool.Put",
      "mmapOverlappingChunks.Load",
      "wg.Add",
      "unknownSampleRefs.Add",
      "record.NewDecoder",
      "dec.Series",
      "dec.Samples",
      "counterAddNonZero",
      "make",
      "errors.Is",
      "h.setWALExpiry",
      "r.Err",
      "wp.processWALSamples",
      "mmapOverlappingChunks.Add",
      "unknownExemplarRefs.Inc",
      "dec.Metadata"
    ],
    "Head.loadWBL": [
      "h.wlReplayHistogramsPool.Put",
      "panic",
      "wg.Wait",
      "dec.HistogramSamples",
      "len",
      "uint64",
      "?.reuseHistogramBuf",
      "r.Err",
      "unknownHistogramRefs.Load",
      "h.logger.Warn",
      "?.closeAndDrain",
      "wp.processWBLSamples",
      "fmt.Errorf",
      "dec.MmapMarkers",
      "h.wlReplayFloatHistogramsPool.Get",
      "wg.Add",
      "unknownSeriesRefs.merge",
      "min",
      "unknownSampleRefs.Add",
      "r.Record",
      "h.wlReplayMmapMarkersPool.Get",
      "append",
      "h.wlReplaySamplesPool.Put",
      "rm.MmapRef.Unpack",
      "make",
      "wg.Done",
      "r.Next",
      "r.Offset",
      "dec.FloatHistogramSamples",
      "unknownSampleRefs.Load",
      "mmapMarkerUnknownRefs.Load",
      "unknownSeriesRefs.count",
      "?.setup",
      "dec.Type",
      "h.wlReplaySamplesPool.Get",
      "h.wlReplayHistogramsPool.Get",
      "h.wlReplayFloatHistogramsPool.Put",
      "mmapMarkerUnknownRefs.Inc",
      "counterAddNonZero",
      "float64",
      "lastMmapRef.Unpack",
      "close",
      "record.NewDecoder",
      "dec.Samples",
      "?.reuseBuf",
      "unknownHistogramRefs.Add",
      "r.Segment",
      "h.series.getByID"
    ],
    "Head.mmapHeadChunks": [
      "?.RLock",
      "series.Lock",
      "series.mmapChunks",
      "series.Unlock",
      "?.RUnlock",
      "h.metrics.mmapChunksTotal.Add",
      "float64"
    ],
    "Head.performChunkSnapshot": [
      "h.logger.Info",
      "time.Now",
      "h.ChunkSnapshot",
      "time.Since",
      "elapsed.String",
      "fmt.Errorf"
    ],
    "Head.putAppendBuffer": [
      "h.appendPool.Put"
    ],
    "Head.putBytesBuffer": [
      "h.bytesPool.Put"
    ],
    "Head.putExemplarBuffer": [
      "labels.EmptyLabels",
      "h.exemplarsPool.Put"
    ],
    "Head.putFloatHistogramBuffer": [
      "h.floatHistogramsPool.Put"
    ],
    "Head.putHistogramBuffer": [
      "h.histogramsPool.Put"
    ],
    "Head.putMetadataBuffer": [
      "h.metadataPool.Put"
    ],
    "Head.putSeriesBuffer": [
      "h.seriesPool.Put"
    ],
    "Head.removeCorruptedMmappedChunks": [
      "h.chunkDiskMapper.Truncate",
      "h.logger.Error",
      "h.loadMmappedChunks",
      "make",
      "h.logger.Info",
      "h.resetInMemoryState",
      "h.chunkDiskMapper.DeleteCorrupted"
    ],
    "Head.resetInMemoryState": [
      "h.series.iterForDeletion",
      "h.numSeries.Store",
      "h.minOOOTime.Store",
      "newOOOIsolation",
      "tombstones.NewMemTombstones",
      "h.chunkRange.Store",
      "h.minTime.Store",
      "h.maxTime.Store",
      "NewCircularExemplarStorage",
      "h.opts.MaxExemplars.Load",
      "h.metrics.seriesRemoved.Add",
      "float64",
      "newStripeSeries",
      "newIsolation",
      "h.maxOOOTime.Store",
      "h.lastWALTruncationTime.Store",
      "h.lastMemoryTruncationTime.Store",
      "NewExemplarMetrics",
      "index.NewUnorderedMemPostings"
    ],
    "Head.resetSeriesWithMMappedChunks": [
      "h.metrics.chunksRemoved.Add",
      "h.metrics.chunks.Add",
      "h.updateMinMaxTime",
      "overlapsClosedInterval",
      "?.String",
      "mSeries.labels",
      "h.metrics.chunksCreated.Add",
      "int64",
      "h.updateMinOOOMaxOOOTime",
      "len",
      "h.logger.Debug",
      "float64",
      "h.metrics.chunks.Sub"
    ],
    "Head.setWALExpiry": [
      "h.walExpiriesMtx.Lock",
      "h.walExpiriesMtx.Unlock"
    ],
    "Head.startWALReplayStatus": [
      "h.stats.WALReplayStatus.Lock",
      "h.stats.WALReplayStatus.Unlock"
    ],
    "Head.truncateMemory": [
      "h.MinTime",
      "h.lastMemoryTruncationTime.Store",
      "h.metrics.headTruncateTotal.Inc",
      "h.initialized",
      "h.memTruncationCallBack",
      "h.minTime.Store",
      "h.minValidTime.Store",
      "h.metrics.headTruncateFail.Inc",
      "h.memTruncationInProcess.Store",
      "h.WaitForPendingReadersInTimeRange",
      "h.chunkSnapshotMtx.Lock",
      "h.chunkSnapshotMtx.Unlock",
      "h.MaxTime",
      "h.maxTime.CompareAndSwap",
      "h.truncateSeriesAndChunkDiskMapper"
    ],
    "Head.truncateOOO": [
      "newMinOOOMmapRef.GreaterThan",
      "h.WaitForPendingReadersForOOOChunksAtOrBefore",
      "h.minOOOMmapRef.Store",
      "uint64",
      "h.truncateSeriesAndChunkDiskMapper",
      "h.wbl.Truncate",
      "chunks.ChunkDiskMapperRef",
      "h.minOOOMmapRef.Load"
    ],
    "Head.truncateSeriesAndChunkDiskMapper": [
      "h.metrics.gcDuration.Observe",
      "h.minValidTime.Store",
      "time.Now",
      "time.Since",
      "h.MaxTime",
      "h.minTime.Store",
      "uint32",
      "fmt.Errorf",
      "h.appendableMinValidTime",
      "h.minOOOTime.Store",
      "?.Seconds",
      "h.minTime.Load",
      "h.opts.OutOfOrderTimeWindow.Load",
      "h.chunkDiskMapper.Truncate",
      "h.gc",
      "h.logger.Info"
    ],
    "Head.truncateWAL": [
      "delete",
      "time.Since",
      "h.logger.Info",
      "wlog.Checkpoint",
      "h.metrics.checkpointCreationFail.Inc",
      "errors.As",
      "h.wal.Truncate",
      "h.wal.Dir",
      "h.walExpiriesMtx.Unlock",
      "?.Seconds",
      "h.metrics.checkpointDeleteTotal.Inc",
      "h.metrics.checkpointDeleteFail.Inc",
      "h.metrics.walTruncateDuration.Observe",
      "h.chunkSnapshotMtx.Unlock",
      "h.lastWALTruncationTime.Load",
      "time.Now",
      "h.wal.NextSegment",
      "h.metrics.checkpointCreationTotal.Inc",
      "h.metrics.walCorruptionsTotal.Inc",
      "h.logger.Error",
      "h.walExpiriesMtx.Lock",
      "h.chunkSnapshotMtx.Lock",
      "h.lastWALTruncationTime.Store",
      "wlog.Segments",
      "fmt.Errorf",
      "wlog.DeleteCheckpoints"
    ],
    "Head.updateMinMaxTime": [
      "h.MinTime",
      "h.minTime.CompareAndSwap",
      "h.MaxTime",
      "h.maxTime.CompareAndSwap"
    ],
    "Head.updateMinOOOMaxOOOTime": [
      "h.MaxOOOTime",
      "h.maxOOOTime.CompareAndSwap",
      "h.MinOOOTime",
      "h.minOOOTime.CompareAndSwap"
    ],
    "Head.updateWALReplayStatusRead": [
      "h.stats.WALReplayStatus.Lock",
      "h.stats.WALReplayStatus.Unlock"
    ],
    "HeadAndOOOChunkQuerier.Close": [
      "q.chunkr.Close",
      "q.querier.Close"
    ],
    "HeadAndOOOChunkQuerier.LabelNames": [
      "q.querier.LabelNames"
    ],
    "HeadAndOOOChunkQuerier.LabelValues": [
      "q.querier.LabelValues"
    ],
    "HeadAndOOOChunkQuerier.Select": [
      "selectChunkSeriesSet"
    ],
    "HeadAndOOOChunkReader.ChunkOrIterable": [
      "cr.chunkOrIterable"
    ],
    "HeadAndOOOChunkReader.ChunkOrIterableWithCopy": [
      "cr.chunkOrIterable"
    ],
    "HeadAndOOOChunkReader.Close": [
      "cr.cr.isoState.Close",
      "cr.oooIsoState.Close"
    ],
    "HeadAndOOOChunkReader.chunkOrIterable": [
      "cr.head.series.getByID",
      "s.Lock",
      "s.Unlock",
      "cr.head.chunkFromSeries",
      "append",
      "fmt.Errorf",
      "unpackHeadChunkRef"
    ],
    "HeadAndOOOIndexReader.LabelValues": [
      "oh.head.MaxOOOTime",
      "len",
      "oh.head.postings.LabelValues",
      "labelValuesWithMatchers",
      "oh.head.MinTime",
      "oh.head.MinOOOTime",
      "oh.head.MaxTime"
    ],
    "HeadAndOOOIndexReader.Series": [
      "s.Unlock",
      "getOOOSeriesChunks",
      "oh.head.series.getByID",
      "chunks.HeadSeriesRef",
      "oh.head.metrics.seriesNotFound.Inc",
      "builder.Assign",
      "s.labels",
      "s.Lock",
      "appendSeriesChunks"
    ],
    "HeadAndOOOQuerier.Close": [
      "q.chunkr.Close",
      "q.querier.Close"
    ],
    "HeadAndOOOQuerier.LabelNames": [
      "q.querier.LabelNames"
    ],
    "HeadAndOOOQuerier.LabelValues": [
      "q.querier.LabelValues"
    ],
    "HeadAndOOOQuerier.Select": [
      "selectSeriesSet"
    ],
    "HeadChunkRef.Unpack": [
      "HeadSeriesRef",
      "HeadChunkID"
    ],
    "Histogram.Compact": [
      "compactBuckets"
    ],
    "Histogram.Copy": [
      "h.UsesCustomBuckets",
      "len",
      "make",
      "copy"
    ],
    "Histogram.CopyTo": [
      "copy",
      "h.UsesCustomBuckets",
      "clearIfNotNil",
      "resize",
      "len"
    ],
    "Histogram.CumulativeBucketIterator": [
      "len",
      "panic"
    ],
    "Histogram.Equals": [
      "slices.Equal",
      "math.Float64bits",
      "h.UsesCustomBuckets",
      "FloatBucketsMatch",
      "spansMatch"
    ],
    "Histogram.GetCountFloat": [
      "m.GetCount",
      "m.GetCount"
    ],
    "Histogram.GetCountInt": [
      "m.GetCount",
      "m.GetCount"
    ],
    "Histogram.GetZeroCountFloat": [
      "m.GetZeroCount",
      "m.GetZeroCount"
    ],
    "Histogram.GetZeroCountInt": [
      "m.GetZeroCount",
      "m.GetZeroCount"
    ],
    "Histogram.IsFloatHistogram": [
      "h.GetCount",
      "h.GetCount"
    ],
    "Histogram.Marshal": [
      "make",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "Histogram.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Histogram.MarshalToSizedBuffer": [
      "?.MarshalToSizedBuffer",
      "uint64",
      "uint8",
      "copy",
      "encodeVarintMetrics",
      "m.CreatedTimestamp.MarshalToSizedBuffer",
      "math.Float64bits",
      "float64",
      "encoding_binary.LittleEndian.PutUint64",
      "make",
      "uint32",
      "len",
      "encodeVarintTypes",
      "uint8",
      "m.ZeroCount.Size",
      "m.Count.Size",
      "math.Float64bits",
      "encoding_binary.LittleEndian.PutUint64",
      "uint64",
      "?.MarshalToSizedBuffer",
      "copy",
      "make",
      "m.ZeroCount.MarshalTo",
      "uint32",
      "len",
      "float64",
      "m.Count.MarshalTo",
      "encodeVarintTypes",
      "m.ZeroCount.MarshalTo",
      "copy",
      "make",
      "uint8",
      "uint32",
      "m.Count.Size",
      "math.Float64bits",
      "uint64",
      "m.ZeroCount.Size",
      "m.Count.MarshalTo",
      "len",
      "float64",
      "encoding_binary.LittleEndian.PutUint64",
      "?.MarshalToSizedBuffer"
    ],
    "Histogram.NegativeBucketIterator": [
      "newRegularBucketIterator"
    ],
    "Histogram.PositiveBucketIterator": [
      "newRegularBucketIterator"
    ],
    "Histogram.ReduceResolution": [
      "reduceResolution",
      "h.UsesCustomBuckets",
      "panic",
      "IsCustomBucketsSchema",
      "fmt.Errorf"
    ],
    "Histogram.Size": [
      "len",
      "e.Size",
      "sozMetrics",
      "m.CreatedTimestamp.Size",
      "sovMetrics",
      "uint64",
      "m.ZeroCount.Size",
      "len",
      "e.Size",
      "sovTypes",
      "m.Count.Size",
      "sozTypes",
      "uint64",
      "sozTypes",
      "uint64",
      "m.ZeroCount.Size",
      "len",
      "e.Size",
      "sovTypes",
      "m.Count.Size"
    ],
    "Histogram.String": [
      "h.ZeroBucket",
      "h.PositiveBucketIterator",
      "bucket.String",
      "sb.String",
      "it.At",
      "h.NegativeBucketIterator",
      "it.Next",
      "append",
      "len",
      "?.String",
      "sb.WriteRune",
      "fmt.Fprintf",
      "proto.CompactTextString",
      "proto.CompactTextString",
      "proto.CompactTextString"
    ],
    "Histogram.ToFloat": [
      "clearIfNotNil",
      "resize",
      "len",
      "copy",
      "float64",
      "h.UsesCustomBuckets"
    ],
    "Histogram.ToFloatHistogram": [
      "float64",
      "deltasToCounts",
      "h.GetNegativeDeltas",
      "h.GetPositiveSpans",
      "h.GetPositiveCounts",
      "h.GetZeroCountFloat",
      "h.GetCountInt",
      "h.GetPositiveDeltas",
      "h.IsFloatHistogram",
      "histogram.CounterResetHint",
      "h.GetNegativeSpans",
      "h.GetNegativeCounts",
      "h.GetZeroCountInt",
      "h.GetCountFloat",
      "spansProtoToSpans",
      "deltasToCounts",
      "h.GetPositiveCounts",
      "h.GetNegativeCounts",
      "h.GetCountInt",
      "h.GetPositiveDeltas",
      "h.GetZeroCountFloat",
      "h.GetPositiveSpans",
      "h.GetNegativeDeltas",
      "histogram.CounterResetHint",
      "float64",
      "spansProtoToSpans",
      "h.GetNegativeSpans",
      "h.GetCustomValues",
      "h.GetZeroCountInt",
      "h.IsFloatHistogram",
      "h.GetCountFloat"
    ],
    "Histogram.ToIntHistogram": [
      "histogram.CounterResetHint",
      "h.GetZeroCountInt",
      "h.GetPositiveSpans",
      "h.GetPositiveDeltas",
      "h.IsFloatHistogram",
      "h.GetCountInt",
      "spansProtoToSpans",
      "h.GetNegativeSpans",
      "h.GetNegativeDeltas",
      "histogram.CounterResetHint",
      "h.GetPositiveSpans",
      "h.GetNegativeDeltas",
      "spansProtoToSpans",
      "h.GetPositiveDeltas",
      "h.GetNegativeSpans",
      "h.GetCustomValues",
      "h.IsFloatHistogram",
      "h.GetZeroCountInt",
      "h.GetCountInt"
    ],
    "Histogram.Unmarshal": [
      "math.Float64frombits",
      "uint",
      "uint32",
      "make",
      "skipMetrics",
      "len",
      "int",
      "encoding_binary.LittleEndian.Uint64",
      "?.Unmarshal",
      "int64",
      "m.CreatedTimestamp.Unmarshal",
      "uint64",
      "int32",
      "fmt.Errorf",
      "float64",
      "append",
      "int",
      "?.Unmarshal",
      "int32",
      "float64",
      "uint32",
      "Histogram_ResetHint",
      "skipTypes",
      "len",
      "encoding_binary.LittleEndian.Uint64",
      "math.Float64frombits",
      "int64",
      "uint",
      "uint64",
      "fmt.Errorf",
      "append",
      "make",
      "len",
      "math.Float64frombits",
      "uint32",
      "?.Unmarshal",
      "int32",
      "encoding_binary.LittleEndian.Uint64",
      "float64",
      "int64",
      "make",
      "fmt.Errorf",
      "append",
      "Histogram_ResetHint",
      "skipTypes",
      "uint",
      "uint64",
      "int"
    ],
    "Histogram.UsesCustomBuckets": [
      "IsCustomBucketsSchema"
    ],
    "Histogram.Validate": [
      "len",
      "fmt.Errorf",
      "errors.New",
      "checkHistogramSpans",
      "checkHistogramBuckets",
      "math.IsNaN",
      "h.UsesCustomBuckets",
      "checkHistogramCustomBounds"
    ],
    "Histogram.XXX_DiscardUnknown": [
      "xxx_messageInfo_Histogram.DiscardUnknown",
      "xxx_messageInfo_Histogram.DiscardUnknown",
      "xxx_messageInfo_Histogram.DiscardUnknown"
    ],
    "Histogram.XXX_Marshal": [
      "xxx_messageInfo_Histogram.Marshal",
      "cap",
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_Histogram.Marshal",
      "cap",
      "m.MarshalToSizedBuffer",
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_Histogram.Marshal",
      "cap"
    ],
    "Histogram.XXX_Merge": [
      "xxx_messageInfo_Histogram.Merge",
      "xxx_messageInfo_Histogram.Merge",
      "xxx_messageInfo_Histogram.Merge"
    ],
    "Histogram.XXX_Size": [
      "m.Size",
      "m.Size",
      "m.Size"
    ],
    "Histogram.XXX_Unmarshal": [
      "m.Unmarshal",
      "m.Unmarshal",
      "m.Unmarshal"
    ],
    "Histogram.ZeroBucket": [
      "h.UsesCustomBuckets",
      "panic"
    ],
    "HistogramAppender.Append": [
      "panic"
    ],
    "HistogramAppender.AppendFloatHistogram": [
      "panic"
    ],
    "HistogramAppender.AppendHistogram": [
      "a.setCounterResetHeader",
      "happ.setCounterResetHeader",
      "?.appendHistogram",
      "a.NumSamples",
      "prev.appendable",
      "NewHistogramChunk",
      "newChunk.Appender",
      "panic",
      "make",
      "a.recodeHistogram",
      "a.recode",
      "a.appendHistogram",
      "len",
      "copy",
      "a.appendable",
      "happ.appendHistogram",
      "adjustForInserts",
      "fmt.Errorf",
      "a.appendableGauge",
      "errors.New"
    ],
    "HistogramAppender.GetCounterResetHeader": [
      "CounterResetHeader",
      "a.b.bytes"
    ],
    "HistogramAppender.NumSamples": [
      "int",
      "binary.BigEndian.Uint16",
      "a.b.bytes"
    ],
    "HistogramAppender.appendHistogram": [
      "a.b.bytes",
      "len",
      "countSpans",
      "int64",
      "a.writeSumDelta",
      "binary.BigEndian.Uint16",
      "make",
      "binary.BigEndian.PutUint16",
      "value.IsStaleNaN",
      "writeHistogramChunkLayout",
      "putVarbitInt",
      "a.b.writeBits",
      "math.Float64bits",
      "copy",
      "putVarbitUint"
    ],
    "HistogramAppender.appendable": [
      "histogram.IsCustomBucketsSchema",
      "histogram.FloatBucketsMatch",
      "expandIntSpansAndBuckets",
      "a.NumSamples",
      "a.GetCounterResetHeader",
      "value.IsStaleNaN"
    ],
    "HistogramAppender.appendableGauge": [
      "histogram.FloatBucketsMatch",
      "expandSpansBothWays",
      "a.NumSamples",
      "a.GetCounterResetHeader",
      "value.IsStaleNaN",
      "histogram.IsCustomBucketsSchema"
    ],
    "HistogramAppender.recode": [
      "panic",
      "countSpans",
      "it.AtHistogram",
      "make",
      "NewHistogramChunk",
      "hc.Appender",
      "happ.setCounterResetHeader",
      "it.Next",
      "happ.appendHistogram",
      "len",
      "insert",
      "CounterResetHeader",
      "a.b.bytes",
      "newHistogramIterator"
    ],
    "HistogramAppender.recodeHistogram": [
      "len",
      "countSpans",
      "insert",
      "make"
    ],
    "HistogramAppender.setCounterResetHeader": [
      "byte",
      "a.b.bytes"
    ],
    "HistogramAppender.writeSumDelta": [
      "xorWrite"
    ],
    "HistogramChunk.Appender": [
      "it.Next",
      "it.Err",
      "c.iterator"
    ],
    "HistogramChunk.Bytes": [
      "c.b.bytes"
    ],
    "HistogramChunk.Compact": [
      "make",
      "copy",
      "len",
      "cap"
    ],
    "HistogramChunk.GetCounterResetHeader": [
      "c.Bytes",
      "CounterResetHeader"
    ],
    "HistogramChunk.Iterator": [
      "c.iterator"
    ],
    "HistogramChunk.Layout": [
      "c.NumSamples",
      "panic",
      "newBReader",
      "c.Bytes",
      "readHistogramChunkLayout"
    ],
    "HistogramChunk.NumSamples": [
      "int",
      "binary.BigEndian.Uint16",
      "c.Bytes"
    ],
    "HistogramChunk.Reset": [
      "c.b.Reset"
    ],
    "HistogramChunk.iterator": [
      "newHistogramIterator",
      "histogramIter.Reset",
      "c.b.bytes"
    ],
    "HistogramFraction": [
      "h.AllBucketIterator",
      "len",
      "interpolateExponentially",
      "annos.Add",
      "annotations.NewNativeHistogramFractionNaNsInfo",
      "math.IsNaN",
      "it.Next",
      "it.At",
      "math.Log2",
      "math.Abs",
      "h.UsesCustomBuckets",
      "interpolateLinearly",
      "math.NaN"
    ],
    "HistogramQuantile": [
      "math.IsNaN",
      "math.Inf",
      "h.AllReverseBucketIterator",
      "it.At",
      "len",
      "annotations.NewNativeHistogramQuantileNaNResultInfo",
      "annotations.NewNativeHistogramQuantileNaNSkewInfo",
      "math.Log2",
      "math.Abs",
      "math.NaN",
      "h.AllBucketIterator",
      "it.Next",
      "h.UsesCustomBuckets",
      "annos.Add",
      "math.Exp2"
    ],
    "HistogramStatsIterator.AtFloatHistogram": [
      "returnValue.CopyTo",
      "f.Iterator.AtFloatHistogram",
      "value.IsStaleNaN",
      "f.getFloatResetHint",
      "f.setLastFH"
    ],
    "HistogramStatsIterator.AtHistogram": [
      "returnValue.CopyTo",
      "f.Iterator.AtHistogram",
      "value.IsStaleNaN",
      "f.getResetHint",
      "f.setLastH"
    ],
    "HistogramStatsIterator.getFloatResetHint": [
      "f.lastH.ToFloat",
      "f.currentFH.DetectReset"
    ],
    "HistogramStatsIterator.getResetHint": [
      "f.lastH.ToFloat",
      "h.ToFloat",
      "fh.DetectReset"
    ],
    "HistogramStatsIterator.setLastFH": [
      "fh.Copy",
      "fh.CopyTo"
    ],
    "HistogramStatsIterator.setLastH": [
      "h.Copy",
      "h.CopyTo"
    ],
    "HistogramTestExpression": [
      "h.TestExpression"
    ],
    "Histogram_CountFloat.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Histogram_CountFloat.MarshalToSizedBuffer": [
      "uint64",
      "math.Float64bits",
      "float64",
      "len",
      "encoding_binary.LittleEndian.PutUint64",
      "uint64",
      "math.Float64bits",
      "float64",
      "len",
      "encoding_binary.LittleEndian.PutUint64"
    ],
    "Histogram_CountInt.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Histogram_CountInt.MarshalToSizedBuffer": [
      "len",
      "encodeVarintTypes",
      "uint64",
      "len",
      "encodeVarintTypes",
      "uint64"
    ],
    "Histogram_CountInt.Size": [
      "sovTypes",
      "uint64",
      "sovTypes",
      "uint64"
    ],
    "Histogram_ResetHint.String": [
      "proto.EnumName",
      "int32",
      "proto.EnumName",
      "int32"
    ],
    "Histogram_ZeroCountFloat.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Histogram_ZeroCountFloat.MarshalToSizedBuffer": [
      "len",
      "encoding_binary.LittleEndian.PutUint64",
      "uint64",
      "math.Float64bits",
      "float64",
      "len",
      "encoding_binary.LittleEndian.PutUint64",
      "uint64",
      "math.Float64bits",
      "float64"
    ],
    "Histogram_ZeroCountInt.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer",
      "m.MarshalToSizedBuffer",
      "m.Size"
    ],
    "Histogram_ZeroCountInt.MarshalToSizedBuffer": [
      "len",
      "encodeVarintTypes",
      "uint64",
      "len",
      "encodeVarintTypes",
      "uint64"
    ],
    "Histogram_ZeroCountInt.Size": [
      "sovTypes",
      "uint64",
      "sovTypes",
      "uint64"
    ],
    "HypervisorDiscovery.refresh": [
      "hypervisors.ExtractHypervisors",
      "net.JoinHostPort",
      "model.LabelValue",
      "append",
      "pagerHypervisors.EachPage",
      "fmt.Errorf",
      "openstack.NewComputeV2",
      "hypervisors.List",
      "strconv.Itoa",
      "openstack.Authenticate"
    ],
    "IgnoreOverriddenMetadataLabelsScratchBuilder.Add": [
      "b.Overwrite.IsEmptyFor",
      "b.ScratchBuilder.Add"
    ],
    "Ingress.Run": [
      "ctx.Done",
      "errors.Is",
      "ctx.Err",
      "i.logger.Error",
      "i.process",
      "i.queue.ShutDown",
      "cache.WaitForCacheSync"
    ],
    "Ingress.buildIngress": [
      "lv",
      "ingressSource",
      "ingressLabels",
      "pathsFromIngressPaths",
      "rulePaths",
      "tlsHosts",
      "matchesHostnamePattern",
      "append"
    ],
    "Ingress.enqueue": [
      "cache.DeletionHandlingMetaNamespaceKeyFunc",
      "i.queue.Add"
    ],
    "Ingress.hasSynced": [
      "i.informer.HasSynced"
    ],
    "Ingress.process": [
      "cache.SplitMetaNamespaceKey",
      "i.buildIngress",
      "fmt.Errorf",
      "send",
      "ingressSourceFromNamespaceAndName",
      "i.logger.Error",
      "i.queue.Get",
      "i.queue.Done",
      "i.store.GetByKey"
    ],
    "Inspect": [
      "Walk"
    ],
    "InstanceDiscovery.refresh": [
      "model.LabelValue",
      "model.LabelName",
      "i.logger.Debug",
      "openstack.Authenticate",
      "fmt.Errorf",
      "openstack.NewNetworkV2",
      "ports.List",
      "ports.ExtractPorts",
      "strconv.Itoa",
      "?.AllPages",
      "floatingips.ExtractFloatingIPs",
      "servers.List",
      "pager.EachPage",
      "i.logger.Info",
      "make",
      "pagerFIP.EachPage",
      "i.logger.Warn",
      "net.JoinHostPort",
      "append",
      "strutil.SanitizeLabelName",
      "openstack.NewComputeV2",
      "floatingips.List",
      "ctx.Err",
      "servers.ExtractServers",
      "len"
    ],
    "Intersect": [
      "len",
      "EmptyPostings",
      "slices.Contains",
      "newIntersectPostings"
    ],
    "Interval.IsSubrange": [
      "r.InBounds"
    ],
    "Intervals.Add": [
      "append",
      "sort.Search",
      "max",
      "len"
    ],
    "IsStaleNaN": [
      "math.Float64bits"
    ],
    "Item.PositionRange": [
      "posrange.Pos",
      "len"
    ],
    "Item.Pretty": [
      "i.String"
    ],
    "Item.String": [
      "fmt.Sprintf",
      "i.Typ.IsKeyword",
      "i.Typ.IsOperator",
      "i.Typ.IsAggregator",
      "len"
    ],
    "Item.desc": [
      "i.String",
      "i.Typ.desc",
      "fmt.Sprintf"
    ],
    "ItemType.String": [
      "fmt.Sprintf"
    ],
    "ItemType.desc": [
      "fmt.Sprintf"
    ],
    "JSONCodec.Encode": [
      "json.Marshal"
    ],
    "JSONFileLogger.Close": [
      "l.file.Close"
    ],
    "JSONFileLogger.Enabled": [
      "l.handler.Enabled"
    ],
    "JSONFileLogger.Handle": [
      "l.handler.Handle",
      "r.Clone"
    ],
    "JSONFileLogger.WithAttrs": [
      "len",
      "l.handler.WithAttrs"
    ],
    "JSONFileLogger.WithGroup": [
      "l.handler.WithGroup"
    ],
    "JUnitXML.Suite": [
      "append"
    ],
    "JUnitXML.WriteXML": [
      "?.Encode",
      "xml.NewEncoder"
    ],
    "KumaSDConfig.NewDiscoverer": [
      "promslog.NewNopLogger",
      "NewKumaHTTPDiscovery"
    ],
    "KumaSDConfig.NewDiscovererMetrics": [
      "newDiscovererMetrics"
    ],
    "KumaSDConfig.SetDirectory": [
      "c.HTTPClientConfig.SetDirectory"
    ],
    "KumaSDConfig.UnmarshalYAML": [
      "c.HTTPClientConfig.Validate",
      "unmarshal",
      "len",
      "fmt.Errorf",
      "url.Parse"
    ],
    "Label.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "Label.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Label.MarshalToSizedBuffer": [
      "len",
      "copy",
      "encodeVarintTypes",
      "uint64"
    ],
    "Label.Size": [
      "len",
      "sovTypes",
      "uint64"
    ],
    "Label.String": [
      "proto.CompactTextString"
    ],
    "Label.Unmarshal": [
      "len",
      "int32",
      "int",
      "fmt.Errorf",
      "string",
      "skipTypes",
      "uint",
      "uint64",
      "append"
    ],
    "Label.XXX_DiscardUnknown": [
      "xxx_messageInfo_Label.DiscardUnknown"
    ],
    "Label.XXX_Marshal": [
      "xxx_messageInfo_Label.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "Label.XXX_Merge": [
      "xxx_messageInfo_Label.Merge"
    ],
    "Label.XXX_Size": [
      "m.Size"
    ],
    "Label.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "LabelMatcher.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "LabelMatcher.MarshalTo": [
      "m.MarshalToSizedBuffer",
      "m.Size"
    ],
    "LabelMatcher.MarshalToSizedBuffer": [
      "uint64",
      "len",
      "copy",
      "encodeVarintTypes"
    ],
    "LabelMatcher.Size": [
      "uint64",
      "len",
      "sovTypes"
    ],
    "LabelMatcher.String": [
      "proto.CompactTextString"
    ],
    "LabelMatcher.Unmarshal": [
      "len",
      "fmt.Errorf",
      "skipTypes",
      "append",
      "uint",
      "uint64",
      "int32",
      "int",
      "LabelMatcher_Type",
      "string"
    ],
    "LabelMatcher.XXX_DiscardUnknown": [
      "xxx_messageInfo_LabelMatcher.DiscardUnknown"
    ],
    "LabelMatcher.XXX_Marshal": [
      "cap",
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_LabelMatcher.Marshal"
    ],
    "LabelMatcher.XXX_Merge": [
      "xxx_messageInfo_LabelMatcher.Merge"
    ],
    "LabelMatcher.XXX_Size": [
      "m.Size"
    ],
    "LabelMatcher.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "LabelMatcher_Type.String": [
      "proto.EnumName",
      "int32"
    ],
    "LabelPair.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "LabelPair.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "LabelPair.MarshalToSizedBuffer": [
      "uint64",
      "len",
      "copy",
      "encodeVarintMetrics"
    ],
    "LabelPair.Size": [
      "uint64",
      "len",
      "sovMetrics"
    ],
    "LabelPair.String": [
      "proto.CompactTextString"
    ],
    "LabelPair.Unmarshal": [
      "fmt.Errorf",
      "append",
      "uint64",
      "int32",
      "int",
      "string",
      "skipMetrics",
      "len",
      "uint"
    ],
    "LabelPair.XXX_DiscardUnknown": [
      "xxx_messageInfo_LabelPair.DiscardUnknown"
    ],
    "LabelPair.XXX_Marshal": [
      "xxx_messageInfo_LabelPair.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "LabelPair.XXX_Merge": [
      "xxx_messageInfo_LabelPair.Merge"
    ],
    "LabelPair.XXX_Size": [
      "m.Size"
    ],
    "LabelPair.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "Labels.ByteSize": [
      "uint64",
      "len",
      "unsafe.Sizeof",
      "uint64",
      "len",
      "len",
      "uint64"
    ],
    "Labels.Bytes": [
      "bytes.NewBuffer",
      "b.WriteByte",
      "b.WriteString",
      "b.Bytes",
      "b.WriteString",
      "b.Bytes",
      "bytes.NewBuffer",
      "len",
      "b.WriteByte",
      "decodeString",
      "cap",
      "len",
      "make",
      "copy"
    ],
    "Labels.BytesWithLabels": [
      "b.Len",
      "b.WriteString",
      "b.Bytes",
      "bytes.NewBuffer",
      "b.WriteByte",
      "len",
      "len",
      "decodeString",
      "b.Len",
      "b.WriteByte",
      "b.WriteString",
      "b.Bytes",
      "bytes.NewBuffer",
      "len",
      "decodeString",
      "append"
    ],
    "Labels.BytesWithoutLabels": [
      "b.WriteByte",
      "len",
      "b.Len",
      "b.WriteString",
      "b.Bytes",
      "bytes.NewBuffer",
      "b.Bytes",
      "bytes.NewBuffer",
      "len",
      "decodeString",
      "b.Len",
      "b.WriteByte",
      "b.WriteString",
      "len",
      "decodeString",
      "append"
    ],
    "Labels.Copy": [
      "len",
      "copy",
      "make",
      "strings.Clone",
      "strings.Clone"
    ],
    "Labels.CopyFrom": [
      "append"
    ],
    "Labels.DropMetricName": [
      "ls.DropReserved",
      "ls.DropReserved",
      "ls.DropReserved"
    ],
    "Labels.DropReserved": [
      "shouldDropFn",
      "append",
      "shouldDropFn",
      "len",
      "decodeString",
      "decodeVarint",
      "len",
      "decodeString",
      "decodeSize",
      "shouldDropFn"
    ],
    "Labels.Get": [
      "len",
      "decodeString",
      "int",
      "decodeVarintRest",
      "len",
      "decodeSize",
      "decodeString"
    ],
    "Labels.Has": [
      "len",
      "decodeString",
      "int",
      "decodeVarintRest",
      "len",
      "decodeSize"
    ],
    "Labels.HasDuplicateLabelNames": [
      "ls.syms.ToName",
      "len",
      "decodeVarint",
      "len",
      "decodeString"
    ],
    "Labels.Hash": [
      "make",
      "len",
      "h.Sum64",
      "append",
      "cap",
      "xxhash.New",
      "h.Write",
      "h.WriteString",
      "xxhash.Sum64",
      "decodeString",
      "xxhash.New",
      "h.WriteString",
      "xxhash.Sum64",
      "make",
      "len",
      "cap",
      "h.Write",
      "h.Sum64",
      "append",
      "xxhash.Sum64",
      "yoloBytes"
    ],
    "Labels.HashForLabels": [
      "len",
      "append",
      "xxhash.Sum64",
      "len",
      "decodeString",
      "append",
      "xxhash.Sum64",
      "len",
      "decodeString",
      "append",
      "xxhash.Sum64"
    ],
    "Labels.HashWithoutLabels": [
      "len",
      "append",
      "xxhash.Sum64",
      "len",
      "decodeString",
      "append",
      "xxhash.Sum64",
      "len",
      "decodeString",
      "append",
      "xxhash.Sum64"
    ],
    "Labels.InternStrings": [
      "intern"
    ],
    "Labels.IsEmpty": [
      "len",
      "len",
      "len"
    ],
    "Labels.IsValid": [
      "model.IsValidMetricName",
      "?.IsValidLegacy",
      "model.LabelName",
      "?.IsValid",
      "ls.Validate",
      "model.IsValidLegacyMetricName",
      "string",
      "model.LabelValue"
    ],
    "Labels.IsZero": [
      "len",
      "len"
    ],
    "Labels.Len": [
      "len",
      "len",
      "decodeVarint",
      "len",
      "decodeSize"
    ],
    "Labels.Map": [
      "make",
      "ls.Range"
    ],
    "Labels.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "Labels.MarshalJSON": [
      "json.Marshal",
      "ls.Map"
    ],
    "Labels.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Labels.MarshalToSizedBuffer": [
      "len",
      "copy",
      "?.MarshalToSizedBuffer",
      "encodeVarintTypes",
      "uint64"
    ],
    "Labels.MarshalYAML": [
      "ls.Map"
    ],
    "Labels.MatchLabels": [
      "make",
      "len",
      "append",
      "b.Del",
      "b.Labels",
      "NewBuilder",
      "b.Keep",
      "NewBuilder",
      "b.Keep",
      "b.Del",
      "b.Labels"
    ],
    "Labels.Range": [
      "f",
      "len",
      "decodeString",
      "f",
      "len",
      "decodeString",
      "f"
    ],
    "Labels.ReleaseStrings": [
      "release"
    ],
    "Labels.Size": [
      "sovTypes",
      "uint64",
      "len",
      "e.Size"
    ],
    "Labels.String": [
      "bytes.NewBuffer",
      "ls.Range",
      "?.IsValidLegacy",
      "model.LabelName",
      "b.Write",
      "strconv.AppendQuote",
      "b.AvailableBuffer",
      "b.String",
      "b.WriteByte",
      "b.WriteString",
      "proto.CompactTextString"
    ],
    "Labels.Unmarshal": [
      "len",
      "uint",
      "uint64",
      "fmt.Errorf",
      "append",
      "?.Unmarshal",
      "int32",
      "int",
      "skipTypes"
    ],
    "Labels.UnmarshalJSON": [
      "json.Unmarshal",
      "FromMap"
    ],
    "Labels.UnmarshalYAML": [
      "unmarshal",
      "FromMap"
    ],
    "Labels.Validate": [
      "f",
      "len",
      "decodeString",
      "f",
      "f",
      "len",
      "decodeString"
    ],
    "Labels.WithoutEmpty": [
      "make",
      "len",
      "append",
      "decodeVarint",
      "make",
      "copy",
      "append",
      "yoloString",
      "ls.IsEmpty",
      "ls.syms.symbolTable.checkNum",
      "len",
      "len",
      "decodeString",
      "make",
      "copy",
      "append",
      "yoloString"
    ],
    "Labels.XXX_DiscardUnknown": [
      "xxx_messageInfo_Labels.DiscardUnknown"
    ],
    "Labels.XXX_Marshal": [
      "xxx_messageInfo_Labels.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "Labels.XXX_Merge": [
      "xxx_messageInfo_Labels.Merge"
    ],
    "Labels.XXX_Size": [
      "m.Size"
    ],
    "Labels.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "LastCheckpoint": [
      "listCheckpoints",
      "len",
      "filepath.Join"
    ],
    "LastChunkSnapshot": [
      "os.ReadDir",
      "len",
      "fi.Name",
      "fi.IsDir",
      "filepath.Join",
      "strings.HasPrefix",
      "fmt.Errorf",
      "strings.Split",
      "strconv.Atoi"
    ],
    "LazyLoader.Close": [
      "errors.Join",
      "ll.cancelCtx",
      "ll.queryEngine.Close",
      "ll.storage.Close"
    ],
    "LazyLoader.WithSamplesTill": [
      "?.UTC",
      "time.Unix",
      "fn",
      "ll.appendTill",
      "int64",
      "ts.Sub"
    ],
    "LazyLoader.appendTill": [
      "app.Commit",
      "ll.storage.Appender",
      "ll.Context",
      "appendSample",
      "len"
    ],
    "LazyLoader.clear": [
      "ll.storage.Close",
      "fmt.Errorf",
      "ll.cancelCtx",
      "teststorage.NewWithError",
      "durationMilliseconds",
      "promql.NewEngine",
      "context.WithCancel",
      "context.Background"
    ],
    "LazyLoader.parse": [
      "patSpace.Split",
      "parseLoad",
      "raise",
      "errors.New",
      "getLines",
      "len",
      "strings.HasPrefix",
      "strings.ToLower"
    ],
    "LeveledCompactor.Compact": [
      "c.CompactWithBlockPopulator"
    ],
    "LeveledCompactor.CompactWithBlockPopulator": [
      "meta.ULID.String",
      "ulid.Now",
      "c.logger.Info",
      "b.setCompactionFailed",
      "append",
      "ulid.MustNew",
      "fmt.Sprintf",
      "time.Now",
      "c.ctx.Err",
      "readMetaFile",
      "o.Meta",
      "OpenBlock",
      "tsdb_errors.NewMulti",
      "b.Dir",
      "errs.Err",
      "fmt.Errorf",
      "b.Close",
      "CompactBlockMetas",
      "c.logger.Error",
      "errors.Is",
      "errs.Add",
      "c.ctx.Done",
      "c.write",
      "writeMetaFile",
      "len",
      "time.Since"
    ],
    "LeveledCompactor.Plan": [
      "readMetaFile",
      "append",
      "c.plan",
      "blockDirs",
      "len"
    ],
    "LeveledCompactor.Write": [
      "time.Now",
      "c.logger.Info",
      "time.Since",
      "ulid.MustNew",
      "ulid.Now",
      "base.Compaction.FromOutOfOrder",
      "meta.Compaction.SetOutOfOrder",
      "c.write",
      "meta.Compaction.FromOutOfOrder"
    ],
    "LeveledCompactor.plan": [
      "c.selectDirs",
      "append",
      "float64",
      "slices.SortFunc",
      "c.selectOverlappingDirs",
      "len"
    ],
    "LeveledCompactor.selectDirs": [
      "len",
      "splitByRange"
    ],
    "LeveledCompactor.selectOverlappingDirs": [
      "len",
      "append"
    ],
    "LeveledCompactor.write": [
      "?.Err",
      "c.ctx.Err",
      "tombstones.WriteFile",
      "meta.ULID.String",
      "append",
      "c.ctx.Done",
      "errs.Add",
      "w.Close",
      "tsdb_errors.NewMulti",
      "os.RemoveAll",
      "time.Now",
      "chunks.NewWriter",
      "fileutil.OpenDir",
      "df.Close",
      "fileutil.Replace",
      "c.logger.Error",
      "c.metrics.Duration.Observe",
      "chunkDir",
      "errs.Err",
      "index.NewWriterWithEncoder",
      "tombstones.NewMemTombstones",
      "filepath.Join",
      "os.MkdirAll",
      "chunks.WithSegmentSize",
      "chunks.WithUncachedIO",
      "df.Sync",
      "err.Error",
      "?.Seconds",
      "blockPopulator.PopulateBlock",
      "writeMetaFile",
      "tsdb_errors.CloseAll",
      "c.metrics.Ran.Inc",
      "time.Since",
      "fmt.Errorf"
    ],
    "Lexer.NextItem": [
      "l.state",
      "l.emit"
    ],
    "Lexer.accept": [
      "strings.ContainsRune",
      "l.next",
      "l.backup"
    ],
    "Lexer.acceptRun": [
      "l.backup",
      "strings.ContainsRune",
      "l.next"
    ],
    "Lexer.errorf": [
      "fmt.Sprintf"
    ],
    "Lexer.is": [
      "strings.ContainsRune",
      "l.peek"
    ],
    "Lexer.next": [
      "int",
      "len",
      "utf8.DecodeRuneInString",
      "posrange.Pos"
    ],
    "Lexer.peek": [
      "l.next",
      "l.backup"
    ],
    "Lexer.scanDurationKeyword": [
      "strings.ToLower",
      "l.emit",
      "l.next",
      "isAlpha",
      "l.backup"
    ],
    "Lexer.scanNumber": [
      "len",
      "l.peek",
      "l.acceptRun",
      "isAlphaNumeric",
      "l.accept",
      "l.is"
    ],
    "LightsailDiscovery.lightsailClient": [
      "credentials.NewStaticCredentials",
      "string",
      "config.NewClientFromConfig",
      "session.NewSessionWithOptions",
      "fmt.Errorf",
      "stscreds.NewCredentials",
      "lightsail.New"
    ],
    "LightsailDiscovery.refresh": [
      "model.LabelValue",
      "net.JoinHostPort",
      "strutil.SanitizeLabelName",
      "lightsailClient.GetInstancesWithContext",
      "awsErr.Code",
      "fmt.Errorf",
      "strconv.Itoa",
      "len",
      "append",
      "strings.Join",
      "model.LabelName",
      "d.lightsailClient",
      "errors.As"
    ],
    "LightsailSDConfig.NewDiscoverer": [
      "NewLightsailDiscovery"
    ],
    "LightsailSDConfig.UnmarshalYAML": [
      "ec2metadata.New",
      "metadata.Region",
      "errors.New",
      "c.HTTPClientConfig.Validate",
      "unmarshal",
      "session.NewSession"
    ],
    "ListPostings.Len": [
      "len"
    ],
    "ListPostings.Next": [
      "len"
    ],
    "ListPostings.Seek": [
      "len",
      "slices.BinarySearch"
    ],
    "LiveReader.Err": [
      "errors.Is"
    ],
    "LiveReader.Next": [
      "copy",
      "r.fillBuffer",
      "r.buildRecord",
      "errors.Is"
    ],
    "LiveReader.buildRecord": [
      "r.readRecord",
      "int64",
      "recTypeFromHeader",
      "append",
      "validateRecord",
      "compression.Decode"
    ],
    "LiveReader.fillBuffer": [
      "r.rdr.Read",
      "len"
    ],
    "LiveReader.readRecord": [
      "r.logger.Warn",
      "byte",
      "copy",
      "binary.BigEndian.Uint16",
      "fmt.Errorf",
      "?.Inc",
      "r.metrics.readerCorruptionErrors.WithLabelValues",
      "crc32.Checksum",
      "int",
      "errors.New",
      "binary.BigEndian.Uint32"
    ],
    "Load": [
      "labels.NewScratchBuilder",
      "cfg.GlobalConfig.ExternalLabels.Range",
      "os.Getenv",
      "logger.Debug",
      "b.Labels",
      "fmt.Errorf",
      "yaml.UnmarshalStrict",
      "logger.Warn",
      "b.Add",
      "?.IsEmpty",
      "os.Expand"
    ],
    "LoadBalancerDiscovery.refresh": [
      "?.AllPages",
      "loadbalancers.List",
      "i.logger.Debug",
      "net.JoinHostPort",
      "openstack.NewLoadBalancerV2",
      "listeners.ExtractListeners",
      "append",
      "strconv.Itoa",
      "model.LabelValue",
      "openstack.NewNetworkV2",
      "loadbalancers.ExtractLoadBalancers",
      "listeners.List",
      "floatingips.ExtractFloatingIPs",
      "len",
      "fmt.Errorf",
      "make",
      "floatingips.List",
      "strings.Join",
      "openstack.Authenticate"
    ],
    "LoadFile": [
      "cfg.SetDirectory",
      "filepath.Dir",
      "os.ReadFile",
      "Load",
      "string",
      "fmt.Errorf",
      "len",
      "errors.New"
    ],
    "LoadedStorage": [
      "newTest",
      "require.NoError",
      "test.exec",
      "t.Errorf"
    ],
    "Manager.AlertingRules": [
      "m.Rules",
      "append"
    ],
    "Manager.Alertmanagers": [
      "am.url",
      "ams.mtx.RUnlock",
      "n.mtx.RLock",
      "n.mtx.RUnlock",
      "ams.mtx.RLock",
      "append"
    ],
    "Manager.ApplyConfig": [
      "make",
      "prov.IsStarted",
      "float64",
      "prov.mu.Lock",
      "m.targetsMtx.Lock",
      "?.Set",
      "wg.Done",
      "prov.cancel",
      "m.metrics.DiscoveredTargets.DeleteLabelValues",
      "m.metrics.DiscoveredTargets.WithLabelValues",
      "append",
      "delete",
      "prov.mu.Unlock",
      "m.mtx.Unlock",
      "m.registerProviders",
      "prov.mu.RLock",
      "wg.Add",
      "m.targetsMtx.Unlock",
      "m.startProvider",
      "wg.Wait",
      "m.mtx.Lock",
      "m.metrics.FailedConfigs.Set",
      "len",
      "prov.mu.RUnlock",
      "make",
      "len",
      "oldAmSet.configHash",
      "conf.AlertingConfig.AlertmanagerConfigs.ToMap",
      "newAlertmanagerSet",
      "ams.configHash",
      "n.mtx.Lock",
      "n.mtx.Unlock",
      "delete",
      "make",
      "toDelete.Store",
      "reflect.DeepEqual",
      "sp.reload",
      "m.logger.Error",
      "sp.SetScrapeFailureLogger",
      "m.newScrapeFailureLogger",
      "wg.Done",
      "failed.Load",
      "m.mtxScrape.Unlock",
      "cfg.GetScrapeConfigs",
      "s.Close",
      "runtime.GOMAXPROCS",
      "wg.Add",
      "wg.Wait",
      "errors.New",
      "m.mtxScrape.Lock",
      "m.setOffsetSeed",
      "sp.stop",
      "failed.Store",
      "sp.logger.Error",
      "toDelete.Range",
      "noop.NewTracerProvider",
      "m.logger.Info",
      "buildTracerProvider",
      "context.Background",
      "reflect.DeepEqual",
      "m.shutdownFunc",
      "fmt.Errorf",
      "otel.SetTracerProvider"
    ],
    "Manager.DroppedAlertmanagers": [
      "n.mtx.RLock",
      "n.mtx.RUnlock",
      "ams.mtx.RLock",
      "append",
      "dam.url",
      "ams.mtx.RUnlock"
    ],
    "Manager.LoadGroups": [
      "m.opts.GroupLoader.Parse",
      "labels.FromMap",
      "NewAlertingRule",
      "NewRecordingRule",
      "m.opts.GroupLoader.Load",
      "fmt.Errorf",
      "FromMaps",
      "append",
      "NewGroup",
      "make",
      "time.Duration",
      "len",
      "m.opts.RuleDependencyController.AnalyseRules",
      "m.logger.With",
      "GroupKey"
    ],
    "Manager.RuleGroups": [
      "m.mtx.RUnlock",
      "make",
      "len",
      "append",
      "slices.SortFunc",
      "strings.Compare",
      "m.mtx.RLock"
    ],
    "Manager.Rules": [
      "g.Rules",
      "m.mtx.RLock",
      "m.mtx.RUnlock",
      "append"
    ],
    "Manager.Run": [
      "m.ctx.Err",
      "m.sender",
      "m.ctx.Done",
      "m.cancelDiscoverers",
      "n.logger.Info",
      "wg.Add",
      "wg.Done",
      "n.targetUpdateLoop",
      "n.sendLoop",
      "n.drainQueue",
      "wg.Wait",
      "m.logger.Info",
      "m.start",
      "m.reloader",
      "m.updateTsets",
      "err.Error",
      "otel.SetTextMapPropagator",
      "otel.SetErrorHandler",
      "otelErrHandler",
      "m.logger.Error"
    ],
    "Manager.ScrapePools": [
      "append",
      "m.mtxScrape.Lock",
      "m.mtxScrape.Unlock",
      "make",
      "len"
    ],
    "Manager.Send": [
      "n.mtx.Unlock",
      "n.logger.Warn",
      "n.setMore",
      "n.mtx.Lock",
      "len",
      "n.metrics.dropped.Add",
      "float64",
      "append",
      "relabelAlerts"
    ],
    "Manager.StartCustomProvider": [
      "m.mtx.Lock",
      "append",
      "m.mtx.Unlock",
      "m.startProvider"
    ],
    "Manager.Stop": [
      "n.logger.Info",
      "n.stopOnce.Do",
      "close",
      "m.mtx.Lock",
      "m.mtx.Unlock",
      "m.logger.Info",
      "eg.stopAsync",
      "eg.waitStopped",
      "close",
      "m.mtxScrape.Lock",
      "m.mtxScrape.Unlock",
      "sp.stop",
      "close",
      "close",
      "m.shutdownFunc",
      "m.logger.Error",
      "m.logger.Info"
    ],
    "Manager.TargetsActive": [
      "len",
      "sp.ActiveTargets",
      "m.mtxScrape.Lock",
      "m.mtxScrape.Unlock",
      "make"
    ],
    "Manager.TargetsAll": [
      "m.mtxScrape.Lock",
      "m.mtxScrape.Unlock",
      "make",
      "len",
      "append",
      "sp.ActiveTargets",
      "sp.DroppedTargets"
    ],
    "Manager.TargetsDropped": [
      "m.mtxScrape.Unlock",
      "make",
      "len",
      "sp.DroppedTargets",
      "m.mtxScrape.Lock"
    ],
    "Manager.TargetsDroppedCounts": [
      "m.mtxScrape.Unlock",
      "make",
      "len",
      "m.mtxScrape.Lock"
    ],
    "Manager.UnregisterMetrics": [
      "m.metrics.Unregister",
      "m.metrics.Unregister"
    ],
    "Manager.Update": [
      "g.stop",
      "m.IterationsScheduled.DeleteLabelValues",
      "m.GroupSamples.DeleteLabelValues",
      "m.mtx.Unlock",
      "oldg.stop",
      "oldg.Equals",
      "wg.Add",
      "len",
      "m.IterationsMissed.DeleteLabelValues",
      "m.EvalFailures.DeleteLabelValues",
      "m.GroupLastEvalTime.DeleteLabelValues",
      "m.logger.Error",
      "GroupKey",
      "m.GroupRules.DeleteLabelValues",
      "newg.CopyState",
      "wg.Done",
      "newg.run",
      "m.GroupInterval.DeleteLabelValues",
      "m.GroupLastDuration.DeleteLabelValues",
      "wg.Wait",
      "m.mtx.Lock",
      "m.LoadGroups",
      "m.EvalTotal.DeleteLabelValues",
      "errors.New",
      "delete"
    ],
    "Manager.allGroups": [
      "?.Set",
      "m.metrics.DiscoveredTargets.WithLabelValues",
      "m.targetsMtx.Lock",
      "append",
      "len",
      "p.mu.RUnlock",
      "m.mtx.RUnlock",
      "m.mtx.RLock",
      "p.mu.RLock",
      "m.targetsMtx.Unlock",
      "float64"
    ],
    "Manager.cancelDiscoverers": [
      "m.mtx.RUnlock",
      "p.mu.RLock",
      "p.cancel",
      "p.mu.RUnlock",
      "m.mtx.RLock"
    ],
    "Manager.cleaner": [
      "p.mu.Unlock",
      "m.targetsMtx.Lock",
      "delete",
      "m.targetsMtx.Unlock",
      "p.done",
      "p.mu.Lock"
    ],
    "Manager.drainQueue": [
      "n.logger.Info",
      "n.sendOneBatch",
      "n.queueLen",
      "n.logger.Warn",
      "n.metrics.dropped.Add",
      "float64"
    ],
    "Manager.nextBatch": [
      "n.mtx.Unlock",
      "len",
      "append",
      "make",
      "n.mtx.Lock"
    ],
    "Manager.queueLen": [
      "n.mtx.RLock",
      "n.mtx.RUnlock",
      "len"
    ],
    "Manager.registerProviders": [
      "cfg.NewDiscoverer",
      "m.logger.With",
      "m.logger.Error",
      "append",
      "fmt.Sprintf",
      "add",
      "reflect.DeepEqual",
      "cfg.Name"
    ],
    "Manager.reload": [
      "n.mtx.Unlock",
      "n.logger.Error",
      "fmt.Sprintf",
      "am.sync",
      "n.mtx.Lock",
      "m.metrics.targetScrapePools.Inc",
      "newScrapePool",
      "wg.Add",
      "m.logger.With",
      "sp.Sync",
      "m.mtxScrape.Lock",
      "m.logger.Error",
      "wg.Done",
      "wg.Wait",
      "scrapeConfig.ConvertClassicHistogramsToNHCBEnabled",
      "m.metrics.targetScrapePoolsFailed.Inc",
      "sp.SetScrapeFailureLogger",
      "sp.logger.Error",
      "m.mtxScrape.Unlock"
    ],
    "Manager.reloader": [
      "time.NewTicker",
      "time.Duration",
      "ticker.Stop",
      "m.reload",
      "model.Duration"
    ],
    "Manager.sendAll": [
      "len",
      "relabelAlerts",
      "?.Add",
      "n.metrics.latency.WithLabelValues",
      "amSetCovered.Range",
      "n.mtx.RLock",
      "?.Seconds",
      "wg.Done",
      "?.String",
      "time.Now",
      "n.mtx.RUnlock",
      "alertsToOpenAPIAlerts",
      "time.Duration",
      "time.Since",
      "am.url",
      "ams.mtx.RUnlock",
      "json.Marshal",
      "?.Observe",
      "amSetCovered.Store",
      "wg.Add",
      "n.logger.Error",
      "fmt.Sprintf",
      "n.sendOne",
      "context.Background",
      "n.metrics.errors.WithLabelValues",
      "amSetCovered.CompareAndSwap",
      "n.metrics.sent.WithLabelValues",
      "wg.Wait",
      "ams.mtx.RLock",
      "context.WithTimeout",
      "cancel",
      "float64"
    ],
    "Manager.sendLoop": [
      "n.sendOneBatch",
      "n.queueLen",
      "n.setMore"
    ],
    "Manager.sendOne": [
      "http.NewRequest",
      "bytes.NewReader",
      "req.Header.Set",
      "n.opts.Do",
      "io.Copy",
      "resp.Body.Close",
      "fmt.Errorf"
    ],
    "Manager.sendOneBatch": [
      "n.nextBatch",
      "n.sendAll",
      "n.metrics.dropped.Add",
      "float64",
      "len"
    ],
    "Manager.sender": [
      "m.metrics.SentUpdates.Inc",
      "m.allGroups",
      "m.metrics.DelayedUpdates.Inc",
      "m.logger.Debug",
      "time.NewTicker",
      "ticker.Stop",
      "close",
      "m.ctx.Done"
    ],
    "Manager.setOffsetSeed": [
      "osutil.GetFQDN",
      "fmt.Fprintf",
      "labels.String",
      "h.Sum64",
      "fnv.New64a"
    ],
    "Manager.start": [
      "close"
    ],
    "Manager.startProvider": [
      "p.mu.Lock",
      "p.mu.Unlock",
      "p.d.Run",
      "m.updater",
      "m.logger.Debug",
      "fmt.Sprintf",
      "context.WithCancel",
      "make"
    ],
    "Manager.targetUpdateLoop": [
      "n.reload"
    ],
    "Manager.updateGroup": [
      "m.targetsMtx.Unlock",
      "make",
      "len",
      "delete",
      "m.targetsMtx.Lock"
    ],
    "Manager.updateTsets": [
      "m.mtxScrape.Unlock",
      "m.mtxScrape.Lock"
    ],
    "Manager.updater": [
      "p.mu.RUnlock",
      "m.cleaner",
      "ctx.Done",
      "m.metrics.ReceivedUpdates.Inc",
      "m.logger.Debug",
      "p.mu.RLock",
      "m.updateGroup"
    ],
    "MarshalFloat": [
      "stream.WriteRaw",
      "stream.Buffer",
      "math.Abs",
      "byte",
      "strconv.AppendFloat",
      "stream.SetBuffer"
    ],
    "MarshalHistogram": [
      "it.At",
      "stream.WriteArrayStart",
      "stream.WriteInt",
      "stream.WriteArrayEnd",
      "stream.WriteObjectEnd",
      "stream.WriteObjectStart",
      "stream.WriteObjectField",
      "stream.WriteMore",
      "MarshalFloat",
      "h.AllBucketIterator",
      "it.Next"
    ],
    "MarshalTimestamp": [
      "stream.WriteRaw",
      "stream.WriteInt64"
    ],
    "MarshalYAMLWithInlineConfigs": [
      "inTyp.Field",
      "?.Addr",
      "cfgVal.Field",
      "reflect.ValueOf",
      "inVal.Kind",
      "inVal.Elem",
      "fmt.Errorf",
      "reflect.New",
      "inTyp.NumField",
      "?.Set",
      "writeConfigs",
      "inVal.Type",
      "getConfigType",
      "inVal.Field",
      "cfgTyp.Field",
      "cfgPtr.Interface",
      "cfgPtr.Elem",
      "?.Interface"
    ],
    "MatchType.String": [
      "panic"
    ],
    "Matcher.GetRegexString": [
      "m.re.GetRegexString"
    ],
    "Matcher.Inverse": [
      "panic",
      "NewMatcher"
    ],
    "Matcher.IsRegexOptimized": [
      "m.re.IsOptimized"
    ],
    "Matcher.Matches": [
      "m.re.MatchString",
      "panic"
    ],
    "Matcher.SetMatches": [
      "m.re.SetMatches"
    ],
    "Matcher.String": [
      "b.AvailableBuffer",
      "b.WriteString",
      "m.Type.String",
      "b.String",
      "bytes.NewBuffer",
      "m.shouldQuoteName",
      "b.Write",
      "strconv.AppendQuote"
    ],
    "Matcher.shouldQuoteName": [
      "len"
    ],
    "Matrix.ContainsSameLabelset": [
      "len",
      "?.Metric.Hash",
      "make",
      "ss.Metric.Hash"
    ],
    "Matrix.Len": [
      "len"
    ],
    "Matrix.Less": [
      "labels.Compare"
    ],
    "Matrix.String": [
      "strings.Join",
      "make",
      "len",
      "ss.String"
    ],
    "Matrix.TotalSamples": [
      "len",
      "totalHPointSize"
    ],
    "MatrixSelector.PositionRange": [
      "e.VectorSelector.PositionRange"
    ],
    "MatrixSelector.Pretty": [
      "getCommonPrefixIndent"
    ],
    "MatrixSelector.ShortString": [
      "?.String",
      "model.Duration",
      "node.RangeExpr.String",
      "fmt.Sprintf",
      "node.atOffset"
    ],
    "MatrixSelector.String": [
      "node.atOffset",
      "?.String",
      "model.Duration",
      "node.RangeExpr.String",
      "fmt.Sprintf",
      "vecSelector.String"
    ],
    "MatrixSelector.atOffset": [
      "fmt.Sprintf",
      "time.Duration",
      "model.Duration",
      "float64"
    ],
    "MemPostings.Add": [
      "p.mtx.Lock",
      "lset.Range",
      "p.addFor",
      "p.mtx.Unlock"
    ],
    "MemPostings.All": [
      "context.Background",
      "p.Postings"
    ],
    "MemPostings.Delete": [
      "delete",
      "process",
      "p.unlockWaitAndLockAgain",
      "p.mtx.Lock",
      "p.mtx.Unlock",
      "make",
      "len",
      "append"
    ],
    "MemPostings.EnsureOrder": [
      "p.mtx.Unlock",
      "make",
      "wg.Add",
      "ensureOrderBatchPool.Put",
      "append",
      "len",
      "p.mtx.Lock",
      "slices.Sort",
      "wg.Done",
      "ensureOrderBatchPool.Get",
      "close",
      "wg.Wait",
      "runtime.GOMAXPROCS"
    ],
    "MemPostings.Iter": [
      "p.mtx.RLock",
      "p.mtx.RUnlock",
      "f",
      "newListPostings"
    ],
    "MemPostings.LabelNames": [
      "p.mtx.RLock",
      "p.mtx.RUnlock",
      "len",
      "make",
      "append"
    ],
    "MemPostings.LabelValues": [
      "slices.Clone",
      "p.mtx.RLock",
      "p.mtx.RUnlock",
      "len"
    ],
    "MemPostings.Postings": [
      "p.mtx.RUnlock",
      "Merge",
      "make",
      "len",
      "p.mtx.RLock",
      "append"
    ],
    "MemPostings.PostingsForAllLabelValues": [
      "p.mtx.RLock",
      "make",
      "len",
      "append",
      "p.mtx.RUnlock",
      "Merge"
    ],
    "MemPostings.PostingsForLabelMatching": [
      "Merge",
      "make",
      "ctx.Err",
      "match",
      "EmptyPostings",
      "append",
      "p.mtx.RLock",
      "p.mtx.RUnlock",
      "len",
      "ErrPostings"
    ],
    "MemPostings.SortedKeys": [
      "p.mtx.RUnlock",
      "slices.SortFunc",
      "strings.Compare",
      "p.mtx.RLock",
      "make",
      "len",
      "append"
    ],
    "MemPostings.Stats": [
      "labelValuePairs.init",
      "uint64",
      "metrics.push",
      "labels.get",
      "labelValueLength.get",
      "p.mtx.RLock",
      "labels.init",
      "labels.push",
      "labelValuePairs.push",
      "metrics.get",
      "labelValuePairs.get",
      "metrics.init",
      "len",
      "labelValueLength.init",
      "labelSizeFunc",
      "labelValueLength.push",
      "p.mtx.RUnlock"
    ],
    "MemPostings.Symbols": [
      "maps.Clone",
      "p.mtx.RUnlock",
      "make",
      "len",
      "append",
      "slices.Sort",
      "NewStringListIter",
      "p.mtx.RLock"
    ],
    "MemPostings.addFor": [
      "appendWithExponentialGrowth",
      "len"
    ],
    "MemPostings.unlockWaitAndLockAgain": [
      "p.mtx.Unlock",
      "p.mtx.RLock",
      "p.mtx.RUnlock",
      "time.Sleep",
      "p.mtx.Lock"
    ],
    "MemTombstones.AddInterval": [
      "t.mtx.Lock",
      "t.mtx.Unlock",
      "?.Add"
    ],
    "MemTombstones.DeleteTombstones": [
      "t.mtx.Lock",
      "t.mtx.Unlock",
      "delete"
    ],
    "MemTombstones.Get": [
      "t.mtx.RLock",
      "t.mtx.RUnlock",
      "make",
      "len",
      "copy"
    ],
    "MemTombstones.Iter": [
      "t.mtx.RLock",
      "t.mtx.RUnlock",
      "f"
    ],
    "MemTombstones.Total": [
      "t.mtx.RLock",
      "t.mtx.RUnlock",
      "uint64",
      "len"
    ],
    "MemTombstones.TruncateBefore": [
      "t.mtx.Lock",
      "t.mtx.Unlock",
      "len",
      "delete",
      "make",
      "copy"
    ],
    "MemoizedSeriesIterator.At": [
      "b.it.At"
    ],
    "MemoizedSeriesIterator.AtFloatHistogram": [
      "b.it.AtFloatHistogram"
    ],
    "MemoizedSeriesIterator.AtT": [
      "b.it.AtT"
    ],
    "MemoizedSeriesIterator.Err": [
      "b.it.Err"
    ],
    "MemoizedSeriesIterator.Next": [
      "b.it.Next",
      "b.it.AtT",
      "b.it.At",
      "b.it.AtFloatHistogram"
    ],
    "MemoizedSeriesIterator.Reset": [
      "it.Next"
    ],
    "MemoizedSeriesIterator.Seek": [
      "b.it.Seek",
      "b.it.AtT",
      "b.Next"
    ],
    "Merge": [
      "newMergedPostings",
      "len",
      "EmptyPostings"
    ],
    "MergeLabels": [
      "len",
      "append",
      "make"
    ],
    "Meta.writeHash": [
      "cm.Chunk.Encoding",
      "h.Write",
      "cm.Chunk.Bytes",
      "append",
      "byte"
    ],
    "Metadata.AddToLabels": [
      "b.Add",
      "m.IsTypeEmpty",
      "string"
    ],
    "Metadata.IsEmptyFor": [
      "m.IsTypeEmpty"
    ],
    "Metadata.Marshal": [
      "m.MarshalToSizedBuffer",
      "m.Size",
      "make"
    ],
    "Metadata.MarshalTo": [
      "m.MarshalToSizedBuffer",
      "m.Size"
    ],
    "Metadata.MarshalToSizedBuffer": [
      "len",
      "copy",
      "encodeVarintTypes",
      "uint64"
    ],
    "Metadata.SetToLabels": [
      "string",
      "b.Set"
    ],
    "Metadata.Size": [
      "sovTypes",
      "uint64",
      "len"
    ],
    "Metadata.String": [
      "proto.CompactTextString"
    ],
    "Metadata.Unmarshal": [
      "uint32",
      "skipTypes",
      "fmt.Errorf",
      "uint",
      "uint64",
      "int32",
      "int",
      "Metadata_MetricType",
      "append",
      "len"
    ],
    "Metadata.XXX_DiscardUnknown": [
      "xxx_messageInfo_Metadata.DiscardUnknown"
    ],
    "Metadata.XXX_Marshal": [
      "xxx_messageInfo_Metadata.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "Metadata.XXX_Merge": [
      "xxx_messageInfo_Metadata.Merge"
    ],
    "Metadata.XXX_Size": [
      "m.Size"
    ],
    "Metadata.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "MetadataMetricsCollector.Collect": [
      "float64",
      "mc.TargetsGatherer.TargetsActive",
      "t.SizeMetadata",
      "t.LengthMetadata",
      "prometheus.MustNewConstMetric"
    ],
    "MetadataWatcher.Start": [
      "mw.logger.Info",
      "context.WithCancel",
      "context.Background",
      "mw.loop"
    ],
    "MetadataWatcher.Stop": [
      "mw.softShutdownCancel",
      "time.After",
      "mw.logger.Error",
      "mw.hardShutdownCancel",
      "mw.logger.Info"
    ],
    "MetadataWatcher.collect": [
      "mw.ready",
      "mw.manager.TargetsActive",
      "target.ListMetadata",
      "append",
      "mw.writer.AppendWatcherMetadata"
    ],
    "MetadataWatcher.loop": [
      "time.Duration",
      "ticker.Stop",
      "close",
      "mw.softShutdownCtx.Done",
      "mw.collect",
      "time.NewTicker"
    ],
    "MetadataWatcher.ready": [
      "mw.managerGetter.Get"
    ],
    "Metadata_MetricType.String": [
      "proto.EnumName",
      "int32"
    ],
    "Metric.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "Metric.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Metric.MarshalToSizedBuffer": [
      "copy",
      "m.Histogram.MarshalToSizedBuffer",
      "encodeVarintMetrics",
      "uint64",
      "m.Untyped.MarshalToSizedBuffer",
      "m.Counter.MarshalToSizedBuffer",
      "m.Gauge.MarshalToSizedBuffer",
      "len",
      "?.MarshalToSizedBuffer",
      "m.Summary.MarshalToSizedBuffer"
    ],
    "Metric.Size": [
      "e.Size",
      "uint64",
      "m.Gauge.Size",
      "m.Untyped.Size",
      "len",
      "m.Counter.Size",
      "m.Summary.Size",
      "m.Histogram.Size",
      "sovMetrics"
    ],
    "Metric.String": [
      "proto.CompactTextString"
    ],
    "Metric.Unmarshal": [
      "m.Summary.Unmarshal",
      "m.Counter.Unmarshal",
      "uint64",
      "fmt.Errorf",
      "int64",
      "m.Histogram.Unmarshal",
      "skipMetrics",
      "uint",
      "append",
      "?.Unmarshal",
      "m.Gauge.Unmarshal",
      "int",
      "int32",
      "m.Untyped.Unmarshal",
      "len"
    ],
    "Metric.XXX_DiscardUnknown": [
      "xxx_messageInfo_Metric.DiscardUnknown"
    ],
    "Metric.XXX_Marshal": [
      "cap",
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_Metric.Marshal"
    ],
    "Metric.XXX_Merge": [
      "xxx_messageInfo_Metric.Merge"
    ],
    "Metric.XXX_Size": [
      "m.Size"
    ],
    "Metric.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "Metric.unmarshalWithoutLabels": [
      "len",
      "int32",
      "fmt.Errorf",
      "m.Summary.Unmarshal",
      "int64",
      "m.Gauge.Unmarshal",
      "m.Counter.Unmarshal",
      "m.Histogram.Unmarshal",
      "int",
      "errors.New",
      "append",
      "skipMetrics",
      "uint",
      "uint64",
      "m.Untyped.Unmarshal"
    ],
    "MetricFamiliesToWriteRequest": [
      "?.GetHelp",
      "makeLabelsMap",
      "make",
      "len",
      "append",
      "sort.Strings",
      "?.Type.String",
      "?.GetName",
      "makeTimeseries",
      "prompb.MetricMetadata_MetricType"
    ],
    "MetricFamily.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "MetricFamily.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "MetricFamily.MarshalToSizedBuffer": [
      "len",
      "copy",
      "encodeVarintMetrics",
      "uint64",
      "?.MarshalToSizedBuffer"
    ],
    "MetricFamily.Size": [
      "len",
      "sovMetrics",
      "uint64",
      "e.Size"
    ],
    "MetricFamily.String": [
      "proto.CompactTextString"
    ],
    "MetricFamily.Unmarshal": [
      "?.Unmarshal",
      "skipMetrics",
      "uint",
      "fmt.Errorf",
      "int32",
      "int",
      "string",
      "MetricType",
      "append",
      "len",
      "uint64"
    ],
    "MetricFamily.XXX_DiscardUnknown": [
      "xxx_messageInfo_MetricFamily.DiscardUnknown"
    ],
    "MetricFamily.XXX_Marshal": [
      "xxx_messageInfo_MetricFamily.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "MetricFamily.XXX_Merge": [
      "xxx_messageInfo_MetricFamily.Merge"
    ],
    "MetricFamily.XXX_Size": [
      "m.Size"
    ],
    "MetricFamily.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "MetricFamily.unmarshalWithoutMetrics": [
      "MetricType",
      "append",
      "fmt.Errorf",
      "yoloString",
      "len",
      "uint",
      "uint64",
      "int32",
      "int",
      "errors.New",
      "skipMetrics"
    ],
    "MetricFamilyToProtobuf": [
      "AddMetricFamilyToProtobuf",
      "buffer.Bytes"
    ],
    "MetricMetadata.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "MetricMetadata.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "MetricMetadata.MarshalToSizedBuffer": [
      "len",
      "copy",
      "encodeVarintTypes",
      "uint64"
    ],
    "MetricMetadata.Size": [
      "sovTypes",
      "uint64",
      "len"
    ],
    "MetricMetadata.String": [
      "proto.CompactTextString"
    ],
    "MetricMetadata.Unmarshal": [
      "len",
      "uint64",
      "int32",
      "int",
      "fmt.Errorf",
      "append",
      "uint",
      "MetricMetadata_MetricType",
      "string",
      "skipTypes"
    ],
    "MetricMetadata.XXX_DiscardUnknown": [
      "xxx_messageInfo_MetricMetadata.DiscardUnknown"
    ],
    "MetricMetadata.XXX_Marshal": [
      "cap",
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_MetricMetadata.Marshal"
    ],
    "MetricMetadata.XXX_Merge": [
      "xxx_messageInfo_MetricMetadata.Merge"
    ],
    "MetricMetadata.XXX_Size": [
      "m.Size"
    ],
    "MetricMetadata.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "MetricMetadataStoreFromContext": [
      "ctx.Value"
    ],
    "MetricMetadata_MetricType.String": [
      "proto.EnumName",
      "int32"
    ],
    "MetricStreamingDecoder.GetLabel": [
      "panic"
    ],
    "MetricStreamingDecoder.GetMetric": [
      "panic"
    ],
    "MetricStreamingDecoder.Label": [
      "parseLabel"
    ],
    "MetricStreamingDecoder.NextMetric": [
      "m.resetMetric",
      "m.unmarshalWithoutLabels",
      "len"
    ],
    "MetricStreamingDecoder.NextMetricFamily": [
      "len",
      "proto.DecodeVarint",
      "int",
      "fmt.Errorf",
      "m.resetMetricFamily",
      "m.unmarshalWithoutMetrics"
    ],
    "MetricStreamingDecoder.resetMetricFamily": [
      "m.MetricFamily.Reset"
    ],
    "MetricTextToWriteRequest": [
      "parser.TextToMetricFamilies",
      "MetricFamiliesToWriteRequest"
    ],
    "MetricType.String": [
      "proto.EnumName",
      "int32"
    ],
    "Metrics.Unregister": [
      "registerer.Unregister"
    ],
    "MigrateTestData": [
      "processTestFileLines",
      "os.WriteFile",
      "strings.HasSuffix",
      "file.Name",
      "filepath.Join",
      "strings.Split",
      "string",
      "strings.Join",
      "ParseMigrateMode",
      "fmt.Errorf",
      "os.ReadDir",
      "file.IsDir",
      "os.ReadFile"
    ],
    "MmapFile.Close": [
      "munmap",
      "f.f.Close"
    ],
    "MockContextErrAfter.Count": [
      "c.count.Load"
    ],
    "MockContextErrAfter.Err": [
      "c.count.Inc",
      "c.count.Load",
      "c.MockContext.Err"
    ],
    "MockDedicatedAPI": [
      "r.Header.Get",
      "http.Error",
      "?.Set",
      "w.Header",
      "os.ReadFile",
      "err.Error",
      "w.Write"
    ],
    "MockQuerier.Select": [
      "q.SelectMockFunction"
    ],
    "MockVpsAPI": [
      "os.ReadFile",
      "err.Error",
      "w.Write",
      "r.Header.Get",
      "http.Error",
      "?.Set",
      "w.Header"
    ],
    "MockWriteClient.Endpoint": [
      "c.EndpointFunc"
    ],
    "MockWriteClient.Name": [
      "c.NameFunc"
    ],
    "MockWriteClient.Store": [
      "c.StoreFunc"
    ],
    "MonitoringAssignment.Descriptor": [
      "file_observability_v1_mads_proto_rawDescGZIP"
    ],
    "MonitoringAssignment.ProtoReflect": [
      "mi.MessageOf",
      "protoimpl.X.MessageStateOf",
      "protoimpl.Pointer",
      "ms.LoadMessageInfo",
      "ms.StoreMessageInfo"
    ],
    "MonitoringAssignment.Reset": [
      "protoimpl.X.MessageStateOf",
      "protoimpl.Pointer",
      "ms.StoreMessageInfo"
    ],
    "MonitoringAssignment.String": [
      "protoimpl.X.MessageStringOf"
    ],
    "MonitoringAssignment_Target.Descriptor": [
      "file_observability_v1_mads_proto_rawDescGZIP"
    ],
    "MonitoringAssignment_Target.ProtoReflect": [
      "mi.MessageOf",
      "protoimpl.X.MessageStateOf",
      "protoimpl.Pointer",
      "ms.LoadMessageInfo",
      "ms.StoreMessageInfo"
    ],
    "MonitoringAssignment_Target.Reset": [
      "protoimpl.Pointer",
      "ms.StoreMessageInfo",
      "protoimpl.X.MessageStateOf"
    ],
    "MonitoringAssignment_Target.String": [
      "protoimpl.X.MessageStringOf"
    ],
    "MustGetFunction": [
      "getFunction",
      "panic",
      "fmt.Errorf"
    ],
    "MustLabelMatcher": [
      "labels.NewMatcher",
      "panic"
    ],
    "MustNewMatcher": [
      "NewMatcher",
      "panic"
    ],
    "MustNewRegexp": [
      "NewRegexp",
      "panic"
    ],
    "NHCBParser.Comment": [
      "p.parser.Comment"
    ],
    "NHCBParser.CreatedTimestamp": [
      "p.parser.CreatedTimestamp"
    ],
    "NHCBParser.Exemplar": [
      "len",
      "p.parser.Exemplar"
    ],
    "NHCBParser.Help": [
      "p.parser.Help"
    ],
    "NHCBParser.Next": [
      "p.processNHCB",
      "p.parser.Series",
      "p.differentMetric",
      "errors.New",
      "p.parser.Histogram",
      "p.storeExponentialLabels",
      "p.parser.Next",
      "errors.Is",
      "p.parser.Labels",
      "p.parser.Type",
      "p.handleClassicHistogramSeries"
    ],
    "NHCBParser.Unit": [
      "p.parser.Unit"
    ],
    "NHCBParser.differentMetric": [
      "convertnhcb.GetHistogramMetricBaseName",
      "p.lset.Get",
      "p.lset.HashWithoutLabels"
    ],
    "NHCBParser.handleClassicHistogramSeries": [
      "lset.Get",
      "convertnhcb.GetHistogramMetricBaseName",
      "lset.Has",
      "hist.SetCount",
      "string",
      "strconv.ParseFloat",
      "math.IsNaN",
      "p.processClassicHistogramSeries",
      "hist.SetBucketCount",
      "hist.SetSum"
    ],
    "NHCBParser.nextExemplarPtr": [
      "len",
      "cap",
      "append"
    ],
    "NHCBParser.processClassicHistogramSeries": [
      "p.storeClassicLabels",
      "p.parser.CreatedTimestamp",
      "convertnhcb.GetHistogramMetricBase",
      "p.storeExemplars",
      "updateHist"
    ],
    "NHCBParser.processNHCB": [
      "p.swapExemplars",
      "p.tempNHCB.Convert",
      "h.Validate",
      "fh.Validate",
      "p.tempLsetNHCB.Get",
      "strings.ReplaceAll",
      "?.String",
      "p.tempLsetNHCB.DropMetricName",
      "p.tempNHCB.Reset"
    ],
    "NHCBParser.storeClassicLabels": [
      "p.lset.HashWithoutLabels"
    ],
    "NHCBParser.storeExemplars": [
      "p.nextExemplarPtr",
      "p.parser.Exemplar"
    ],
    "NHCBParser.storeExponentialLabels": [
      "p.lset.Get",
      "p.lset.HashWithoutLabels"
    ],
    "Name": [
      "m.mtx.Lock",
      "m.mtx.Unlock"
    ],
    "NamespaceDiscovery.UnmarshalYAML": [
      "unmarshal"
    ],
    "NegotiateResponseType": [
      "len",
      "fmt.Errorf"
    ],
    "NerveSDConfig.NewDiscoverer": [
      "NewNerveDiscovery"
    ],
    "NerveSDConfig.UnmarshalYAML": [
      "unmarshal",
      "len",
      "errors.New",
      "strings.HasPrefix",
      "fmt.Errorf"
    ],
    "New": [
      "errors.New",
      "l.Info",
      "len",
      "string",
      "config.NewRoundTripperFromConfig",
      "conf.APIServer.String",
      "version.PrometheusUserAgent",
      "promslog.NewNopLogger",
      "rest.InClusterConfig",
      "fmt.Errorf",
      "mapSelector",
      "os.ReadFile",
      "kubernetes.NewForConfig",
      "make",
      "clientcmd.BuildConfigFromFlags",
      "conntrack.DialWithTracing",
      "conntrack.DialWithName",
      "time.Duration",
      "refresh.NewDiscovery",
      "errors.New",
      "config.NewTLSConfig",
      "conntrack.NewDialContextFunc",
      "make",
      "len",
      "append",
      "slices.SortFunc",
      "strings.Compare",
      "yoloString",
      "slices.SortFunc",
      "strings.Compare",
      "NewSymbolTable",
      "mapLabelsToNumbers",
      "make",
      "marshalNumbersToSizedBuffer",
      "slices.SortFunc",
      "strings.Compare",
      "labelsSize",
      "make",
      "marshalLabelsToSizedBuffer",
      "yoloString",
      "NewProtobufParser",
      "NewPromParser",
      "extractMediaType",
      "NewOpenMetricsParser",
      "NewSize",
      "make",
      "append",
      "make",
      "len",
      "panic",
      "int",
      "float64",
      "require.NoError",
      "NewWithError",
      "item",
      "newMetrics",
      "h.mtx.RUnlock",
      "router.Get",
      "router.Post",
      "route.FileServe",
      "promslog.NewNopLogger",
      "api_v1.NewAPI",
      "h.mtx.RLock",
      "route.Param",
      "fmt.Fprintf",
      "bytes.ReplaceAll",
      "h.SetReady",
      "http.Redirect",
      "path.Join",
      "readyf",
      "h.consolesPath",
      "w.Write",
      "router.Head",
      "w.WriteHeader",
      "io.ReadAll",
      "?.String",
      "?.UTC",
      "router.WithPrefix",
      "server.StaticFileServer",
      "ui.Assets.Open",
      "setPathWithPrefix",
      "r.Context",
      "http.HandlerFunc",
      "router.Put",
      "?.WithInstrumentation",
      "h.isReady",
      "fs.ServeHTTP",
      "promhttp.Handler",
      "f.Close",
      "strconv.FormatBool",
      "route.New",
      "os.Getwd",
      "make",
      "time.Now",
      "model.Duration"
    ],
    "NewAPI": [
      "remote.NewReadHandler",
      "a.InstallCodec",
      "panic",
      "remote.NewWriteHandler",
      "remote.NewOTLPWriteHandler"
    ],
    "NewActiveQueryTracker": [
      "activeQueryTracker.generateIndices",
      "logger.Error",
      "filepath.Join",
      "getMMappedFile",
      "copy",
      "os.MkdirAll",
      "logUnfinishedQueries",
      "panic",
      "make"
    ],
    "NewAdapter": [
      "make",
      "discovery.NewManager"
    ],
    "NewAlertingRule": [
      "atomic.NewDuration",
      "atomic.NewError",
      "externalLabels.Map",
      "atomic.NewBool",
      "atomic.NewString",
      "string",
      "atomic.NewTime"
    ],
    "NewAzureADRoundTripper": [
      "newTokenProvider",
      "newTokenCredential"
    ],
    "NewBadBucketLabelWarning": [
      "fmt.Errorf"
    ],
    "NewBlockChunkQuerier": [
      "newBlockBaseQuerier"
    ],
    "NewBlockChunkRef": [
      "BlockChunkRef"
    ],
    "NewBlockQuerier": [
      "newBlockBaseQuerier"
    ],
    "NewBlockWriter": [
      "w.initHead"
    ],
    "NewBuffer": [
      "NewBufferIterator",
      "chunkenc.NewNopIterator"
    ],
    "NewBufferIterator": [
      "newSampleRing",
      "bit.Reset"
    ],
    "NewBufioWriterWithSeek": [
      "NewDirectIOWriter",
      "bufio.NewWriterSize",
      "bufio.NewWriterSize"
    ],
    "NewBuilder": [
      "make",
      "b.Reset"
    ],
    "NewBuilderWithSymbolTable": [
      "EmptyLabels",
      "NewBuilder",
      "EmptyLabels",
      "NewBuilder"
    ],
    "NewChunkDiskMapper": [
      "m.openMMapFiles",
      "fmt.Errorf",
      "os.MkdirAll",
      "fileutil.OpenDir",
      "newCRC32",
      "newChunkBuffer",
      "newChunkWriteQueue",
      "chunkenc.NewPool"
    ],
    "NewChunkedReader": [
      "bufio.NewReader",
      "crc32.New"
    ],
    "NewChunkedWriter": [
      "crc32.New"
    ],
    "NewCircularExemplarStorage": [
      "make",
      "c.metrics.maxExemplars.Set",
      "float64"
    ],
    "NewClient": [
      "promslog.NewNopLogger",
      "influx.DefaultOptions",
      "promslog.NewNopLogger",
      "prometheus.NewCounter",
      "context.Background",
      "influx.NewClientWithOptions",
      "?.SetPrecision"
    ],
    "NewCompactingChunkSeriesMerger": [
      "len",
      "?.Labels",
      "make",
      "append",
      "s.Iterator"
    ],
    "NewCompactorMetrics": [
      "prometheus.NewGauge",
      "prometheus.NewHistogram",
      "prometheus.ExponentialBuckets",
      "r.MustRegister",
      "prometheus.NewCounter"
    ],
    "NewConcatenatingChunkSeriesMerger": [
      "?.Labels",
      "make",
      "append",
      "s.Iterator",
      "len"
    ],
    "NewDBStats": [
      "NewHeadStats"
    ],
    "NewDecbufAt": [
      "binary.BigEndian.Uint32",
      "len",
      "dec.Crc32",
      "bs.Len",
      "bs.Range",
      "int"
    ],
    "NewDecbufRaw": [
      "bs.Len",
      "bs.Range"
    ],
    "NewDecbufUvarintAt": [
      "len",
      "dec.Crc32",
      "binary.BigEndian.Uint32",
      "bs.Len",
      "bs.Range",
      "varint.Uvarint",
      "fmt.Errorf",
      "int"
    ],
    "NewDecoder": [
      "labels.NewScratchBuilder"
    ],
    "NewDirLocker": [
      "prometheus.NewGauge",
      "fmt.Sprintf",
      "r.MustRegister",
      "lock.createdCleanly.Set",
      "filepath.Abs",
      "filepath.Join"
    ],
    "NewDirReader": [
      "realByteSlice",
      "f.Bytes",
      "tsdb_errors.NewMulti",
      "fmt.Errorf",
      "append",
      "?.Err",
      "tsdb_errors.CloseAll",
      "newReader",
      "sequenceFiles",
      "chunkenc.NewPool",
      "fileutil.OpenMmapFile"
    ],
    "NewDirectIOWriter": [
      "newDirectIOWriter",
      "newDirectIOWriter"
    ],
    "NewDiscovery": [
      "promslog.NewNopLogger",
      "cache.New",
      "lru.WithCapacity",
      "refresh.NewDiscovery",
      "time.Duration",
      "errors.New",
      "time.Duration",
      "errors.New",
      "promslog.NewNopLogger",
      "config.NewClientFromConfig",
      "config.WithIdleConnTimeout",
      "string",
      "consul.NewClient",
      "godo.New",
      "time.Duration",
      "godo.SetUserAgent",
      "version.PrometheusUserAgent",
      "fmt.Errorf",
      "refresh.NewDiscovery",
      "errors.New",
      "config.NewRoundTripperFromConfig",
      "promslog.NewNopLogger",
      "strings.ToUpper",
      "refresh.NewDiscovery",
      "time.Duration",
      "errors.New",
      "refresh.NewDiscovery",
      "time.Duration",
      "errors.New",
      "config.NewRoundTripperFromConfig",
      "errors.New",
      "promslog.NewNopLogger",
      "time.Duration",
      "make",
      "fm.init",
      "errors.New",
      "google.DefaultClient",
      "fmt.Errorf",
      "compute.NewService",
      "compute.NewInstancesService",
      "refresh.NewDiscovery",
      "time.Duration",
      "context.Background",
      "option.WithHTTPClient",
      "errors.New",
      "newRefresher",
      "refresh.NewDiscovery",
      "time.Duration",
      "time.Duration",
      "refresh.NewDiscovery",
      "errors.New",
      "promslog.NewNopLogger",
      "config.NewClientFromConfig",
      "errors.New",
      "newServerDiscovery",
      "refresh.NewDiscovery",
      "time.Duration",
      "linodego.NewClient",
      "time.Duration",
      "time.Now",
      "config.NewRoundTripperFromConfig",
      "client.SetUserAgent",
      "version.PrometheusUserAgent",
      "refresh.NewDiscovery",
      "errors.New",
      "?.UTC",
      "time.Duration",
      "errors.New",
      "config.NewRoundTripperFromConfig",
      "len",
      "newAuthTokenRoundTripper",
      "newAuthTokenFileRoundTripper",
      "refresh.NewDiscovery",
      "errors.New",
      "filters.NewArgs",
      "time.Duration",
      "client.NewClientWithOpts",
      "client.WithHost",
      "client.WithAPIVersionNegotiation",
      "config.NewRoundTripperFromConfig",
      "append",
      "fmt.Errorf",
      "refresh.NewDiscovery",
      "d.filters.Add",
      "client.WithHTTPClient",
      "client.WithScheme",
      "client.WithHTTPHeaders",
      "url.Parse",
      "version.PrometheusUserAgent",
      "config.NewClientFromConfig",
      "nomad.NewClient",
      "refresh.NewDiscovery",
      "errors.New",
      "time.Duration",
      "errors.New",
      "newRefresher",
      "refresh.NewDiscovery",
      "time.Duration",
      "newRefresher",
      "refresh.NewDiscovery",
      "time.Duration",
      "errors.New",
      "errors.New",
      "promslog.NewNopLogger",
      "config.NewClientFromConfig",
      "time.Duration",
      "url.Parse",
      "path.Join",
      "u.String",
      "refresh.NewDiscovery",
      "opts.MetricsInstantiator.Instantiate",
      "promslog.NewNopLogger",
      "errors.New",
      "newRefresher",
      "refresh.NewDiscovery",
      "time.Duration",
      "newRefresher",
      "refresh.NewDiscovery",
      "time.Duration",
      "errors.New",
      "time.Duration",
      "refresh.NewDiscovery",
      "errors.New",
      "url.Parse",
      "path.Join",
      "config.NewRoundTripperFromConfig",
      "string",
      "d.client.SetUserAgent",
      "version.PrometheusUserAgent",
      "refresh.NewDiscovery",
      "errors.New",
      "config.NewRoundTripperFromConfig",
      "govultr.NewClient",
      "time.Duration",
      "promslog.NewNopLogger",
      "zk.Connect",
      "c.SetLogger",
      "treecache.NewZookeeperLogger",
      "make",
      "append",
      "treecache.NewZookeeperTreeCache"
    ],
    "NewDockerDiscovery": [
      "client.WithHTTPClient",
      "time.Duration",
      "client.WithAPIVersionNegotiation",
      "client.WithHost",
      "filters.NewArgs",
      "client.WithHTTPHeaders",
      "errors.New",
      "d.filters.Add",
      "config.NewRoundTripperFromConfig",
      "append",
      "client.WithScheme",
      "version.PrometheusUserAgent",
      "client.NewClientWithOpts",
      "fmt.Errorf",
      "url.Parse",
      "refresh.NewDiscovery"
    ],
    "NewEC2Discovery": [
      "errors.New",
      "promslog.NewNopLogger",
      "refresh.NewDiscovery",
      "time.Duration"
    ],
    "NewEmptyChunk": [
      "fmt.Errorf",
      "NewXORChunk",
      "NewHistogramChunk",
      "NewFloatHistogramChunk"
    ],
    "NewEndpointSlice": [
      "RoleEndpointSlice.String",
      "namespacedName",
      "eps.GetStore",
      "e.logger.Error",
      "e.serviceInf.AddEventHandler",
      "svcAddCount.Inc",
      "workqueue.NewNamed",
      "e.endpointSliceInf.AddEventHandler",
      "convertToService",
      "svcUpdateCount.Inc",
      "epslDeleteCount.Inc",
      "?.ByIndex",
      "svc.GetStore",
      "svcDeleteCount.Inc",
      "e.enqueueNode",
      "eventCount.WithLabelValues",
      "promslog.NewNopLogger",
      "pod.GetStore",
      "l.Error",
      "e.endpointSliceInf.GetIndexer",
      "serviceUpdate",
      "e.nodeInf.AddEventHandler",
      "nodeName",
      "RoleService.String",
      "epslAddCount.Inc",
      "e.enqueue",
      "epslUpdateCount.Inc"
    ],
    "NewEndpoints": [
      "epAddCount.Inc",
      "convertToService",
      "podUpdateCount.Inc",
      "epUpdateCount.Inc",
      "e.enqueueNode",
      "nodeName",
      "RoleService.String",
      "workqueue.NewNamed",
      "e.endpointsInf.AddEventHandler",
      "e.enqueue",
      "serviceUpdate",
      "eventCount.WithLabelValues",
      "RoleEndpoint.String",
      "l.Error",
      "e.serviceInf.AddEventHandler",
      "RolePod.String",
      "epDeleteCount.Inc",
      "e.enqueuePod",
      "e.nodeInf.AddEventHandler",
      "e.endpointsStore.GetByKey",
      "svcAddCount.Inc",
      "svcUpdateCount.Inc",
      "e.podInf.AddEventHandler",
      "promslog.NewNopLogger",
      "eps.GetStore",
      "svc.GetStore",
      "pod.GetStore",
      "e.logger.Error",
      "namespacedName",
      "svcDeleteCount.Inc"
    ],
    "NewEngine": [
      "float64",
      "t.GetMaxConcurrent",
      "prometheus.NewSummaryVec",
      "prometheus.NewCounter",
      "queryResultSummary.WithLabelValues",
      "metrics.maxConcurrentQueries.Set",
      "l.Debug",
      "opts.Reg.MustRegister",
      "promslog.NewNopLogger",
      "prometheus.NewGauge"
    ],
    "NewExemplarMetrics": [
      "prometheus.NewCounter",
      "prometheus.NewGauge",
      "reg.MustRegister"
    ],
    "NewFastRegexMatcher": [
      "parsed.Simplify",
      "syntax.Parse",
      "regexp.Compile",
      "parsed.String",
      "optimizeConcatRegex",
      "findSetMatches",
      "stringMatcherFromRegexp",
      "m.compileMatchStringFunction",
      "optimizeAlternatingLiterals"
    ],
    "NewFileReader": [
      "realByteSlice",
      "f.Bytes",
      "?.Err",
      "tsdb_errors.NewMulti",
      "f.Close",
      "fileutil.OpenMmapFile",
      "newReader"
    ],
    "NewFileWriter": [
      "os.OpenFile",
      "bufio.NewWriterSize"
    ],
    "NewFloatHistogramChunk": [
      "make"
    ],
    "NewForBenchmark": [
      "ScratchBuilderForBenchmark",
      "b.Add",
      "b.Sort",
      "b.Labels"
    ],
    "NewGroup": [
      "metrics.GroupLastDuration.WithLabelValues",
      "len",
      "make",
      "opts.Logger.With",
      "GroupKey",
      "metrics.GroupSamples.WithLabelValues",
      "metrics.GroupLastEvalTime.WithLabelValues",
      "metrics.GroupLastRuleDurationSum.WithLabelValues",
      "metrics.GroupRules.WithLabelValues",
      "o.Interval.Seconds",
      "NewGroupMetrics",
      "metrics.IterationsMissed.WithLabelValues",
      "metrics.EvalTotal.WithLabelValues",
      "metrics.EvalFailures.WithLabelValues",
      "promslog.NewNopLogger",
      "metrics.IterationsScheduled.WithLabelValues",
      "?.Set",
      "float64",
      "metrics.GroupInterval.WithLabelValues"
    ],
    "NewGroupMetrics": [
      "prometheus.NewSummary",
      "prometheus.NewCounterVec",
      "prometheus.NewGaugeVec",
      "reg.MustRegister"
    ],
    "NewHTTPResourceClient": [
      "makeXDSResourceHTTPEndpointURL",
      "conf.ExtraQueryParams.Encode",
      "config.NewClientFromConfig",
      "config.WithIdleConnTimeout",
      "endpointURL.String",
      "errors.New",
      "len",
      "url.Parse"
    ],
    "NewHead": [
      "NewHeadStats",
      "mmappedChunksDir",
      "promslog.NewNopLogger",
      "opts.OutOfOrderCapMax.Load",
      "fmt.Errorf",
      "h.resetInMemoryState",
      "chunkenc.NewPool",
      "chunks.NewChunkDiskMapper",
      "newHeadMetrics",
      "opts.OutOfOrderTimeWindow.Load",
      "opts.OutOfOrderTimeWindow.Store",
      "opts.MaxExemplars.Store"
    ],
    "NewHeadAndOOOChunkQuerier": [
      "head.iso.State",
      "NewHeadAndOOOIndexReader",
      "NewHeadAndOOOChunkReader"
    ],
    "NewHeadAndOOOQuerier": [
      "head.iso.State",
      "NewHeadAndOOOIndexReader",
      "NewHeadAndOOOChunkReader"
    ],
    "NewHeadChunkRef": [
      "panic",
      "HeadChunkRef",
      "uint64"
    ],
    "NewHistogramChunk": [
      "make"
    ],
    "NewHistogramIgnoredInAggregationInfo": [
      "fmt.Errorf"
    ],
    "NewHistogramIgnoredInMixedRangeInfo": [
      "fmt.Errorf"
    ],
    "NewHistogramQuantileForcedMonotonicityInfo": [
      "fmt.Errorf"
    ],
    "NewIncompatibleBucketLayoutInBinOpWarning": [
      "fmt.Errorf"
    ],
    "NewIncompatibleCustomBucketsHistogramsWarning": [
      "fmt.Errorf"
    ],
    "NewIncompatibleTypesInBinOpInfo": [
      "fmt.Errorf"
    ],
    "NewIngress": [
      "ingressUpdateCount.Inc",
      "l.Error",
      "RoleIngress.String",
      "inf.GetStore",
      "workqueue.NewNamed",
      "ingressAddCount.Inc",
      "s.enqueue",
      "ingressDeleteCount.Inc",
      "eventCount.WithLabelValues",
      "s.informer.AddEventHandler"
    ],
    "NewInvalidQuantileWarning": [
      "fmt.Errorf"
    ],
    "NewInvalidRatioWarning": [
      "fmt.Errorf"
    ],
    "NewJSONFileLogger": [
      "os.OpenFile",
      "fmt.Errorf",
      "promslog.NewFormat",
      "jsonFmt.Set",
      "?.Handler",
      "promslog.New"
    ],
    "NewKumaHTTPDiscovery": [
      "errors.New",
      "osutil.GetFQDN",
      "logger.Debug",
      "conf.FetchTimeout.String",
      "time.Duration",
      "NewHTTPResourceClient",
      "fmt.Errorf"
    ],
    "NewLazyLoader": [
      "ll.parse",
      "ll.clear"
    ],
    "NewLeveledCompactor": [
      "NewLeveledCompactorWithOptions"
    ],
    "NewLeveledCompactorWithOptions": [
      "len",
      "errors.New",
      "chunkenc.NewPool",
      "promslog.NewNopLogger",
      "storage.NewCompactingChunkSeriesMerger",
      "NewCompactorMetrics"
    ],
    "NewLightsailDiscovery": [
      "refresh.NewDiscovery",
      "time.Duration",
      "errors.New",
      "promslog.NewNopLogger"
    ],
    "NewListChunkSeriesFromSamples": [
      "make",
      "len",
      "chunks.ChunkFromSamples",
      "append",
      "lcsi.Reset",
      "NewListChunkSeriesIterator"
    ],
    "NewListPostings": [
      "newListPostings"
    ],
    "NewListSeries": [
      "Samples",
      "samples",
      "lsi.Reset",
      "NewListSeriesIterator"
    ],
    "NewLiveReader": [
      "compression.NewSyncDecodeBuffer"
    ],
    "NewLiveReaderMetrics": [
      "prometheus.NewCounterVec",
      "reg.MustRegister"
    ],
    "NewManager": [
      "make",
      "option",
      "NewManagerMetrics",
      "logger.Error",
      "promslog.NewNopLogger",
      "n.Alertmanagers",
      "newAlertMetrics",
      "promslog.NewNopLogger",
      "make",
      "float64",
      "n.queueLen",
      "len",
      "newRuleConcurrencyController",
      "promslog.NewNopLogger",
      "make",
      "NewGroupMetrics",
      "newScrapeMetrics",
      "fmt.Errorf",
      "make",
      "pool.New",
      "m.metrics.setTargetMetadataCacheGatherer",
      "promslog.NewNopLogger",
      "make"
    ],
    "NewManagerMetrics": [
      "fmt.Errorf",
      "prometheus.NewGauge",
      "prometheus.NewGaugeVec",
      "prometheus.NewCounter",
      "registerer.Register"
    ],
    "NewMatcher": [
      "NewFastRegexMatcher"
    ],
    "NewMemPostings": [
      "make"
    ],
    "NewMemTombstones": [
      "make"
    ],
    "NewMemoizedEmptyIterator": [
      "NewMemoizedIterator",
      "chunkenc.NewNopIterator"
    ],
    "NewMemoizedIterator": [
      "bit.Reset"
    ],
    "NewMergeChunkQuerier": [
      "filterChunkQueriers",
      "len",
      "newSecondaryQuerierFromChunk",
      "make",
      "append",
      "newGenericQuerierFromChunk"
    ],
    "NewMergeChunkSeriesSet": [
      "len",
      "append",
      "newGenericMergeSeriesSet",
      "make"
    ],
    "NewMergeQuerier": [
      "newSecondaryQuerierFrom",
      "make",
      "append",
      "newGenericQuerierFrom",
      "filterQueriers",
      "len"
    ],
    "NewMergeSeriesSet": [
      "append",
      "newGenericMergeSeriesSet",
      "make",
      "len"
    ],
    "NewMergedStringIter": [
      "a.Next",
      "b.Next"
    ],
    "NewMetadataFromLabels": [
      "ls.Get",
      "model.MetricType"
    ],
    "NewMetadataWatcher": [
      "promslog.NewNopLogger",
      "make"
    ],
    "NewMetricStreamingDecoder": [
      "make"
    ],
    "NewMixedClassicNativeHistogramsWarning": [
      "fmt.Errorf"
    ],
    "NewMixedExponentialCustomHistogramsWarning": [
      "fmt.Errorf"
    ],
    "NewMixedFloatsHistogramsAggWarning": [
      "fmt.Errorf"
    ],
    "NewMixedFloatsHistogramsWarning": [
      "fmt.Errorf"
    ],
    "NewMulti": [
      "m.Add"
    ],
    "NewNHCBParser": [
      "labels.NewScratchBuilderWithSymbolTable",
      "convertnhcb.NewTempHistogram"
    ],
    "NewNativeHistogramFractionNaNsInfo": [
      "fmt.Errorf"
    ],
    "NewNativeHistogramNotCounterWarning": [
      "fmt.Errorf"
    ],
    "NewNativeHistogramNotGaugeWarning": [
      "fmt.Errorf"
    ],
    "NewNativeHistogramQuantileNaNResultInfo": [
      "fmt.Errorf"
    ],
    "NewNativeHistogramQuantileNaNSkewInfo": [
      "fmt.Errorf"
    ],
    "NewNerveDiscovery": [
      "NewDiscovery",
      "time.Duration"
    ],
    "NewNode": [
      "promslog.NewNopLogger",
      "eventCount.WithLabelValues",
      "n.enqueue",
      "nodeDeleteCount.Inc",
      "nodeUpdateCount.Inc",
      "l.Error",
      "RoleNode.String",
      "inf.GetStore",
      "workqueue.NewNamed",
      "n.informer.AddEventHandler",
      "nodeAddCount.Inc"
    ],
    "NewNotifications": [
      "make",
      "prometheus.NewGauge",
      "prometheus.NewCounter",
      "reg.MustRegister"
    ],
    "NewOOOChunk": [
      "make"
    ],
    "NewOOOCompactionHead": [
      "p.Next",
      "chunks.HeadSeriesRef",
      "len",
      "append",
      "head.wbl.NextSegmentSync",
      "hr.Postings",
      "hr.SortedPostings",
      "lastMmapRef.Unpack",
      "head.series.getByID",
      "ms.Lock",
      "ms.Unlock",
      "head.chunkRange.Load",
      "index.AllPostingsKey",
      "p.At",
      "ms.mmapCurrentOOOHeadChunk"
    ],
    "NewOTLPWriteHandler": [
      "fac.Type",
      "noop.NewMeterProvider",
      "context.Background",
      "fac.CreateDefaultConfig",
      "fmt.Errorf",
      "panic",
      "deltatocumulative.NewFactory",
      "component.NewID",
      "fac.CreateMetrics",
      "d2c.Start"
    ],
    "NewOpenMetricsParser": [
      "opt",
      "labels.NewScratchBuilderWithSymbolTable"
    ],
    "NewOriginContext": [
      "context.WithValue",
      "context.WithValue"
    ],
    "NewParser": [
      "parserPool.Get",
      "make",
      "opt"
    ],
    "NewPod": [
      "podDeleteCount.Inc",
      "p.nodeInf.AddEventHandler",
      "workqueue.NewNamed",
      "p.podInf.AddEventHandler",
      "eventCount.WithLabelValues",
      "pods.GetStore",
      "l.Error",
      "p.enqueuePodsForNode",
      "podAddCount.Inc",
      "p.enqueue",
      "podUpdateCount.Inc",
      "nodeName",
      "promslog.NewNopLogger",
      "RolePod.String"
    ],
    "NewPossibleNonCounterInfo": [
      "fmt.Errorf"
    ],
    "NewPossibleNonCounterLabelInfo": [
      "fmt.Errorf"
    ],
    "NewPromParser": [
      "append",
      "labels.NewScratchBuilderWithSymbolTable"
    ],
    "NewPromoteResourceAttributes": [
      "make",
      "len"
    ],
    "NewProtobufParser": [
      "dto.NewMetricStreamingDecoder",
      "labels.NewScratchBuilderWithSymbolTable"
    ],
    "NewQueryStats": [
      "sp.totalSamplesPerStepPoints",
      "timer.Duration"
    ],
    "NewQueryTimers": [
      "NewTimerGroup"
    ],
    "NewQueueManager": [
      "promslog.NewNopLogger",
      "make",
      "logger.Warn",
      "t.newShards",
      "append",
      "logger.With",
      "labels.EmptyLabels",
      "newEWMARate",
      "wlog.NewWatcher",
      "externalLabels.Range",
      "labels.NewBuilder",
      "NewMetadataWatcher",
      "externalLabels.Len",
      "client.Name",
      "client.Endpoint"
    ],
    "NewRangeHeadWithIsolationDisabled": [
      "NewRangeHead"
    ],
    "NewReadClient": [
      "config_util.NewClientFromConfig",
      "time.Duration",
      "remoteReadQueries.WithLabelValues",
      "remoteReadQueriesTotal.MustCurryWith",
      "remoteReadQueryDuration.MustCurryWith",
      "len",
      "newInjectHeadersRoundTripper",
      "otelhttp.NewTransport",
      "conf.URL.String"
    ],
    "NewReadHandler": [
      "gate.New",
      "prometheus.NewGauge",
      "r.MustRegister"
    ],
    "NewReader": [
      "newReader",
      "io.NopCloser",
      "compression.NewSyncDecodeBuffer"
    ],
    "NewRecordingRule": [
      "atomic.NewString",
      "string",
      "atomic.NewTime",
      "atomic.NewDuration",
      "atomic.NewError"
    ],
    "NewRefreshMetrics": [
      "prometheus.NewCounterVec",
      "prometheus.NewSummaryVec",
      "NewMetricRegisterer"
    ],
    "NewRegexp": [
      "regexp.Compile"
    ],
    "NewRoundTripper": [
      "google.FindDefaultCredentials",
      "fmt.Errorf",
      "option.WithCredentials",
      "apihttp.NewTransport",
      "context.Background",
      "option.WithScopes",
      "append",
      "option.WithCredentialsFile"
    ],
    "NewRuleDetail": [
      "r.Labels",
      "r.NoDependentRules",
      "r.NoDependencyRules",
      "panic",
      "fmt.Sprintf",
      "r.Name",
      "?.String",
      "r.Query"
    ],
    "NewSDMock": [
      "make"
    ],
    "NewScratchBuilder": [
      "make",
      "make",
      "NewSymbolTable",
      "make"
    ],
    "NewScratchBuilderWithSymbolTable": [
      "NewScratchBuilder",
      "make",
      "NewScratchBuilder"
    ],
    "NewSegmentBufReader": [
      "len",
      "bufio.NewReaderSize"
    ],
    "NewSegmentBufReaderWithOffset": [
      "sbr.buf.Discard",
      "len",
      "NewSegmentBufReader",
      "bufio.NewReaderSize"
    ],
    "NewSegmentsRangeReader": [
      "listSegments",
      "fmt.Errorf",
      "OpenReadSegment",
      "filepath.Join",
      "append",
      "NewSegmentBufReader"
    ],
    "NewSegmentsReader": [
      "NewSegmentsRangeReader"
    ],
    "NewServersetDiscovery": [
      "NewDiscovery",
      "time.Duration"
    ],
    "NewService": [
      "workqueue.NewNamed",
      "s.enqueue",
      "svcUpdateCount.Inc",
      "l.Error",
      "s.informer.AddEventHandler",
      "svcAddCount.Inc",
      "svcDeleteCount.Inc",
      "promslog.NewNopLogger",
      "eventCount.WithLabelValues",
      "RoleService.String",
      "inf.GetStore"
    ],
    "NewSharedSemaphore": [
      "make"
    ],
    "NewSize": [
      "os.MkdirAll",
      "filepath.Base",
      "CreateSegment",
      "promslog.NewNopLogger",
      "compression.NewSyncEncodeBuffer",
      "w.setSegment",
      "errors.New",
      "newWLMetrics",
      "Segments",
      "w.Dir",
      "fmt.Errorf",
      "make",
      "prometheus.WrapRegistererWithPrefix",
      "w.run"
    ],
    "NewSpanTimer": [
      "timer.Start",
      "?.Start",
      "otel.Tracer"
    ],
    "NewStorage": [
      "NewWriteStorage",
      "promslog.NewNopLogger",
      "logging.Dedupe",
      "slog.New"
    ],
    "NewSymbolTable": [
      "make"
    ],
    "NewSymbols": [
      "d.UvarintBytes",
      "encoding.NewDecbufAt",
      "d.Len",
      "d.Be32int",
      "make",
      "d.Err",
      "append"
    ],
    "NewTOCFromByteSlice": [
      "d.Be64",
      "d.Err",
      "bs.Len",
      "bs.Range",
      "binary.BigEndian.Uint32",
      "len",
      "d.Crc32",
      "fmt.Errorf"
    ],
    "NewTempHistogram": [
      "make"
    ],
    "NewTemplateExpander": [
      "regexp.MustCompile",
      "html_template.HTML",
      "sort.Stable",
      "common_templates.ConvertToFloat",
      "make",
      "re.ReplaceAllString",
      "net.ParseIP",
      "math.Abs",
      "floatToTime",
      "model.ParseDurationAllowNegative",
      "query",
      "timestamp.Time",
      "errors.New",
      "net.SplitHostPort",
      "strings.Split",
      "time.Duration",
      "len",
      "fmt.Sprintf",
      "cases.Title",
      "net.JoinHostPort",
      "math.IsNaN",
      "math.IsInf",
      "float64",
      "externalURL.String"
    ],
    "NewTemporaryDirectory": [
      "os.MkdirTemp",
      "require.NoError"
    ],
    "NewTestEngine": [
      "NewTestEngineWithOpts",
      "durationMilliseconds"
    ],
    "NewTestEngineWithOpts": [
      "tb.Cleanup",
      "require.NoError",
      "ng.Close",
      "tb.Helper",
      "promql.NewEngine"
    ],
    "NewTestMemTombstones": [
      "NewMemTombstones",
      "ret.AddInterval",
      "storage.SeriesRef"
    ],
    "NewTestMetrics": [
      "discovery.NewRefreshMetrics",
      "require.NoError",
      "refreshMetrics.Register",
      "conf.NewDiscovererMetrics",
      "prometheus.NewRegistry",
      "metrics.Register",
      "NewRefreshMetrics",
      "RegisterSDMetrics",
      "require.NoError"
    ],
    "NewTimestampCollector": [
      "prometheus.NewDesc",
      "make"
    ],
    "NewUnorderedMemPostings": [
      "make"
    ],
    "NewWatcher": [
      "promslog.NewNopLogger",
      "filepath.Join",
      "make"
    ],
    "NewWatcherMetrics": [
      "prometheus.NewCounterVec",
      "prometheus.NewGaugeVec",
      "reg.MustRegister"
    ],
    "NewWithError": [
      "os.MkdirTemp",
      "tsdb.DefaultOptions",
      "int64",
      "tsdb.NewCircularExemplarStorage",
      "prometheus.NewRegistry",
      "tsdb.NewExemplarMetrics",
      "fmt.Errorf",
      "len",
      "tsdb.Open",
      "tsdb.NewDBStats"
    ],
    "NewWriteClient": [
      "googleiam.NewRoundTripper",
      "otelhttptrace.WithoutSubSpans",
      "conf.URL.String",
      "config_util.WithDialContextFunc",
      "?.dialContextFn",
      "config_util.NewClientFromConfig",
      "len",
      "azuread.NewAzureADRoundTripper",
      "otelhttp.WithClientTrace",
      "otelhttptrace.NewClientTrace",
      "newDialContextWithRoundRobinDNS",
      "newInjectHeadersRoundTripper",
      "sigv4.NewSigV4RoundTripper",
      "time.Duration",
      "otelhttp.NewTransport"
    ],
    "NewWriteHandler": [
      "?.NewCounter",
      "promauto.With"
    ],
    "NewWriteStorage": [
      "newPool",
      "promslog.NewNopLogger",
      "newEWMARate",
      "wlog.NewLiveReaderMetrics",
      "prometheus.NewGauge",
      "reg.MustRegister",
      "rws.run",
      "make",
      "wlog.NewWatcherMetrics"
    ],
    "NewWriter": [
      "opt",
      "os.MkdirAll",
      "fileutil.OpenDir",
      "newCRC32",
      "NewWriterWithEncoder"
    ],
    "NewWriterWithEncoder": [
      "df.Sync",
      "filepath.Dir",
      "os.RemoveAll",
      "NewFileWriter",
      "make",
      "newCRC32",
      "iw.writeMeta",
      "fileutil.OpenDir",
      "df.Close",
      "fmt.Errorf"
    ],
    "NewXORChunk": [
      "make"
    ],
    "NewZookeeperTreeCache": [
      "make",
      "tc.wg.Add",
      "tc.loop"
    ],
    "Node.Run": [
      "ctx.Done",
      "errors.Is",
      "ctx.Err",
      "n.logger.Error",
      "n.process",
      "n.queue.ShutDown",
      "cache.WaitForCacheSync"
    ],
    "Node.buildNode": [
      "nodeLabels",
      "net.JoinHostPort",
      "strutil.SanitizeLabelName",
      "model.LabelName",
      "nodeSource",
      "nodeAddress",
      "n.logger.Warn",
      "strconv.FormatInt",
      "int64",
      "lv",
      "string",
      "append"
    ],
    "Node.enqueue": [
      "nodeName",
      "n.queue.Add"
    ],
    "Node.hasSynced": [
      "n.informer.HasSynced"
    ],
    "Node.process": [
      "convertToNode",
      "n.buildNode",
      "n.store.GetByKey",
      "nodeSourceFromName",
      "cache.SplitMetaNamespaceKey",
      "send",
      "n.logger.Error",
      "n.queue.Get",
      "n.queue.Done"
    ],
    "NomadSDTestSuite.SetupTest": [
      "s.Mock.Setup",
      "s.Mock.HandleServicesList",
      "s.Mock.HandleServiceHashiCupsGet",
      "NewSDMock"
    ],
    "NomadSDTestSuite.TearDownSuite": [
      "s.Mock.ShutdownServer"
    ],
    "Notifications.AddNotification": [
      "n.mu.Unlock",
      "time.Now",
      "n.notifySubscribers",
      "append",
      "n.mu.Lock"
    ],
    "Notifications.DeleteNotification": [
      "n.mu.Lock",
      "n.mu.Unlock",
      "n.notifySubscribers",
      "append"
    ],
    "Notifications.Get": [
      "n.mu.Lock",
      "n.mu.Unlock",
      "make",
      "len",
      "copy"
    ],
    "Notifications.Sub": [
      "n.subscriberGauge.Set",
      "float64",
      "close",
      "delete",
      "n.mu.Lock",
      "n.mu.Unlock",
      "len",
      "make"
    ],
    "Notifications.notifySubscribers": [
      "n.notificationsSent.Inc",
      "n.notificationsDropped.Inc"
    ],
    "NumberLiteral.Pretty": [
      "getCommonPrefixIndent"
    ],
    "NumberLiteral.String": [
      "fmt.Sprintf",
      "?.String",
      "model.Duration",
      "strconv.FormatFloat"
    ],
    "OOOChunk.Insert": [
      "len",
      "append",
      "sort.Search",
      "copy"
    ],
    "OOOChunk.NumSamples": [
      "len"
    ],
    "OOOChunk.ToEncodedChunks": [
      "chunkenc.NewHistogramChunk",
      "chunkenc.NewFloatHistogramChunk",
      "app.AppendHistogram",
      "len",
      "make",
      "append",
      "chunkenc.NewXORChunk",
      "chunk.Appender",
      "app.Append",
      "app.AppendFloatHistogram"
    ],
    "OOOCompactionHead.Chunks": [
      "NewHeadAndOOOChunkReader"
    ],
    "OOOCompactionHead.Index": [
      "NewOOOCompactionHeadIndexReader"
    ],
    "OOOCompactionHead.Meta": [
      "uint64",
      "len"
    ],
    "OOOCompactionHead.Tombstones": [
      "tombstones.NewMemTombstones"
    ],
    "OOOCompactionHeadIndexReader.LabelNames": [
      "errors.New"
    ],
    "OOOCompactionHeadIndexReader.LabelNamesFor": [
      "errors.New"
    ],
    "OOOCompactionHeadIndexReader.LabelValueFor": [
      "errors.New"
    ],
    "OOOCompactionHeadIndexReader.LabelValues": [
      "errors.New"
    ],
    "OOOCompactionHeadIndexReader.Postings": [
      "index.AllPostingsKey",
      "len",
      "errors.New",
      "index.NewListPostings"
    ],
    "OOOCompactionHeadIndexReader.PostingsForAllLabelValues": [
      "index.ErrPostings",
      "errors.New"
    ],
    "OOOCompactionHeadIndexReader.PostingsForLabelMatching": [
      "index.ErrPostings",
      "errors.New"
    ],
    "OOOCompactionHeadIndexReader.PostingsForMatchers": [
      "errors.New"
    ],
    "OOOCompactionHeadIndexReader.Series": [
      "ir.ch.head.metrics.seriesNotFound.Inc",
      "builder.Assign",
      "s.labels",
      "s.Lock",
      "s.Unlock",
      "getOOOSeriesChunks",
      "ir.ch.head.series.getByID",
      "chunks.HeadSeriesRef"
    ],
    "OOOCompactionHeadIndexReader.ShardedPostings": [
      "hr.ShardedPostings"
    ],
    "OOOCompactionHeadIndexReader.SortedLabelValues": [
      "errors.New"
    ],
    "OOOCompactionHeadIndexReader.Symbols": [
      "hr.Symbols"
    ],
    "OTLPConfig.UnmarshalYAML": [
      "unmarshal",
      "len",
      "errors.New",
      "sanitizeAttributes",
      "fmt.Errorf"
    ],
    "Open": [
      "validateOptions",
      "fmt.Errorf",
      "make",
      "atomic.NewUint64",
      "newStripeSeries",
      "db.run",
      "db.logger.Info",
      "tsdbutil.NewDirLocker",
      "filepath.Join",
      "wlog.NewSize",
      "newDBMetrics",
      "w.Repair",
      "locker.Lock",
      "db.replayWAL",
      "db.logger.Warn",
      "validateOpts",
      "open",
      "promslog.NewNopLogger"
    ],
    "OpenBlock": [
      "promslog.NewNopLogger",
      "chunkDir",
      "append",
      "ir.Size",
      "tsdb_errors.NewMulti",
      "ir.SymbolTableSize",
      "cr.Size",
      "?.Err",
      "readMetaFile",
      "postingsDecoderFactory",
      "index.NewFileReader",
      "filepath.Join",
      "tsdb_errors.CloseAll",
      "chunks.NewDirReader",
      "tombstones.ReadTombstones"
    ],
    "OpenDBReadOnly": [
      "make",
      "os.Stat",
      "fmt.Errorf",
      "os.MkdirTemp",
      "promslog.NewNopLogger"
    ],
    "OpenDir": [
      "os.Open",
      "openDir",
      "os.NewFile",
      "uintptr"
    ],
    "OpenMetricsParser.CreatedTimestamp": [
      "p.setCTParseValues",
      "typeRequiresCT",
      "len",
      "p.seriesHash",
      "p.Next",
      "p.resetCTParseValues",
      "string",
      "int64"
    ],
    "OpenMetricsParser.Exemplar": [
      "p.builder.Labels",
      "len",
      "string",
      "p.builder.Reset",
      "p.builder.Add",
      "p.builder.Sort"
    ],
    "OpenMetricsParser.Help": [
      "lvalReplacer.Replace",
      "string",
      "strings.IndexByte",
      "yoloString",
      "byte"
    ],
    "OpenMetricsParser.Labels": [
      "len",
      "m.IsEmptyFor",
      "normalizeFloatsInLabelValues",
      "p.builder.Labels",
      "p.builder.Reset",
      "unreplace",
      "p.builder.Add",
      "p.builder.Sort",
      "string",
      "m.AddToLabels"
    ],
    "OpenMetricsParser.Next": [
      "t.String",
      "yoloString",
      "string",
      "errors.New",
      "append",
      "p.parseError",
      "p.l.buf",
      "fmt.Errorf",
      "p.parseSeriesEndOfLine",
      "len",
      "utf8.Valid",
      "p.nextToken",
      "strings.HasSuffix",
      "p.parseLVals",
      "p.isCreatedSeries",
      "p.Next"
    ],
    "OpenMetricsParser.getFloatValue": [
      "yoloString",
      "p.l.buf",
      "fmt.Errorf",
      "math.IsNaN",
      "math.Float64frombits",
      "p.parseError",
      "fmt.Sprintf",
      "parseFloat"
    ],
    "OpenMetricsParser.isCreatedSeries": [
      "string",
      "typeRequiresCT",
      "len"
    ],
    "OpenMetricsParser.nextToken": [
      "p.l.Lex"
    ],
    "OpenMetricsParser.parseComment": [
      "int64",
      "p.parseError",
      "errors.New",
      "p.getFloatValue",
      "parseFloat",
      "math.IsNaN",
      "fmt.Errorf",
      "math.IsInf",
      "p.nextToken",
      "p.parseLVals",
      "yoloString",
      "p.l.buf"
    ],
    "OpenMetricsParser.parseError": [
      "len",
      "fmt.Errorf"
    ],
    "OpenMetricsParser.parseLVals": [
      "p.nextToken",
      "p.parseError",
      "fmt.Errorf",
      "append",
      "utf8.Valid",
      "p.l.buf"
    ],
    "OpenMetricsParser.parseSeriesEndOfLine": [
      "p.getFloatValue",
      "p.l.buf",
      "math.IsInf",
      "int64",
      "fmt.Errorf",
      "p.nextToken",
      "errors.New",
      "p.parseComment",
      "parseFloat",
      "yoloString",
      "math.IsNaN",
      "p.parseError"
    ],
    "OpenMetricsParser.seriesHash": [
      "len",
      "bytes.Equal",
      "append",
      "xxhash.Sum64"
    ],
    "OpenMmapFile": [
      "OpenMmapFileWithSize"
    ],
    "OpenMmapFileWithSize": [
      "os.Open",
      "fmt.Errorf",
      "f.Close",
      "f.Stat",
      "int",
      "info.Size",
      "mmap"
    ],
    "OpenReadSegment": [
      "strconv.Atoi",
      "filepath.Base",
      "errors.New",
      "os.Open",
      "filepath.Dir"
    ],
    "OpenWriteSegment": [
      "os.OpenFile",
      "f.Close",
      "f.Write",
      "SegmentName",
      "f.Stat",
      "stat.Size",
      "logger.Warn",
      "make",
      "fmt.Errorf"
    ],
    "OpenstackSDHypervisorTestSuite.SetupTest": [
      "s.Mock.Setup",
      "s.Mock.HandleHypervisorListSuccessfully",
      "s.Mock.HandleVersionsSuccessfully",
      "s.Mock.HandleAuthSuccessfully",
      "NewSDMock"
    ],
    "OpenstackSDHypervisorTestSuite.openstackAuthSuccess": [
      "s.Mock.Endpoint",
      "newRefresher"
    ],
    "OpenstackSDInstanceTestSuite.SetupTest": [
      "s.Mock.HandleVersionsSuccessfully",
      "s.Mock.HandleAuthSuccessfully",
      "NewSDMock",
      "s.Mock.Setup",
      "s.Mock.HandleServerListSuccessfully",
      "s.Mock.HandleFloatingIPListSuccessfully",
      "s.Mock.HandlePortsListSuccessfully"
    ],
    "OpenstackSDInstanceTestSuite.openstackAuthSuccess": [
      "s.Mock.Endpoint",
      "newRefresher"
    ],
    "OpenstackSDLoadBalancerTestSuite.SetupTest": [
      "NewSDMock",
      "s.Mock.Setup",
      "s.Mock.HandleLoadBalancerListSuccessfully",
      "s.Mock.HandleListenersListSuccessfully",
      "s.Mock.HandleFloatingIPListSuccessfully",
      "s.Mock.HandleVersionsSuccessfully",
      "s.Mock.HandleAuthSuccessfully"
    ],
    "OpenstackSDLoadBalancerTestSuite.openstackAuthSuccess": [
      "s.Mock.Endpoint",
      "newRefresher"
    ],
    "OverlappingBlocks": [
      "len",
      "append"
    ],
    "Overlaps.String": [
      "time.Duration",
      "len",
      "strings.Join",
      "append",
      "fmt.Sprintf",
      "m.ULID.String",
      "?.String"
    ],
    "Parameters.toLabels": [
      "make",
      "model.LabelName",
      "model.LabelValue",
      "len",
      "Parameters",
      "strutil.SanitizeLabelName",
      "subParameter.toLabels",
      "strconv.FormatBool",
      "strconv.FormatInt",
      "strconv.FormatFloat",
      "strings.Join"
    ],
    "ParenExpr.Pretty": [
      "needsSplit",
      "e.String",
      "fmt.Sprintf",
      "e.Expr.Pretty",
      "indent"
    ],
    "ParenExpr.String": [
      "fmt.Sprintf"
    ],
    "ParenExpr.Type": [
      "e.Expr.Type"
    ],
    "Parse": [
      "bytes.NewReader",
      "append",
      "yaml.Unmarshal",
      "len",
      "yaml.NewDecoder",
      "decoder.KnownFields",
      "decoder.Decode",
      "errors.Is",
      "groups.Validate"
    ],
    "ParseErr.Error": [
      "fmt.Sprintf",
      "e.PositionRange.StartPosInput"
    ],
    "ParseErrors.Error": [
      "len",
      "?.Error"
    ],
    "ParseExpr": [
      "fmt.Errorf",
      "p.ParseExpr",
      "NewParser",
      "p.Close",
      "len"
    ],
    "ParseFile": [
      "os.ReadFile",
      "fmt.Errorf",
      "Parse"
    ],
    "ParseFiles": [
      "len",
      "errors.Join",
      "filepath.Glob",
      "fmt.Errorf",
      "filepath.Abs",
      "filepath.EvalSymlinks",
      "rulefmt.ParseFile"
    ],
    "ParseMetric": [
      "NewParser",
      "p.Close",
      "p.recover",
      "p.parseGenerated",
      "len"
    ],
    "ParseMetricSelector": [
      "p.parseGenerated",
      "len",
      "NewParser",
      "p.Close",
      "p.recover"
    ],
    "ParseMetricSelectors": [
      "append",
      "ParseMetricSelector"
    ],
    "ParseMigrateMode": [
      "fmt.Errorf"
    ],
    "ParseSeriesDesc": [
      "NewParser",
      "p.Close",
      "p.recover",
      "p.parseGenerated",
      "len"
    ],
    "ParseWriteResponseStats": [
      "strconv.Atoi",
      "append",
      "errors.Join",
      "h.Get"
    ],
    "Pod.Run": [
      "ctx.Err",
      "p.logger.Error",
      "p.process",
      "p.queue.ShutDown",
      "append",
      "cache.WaitForCacheSync",
      "ctx.Done",
      "errors.Is"
    ],
    "Pod.buildPod": [
      "strconv.FormatBool",
      "strconv.FormatUint",
      "net.JoinHostPort",
      "string",
      "podLabels",
      "addNodeLabels",
      "lv",
      "append",
      "p.findPodContainerID",
      "uint64",
      "podSource",
      "len"
    ],
    "Pod.enqueue": [
      "cache.DeletionHandlingMetaNamespaceKeyFunc",
      "p.queue.Add"
    ],
    "Pod.enqueuePodsForNode": [
      "?.ByIndex",
      "p.podInf.GetIndexer",
      "p.logger.Error",
      "p.enqueue"
    ],
    "Pod.findPodContainerID": [
      "p.findPodContainerStatus",
      "p.logger.Debug"
    ],
    "Pod.findPodContainerStatus": [
      "fmt.Errorf"
    ],
    "Pod.hasSynced": [
      "p.podInf.HasSynced"
    ],
    "Pod.process": [
      "convertToPod",
      "p.buildPod",
      "p.queue.Get",
      "p.store.GetByKey",
      "send",
      "p.logger.Error",
      "p.queue.Done",
      "cache.SplitMetaNamespaceKey",
      "podSourceFromNamespaceAndName"
    ],
    "Pool.Get": [
      "?.Get",
      "p.make"
    ],
    "Pool.Put": [
      "fmt.Sprintf",
      "slice.Cap",
      "?.Put",
      "?.Interface",
      "slice.Slice",
      "reflect.ValueOf",
      "slice.Kind",
      "panic"
    ],
    "PopulateDiscoveredLabels": [
      "lb.Set",
      "string",
      "cfg.ScrapeInterval.String",
      "cfg.ScrapeTimeout.String",
      "lb.Get",
      "len",
      "lb.Reset",
      "labels.EmptyLabels"
    ],
    "PopulateLabels": [
      "config.CheckTargetAddress",
      "model.LabelValue",
      "lb.Range",
      "lb.Del",
      "relabel.ProcessBuilder",
      "time.Duration",
      "strings.HasPrefix",
      "lb.Set",
      "res.Validate",
      "PopulateDiscoveredLabels",
      "labels.EmptyLabels",
      "lb.Get",
      "errors.New",
      "model.ParseDuration",
      "fmt.Errorf",
      "lb.Labels",
      "?.IsValid"
    ],
    "PositionRange.StartPosInput": [
      "len",
      "fmt.Sprintf",
      "int"
    ],
    "PostingsForMatchers": [
      "ix.Postings",
      "errors.New",
      "m.Inverse",
      "inversePostingsForMatcher",
      "index.AllPostingsKey",
      "index.EmptyPostings",
      "index.IsEmptyPostingsType",
      "len",
      "append",
      "slices.SortStableFunc",
      "ix.PostingsForAllLabelValues",
      "postingsForMatcher",
      "index.Intersect",
      "make",
      "m.Matches",
      "isSubtractingMatcher",
      "ctx.Err",
      "index.Without"
    ],
    "Preallocate": [
      "preallocExtend",
      "preallocFixed"
    ],
    "PreprocessExpr": [
      "detectHistogramStatsDecoding",
      "parser.Walk",
      "preprocessExprHelper",
      "newStepInvariantExpr"
    ],
    "Prettify": [
      "n.Pretty"
    ],
    "Process": [
      "labels.NewBuilder",
      "ProcessBuilder",
      "labels.EmptyLabels",
      "lb.Labels"
    ],
    "ProcessBuilder": [
      "relabel"
    ],
    "PromParser.Help": [
      "strings.IndexByte",
      "yoloString",
      "byte",
      "helpReplacer.Replace",
      "string"
    ],
    "PromParser.Labels": [
      "len",
      "normalizeFloatsInLabelValues",
      "p.builder.Labels",
      "p.builder.Reset",
      "unreplace",
      "m.AddToLabels",
      "p.builder.Sort",
      "string",
      "p.builder.Add",
      "m.IsEmptyFor"
    ],
    "PromParser.Next": [
      "p.parseLVals",
      "p.parseMetricSuffix",
      "p.Next",
      "append",
      "p.l.buf",
      "fmt.Errorf",
      "yoloString",
      "utf8.Valid",
      "p.nextToken",
      "p.parseError",
      "t.String",
      "len",
      "t2.String"
    ],
    "PromParser.nextToken": [
      "p.l.Lex"
    ],
    "PromParser.parseError": [
      "len",
      "fmt.Errorf"
    ],
    "PromParser.parseLVals": [
      "append",
      "utf8.Valid",
      "p.l.buf",
      "p.nextToken",
      "p.parseError",
      "fmt.Errorf"
    ],
    "PromParser.parseMetricSuffix": [
      "math.Float64frombits",
      "p.nextToken",
      "strconv.ParseInt",
      "fmt.Errorf",
      "p.parseError",
      "parseFloat",
      "yoloString",
      "p.l.buf",
      "math.IsNaN"
    ],
    "PrometheusConverter.FromMetrics": [
      "findMinAndMaxTimestamps",
      "fmt.Errorf",
      "metricSlice.At",
      "metric.Unit",
      "c.addHistogramDataPoints",
      "metric.ExponentialHistogram",
      "?.Len",
      "multierr.Append",
      "metric.Name",
      "otelMetricTypeToPromMetricType",
      "errors.Is",
      "scopeMetricsSlice.Len",
      "resourceMetrics.ScopeMetrics",
      "make",
      "resourceMetrics.Resource",
      "pcommon.Timestamp",
      "scopeMetrics.Metrics",
      "aggregationTemporality",
      "?.DataPoints",
      "resourceMetricsSlice.At",
      "?.Metrics",
      "c.addSumNumberDataPoints",
      "addResourceTargetInfo",
      "newScopeFromScopeMetrics",
      "metricSlice.Len",
      "TranslatorMetricFromOtelMetric",
      "metric.Description",
      "metric.Gauge",
      "metric.Sum",
      "md.ResourceMetrics",
      "scopeMetricsSlice.At",
      "latestTimestamp.AsTime",
      "errors.New",
      "earliestTimestamp.AsTime",
      "append",
      "metric.Type",
      "dataPoints.Len",
      "c.addSummaryDataPoints",
      "resourceMetricsSlice.Len",
      "namer.Build",
      "metric.Histogram",
      "c.everyN.checkContext",
      "c.addGaugeNumberDataPoints",
      "annots.Merge",
      "c.addExponentialHistogramDataPoints",
      "metric.Summary",
      "?.ScopeMetrics",
      "c.addCustomBucketsHistogramDataPoints"
    ],
    "PrometheusConverter.TimeSeries": [
      "len",
      "make",
      "append"
    ],
    "PrometheusConverter.addCustomBucketsHistogramDataPoints": [
      "dataPoints.Len",
      "dataPoints.At",
      "explicitHistogramToCustomBucketsHistogram",
      "annots.Merge",
      "createAttributes",
      "c.getOrCreateTimeSeries",
      "c.everyN.checkContext",
      "pt.Attributes",
      "append"
    ],
    "PrometheusConverter.addExemplars": [
      "sort.Sort",
      "byBucketBoundsData",
      "c.everyN.checkContext",
      "append",
      "len",
      "getPromExemplars"
    ],
    "PrometheusConverter.addExponentialHistogramDataPoints": [
      "dataPoints.At",
      "createAttributes",
      "pt.Attributes",
      "append",
      "dataPoints.Len",
      "c.everyN.checkContext",
      "exponentialToNativeHistogram",
      "annots.Merge",
      "c.getOrCreateTimeSeries"
    ],
    "PrometheusConverter.addGaugeNumberDataPoints": [
      "pt.IntValue",
      "?.NoRecordedValue",
      "dataPoints.Len",
      "createAttributes",
      "convertTimeStamp",
      "pt.Attributes",
      "pt.ValueType",
      "float64",
      "pt.DoubleValue",
      "pt.Flags",
      "math.Float64frombits",
      "c.everyN.checkContext",
      "dataPoints.At",
      "pt.Timestamp",
      "c.addSample"
    ],
    "PrometheusConverter.addHistogramDataPoints": [
      "append",
      "math.Float64frombits",
      "pt.Count",
      "pt.BucketCounts",
      "pt.Sum",
      "c.addSample",
      "float64",
      "?.Len",
      "math.Inf",
      "convertTimeStamp",
      "createAttributes",
      "pt.HasSum",
      "pt.StartTimestamp",
      "c.addTimeSeriesIfNeeded",
      "?.NoRecordedValue",
      "pt.Flags",
      "createLabels",
      "pt.ExplicitBounds",
      "?.At",
      "dataPoints.Len",
      "dataPoints.At",
      "pt.Timestamp",
      "c.addExemplars",
      "c.everyN.checkContext",
      "pt.Attributes",
      "strconv.FormatFloat"
    ],
    "PrometheusConverter.addSample": [
      "len",
      "c.getOrCreateTimeSeries",
      "append"
    ],
    "PrometheusConverter.addSumNumberDataPoints": [
      "pt.Flags",
      "len",
      "c.everyN.checkContext",
      "dataPoints.At",
      "createAttributes",
      "pt.ValueType",
      "pt.DoubleValue",
      "float64",
      "?.NoRecordedValue",
      "c.addTimeSeriesIfNeeded",
      "math.Float64frombits",
      "append",
      "?.IsMonotonic",
      "metric.Sum",
      "make",
      "c.addSample",
      "pt.StartTimestamp",
      "copy",
      "dataPoints.Len",
      "pt.Attributes",
      "convertTimeStamp",
      "pt.Timestamp",
      "pt.IntValue"
    ],
    "PrometheusConverter.addSummaryDataPoints": [
      "pt.Sum",
      "math.Float64frombits",
      "?.Len",
      "qt.Value",
      "dataPoints.Len",
      "pt.Timestamp",
      "?.NoRecordedValue",
      "?.At",
      "strconv.FormatFloat",
      "convertTimeStamp",
      "dataPoints.At",
      "pt.Attributes",
      "createLabels",
      "float64",
      "pt.QuantileValues",
      "c.addTimeSeriesIfNeeded",
      "c.everyN.checkContext",
      "pt.Flags",
      "c.addSample",
      "pt.Count",
      "qt.Quantile",
      "pt.StartTimestamp",
      "createAttributes"
    ],
    "PrometheusConverter.addTimeSeriesIfNeeded": [
      "c.getOrCreateTimeSeries",
      "float64",
      "convertTimeStamp"
    ],
    "PrometheusConverter.getOrCreateTimeSeries": [
      "timeSeriesSignature",
      "isSameMetric",
      "append"
    ],
    "PromoteResourceAttributes.promotedAttributes": [
      "len",
      "sort.Stable",
      "ByLabelName",
      "make",
      "resourceAttributes.Len",
      "resourceAttributes.Range",
      "append",
      "value.AsString"
    ],
    "ProtobufParser.CreatedTimestamp": [
      "p.dec.GetHistogram",
      "ct.GetSeconds",
      "int64",
      "ct.GetNanos",
      "p.dec.GetType",
      "?.GetCreatedTimestamp",
      "p.dec.GetCounter",
      "p.dec.GetSummary"
    ],
    "ProtobufParser.Exemplar": [
      "p.dec.GetType",
      "?.GetExemplar",
      "?.GetBucket",
      "exProto.GetValue",
      "p.builder.Sort",
      "p.dec.GetCounter",
      "len",
      "exProto.GetTimestamp",
      "ts.GetNanos",
      "int64",
      "p.builder.Add",
      "lp.GetName",
      "lp.GetValue",
      "p.builder.Labels",
      "?.GetExemplars",
      "p.dec.GetHistogram",
      "ts.GetSeconds",
      "p.builder.Reset",
      "exProto.GetLabel"
    ],
    "ProtobufParser.Help": [
      "p.entryBytes.Bytes",
      "yoloBytes",
      "p.dec.GetHelp"
    ],
    "ProtobufParser.Histogram": [
      "h.GetNegativeSpan",
      "h.GetNegativeCount",
      "p.entryBytes.Bytes",
      "sh.Compact",
      "h.GetSchema",
      "h.GetZeroCountFloat",
      "span.GetOffset",
      "p.dec.GetType",
      "h.GetPositiveDelta",
      "h.GetBucket",
      "h.GetZeroThreshold",
      "h.GetPositiveCount",
      "span.GetLength",
      "h.GetSampleCount",
      "h.GetZeroCount",
      "h.GetNegativeDelta",
      "len",
      "h.GetSampleCountFloat",
      "h.GetSampleSum",
      "make",
      "h.GetPositiveSpan",
      "fh.Compact",
      "p.dec.GetHistogram"
    ],
    "ProtobufParser.Labels": [
      "p.lset.Copy"
    ],
    "ProtobufParser.Next": [
      "p.dec.GetHistogram",
      "p.dec.NextMetric",
      "p.dec.GetName",
      "p.dec.GetHelp",
      "isNativeHistogram",
      "model.IsValidMetricName",
      "p.dec.GetUnit",
      "strings.HasSuffix",
      "fmt.Errorf",
      "p.dec.GetType",
      "p.entryBytes.Reset",
      "p.onSeriesOrHistogramUpdate",
      "utf8.ValidString",
      "len",
      "p.entryBytes.WriteString",
      "p.dec.NextMetricFamily",
      "errors.Is",
      "p.Next",
      "model.LabelValue"
    ],
    "ProtobufParser.Series": [
      "s.GetSampleCount",
      "len",
      "h.GetSampleCountFloat",
      "h.GetSampleCount",
      "p.dec.GetCounter",
      "p.dec.GetGauge",
      "s.GetSampleSum",
      "s.GetQuantile",
      "?.GetCumulativeCountFloat",
      "p.dec.GetUntyped",
      "h.GetBucket",
      "h.GetSampleSum",
      "?.GetCumulativeCount",
      "panic",
      "p.dec.GetType",
      "?.GetValue",
      "p.dec.GetSummary",
      "float64",
      "p.dec.GetHistogram",
      "p.entryBytes.Bytes"
    ],
    "ProtobufParser.Type": [
      "p.dec.GetType",
      "p.entryBytes.Bytes"
    ],
    "ProtobufParser.Unit": [
      "p.entryBytes.Bytes",
      "p.dec.GetUnit"
    ],
    "ProtobufParser.getMagicLabel": [
      "len",
      "q.GetQuantile",
      "p.dec.GetHistogram",
      "math.IsInf",
      "b.GetUpperBound",
      "p.dec.GetType",
      "?.GetQuantile",
      "p.dec.GetSummary",
      "formatOpenMetricsFloat",
      "?.GetBucket"
    ],
    "ProtobufParser.getMagicName": [
      "p.dec.GetName",
      "p.dec.GetType"
    ],
    "ProtobufParser.onSeriesOrHistogramUpdate": [
      "p.Type",
      "p.getMagicName",
      "p.getMagicLabel",
      "p.builder.Sort",
      "p.builder.Overwrite",
      "p.entryBytes.WriteString",
      "p.entryBytes.WriteByte",
      "p.dec.Label",
      "p.builder.Add",
      "p.lset.Range",
      "p.entryBytes.Reset",
      "p.builder.Reset",
      "p.dec.GetUnit",
      "m.AddToLabels"
    ],
    "Provider.IsStarted": [
      "p.mu.RLock",
      "p.mu.RUnlock"
    ],
    "PushMetrics": [
      "os.ReadFile",
      "url.Parse",
      "fmt.Fprintln",
      "len",
      "parseAndPushMetrics",
      "io.ReadAll",
      "fmt.Printf",
      "url.String",
      "remote.NewWriteClient",
      "model.Duration",
      "fmt.Errorf"
    ],
    "Quantile.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "Quantile.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Quantile.MarshalToSizedBuffer": [
      "float64",
      "len",
      "copy",
      "encoding_binary.LittleEndian.PutUint64",
      "uint64",
      "math.Float64bits"
    ],
    "Quantile.Size": [
      "len"
    ],
    "Quantile.String": [
      "proto.CompactTextString"
    ],
    "Quantile.Unmarshal": [
      "append",
      "int32",
      "int",
      "encoding_binary.LittleEndian.Uint64",
      "float64",
      "skipMetrics",
      "len",
      "uint",
      "uint64",
      "fmt.Errorf",
      "math.Float64frombits"
    ],
    "Quantile.XXX_DiscardUnknown": [
      "xxx_messageInfo_Quantile.DiscardUnknown"
    ],
    "Quantile.XXX_Marshal": [
      "xxx_messageInfo_Quantile.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "Quantile.XXX_Merge": [
      "xxx_messageInfo_Quantile.Merge"
    ],
    "Quantile.XXX_Size": [
      "m.Size"
    ],
    "Quantile.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "Query.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "Query.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Query.MarshalToSizedBuffer": [
      "?.MarshalToSizedBuffer",
      "len",
      "copy",
      "m.Hints.MarshalToSizedBuffer",
      "encodeVarintRemote",
      "uint64"
    ],
    "Query.Size": [
      "uint64",
      "len",
      "e.Size",
      "m.Hints.Size",
      "sovRemote"
    ],
    "Query.String": [
      "proto.CompactTextString"
    ],
    "Query.Unmarshal": [
      "int32",
      "int",
      "skipRemote",
      "uint",
      "uint64",
      "fmt.Errorf",
      "int64",
      "append",
      "?.Unmarshal",
      "m.Hints.Unmarshal",
      "len"
    ],
    "Query.XXX_DiscardUnknown": [
      "xxx_messageInfo_Query.DiscardUnknown"
    ],
    "Query.XXX_Marshal": [
      "xxx_messageInfo_Query.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "Query.XXX_Merge": [
      "xxx_messageInfo_Query.Merge"
    ],
    "Query.XXX_Size": [
      "m.Size"
    ],
    "Query.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "QueryAnalyzeConfig.getStatsFromMetrics": [
      "newMetaStatistics",
      "make",
      "metastatsNative.update",
      "formatSeriesName",
      "calcClassicBucketStatistics",
      "seriesSelector",
      "querySamples",
      "len",
      "string",
      "strings.HasSuffix",
      "delete",
      "calcNativeBucketStatistics",
      "metastatsClassic.Count",
      "fmt.Fprintf",
      "errors.Is",
      "?.Clone",
      "model.LabelSet",
      "append",
      "metastatsClassic.update",
      "metastatsNative.Count"
    ],
    "QueryAnalyzeConfig.run": [
      "context.Background",
      "newAPI",
      "parseTime",
      "time.Now",
      "c.getStatsFromMetrics",
      "fmt.Errorf"
    ],
    "QueryInstant": [
      "context.WithTimeout",
      "context.Background",
      "api.Query",
      "handleAPIError",
      "time.Now",
      "fmt.Fprintln",
      "parseTime",
      "cancel",
      "p.printValue",
      "newAPI"
    ],
    "QueryLabels": [
      "p.printLabelValues",
      "newAPI",
      "context.Background",
      "api.LabelValues",
      "cancel",
      "handleAPIError",
      "fmt.Fprintln",
      "parseStartTimeAndEndTime",
      "context.WithTimeout"
    ],
    "QueryRange": [
      "time.Duration",
      "context.Background",
      "api.QueryRange",
      "p.printValue",
      "newAPI",
      "etime.Add",
      "math.Floor",
      "context.WithTimeout",
      "time.Now",
      "stime.Before",
      "?.Seconds",
      "cancel",
      "handleAPIError",
      "fmt.Fprintln",
      "parseTime",
      "math.Max",
      "etime.Sub"
    ],
    "QueryResult.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "QueryResult.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "QueryResult.MarshalToSizedBuffer": [
      "len",
      "copy",
      "?.MarshalToSizedBuffer",
      "encodeVarintRemote",
      "uint64"
    ],
    "QueryResult.Size": [
      "uint64",
      "len",
      "e.Size",
      "sovRemote"
    ],
    "QueryResult.String": [
      "proto.CompactTextString"
    ],
    "QueryResult.Unmarshal": [
      "skipRemote",
      "uint",
      "uint64",
      "int32",
      "int",
      "fmt.Errorf",
      "append",
      "?.Unmarshal",
      "len"
    ],
    "QueryResult.XXX_DiscardUnknown": [
      "xxx_messageInfo_QueryResult.DiscardUnknown"
    ],
    "QueryResult.XXX_Marshal": [
      "xxx_messageInfo_QueryResult.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "QueryResult.XXX_Merge": [
      "xxx_messageInfo_QueryResult.Merge"
    ],
    "QueryResult.XXX_Size": [
      "m.Size"
    ],
    "QueryResult.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "QuerySamples.IncrementSamplesAtTimestamp": [
      "int"
    ],
    "QuerySamples.InitStepTracking": [
      "make",
      "int"
    ],
    "QuerySamples.NewChild": [
      "NewQuerySamples"
    ],
    "QuerySamples.TotalSamplesPerStepMap": [
      "int",
      "qs.totalSamplesPerStepPoints"
    ],
    "QuerySamples.totalSamplesPerStepPoints": [
      "make",
      "len",
      "int64"
    ],
    "QuerySeries": [
      "newAPI",
      "fmt.Fprintln",
      "cancel",
      "handleAPIError",
      "p.printSeries",
      "parseStartTimeAndEndTime",
      "context.WithTimeout",
      "context.Background",
      "api.Series"
    ],
    "QueryTimers.GetSpanTimer": [
      "NewSpanTimer",
      "qt.SpanOperation",
      "qs.GetTimer"
    ],
    "QueryableFunc.Querier": [
      "f"
    ],
    "QueueManager.Append": [
      "?.Inc",
      "t.metrics.droppedSamplesTotal.WithLabelValues",
      "t.seriesMtx.Lock",
      "t.dataDropped.incr",
      "t.seriesMtx.Unlock",
      "time.Now",
      "isSampleOld",
      "time.Duration",
      "model.Duration",
      "time.Sleep",
      "t.logger.Info",
      "t.shards.enqueue",
      "t.metrics.enqueueRetriesTotal.Inc"
    ],
    "QueueManager.AppendExemplars": [
      "time.Now",
      "time.Duration",
      "t.metrics.droppedExemplarsTotal.WithLabelValues",
      "t.seriesMtx.Lock",
      "t.dataDropped.incr",
      "time.Sleep",
      "isSampleOld",
      "?.Inc",
      "t.logger.Info",
      "t.seriesMtx.Unlock",
      "t.shards.enqueue",
      "t.metrics.enqueueRetriesTotal.Inc"
    ],
    "QueueManager.AppendFloatHistograms": [
      "time.Now",
      "isSampleOld",
      "time.Duration",
      "t.logger.Info",
      "t.seriesMtx.Unlock",
      "t.shards.enqueue",
      "time.Sleep",
      "?.Inc",
      "t.metrics.droppedHistogramsTotal.WithLabelValues",
      "t.seriesMtx.Lock",
      "t.dataDropped.incr",
      "model.Duration",
      "t.metrics.enqueueRetriesTotal.Inc"
    ],
    "QueueManager.AppendHistograms": [
      "t.metrics.droppedHistogramsTotal.WithLabelValues",
      "t.seriesMtx.Unlock",
      "?.Inc",
      "isSampleOld",
      "time.Duration",
      "t.seriesMtx.Lock",
      "t.dataDropped.incr",
      "t.logger.Info",
      "model.Duration",
      "t.shards.enqueue",
      "time.Now",
      "time.Sleep",
      "t.metrics.enqueueRetriesTotal.Inc"
    ],
    "QueueManager.AppendWatcherMetadata": [
      "make",
      "append",
      "prompb.FromMetadataType",
      "int",
      "t.sendMetadataWithBackoff",
      "t.metrics.failedMetadataTotal.Add",
      "len",
      "proto.NewBuffer",
      "math.Ceil",
      "float64",
      "t.logger.Error"
    ],
    "QueueManager.SeriesReset": [
      "t.seriesMtx.Lock",
      "t.seriesMtx.Unlock",
      "t.seriesSegmentMtx.Lock",
      "t.seriesSegmentMtx.Unlock",
      "delete"
    ],
    "QueueManager.SetClient": [
      "t.clientMtx.Unlock",
      "t.clientMtx.Lock"
    ],
    "QueueManager.Start": [
      "t.metrics.maxNumShards.Set",
      "t.metrics.minNumShards.Set",
      "t.metrics.desiredNumShards.Set",
      "t.metrics.maxSamplesPerSend.Set",
      "t.shards.start",
      "t.metrics.register",
      "t.metrics.shardCapacity.Set",
      "float64",
      "t.watcher.Start",
      "t.metadataWatcher.Start",
      "t.wg.Add",
      "t.updateShardsLoop",
      "t.reshardLoop"
    ],
    "QueueManager.Stop": [
      "t.logger.Info",
      "close",
      "t.wg.Wait",
      "t.shards.stop",
      "t.watcher.Stop",
      "t.metadataWatcher.Stop",
      "t.metrics.unregister"
    ],
    "QueueManager.StoreMetadata": [
      "t.seriesMtx.Lock",
      "t.seriesMtx.Unlock",
      "record.ToMetricType"
    ],
    "QueueManager.StoreSeries": [
      "t.seriesSegmentMtx.Lock",
      "t.seriesSegmentMtx.Unlock",
      "t.builder.Reset",
      "processExternalLabels",
      "relabel.ProcessBuilder",
      "t.builder.Labels",
      "t.seriesMtx.Lock",
      "t.seriesMtx.Unlock"
    ],
    "QueueManager.UpdateSeriesSegment": [
      "t.seriesSegmentMtx.Lock",
      "t.seriesSegmentMtx.Unlock"
    ],
    "QueueManager.calculateDesiredShards": [
      "float64",
      "math.Ceil",
      "int",
      "t.dataOut.tick",
      "t.dataDropped.tick",
      "t.dataOutDuration.tick",
      "t.dataOutDuration.rate",
      "t.metrics.highestSentTimestamp.Get",
      "t.dataIn.rate",
      "t.dataOut.rate",
      "t.dataDropped.rate",
      "t.highestRecvTimestamp.Get",
      "t.metrics.desiredNumShards.Set",
      "t.logger.Debug"
    ],
    "QueueManager.client": [
      "t.clientMtx.RLock",
      "t.clientMtx.RUnlock"
    ],
    "QueueManager.newShards": [
      "make"
    ],
    "QueueManager.reshardLoop": [
      "t.wg.Done",
      "t.shards.stop",
      "t.shards.start"
    ],
    "QueueManager.sendMetadataWithBackoff": [
      "t.storeClient.Endpoint",
      "t.metrics.sentBatchDuration.Observe",
      "time.Since",
      "buildWriteRequest",
      "len",
      "attribute.Int",
      "t.storeClient.Name",
      "semconv.HTTPResendCount",
      "?.Seconds",
      "t.sendWriteRequestWithBackoff",
      "t.metrics.retriedMetadataTotal.Add",
      "float64",
      "t.metrics.metadataTotal.Add",
      "t.metrics.metadataBytesTotal.Add",
      "otel.Tracer",
      "span.SetAttributes",
      "t.storeClient.Store",
      "span.RecordError",
      "?.Start",
      "span.End",
      "attribute.String",
      "time.Now"
    ],
    "QueueManager.sendWriteRequestWithBackoff": [
      "errors.As",
      "t.logger.Debug",
      "reshardWaitPeriod.Unix",
      "model.Duration",
      "ctx.Err",
      "t.logger.Info",
      "time.Now",
      "setAtomicToNewer",
      "?.Unix",
      "ctx.Done",
      "?.Add",
      "t.reshardDisableStartTimestamp.Store",
      "time.After",
      "attempt",
      "time.Duration",
      "onRetry",
      "t.logger.Warn"
    ],
    "QueueManager.shouldReshard": [
      "?.Unix",
      "time.Now",
      "t.lastSendTimestamp.Load",
      "t.logger.Warn",
      "t.reshardDisableEndTimestamp.Load",
      "?.Add",
      "time.Unix",
      "t.reshardDisableStartTimestamp.Load",
      "time.Until"
    ],
    "QueueManager.updateShardsLoop": [
      "t.logger.Info",
      "t.wg.Done",
      "time.NewTicker",
      "ticker.Stop",
      "t.calculateDesiredShards",
      "t.shouldReshard"
    ],
    "RandomUnprivilegedPort": [
      "t.Helper",
      "mu.Lock",
      "mu.Unlock",
      "getPort",
      "t.Fatal",
      "portWasUsed",
      "append"
    ],
    "RangeHead.BlockMaxTime": [
      "h.MaxTime"
    ],
    "RangeHead.Chunks": [
      "h.head.iso.State",
      "h.head.chunksRange"
    ],
    "RangeHead.Index": [
      "h.head.indexRange"
    ],
    "RangeHead.Meta": [
      "h.MaxTime",
      "h.NumSeries",
      "h.MinTime"
    ],
    "RangeHead.NumSeries": [
      "h.head.NumSeries"
    ],
    "RangeHead.Size": [
      "h.head.Size"
    ],
    "RangeHead.String": [
      "fmt.Sprintf",
      "h.MinTime",
      "h.MaxTime"
    ],
    "ReadHints.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "ReadHints.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "ReadHints.MarshalToSizedBuffer": [
      "len",
      "copy",
      "encodeVarintTypes",
      "uint64"
    ],
    "ReadHints.Size": [
      "sovTypes",
      "uint64",
      "len"
    ],
    "ReadHints.String": [
      "proto.CompactTextString"
    ],
    "ReadHints.Unmarshal": [
      "int",
      "fmt.Errorf",
      "string",
      "append",
      "skipTypes",
      "len",
      "uint64",
      "int32",
      "int64",
      "bool",
      "uint"
    ],
    "ReadHints.XXX_DiscardUnknown": [
      "xxx_messageInfo_ReadHints.DiscardUnknown"
    ],
    "ReadHints.XXX_Marshal": [
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_ReadHints.Marshal",
      "cap"
    ],
    "ReadHints.XXX_Merge": [
      "xxx_messageInfo_ReadHints.Merge"
    ],
    "ReadHints.XXX_Size": [
      "m.Size"
    ],
    "ReadHints.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "ReadLabels": [
      "f.Close",
      "NewScratchBuilder",
      "b.Reset",
      "strings.NewReplacer",
      "b.Add",
      "bufio.NewScanner",
      "scanner.Scan",
      "strings.Split",
      "b.Sort",
      "m.Hash",
      "append",
      "fmt.Errorf",
      "b.Labels",
      "os.Open",
      "r.Replace",
      "scanner.Text"
    ],
    "ReadPostingsOffsetTable": [
      "d.Err",
      "fmt.Errorf",
      "d.Uvarint64",
      "f",
      "d.UvarintBytes",
      "encoding.NewDecbufAt",
      "int",
      "d.Len",
      "d.Be32",
      "d.Uvarint"
    ],
    "ReadRequest.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "ReadRequest.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "ReadRequest.MarshalToSizedBuffer": [
      "?.MarshalToSizedBuffer",
      "len",
      "copy",
      "make",
      "uint8",
      "uint64",
      "encodeVarintRemote"
    ],
    "ReadRequest.Size": [
      "uint64",
      "len",
      "e.Size",
      "sovRemote"
    ],
    "ReadRequest.String": [
      "proto.CompactTextString"
    ],
    "ReadRequest.Unmarshal": [
      "append",
      "?.Unmarshal",
      "ReadRequest_ResponseType",
      "make",
      "skipRemote",
      "uint",
      "int",
      "fmt.Errorf",
      "len",
      "uint64",
      "int32"
    ],
    "ReadRequest.XXX_DiscardUnknown": [
      "xxx_messageInfo_ReadRequest.DiscardUnknown"
    ],
    "ReadRequest.XXX_Marshal": [
      "xxx_messageInfo_ReadRequest.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "ReadRequest.XXX_Merge": [
      "xxx_messageInfo_ReadRequest.Merge"
    ],
    "ReadRequest.XXX_Size": [
      "m.Size"
    ],
    "ReadRequest.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "ReadRequest_ResponseType.String": [
      "int32",
      "proto.EnumName"
    ],
    "ReadResponse.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "ReadResponse.MarshalTo": [
      "m.MarshalToSizedBuffer",
      "m.Size"
    ],
    "ReadResponse.MarshalToSizedBuffer": [
      "copy",
      "?.MarshalToSizedBuffer",
      "encodeVarintRemote",
      "uint64",
      "len"
    ],
    "ReadResponse.Size": [
      "len",
      "e.Size",
      "sovRemote",
      "uint64"
    ],
    "ReadResponse.String": [
      "proto.CompactTextString"
    ],
    "ReadResponse.Unmarshal": [
      "uint",
      "uint64",
      "int32",
      "fmt.Errorf",
      "?.Unmarshal",
      "skipRemote",
      "len",
      "int",
      "append"
    ],
    "ReadResponse.XXX_DiscardUnknown": [
      "xxx_messageInfo_ReadResponse.DiscardUnknown"
    ],
    "ReadResponse.XXX_Marshal": [
      "xxx_messageInfo_ReadResponse.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "ReadResponse.XXX_Merge": [
      "xxx_messageInfo_ReadResponse.Merge"
    ],
    "ReadResponse.XXX_Size": [
      "m.Size"
    ],
    "ReadResponse.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "ReadTombstones": [
      "int64",
      "len",
      "fmt.Errorf",
      "d.Get",
      "hash.Sum32",
      "os.ReadFile",
      "filepath.Join",
      "binary.BigEndian.Uint32",
      "Decode",
      "os.IsNotExist",
      "newCRC32",
      "d.Err",
      "NewMemTombstones",
      "d.Be32",
      "hash.Write",
      "errors.New"
    ],
    "Reader.ChunkOrIterable": [
      "int",
      "checkCRC32",
      "?.Unpack",
      "BlockChunkRef",
      "sgmBytes.Len",
      "binary.Uvarint",
      "s.pool.Get",
      "chunkenc.Encoding",
      "len",
      "fmt.Errorf",
      "sgmBytes.Range"
    ],
    "Reader.Close": [
      "tsdb_errors.CloseAll",
      "r.c.Close"
    ],
    "Reader.Err": [
      "?.Dir",
      "?.Index",
      "int64"
    ],
    "Reader.LabelNames": [
      "make",
      "append",
      "slices.Sort",
      "len",
      "fmt.Errorf"
    ],
    "Reader.LabelNamesFor": [
      "postings.At",
      "d.Err",
      "fmt.Errorf",
      "append",
      "encoding.NewDecbufUvarintAt",
      "len",
      "r.lookupSymbol",
      "slices.Sort",
      "postings.Next",
      "ctx.Err",
      "int",
      "d.Get",
      "r.dec.LabelNamesOffsetsFor",
      "make"
    ],
    "Reader.LabelValueFor": [
      "int",
      "d.Get",
      "d.Err",
      "fmt.Errorf",
      "r.dec.LabelValueFor",
      "encoding.NewDecbufUvarintAt"
    ],
    "Reader.LabelValues": [
      "fmt.Errorf",
      "make",
      "append",
      "r.traversePostingOffsets",
      "len"
    ],
    "Reader.Next": [
      "r.nextNew",
      "errors.Is",
      "errors.New"
    ],
    "Reader.Offset": [
      "int64"
    ],
    "Reader.Postings": [
      "make",
      "len",
      "append",
      "slices.Sort",
      "fmt.Errorf",
      "Merge",
      "sort.Search",
      "r.traversePostingOffsets",
      "EmptyPostings",
      "encoding.NewDecbufAt",
      "int",
      "r.dec.DecodePostings"
    ],
    "Reader.PostingsForAllLabelValues": [
      "r.postingsForLabelMatching"
    ],
    "Reader.PostingsForLabelMatching": [
      "r.postingsForLabelMatching"
    ],
    "Reader.PostingsRanges": [
      "ReadPostingsOffsetTable",
      "encoding.NewDecbufAt",
      "int",
      "d.Err",
      "string",
      "int64",
      "d.Len",
      "fmt.Errorf"
    ],
    "Reader.Segment": [
      "?.Index"
    ],
    "Reader.Series": [
      "fmt.Errorf",
      "encoding.NewDecbufUvarintAt",
      "int",
      "d.Err",
      "builder.SetSymbolTable",
      "builder.Reset",
      "r.dec.Series",
      "d.Get"
    ],
    "Reader.ShardedPostings": [
      "fmt.Errorf",
      "labels.StableHash",
      "append",
      "p.Next",
      "p.At",
      "r.Series",
      "NewListPostings",
      "make",
      "ErrPostings",
      "bufLbls.Labels"
    ],
    "Reader.Size": [
      "int64",
      "r.b.Len"
    ],
    "Reader.SortedLabelValues": [
      "r.LabelValues",
      "slices.Sort"
    ],
    "Reader.SymbolTableSize": [
      "uint64",
      "r.symbols.Size"
    ],
    "Reader.Symbols": [
      "r.symbols.Iter"
    ],
    "Reader.lookupSymbol": [
      "r.symbols.Lookup"
    ],
    "Reader.nextNew": [
      "fmt.Errorf",
      "binary.BigEndian.Uint16",
      "int",
      "crc32.Checksum",
      "io.ReadFull",
      "int64",
      "errors.New",
      "binary.BigEndian.Uint32",
      "validateRecord",
      "append",
      "compression.Decode",
      "recTypeFromHeader"
    ],
    "Reader.postingsForLabelMatching": [
      "len",
      "r.traversePostingOffsets",
      "encoding.NewDecbufAt",
      "int",
      "fmt.Errorf",
      "ErrPostings",
      "r.postingsForLabelMatchingV1",
      "EmptyPostings",
      "make",
      "match",
      "r.dec.DecodePostings",
      "append",
      "Merge"
    ],
    "Reader.postingsForLabelMatchingV1": [
      "ErrPostings",
      "match",
      "encoding.NewDecbufAt",
      "append",
      "Merge",
      "len",
      "ctx.Err",
      "r.dec.DecodePostings",
      "fmt.Errorf",
      "EmptyPostings",
      "int"
    ],
    "Reader.traversePostingOffsets": [
      "fmt.Errorf",
      "int",
      "ctx.Err",
      "d.Err",
      "yoloString",
      "d.Uvarint64",
      "cb",
      "encoding.NewDecbufAt",
      "d.Skip",
      "d.Len",
      "d.Uvarint",
      "d.UvarintBytes"
    ],
    "RecordingRule.DependencyRules": [
      "rule.dependenciesMutex.RLock",
      "rule.dependenciesMutex.RUnlock"
    ],
    "RecordingRule.DependentRules": [
      "rule.dependenciesMutex.RLock",
      "rule.dependenciesMutex.RUnlock"
    ],
    "RecordingRule.Eval": [
      "ts.Add",
      "labels.NewBuilder",
      "len",
      "rule.SetHealth",
      "NewRuleDetail",
      "query",
      "rule.labels.Range",
      "lb.Labels",
      "vector.ContainsSameLabelset",
      "fmt.Errorf",
      "rule.SetLastError",
      "NewOriginContext",
      "rule.vector.String",
      "labels.EmptyLabels",
      "lb.Reset",
      "lb.Set",
      "errors.New"
    ],
    "RecordingRule.GetEvaluationDuration": [
      "rule.evaluationDuration.Load"
    ],
    "RecordingRule.GetEvaluationTimestamp": [
      "rule.evaluationTimestamp.Load"
    ],
    "RecordingRule.Health": [
      "RuleHealth",
      "rule.health.Load"
    ],
    "RecordingRule.LastError": [
      "rule.lastError.Load"
    ],
    "RecordingRule.NoDependencyRules": [
      "rule.dependenciesMutex.RLock",
      "rule.dependenciesMutex.RUnlock",
      "len"
    ],
    "RecordingRule.NoDependentRules": [
      "rule.dependenciesMutex.RLock",
      "rule.dependenciesMutex.RUnlock",
      "len"
    ],
    "RecordingRule.SetDependencyRules": [
      "rule.dependenciesMutex.Lock",
      "rule.dependenciesMutex.Unlock",
      "make",
      "len",
      "copy"
    ],
    "RecordingRule.SetDependentRules": [
      "copy",
      "rule.dependenciesMutex.Lock",
      "rule.dependenciesMutex.Unlock",
      "make",
      "len"
    ],
    "RecordingRule.SetEvaluationDuration": [
      "rule.evaluationDuration.Store"
    ],
    "RecordingRule.SetEvaluationTimestamp": [
      "rule.evaluationTimestamp.Store"
    ],
    "RecordingRule.SetHealth": [
      "rule.health.Store",
      "string"
    ],
    "RecordingRule.SetLastError": [
      "rule.lastError.Store"
    ],
    "RecordingRule.String": [
      "rule.vector.String",
      "rule.labels.Map",
      "yaml.Marshal",
      "fmt.Sprintf",
      "err.Error",
      "string"
    ],
    "RefreshMetricsVecs.Instantiate": [
      "m.failuresVec.WithLabelValues",
      "m.durationVec.WithLabelValues"
    ],
    "RefreshMetricsVecs.Register": [
      "m.metricRegisterer.RegisterMetrics"
    ],
    "RefreshMetricsVecs.Unregister": [
      "m.metricRegisterer.UnregisterMetrics"
    ],
    "Regexp.MarshalJSON": [
      "json.Marshal",
      "re.String"
    ],
    "Regexp.MarshalYAML": [
      "re.String"
    ],
    "Regexp.String": [
      "re.Regexp.String",
      "len"
    ],
    "Regexp.UnmarshalJSON": [
      "json.Unmarshal",
      "NewRegexp"
    ],
    "Regexp.UnmarshalYAML": [
      "unmarshal",
      "NewRegexp"
    ],
    "RegisterConfig": [
      "registerConfig",
      "config.Name",
      "reflect.TypeOf"
    ],
    "RegisterK8sClientMetricsWithPrometheus": [
      "clientGoRequestMetrics.RegisterWithK8sGoClient",
      "clientGoWorkloadMetrics.RegisterWithK8sGoClient",
      "clientGoMetrics",
      "registerer.Register",
      "fmt.Errorf"
    ],
    "RegisterSDMetrics": [
      "fmt.Errorf",
      "make",
      "conf.NewDiscovererMetrics",
      "currentSdMetrics.Register",
      "conf.Name",
      "rmm.Register"
    ],
    "RemoteReadConfig.SetDirectory": [
      "c.HTTPClientConfig.SetDirectory"
    ],
    "RemoteReadConfig.UnmarshalYAML": [
      "unmarshal",
      "errors.New",
      "validateHeaders",
      "c.HTTPClientConfig.Validate"
    ],
    "RemoteWriteConfig.SetDirectory": [
      "c.HTTPClientConfig.SetDirectory"
    ],
    "RemoteWriteConfig.UnmarshalYAML": [
      "validateHeaders",
      "c.ProtobufMessage.Validate",
      "fmt.Errorf",
      "c.HTTPClientConfig.Validate",
      "validateAuthConfigs",
      "unmarshal",
      "errors.New"
    ],
    "RemoteWriteProtoMsg.Validate": [
      "fmt.Errorf",
      "?.String"
    ],
    "RemoteWriteProtoMsgs.String": [
      "strings.Join",
      "m.Strings"
    ],
    "RemoteWriteProtoMsgs.Strings": [
      "make",
      "len",
      "append",
      "string"
    ],
    "Rename": [
      "OpenDir",
      "filepath.Dir",
      "pdir.Sync",
      "pdir.Close",
      "os.Rename"
    ],
    "Replace": [
      "Rename",
      "os.Stat",
      "os.IsNotExist",
      "f.IsDir",
      "os.RemoveAll"
    ],
    "Request.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "Request.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Request.MarshalToSizedBuffer": [
      "len",
      "copy",
      "?.MarshalToSizedBuffer",
      "encodeVarintTypes",
      "uint64"
    ],
    "Request.OptimizedMarshal": [
      "m.Size",
      "cap",
      "make",
      "m.OptimizedMarshalToSizedBuffer"
    ],
    "Request.OptimizedMarshalToSizedBuffer": [
      "len",
      "copy",
      "?.OptimizedMarshalToSizedBuffer",
      "encodeVarintTypes",
      "uint64"
    ],
    "Request.Size": [
      "len",
      "sovTypes",
      "uint64",
      "e.Size"
    ],
    "Request.String": [
      "proto.CompactTextString"
    ],
    "Request.Unmarshal": [
      "uint",
      "uint64",
      "int32",
      "int",
      "fmt.Errorf",
      "string",
      "?.Unmarshal",
      "len",
      "skipTypes",
      "append"
    ],
    "Request.XXX_DiscardUnknown": [
      "xxx_messageInfo_Request.DiscardUnknown"
    ],
    "Request.XXX_Marshal": [
      "xxx_messageInfo_Request.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "Request.XXX_Merge": [
      "xxx_messageInfo_Request.Merge"
    ],
    "Request.XXX_Size": [
      "m.Size"
    ],
    "Request.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "RequireEqual": [
      "t.Helper",
      "RequireEqualWithOptions"
    ],
    "RequireEqualWithOptions": [
      "fmt.Sprintf",
      "t.Helper",
      "append",
      "cmp.Comparer",
      "cmp.Equal",
      "cmp.Diff",
      "require.Fail"
    ],
    "Result.Matrix": [
      "errors.New"
    ],
    "Result.Scalar": [
      "errors.New"
    ],
    "Result.String": [
      "r.Err.Error",
      "r.Value.String"
    ],
    "Result.Vector": [
      "errors.New"
    ],
    "Retry": [
      "time.NewTicker",
      "tick.Stop",
      "f"
    ],
    "Role.String": [
      "string"
    ],
    "Role.UnmarshalYAML": [
      "unmarshal",
      "fmt.Errorf",
      "unmarshal",
      "fmt.Errorf",
      "unmarshal",
      "fmt.Errorf"
    ],
    "Rule.Validate": [
      "len",
      "model.IsValidMetricName",
      "model.LabelValue",
      "model.LabelName",
      "errors.New",
      "parser.ParseExpr",
      "strings.Contains",
      "?.IsValid",
      "testTemplateParsing",
      "append",
      "fmt.Errorf"
    ],
    "RuleGroups.Validate": [
      "model.LabelValue",
      "r.Validate",
      "append",
      "fmt.Errorf",
      "?.IsValid",
      "model.LabelName"
    ],
    "RulesUnitTest": [
      "RulesUnitTestResult"
    ],
    "RulesUnitTestResult": [
      "fmt.Fprintln",
      "fmt.Fprintf",
      "regexp.MustCompile",
      "strings.Join",
      "junit.Suite",
      "junit.WriteXML",
      "ruleUnitTest",
      "e.Error",
      "fmt.Println"
    ],
    "RunBuiltinTests": [
      "RunBuiltinTestsWithStorage"
    ],
    "RunBuiltinTestsWithStorage": [
      "t.Cleanup",
      "fs.Glob",
      "require.NoError",
      "t.Run",
      "fs.ReadFile",
      "RunTestWithStorage",
      "string"
    ],
    "RunTest": [
      "RunTestWithStorage"
    ],
    "RunTestWithStorage": [
      "runTest",
      "require.NoError"
    ],
    "SDConfig.NewDiscoverer": [
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "New",
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "NewDiscovery",
      "New",
      "NewDiscovery",
      "NewDiscovery"
    ],
    "SDConfig.NewDiscovererMetrics": [
      "newDiscovererMetrics",
      "newDiscovererMetrics",
      "newDiscovererMetrics",
      "newDiscovererMetrics",
      "newDiscovererMetrics",
      "newDiscovererMetrics",
      "newDiscovererMetrics",
      "newDiscovererMetrics"
    ],
    "SDConfig.SetDirectory": [
      "c.HTTPClientConfig.SetDirectory",
      "c.HTTPClientConfig.SetDirectory",
      "c.HTTPClientConfig.SetDirectory",
      "config.JoinDir",
      "c.HTTPClientConfig.SetDirectory",
      "c.HTTPClientConfig.SetDirectory",
      "c.HTTPClientConfig.SetDirectory",
      "c.HTTPClientConfig.SetDirectory",
      "config.JoinDir",
      "c.HTTPClientConfig.SetDirectory",
      "c.HTTPClientConfig.SetDirectory",
      "config.JoinDir",
      "c.HTTPClientConfig.SetDirectory",
      "c.TLSConfig.SetDirectory",
      "c.HTTPClientConfig.SetDirectory",
      "config.JoinDir",
      "c.HTTPClientConfig.SetDirectory",
      "c.HTTPClientConfig.SetDirectory",
      "c.TLSConfig.SetDirectory",
      "c.HTTPClientConfig.SetDirectory",
      "c.HTTPClientConfig.SetDirectory"
    ],
    "SDConfig.UnmarshalYAML": [
      "unmarshal",
      "validateAuthParam",
      "string",
      "fmt.Errorf",
      "c.HTTPClientConfig.Validate",
      "errors.New",
      "c.HTTPClientConfig.Validate",
      "unmarshal",
      "strings.TrimSpace",
      "unmarshal",
      "c.HTTPClientConfig.Validate",
      "unmarshal",
      "len",
      "errors.New",
      "strings.ToUpper",
      "fmt.Errorf",
      "url.Parse",
      "c.HTTPClientConfig.Validate",
      "unmarshal",
      "len",
      "errors.New",
      "errors.New",
      "patFileSDName.MatchString",
      "fmt.Errorf",
      "unmarshal",
      "len",
      "unmarshal",
      "errors.New",
      "unmarshal",
      "errors.New",
      "c.HTTPClientConfig.Validate",
      "errors.New",
      "url.Parse",
      "c.HTTPClientConfig.Validate",
      "unmarshal",
      "unmarshal",
      "errors.New",
      "c.HTTPClientConfig.Validate",
      "unmarshal",
      "errors.New",
      "make",
      "fmt.Errorf",
      "slices.Contains",
      "strings.Join",
      "labels.Parse",
      "c.HTTPClientConfig.Validate",
      "reflect.DeepEqual",
      "string",
      "fields.ParseSelector",
      "unmarshal",
      "c.HTTPClientConfig.Validate",
      "unmarshal",
      "len",
      "errors.New",
      "c.HTTPClientConfig.Validate",
      "unmarshal",
      "strings.TrimSpace",
      "errors.New",
      "c.HTTPClientConfig.Validate",
      "fmt.Errorf",
      "errors.New",
      "unmarshal",
      "fmt.Errorf",
      "unmarshal",
      "errors.New",
      "unmarshal",
      "errors.New",
      "url.Parse",
      "c.HTTPClientConfig.Validate",
      "errors.New",
      "loadProfile",
      "scw.NewClient",
      "scw.WithProfile",
      "c.HTTPClientConfig.Validate",
      "unmarshal",
      "errors.New",
      "url.Parse",
      "fmt.Errorf",
      "c.HTTPClientConfig.Validate",
      "unmarshal",
      "unmarshal",
      "errors.New",
      "fmt.Errorf",
      "c.HTTPClientConfig.Validate",
      "unmarshal",
      "errors.New",
      "url.Parse",
      "unmarshal",
      "c.HTTPClientConfig.Validate"
    ],
    "SDConfig.secretKeyForConfig": [
      "string"
    ],
    "SDMock.HandleAuthSuccessfully": [
      "fmt.Fprintf",
      "m.Endpoint",
      "m.Mux.HandleFunc",
      "?.Add",
      "w.Header",
      "w.WriteHeader"
    ],
    "SDMock.HandleDropletsList": [
      "m.Mux.HandleFunc",
      "?.Add",
      "w.Header",
      "strconv.Atoi",
      "panic",
      "fmt.Fprint",
      "r.Header.Get",
      "fmt.Sprintf",
      "w.WriteHeader",
      "r.URL.Query"
    ],
    "SDMock.HandleFloatingIPListSuccessfully": [
      "testHeader",
      "?.Add",
      "w.Header",
      "fmt.Fprint",
      "m.Mux.HandleFunc",
      "testMethod"
    ],
    "SDMock.HandleHcloudNetworks": [
      "fmt.Sprintf",
      "w.WriteHeader",
      "?.Add",
      "w.Header",
      "fmt.Fprint",
      "m.Mux.HandleFunc",
      "r.Header.Get"
    ],
    "SDMock.HandleHcloudServers": [
      "?.Add",
      "w.Header",
      "fmt.Fprint",
      "m.Mux.HandleFunc",
      "r.Header.Get",
      "fmt.Sprintf",
      "w.WriteHeader"
    ],
    "SDMock.HandleHypervisorListSuccessfully": [
      "testHeader",
      "?.Add",
      "w.Header",
      "fmt.Fprint",
      "m.Mux.HandleFunc",
      "testMethod"
    ],
    "SDMock.HandleInstanceList": [
      "w.WriteHeader",
      "?.Add",
      "w.Header",
      "fmt.Fprint",
      "m.Mux.HandleFunc",
      "r.Header.Get",
      "fmt.Sprintf"
    ],
    "SDMock.HandleListenersListSuccessfully": [
      "m.Mux.HandleFunc",
      "testMethod",
      "testHeader",
      "?.Add",
      "w.Header",
      "fmt.Fprint"
    ],
    "SDMock.HandleLoadBalancerListSuccessfully": [
      "m.Mux.HandleFunc",
      "testMethod",
      "testHeader",
      "?.Add",
      "w.Header",
      "fmt.Fprint"
    ],
    "SDMock.HandlePortsListSuccessfully": [
      "w.Header",
      "fmt.Fprint",
      "m.Mux.HandleFunc",
      "testMethod",
      "testHeader",
      "?.Add"
    ],
    "SDMock.HandleRobotServers": [
      "w.WriteHeader",
      "?.Add",
      "w.Header",
      "fmt.Fprint",
      "m.Mux.HandleFunc",
      "r.BasicAuth"
    ],
    "SDMock.HandleServerListSuccessfully": [
      "testHeader",
      "?.Add",
      "w.Header",
      "fmt.Fprint",
      "m.Mux.HandleFunc",
      "testMethod"
    ],
    "SDMock.HandleServers": [
      "m.Mux.HandleFunc",
      "w.WriteHeader",
      "fmt.Fprint",
      "?.Add",
      "fmt.Sprintf",
      "io.ReadAll",
      "bytes.HasPrefix",
      "w.Header",
      "fmt.Fprintf",
      "r.Header.Get"
    ],
    "SDMock.HandleServiceHashiCupsGet": [
      "?.Set",
      "w.Header",
      "w.WriteHeader",
      "fmt.Fprint",
      "m.Mux.HandleFunc"
    ],
    "SDMock.HandleServicesList": [
      "m.Mux.HandleFunc",
      "?.Set",
      "w.Header",
      "w.WriteHeader",
      "fmt.Fprint"
    ],
    "SDMock.HandleVersionsSuccessfully": [
      "m.Mux.HandleFunc",
      "fmt.Fprintf",
      "m.Endpoint"
    ],
    "SDMock.Setup": [
      "http.NewServeMux",
      "httptest.NewServer",
      "m.t.Cleanup",
      "http.NewServeMux",
      "httptest.NewServer",
      "http.NewServeMux",
      "httptest.NewServer",
      "m.t.Cleanup",
      "m.SetupHandlers",
      "http.NewServeMux",
      "httptest.NewServer",
      "m.t.Cleanup",
      "m.SetupHandlers",
      "http.NewServeMux",
      "httptest.NewServer",
      "http.NewServeMux",
      "httptest.NewServer",
      "m.t.Cleanup",
      "http.NewServeMux",
      "httptest.NewServer",
      "m.t.Cleanup",
      "http.NewServeMux",
      "httptest.NewServer"
    ],
    "SDMock.SetupHandlers": [
      "r.Header.Get",
      "fmt.Sprintf",
      "w.Header",
      "m.Mux.HandleFunc",
      "json.Unmarshal",
      "os.ReadFile",
      "filepath.Join",
      "?.Add",
      "w.Write",
      "w.WriteHeader",
      "sha1.New",
      "h.Sum",
      "w.Write",
      "make",
      "filepath.Join",
      "require.NoError",
      "yaml.Unmarshal",
      "m.Mux.HandleFunc",
      "len",
      "strutil.SanitizeLabelName",
      "base64.URLEncoding.EncodeToString",
      "h.Write",
      "os.ReadFile",
      "w.WriteHeader",
      "?.Add",
      "strings.HasSuffix",
      "w.Header",
      "strings.Split"
    ],
    "SDMock.ShutdownServer": [
      "m.Server.Close",
      "m.Server.Close",
      "m.Server.Close",
      "m.Server.Close",
      "m.Server.Close"
    ],
    "Sample.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "Sample.MarshalJSON": [
      "json.Marshal"
    ],
    "Sample.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer",
      "m.MarshalToSizedBuffer",
      "m.Size"
    ],
    "Sample.MarshalToSizedBuffer": [
      "copy",
      "encodeVarintTypes",
      "uint64",
      "encoding_binary.LittleEndian.PutUint64",
      "math.Float64bits",
      "float64",
      "len",
      "float64",
      "len",
      "copy",
      "encodeVarintTypes",
      "uint64",
      "encoding_binary.LittleEndian.PutUint64",
      "math.Float64bits"
    ],
    "Sample.Size": [
      "uint64",
      "len",
      "sovTypes",
      "sovTypes",
      "uint64",
      "len"
    ],
    "Sample.String": [
      "proto.CompactTextString",
      "proto.CompactTextString",
      "p.String",
      "fmt.Sprintf"
    ],
    "Sample.Unmarshal": [
      "uint",
      "int",
      "float64",
      "int64",
      "append",
      "len",
      "uint64",
      "int32",
      "fmt.Errorf",
      "encoding_binary.LittleEndian.Uint64",
      "math.Float64frombits",
      "skipTypes",
      "int32",
      "int64",
      "float64",
      "math.Float64frombits",
      "len",
      "uint",
      "uint64",
      "int",
      "fmt.Errorf",
      "encoding_binary.LittleEndian.Uint64",
      "skipTypes",
      "append"
    ],
    "Sample.XXX_DiscardUnknown": [
      "xxx_messageInfo_Sample.DiscardUnknown",
      "xxx_messageInfo_Sample.DiscardUnknown"
    ],
    "Sample.XXX_Marshal": [
      "cap",
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_Sample.Marshal",
      "xxx_messageInfo_Sample.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "Sample.XXX_Merge": [
      "xxx_messageInfo_Sample.Merge",
      "xxx_messageInfo_Sample.Merge"
    ],
    "Sample.XXX_Size": [
      "m.Size",
      "m.Size"
    ],
    "Sample.XXX_Unmarshal": [
      "m.Unmarshal",
      "m.Unmarshal"
    ],
    "SampleRingIterator.AtFloatHistogram": [
      "it.h.ToFloat",
      "it.fh.CopyTo",
      "it.fh.Copy"
    ],
    "SampleRingIterator.Next": [
      "it.r.at",
      "s.T",
      "s.FH",
      "it.r.atFH",
      "it.r.atH",
      "s.Type",
      "s.H",
      "s.F",
      "it.r.atF"
    ],
    "SampleSlice.Len": [
      "len"
    ],
    "SanitizeFullLabelName": [
      "len",
      "validSb.WriteRune",
      "validSb.String"
    ],
    "SanitizeLabelName": [
      "invalidLabelCharRE.ReplaceAllString"
    ],
    "Scalar.MarshalJSON": [
      "float64",
      "strconv.FormatFloat",
      "json.Marshal"
    ],
    "Scalar.String": [
      "strconv.FormatFloat",
      "fmt.Sprintf"
    ],
    "ScrapeConfig.MarshalYAML": [
      "discovery.MarshalYAMLWithInlineConfigs"
    ],
    "ScrapeConfig.SetDirectory": [
      "c.ServiceDiscoveryConfigs.SetDirectory",
      "c.HTTPClientConfig.SetDirectory",
      "config.JoinDir"
    ],
    "ScrapeConfig.UnmarshalYAML": [
      "checkStaticTargets",
      "discovery.UnmarshalYAMLWithInlineConfigs",
      "len",
      "errors.New",
      "c.HTTPClientConfig.Validate"
    ],
    "ScrapeConfig.Validate": [
      "c.ScrapeFallbackProtocol.Validate",
      "errors.New",
      "fmt.Errorf",
      "validateAcceptScrapeProtocols"
    ],
    "ScrapeProtocol.HeaderMediaType": [
      "mime.ParseMediaType"
    ],
    "ScrapeProtocol.Validate": [
      "string",
      "sort.Strings",
      "fmt.Errorf",
      "append"
    ],
    "ScratchBuilder.Add": [
      "append",
      "append",
      "append"
    ],
    "ScratchBuilder.Assign": [
      "append"
    ],
    "ScratchBuilder.Labels": [
      "append",
      "marshalNumbersToSizedBuffer",
      "yoloString",
      "b.output.IsEmpty",
      "mapLabelsToNumbers",
      "make",
      "b.output.IsEmpty",
      "labelsSize",
      "make",
      "marshalLabelsToSizedBuffer",
      "yoloString"
    ],
    "ScratchBuilder.Overwrite": [
      "append",
      "yoloString",
      "mapLabelsToNumbers",
      "cap",
      "make",
      "marshalNumbersToSizedBuffer",
      "labelsSize",
      "cap",
      "make",
      "marshalLabelsToSizedBuffer",
      "yoloString"
    ],
    "ScratchBuilder.Reset": [
      "EmptyLabels",
      "EmptyLabels"
    ],
    "ScratchBuilder.Sort": [
      "slices.SortFunc",
      "strings.Compare",
      "slices.SortFunc",
      "strings.Compare",
      "slices.SortFunc",
      "strings.Compare"
    ],
    "ScratchBuilder.UnsafeAddBytes": [
      "append",
      "string",
      "append",
      "yoloString",
      "append",
      "yoloString"
    ],
    "ScratchBuilderForBenchmark": [
      "b.Labels",
      "b.Reset",
      "NewScratchBuilder",
      "b.Add",
      "fmt.Sprintf"
    ],
    "SegmentName": [
      "fmt.Sprintf",
      "filepath.Join"
    ],
    "Segments": [
      "listSegments",
      "len"
    ],
    "Selector.Matches": [
      "labels.Get",
      "m.Matches"
    ],
    "SendAlerts": [
      "len",
      "s.Send",
      "strutil.TableLinkForExpression",
      "alert.ResolvedAt.IsZero",
      "append"
    ],
    "SequenceValue.String": [
      "v.Histogram.String",
      "fmt.Sprintf"
    ],
    "Series.String": [
      "len",
      "append",
      "f.String",
      "h.String",
      "fmt.Sprintf",
      "strings.Join",
      "make"
    ],
    "SeriesEntry.Iterator": [
      "s.SampleIteratorFn"
    ],
    "ServersetSDConfig.NewDiscoverer": [
      "NewServersetDiscovery"
    ],
    "ServersetSDConfig.UnmarshalYAML": [
      "strings.HasPrefix",
      "fmt.Errorf",
      "unmarshal",
      "len",
      "errors.New"
    ],
    "Service.Run": [
      "s.queue.ShutDown",
      "cache.WaitForCacheSync",
      "ctx.Done",
      "errors.Is",
      "ctx.Err",
      "s.logger.Error",
      "s.process"
    ],
    "Service.buildService": [
      "int64",
      "lv",
      "string",
      "append",
      "serviceSource",
      "serviceLabels",
      "net.JoinHostPort",
      "strconv.FormatInt"
    ],
    "Service.enqueue": [
      "cache.DeletionHandlingMetaNamespaceKeyFunc",
      "s.queue.Add"
    ],
    "Service.hasSynced": [
      "s.informer.HasSynced"
    ],
    "Service.process": [
      "s.buildService",
      "cache.SplitMetaNamespaceKey",
      "serviceSourceFromNamespaceAndName",
      "s.store.GetByKey",
      "send",
      "convertToService",
      "s.logger.Error",
      "s.queue.Get",
      "s.queue.Done"
    ],
    "SetCORS": [
      "?.Add",
      "w.Header",
      "r.Header.Get",
      "?.Set",
      "o.String",
      "o.MatchString"
    ],
    "SharedLimitListener": [
      "make"
    ],
    "SizeOfLabels": [
      "uint64",
      "len",
      "unsafe.Sizeof",
      "len",
      "uint64",
      "uint64",
      "labelSize"
    ],
    "Slice.Len": [
      "len"
    ],
    "Slice.Less": [
      "Compare"
    ],
    "SpanTimer.Finish": [
      "s.timer.Stop",
      "s.span.End",
      "obs.Observe",
      "?.Seconds",
      "s.timer.ElapsedTime"
    ],
    "StableHash": [
      "xxhash.New",
      "h.WriteString",
      "h.Sum64",
      "append",
      "make",
      "cap",
      "h.Write",
      "xxhash.Sum64",
      "len",
      "h.Write",
      "h.Sum64",
      "append",
      "make",
      "len",
      "cap",
      "xxhash.Sum64",
      "decodeString",
      "xxhash.New",
      "h.WriteString",
      "h.Sum64",
      "append",
      "len",
      "decodeString",
      "cap",
      "xxhash.New",
      "h.Write",
      "h.WriteString",
      "xxhash.Sum64",
      "make"
    ],
    "Statfs": [
      "syscall.Statfs",
      "int64",
      "strconv.FormatInt",
      "syscall.Statfs",
      "strconv.Itoa",
      "int",
      "syscall.Statfs",
      "strconv.Itoa",
      "int"
    ],
    "StaticConfig.NewDiscoverer": [
      "staticDiscoverer"
    ],
    "StepInvariantExpr.PositionRange": [
      "e.Expr.PositionRange"
    ],
    "StepInvariantExpr.Pretty": [
      "e.Expr.Pretty"
    ],
    "StepInvariantExpr.String": [
      "e.Expr.String"
    ],
    "StepInvariantExpr.Type": [
      "e.Expr.Type"
    ],
    "Storage.Appender": [
      "s.rws.Appender"
    ],
    "Storage.ApplyConfig": [
      "fmt.Errorf",
      "labels.EmptyLabels",
      "NewSampleAndChunkQueryableClient",
      "labelsToEqualityMatchers",
      "s.mtx.Lock",
      "s.mtx.Unlock",
      "s.rws.ApplyConfig",
      "make",
      "len",
      "toHash",
      "NewReadClient",
      "append"
    ],
    "Storage.ChunkQuerier": [
      "append",
      "storage.NewMergeChunkQuerier",
      "storage.NewCompactingChunkSeriesMerger",
      "s.mtx.Lock",
      "s.mtx.Unlock",
      "make",
      "len",
      "queryable.ChunkQuerier"
    ],
    "Storage.Close": [
      "s.deduper.Stop",
      "s.mtx.Lock",
      "s.mtx.Unlock",
      "s.rws.Close"
    ],
    "Storage.LowestSentTimestamp": [
      "s.rws.LowestSentTimestamp"
    ],
    "Storage.Notify": [
      "s.rws.Notify"
    ],
    "Storage.Querier": [
      "s.mtx.Lock",
      "s.mtx.Unlock",
      "make",
      "len",
      "queryable.Querier",
      "append",
      "storage.NewMergeQuerier"
    ],
    "Storage.StartTime": [
      "int64"
    ],
    "StorageSeries.Iterator": [
      "ssi.reset",
      "newStorageSeriesIterator"
    ],
    "StreamChunkedReadResponses": [
      "ss.Warnings",
      "resp.PooledMarshal",
      "MergeLabels",
      "series.Labels",
      "lbl.Size",
      "iter.At",
      "append",
      "prompb.Chunk_Encoding",
      "series.Iterator",
      "prompb.FromLabels",
      "chk.Chunk.Encoding",
      "chk.Chunk.Bytes",
      "len",
      "stream.Write",
      "marshalPool.Put",
      "ss.Next",
      "ss.At",
      "?.Size",
      "iter.Err",
      "ss.Err",
      "iter.Next",
      "fmt.Errorf"
    ],
    "String.MarshalJSON": [
      "float64",
      "json.Marshal"
    ],
    "StringLiteral.Pretty": [
      "getCommonPrefixIndent"
    ],
    "StringLiteral.String": [
      "fmt.Sprintf"
    ],
    "SubqueryExpr.PositionRange": [
      "e.Expr.PositionRange"
    ],
    "SubqueryExpr.Pretty": [
      "needsSplit",
      "e.String",
      "fmt.Sprintf",
      "e.Expr.Pretty",
      "e.getSubqueryTimeSuffix"
    ],
    "SubqueryExpr.ShortString": [
      "node.getSubqueryTimeSuffix"
    ],
    "SubqueryExpr.String": [
      "fmt.Sprintf",
      "node.Expr.String",
      "node.getSubqueryTimeSuffix"
    ],
    "SubqueryExpr.getSubqueryTimeSuffix": [
      "?.String",
      "model.Duration",
      "node.StepExpr.String",
      "fmt.Sprintf",
      "time.Duration",
      "float64",
      "node.RangeExpr.String"
    ],
    "Summary.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "Summary.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Summary.MarshalToSizedBuffer": [
      "copy",
      "m.CreatedTimestamp.MarshalToSizedBuffer",
      "uint64",
      "?.MarshalToSizedBuffer",
      "encoding_binary.LittleEndian.PutUint64",
      "math.Float64bits",
      "len",
      "float64",
      "encodeVarintMetrics"
    ],
    "Summary.Size": [
      "e.Size",
      "m.CreatedTimestamp.Size",
      "sovMetrics",
      "uint64",
      "len"
    ],
    "Summary.String": [
      "proto.CompactTextString"
    ],
    "Summary.Unmarshal": [
      "uint",
      "uint64",
      "int32",
      "int",
      "math.Float64frombits",
      "append",
      "m.CreatedTimestamp.Unmarshal",
      "len",
      "skipMetrics",
      "encoding_binary.LittleEndian.Uint64",
      "float64",
      "?.Unmarshal",
      "fmt.Errorf"
    ],
    "Summary.XXX_DiscardUnknown": [
      "xxx_messageInfo_Summary.DiscardUnknown"
    ],
    "Summary.XXX_Marshal": [
      "xxx_messageInfo_Summary.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "Summary.XXX_Merge": [
      "xxx_messageInfo_Summary.Merge"
    ],
    "Summary.XXX_Size": [
      "m.Size"
    ],
    "Summary.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "SymbolTable.Len": [
      "t.mx.Lock",
      "t.mx.Unlock",
      "len"
    ],
    "SymbolTable.ToNum": [
      "t.mx.Lock",
      "t.mx.Unlock",
      "t.toNumUnlocked"
    ],
    "SymbolTable.checkNum": [
      "t.mx.Lock",
      "t.mx.Unlock"
    ],
    "SymbolTable.toNumUnlocked": [
      "cap",
      "make",
      "copy",
      "strings.Clone"
    ],
    "Symbols.Iter": [
      "d.Be32int",
      "encoding.NewDecbufAt"
    ],
    "Symbols.Lookup": [
      "int",
      "fmt.Errorf",
      "d.UvarintBytes",
      "d.UvarintStr",
      "d.Err",
      "s.bs.Range",
      "s.bs.Len",
      "d.Skip"
    ],
    "Symbols.ReverseLookup": [
      "d.Skip",
      "d.Len",
      "uint32",
      "fmt.Errorf",
      "sort.Search",
      "s.bs.Len",
      "yoloString",
      "d.UvarintBytes",
      "d.Err",
      "len",
      "s.bs.Range"
    ],
    "Symbols.Size": [
      "len"
    ],
    "SymbolsTable.Reset": [
      "delete"
    ],
    "SymbolsTable.Symbolize": [
      "len",
      "append",
      "uint32"
    ],
    "SymbolsTable.SymbolizeLabels": [
      "append",
      "lbls.Range",
      "t.Symbolize"
    ],
    "TSDBConfig.UnmarshalYAML": [
      "time.Duration",
      "unmarshal",
      "?.Milliseconds"
    ],
    "TSDBStatsFromIndexStats": [
      "len",
      "append",
      "make"
    ],
    "TableLinkForExpression": [
      "url.QueryEscape",
      "fmt.Sprintf"
    ],
    "TagValue.MarshalJSON": [
      "result.Bytes",
      "len",
      "bytes.NewBuffer",
      "make",
      "result.WriteByte",
      "result.WriteString",
      "fmt.Fprintf"
    ],
    "TagValue.UnmarshalJSON": [
      "fmt.Errorf",
      "result.WriteByte",
      "panic",
      "TagValue",
      "result.String",
      "bytes.NewBuffer",
      "make",
      "len"
    ],
    "Target.DiscoveredLabels": [
      "t.mtx.Lock",
      "t.mtx.Unlock",
      "PopulateDiscoveredLabels",
      "lb.Labels"
    ],
    "Target.GetMetadata": [
      "t.mtx.RLock",
      "t.mtx.RUnlock",
      "t.metadata.GetMetadata"
    ],
    "Target.GetValue": [
      "t.labels.Get"
    ],
    "Target.Health": [
      "t.mtx.RLock",
      "t.mtx.RUnlock"
    ],
    "Target.Labels": [
      "b.Labels",
      "b.Reset",
      "labels.EmptyLabels",
      "t.labels.Range",
      "strings.HasPrefix",
      "b.Set"
    ],
    "Target.LabelsRange": [
      "t.labels.Range",
      "strings.HasPrefix",
      "f"
    ],
    "Target.LastError": [
      "t.mtx.RLock",
      "t.mtx.RUnlock"
    ],
    "Target.LastScrape": [
      "t.mtx.RLock",
      "t.mtx.RUnlock"
    ],
    "Target.LastScrapeDuration": [
      "t.mtx.RLock",
      "t.mtx.RUnlock"
    ],
    "Target.LengthMetadata": [
      "t.mtx.RLock",
      "t.mtx.RUnlock",
      "t.metadata.LengthMetadata"
    ],
    "Target.ListMetadata": [
      "t.metadata.ListMetadata",
      "t.mtx.RLock",
      "t.mtx.RUnlock"
    ],
    "Target.Report": [
      "t.mtx.Lock",
      "t.mtx.Unlock"
    ],
    "Target.SetMetadataStore": [
      "t.mtx.Lock",
      "t.mtx.Unlock"
    ],
    "Target.SetScrapeConfig": [
      "t.mtx.Lock",
      "t.mtx.Unlock"
    ],
    "Target.SizeMetadata": [
      "t.mtx.RLock",
      "t.mtx.RUnlock",
      "t.metadata.SizeMetadata"
    ],
    "Target.String": [
      "?.String",
      "t.URL"
    ],
    "Target.URL": [
      "t.mtx.Lock",
      "make",
      "params.Encode",
      "t.mtx.Unlock",
      "len",
      "copy",
      "t.labels.Range",
      "strings.HasPrefix",
      "t.labels.Get"
    ],
    "Target.hash": [
      "t.URL",
      "h.Sum64",
      "fnv.New64a",
      "fmt.Fprintf",
      "t.labels.Hash",
      "h.Write",
      "?.String"
    ],
    "Target.intervalAndTimeout": [
      "t.mtx.RLock",
      "t.mtx.RUnlock",
      "t.labels.Get",
      "model.ParseDuration",
      "fmt.Errorf",
      "time.Duration"
    ],
    "Target.offset": [
      "int64",
      "t.hash",
      "uint64",
      "time.Duration",
      "?.UnixNano",
      "time.Now"
    ],
    "TargetFromContext": [
      "ctx.Value"
    ],
    "Targets.Len": [
      "len"
    ],
    "Targets.Less": [
      "?.URL",
      "?.String"
    ],
    "TargetsFromGroup": [
      "PopulateLabels",
      "append",
      "fmt.Errorf",
      "NewTarget"
    ],
    "TempHistogram.Convert": [
      "float64",
      "h.convertToIntegerHistogram",
      "math.Inf",
      "int64",
      "math.Round",
      "h.convertToFloatHistogram",
      "uint64",
      "len",
      "append"
    ],
    "TempHistogram.SetBucketCount": [
      "copy",
      "fmt.Errorf",
      "len",
      "append",
      "sort.Search"
    ],
    "TempHistogram.SetCount": [
      "fmt.Errorf"
    ],
    "TempHistogram.convertToFloatHistogram": [
      "make",
      "math.Inf",
      "fmt.Errorf",
      "rh.Compact",
      "uint32",
      "len"
    ],
    "TempHistogram.convertToIntegerHistogram": [
      "fmt.Errorf",
      "rh.Compact",
      "uint32",
      "len",
      "make",
      "int64",
      "math.Inf",
      "uint64"
    ],
    "Test500ErrorHttpResponse": [
      "io.WriteString",
      "httptest.NewServer",
      "context.TODO",
      "?.Set",
      "w.Header",
      "ts.Close",
      "fetchApps",
      "require.Error",
      "w.WriteHeader",
      "http.HandlerFunc"
    ],
    "Test500ErrorHttpResponseWithValidJSONBody": [
      "w.WriteHeader",
      "io.WriteString",
      "require.Error",
      "ts.Close",
      "testUpdateServices",
      "?.Set",
      "w.Header",
      "httptest.NewServer",
      "http.HandlerFunc"
    ],
    "TestAbortBlockCompactions": [
      "openTestDB",
      "db.Close",
      "require.False",
      "db.head.minTime.Store",
      "require.True",
      "db.Compact",
      "require.NoError",
      "db.head.compactable",
      "db.head.chunkRange.Load",
      "db.head.maxTime.Store",
      "context.Background",
      "require.Equal"
    ],
    "TestAcceptHeader": [
      "t.Run",
      "acceptHeader",
      "require.Equal"
    ],
    "TestAddDuplicateLabelName": [
      "newTestHead",
      "h.Close",
      "h.Appender",
      "require.EqualError",
      "fmt.Sprintf",
      "labels.FromStrings",
      "require.NoError",
      "context.Background",
      "app.Append",
      "add"
    ],
    "TestAddExemplar": [
      "strings.Repeat",
      "NewCircularExemplarStorage",
      "labels.FromStrings",
      "require.Equal",
      "require.True",
      "?.exemplar.Equals",
      "require.NoError",
      "es.AddExemplar",
      "string",
      "l.Bytes"
    ],
    "TestAddingNewIntervals": [
      "t.Run",
      "require.Equal",
      "c.exist.Add"
    ],
    "TestAdminEndpoints": [
      "http.NewRequest",
      "fmt.Sprintf",
      "assertAPIError",
      "t.Run",
      "fmt.Errorf",
      "t.TempDir",
      "tc.endpoint",
      "tc.values.Encode",
      "require.NoError",
      "setUnavailStatusOnTSDBNotReady",
      "endpoint",
      "errors.New"
    ],
    "TestAgentAPIEndPoints": [
      "time.Sleep",
      "http.DefaultClient.Do",
      "fmt.Sprintf",
      "New",
      "webHandler.SetReady",
      "panic",
      "context.WithCancel",
      "require.Equal",
      "resp.Body.Close",
      "t.Parallel",
      "testutil.RandomUnprivilegedPort",
      "cancel",
      "http.NewRequest",
      "require.NoError",
      "context.Background",
      "webHandler.Listeners",
      "webHandler.Run",
      "t.Cleanup"
    ],
    "TestAgentFailedStartupWithInvalidConfig": [
      "make",
      "prom.Wait",
      "prom.ProcessState.ExitCode",
      "prom.Process.Kill",
      "require.Equal",
      "require.NoError",
      "exec.Command",
      "prom.Start",
      "t.Logf",
      "time.After",
      "t.Parallel"
    ],
    "TestAgentFailedStartupWithServerFlag": [
      "prom.Process.Kill",
      "len",
      "make",
      "prom.ProcessState.ExitCode",
      "exec.Command",
      "t.Logf",
      "time.After",
      "require.Equal",
      "strings.Split",
      "t.Parallel",
      "prom.Start",
      "prom.Wait",
      "output.String",
      "require.NoError"
    ],
    "TestAgentMode": [
      "require.Equal",
      "?.URL.String",
      "LoadFile",
      "promslog.NewNopLogger",
      "require.ErrorContains",
      "require.NoError",
      "require.Empty",
      "require.Len"
    ],
    "TestAgentSuccessfulStartup": [
      "t.Logf",
      "time.After",
      "prom.Process.Kill",
      "require.Equal",
      "exec.Command",
      "make",
      "prom.Wait",
      "prom.ProcessState.ExitCode",
      "t.Parallel",
      "require.NoError",
      "prom.Start"
    ],
    "TestAggregateExprPretty": [
      "ParseExpr",
      "require.NoError",
      "require.Equal",
      "Prettify"
    ],
    "TestAlertingEvalWithOrigin": [
      "NewRuleDetail",
      "context.Background",
      "labels.FromStrings",
      "parser.ParseExpr",
      "require.NoError",
      "NewAlertingRule",
      "labels.EmptyLabels",
      "require.Equal",
      "time.Now",
      "promslog.NewNopLogger",
      "rule.Eval",
      "FromOriginContext"
    ],
    "TestAlertingRule": [
      "testEngine",
      "baseTime.Add",
      "smpl.Metric.Get",
      "prom_testutil.RequireEqual",
      "rule.ActiveAlerts",
      "t.Cleanup",
      "require.NoError",
      "NewAlertingRule",
      "timestamp.FromTime",
      "require.Len",
      "labels.EmptyLabels",
      "t.Logf",
      "append",
      "require.Equal",
      "sort.Slice",
      "storage.Close",
      "time.Unix",
      "len",
      "require.Empty",
      "aa.Labels.Get",
      "rule.Eval",
      "context.TODO",
      "EngineQueryFunc",
      "promqltest.LoadedStorage",
      "parser.ParseExpr",
      "labels.FromStrings",
      "labels.Compare"
    ],
    "TestAlertingRuleDuplicate": [
      "context.Background",
      "labels.EmptyLabels",
      "labels.FromStrings",
      "teststorage.New",
      "storage.Close",
      "cancelCtx",
      "parser.ParseExpr",
      "NewAlertingRule",
      "promslog.NewNopLogger",
      "EngineQueryFunc",
      "promqltest.NewTestEngineWithOpts",
      "context.WithCancel",
      "time.Now",
      "rule.Eval",
      "require.Error",
      "require.EqualError"
    ],
    "TestAlertingRuleEmptyLabelFromTemplate": [
      "promslog.NewNopLogger",
      "rule.Eval",
      "testutil.RequireEqual",
      "time.Unix",
      "timestamp.FromTime",
      "smpl.Metric.Get",
      "promqltest.LoadedStorage",
      "NewAlertingRule",
      "labels.FromStrings",
      "labels.EmptyLabels",
      "testEngine",
      "t.Cleanup",
      "storage.Close",
      "parser.ParseExpr",
      "require.NoError",
      "context.TODO",
      "EngineQueryFunc",
      "append",
      "require.Equal"
    ],
    "TestAlertingRuleExternalLabelsInTemplate": [
      "timestamp.FromTime",
      "context.TODO",
      "labels.FromStrings",
      "promslog.NewNopLogger",
      "testEngine",
      "require.Equal",
      "testutil.RequireEqual",
      "parser.ParseExpr",
      "NewAlertingRule",
      "labels.EmptyLabels",
      "ruleWithoutExternalLabels.Eval",
      "EngineQueryFunc",
      "smpl.Metric.Get",
      "promqltest.LoadedStorage",
      "t.Cleanup",
      "time.Unix",
      "append",
      "ruleWithExternalLabels.Eval",
      "storage.Close",
      "require.NoError"
    ],
    "TestAlertingRuleExternalURLInTemplate": [
      "parser.ParseExpr",
      "labels.EmptyLabels",
      "time.Unix",
      "storage.Close",
      "t.Cleanup",
      "require.NoError",
      "NewAlertingRule",
      "promslog.NewNopLogger",
      "ruleWithoutExternalURL.Eval",
      "promqltest.LoadedStorage",
      "testEngine",
      "context.TODO",
      "append",
      "require.Equal",
      "labels.FromStrings",
      "EngineQueryFunc",
      "smpl.Metric.Get",
      "ruleWithExternalURL.Eval",
      "testutil.RequireEqual",
      "timestamp.FromTime"
    ],
    "TestAlertingRuleLabelsUpdate": [
      "storage.Close",
      "smpl.Metric.Get",
      "testutil.RequireEqual",
      "require.Equal",
      "labels.EmptyLabels",
      "testEngine",
      "t.Logf",
      "baseTime.Add",
      "context.TODO",
      "promqltest.LoadedStorage",
      "parser.ParseExpr",
      "require.NoError",
      "EngineQueryFunc",
      "len",
      "require.Empty",
      "time.Unix",
      "time.Duration",
      "timestamp.FromTime",
      "rule.Eval",
      "append",
      "t.Cleanup",
      "NewAlertingRule",
      "labels.FromStrings"
    ],
    "TestAlertingRuleLimit": [
      "labels.FromStrings",
      "promslog.NewNopLogger",
      "t.Errorf",
      "promqltest.LoadedStorage",
      "storage.Close",
      "parser.ParseExpr",
      "require.EqualError",
      "t.Cleanup",
      "time.Unix",
      "testEngine",
      "NewAlertingRule",
      "rule.Eval",
      "context.TODO",
      "EngineQueryFunc",
      "labels.EmptyLabels"
    ],
    "TestAlertingRuleQueryInTemplate": [
      "ruleWithQueryInTemplate.GetEvaluationDuration",
      "t.Cleanup",
      "require.NoError",
      "NewAlertingRule",
      "labels.EmptyLabels",
      "promslog.NewNopLogger",
      "EngineQueryFunc",
      "ruleWithQueryInTemplate.Health",
      "labels.FromStrings",
      "testEngine",
      "require.Fail",
      "ruleWithQueryInTemplate.LastError",
      "context.TODO",
      "promqltest.LoadedStorage",
      "storage.Close",
      "parser.ParseExpr",
      "time.Unix",
      "close",
      "time.After",
      "ruleWithQueryInTemplate.GetEvaluationTimestamp",
      "make",
      "ruleWithQueryInTemplate.Eval"
    ],
    "TestAlertingRuleState": [
      "rule.State",
      "require.Equal",
      "NewAlertingRule",
      "labels.EmptyLabels"
    ],
    "TestAlertingRuleTemplateWithHistogram": [
      "parser.ParseExpr",
      "rule.Eval",
      "labels.EmptyLabels",
      "require.Equal",
      "context.TODO",
      "smpl.Metric.Get",
      "h.String",
      "timestamp.FromTime",
      "require.Len",
      "testutil.RequireEqual",
      "require.NoError",
      "NewAlertingRule",
      "labels.FromStrings",
      "time.Now"
    ],
    "TestAlertingRule_ActiveAlertsCount": [
      "labels.FromStrings",
      "labels.EmptyLabels",
      "require.Equal",
      "rule.ActiveAlertsCount",
      "lbls.Hash",
      "time.Now",
      "NewAlertingRule"
    ],
    "TestAlertingRule_SetDependencyRules": [
      "require.False",
      "rule.NoDependencyRules",
      "require.Equal",
      "require.True",
      "rule.SetDependencyRules",
      "rule.DependencyRules",
      "require.Empty",
      "NewRecordingRule",
      "labels.EmptyLabels",
      "NewAlertingRule",
      "labels.FromStrings",
      "promslog.NewNopLogger"
    ],
    "TestAlertingRule_SetDependentRules": [
      "NewAlertingRule",
      "labels.FromStrings",
      "promslog.NewNopLogger",
      "require.False",
      "rule.NoDependentRules",
      "require.True",
      "require.Empty",
      "NewRecordingRule",
      "labels.EmptyLabels",
      "rule.SetDependentRules",
      "require.Equal",
      "rule.DependentRules"
    ],
    "TestAlignedBloc": [
      "require.True",
      "isAligned",
      "require.Len",
      "require.False",
      "directIORqmtsForTest",
      "alignedBlock"
    ],
    "TestAlignedBlockEarlyPanic": [
      "directIORqmtsForTest",
      "t.Run",
      "require.Panics",
      "alignedBlock"
    ],
    "TestAllFloatBucketIterator": [
      "t.Run",
      "strconv.Itoa",
      "it.Next",
      "it.At",
      "c.h.AllBucketIterator",
      "c.h.NegativeReverseBucketIterator",
      "append",
      "c.h.PositiveBucketIterator",
      "require.Equal"
    ],
    "TestAllOptions": [
      "newServer",
      "newDiscovery",
      "context.Background",
      "make",
      "d.Run",
      "cancel",
      "stub.Close",
      "context.WithCancel",
      "close",
      "checkOneTarget"
    ],
    "TestAllReverseFloatBucketIterator": [
      "it.Next",
      "it.At",
      "c.h.NegativeBucketIterator",
      "strconv.Itoa",
      "c.h.PositiveReverseBucketIterator",
      "append",
      "c.h.AllReverseBucketIterator",
      "require.Equal",
      "t.Run"
    ],
    "TestAllServices": [
      "d.Run",
      "close",
      "checkOneTarget",
      "newServer",
      "stub.Close",
      "context.WithCancel",
      "context.Background",
      "newDiscovery",
      "make",
      "cancel"
    ],
    "TestAmendHistogramDatapointCausesError": [
      "app.AppendHistogram",
      "fh.Copy",
      "openTestDB",
      "require.NoError",
      "db.Appender",
      "labels.FromStrings",
      "app.Commit",
      "require.Equal",
      "app.Append",
      "require.ErrorIs",
      "h.Copy",
      "db.Close",
      "context.Background",
      "app.Rollback",
      "h.ToFloat"
    ],
    "TestApiStatusCodes": [
      "require.Contains",
      "promql.ErrQueryCanceled",
      "promql.ErrQueryTimeout",
      "fmt.Sprintf",
      "createPrometheusAPI",
      "httptest.NewRecorder",
      "httptest.NewRequest",
      "r.ServeHTTP",
      "rec.Body.String",
      "errors.New",
      "promql.ErrTooManySamples",
      "t.Run",
      "require.Equal"
    ],
    "TestAppendEmptyLabelsIgnored": [
      "openTestDB",
      "db.Close",
      "app1.Append",
      "require.Equal",
      "app1.Commit",
      "require.NoError",
      "context.Background",
      "db.Appender",
      "labels.FromStrings"
    ],
    "TestAppendHistogram": [
      "t.Run",
      "t.Cleanup",
      "head.Init",
      "app.Commit",
      "NewBlockQuerier",
      "head.MinTime",
      "require.True",
      "int64",
      "head.MaxTime",
      "ss.At",
      "it.AtFloatHistogram",
      "labels.FromStrings",
      "newTestHead",
      "head.Appender",
      "labels.MustNewMatcher",
      "require.False",
      "it.AtHistogram",
      "require.NoError",
      "append",
      "q.Close",
      "q.Select",
      "it.Next",
      "make",
      "len",
      "strconv.Itoa",
      "tsdbutil.GenerateTestHistograms",
      "tsdbutil.GenerateTestFloatHistograms",
      "tsdbutil.GenerateTestGaugeFloatHistograms",
      "app.AppendHistogram",
      "tsdbutil.GenerateTestGaugeHistograms",
      "s.Iterator",
      "head.Close",
      "context.Background",
      "ss.Next",
      "compareSeries"
    ],
    "TestAppendingDifferentEncodingToSameSeries": [
      "t.Cleanup",
      "?.getOrCreate",
      "?.Copy",
      "checkExpChunks",
      "lbls.String",
      "t.TempDir",
      "Open",
      "require.NotNil",
      "context.Background",
      "s.T",
      "len",
      "?.FH",
      "tsdbutil.GenerateTestHistograms",
      "lbls.Hash",
      "labels.FromStrings",
      "require.False",
      "app.AppendHistogram",
      "app.Rollback",
      "?.H",
      "query",
      "DefaultOptions",
      "tsdbutil.GenerateTestFloatHistograms",
      "s.FH",
      "app.Commit",
      "ms.headChunks.len",
      "s.H",
      "s.F",
      "db.DisableCompactions",
      "app.Append",
      "require.Equal",
      "db.Querier",
      "labels.MustNewMatcher",
      "require.NoError",
      "db.Head",
      "append",
      "db.Close",
      "db.Appender"
    ],
    "TestApplyConfig": [
      "require.Len",
      "n.ApplyConfig",
      "n.reload",
      "n.Alertmanagers",
      "require.Equal",
      "model.LabelValue",
      "NewManager",
      "require.NoError",
      "?.String",
      "require.Empty",
      "fmt.Sprintf",
      "yaml.UnmarshalStrict",
      "?.url"
    ],
    "TestApplyConfigDoesNotModifyStaticTargets": [
      "cancel",
      "prometheus.NewRegistry",
      "NewTestMetrics",
      "promslog.NewNopLogger",
      "require.NotNil",
      "discoveryManager.Run",
      "context.WithCancel",
      "context.Background",
      "NewManager",
      "discoveryManager.ApplyConfig",
      "discoveryManager.SyncCh",
      "require.Equal",
      "staticConfig"
    ],
    "TestAssertMatrixSorted": [
      "labels.FromStrings",
      "t.Run",
      "assertMatrixSorted",
      "require.NoError",
      "require.EqualError"
    ],
    "TestAsyncRuleEvaluation": [
      "t.Run",
      "context.WithCancel",
      "time.Now",
      "DefaultEvalIterationFunc",
      "require.EqualValues",
      "optsFactory",
      "group.GetEvaluationTime",
      "require.LessOrEqual",
      "t.Cleanup",
      "storage.Close",
      "ruleManager.LoadGroups",
      "require.Equal",
      "group.Eval",
      "testutil.ToFloat64",
      "t.Parallel",
      "labels.EmptyLabels",
      "require.Empty",
      "require.Nil",
      "?.Seconds",
      "time.Duration",
      "teststorage.New",
      "context.Background",
      "maxInflight.Load",
      "int64",
      "NewManager",
      "require.Len",
      "time.Since",
      "group.opts.RuleConcurrencyController.SplitGroupIntoBatches",
      "require.GreaterOrEqual",
      "group.GetRuleEvaluationTimeSum",
      "require.Less"
    ],
    "TestAtFloatHistogram": [
      "require.Nil",
      "chk.Appender",
      "int64",
      "app.AppendHistogram",
      "chk.Iterator",
      "it.Next",
      "it.AtFloatHistogram",
      "require.Equal",
      "NewHistogramChunk",
      "require.NoError"
    ],
    "TestAtModifier": [
      "labels.FromStrings",
      "app.Append",
      "require.NoError",
      "int64",
      "app.Commit",
      "promqltest.LoadedStorage",
      "t.Cleanup",
      "storage.Close",
      "time.Unix",
      "testutil.RequireEqual",
      "time.Duration",
      "engine.NewRangeQuery",
      "context.Background",
      "labels.EmptyLabels",
      "t.Run",
      "db.Appender",
      "qry.Exec",
      "sort.Sort",
      "newTestEngine",
      "float64",
      "engine.NewInstantQuery"
    ],
    "TestAuthorizationConfig": [
      "t.Parallel",
      "t.Run",
      "checkConfig",
      "require.ErrorContains",
      "err.Error",
      "require.NoError"
    ],
    "TestAutoReloadConfig_ValidToInvalidToValid": [
      "runTestSteps"
    ],
    "TestAutoReloadConfig_ValidToValid": [
      "runTestSteps"
    ],
    "TestAzureAd": [
      "suite.Run",
      "new"
    ],
    "TestAzureAdConfig": [
      "loadAzureAdConfig",
      "t.Fatalf",
      "require.EqualError",
      "require.NoError"
    ],
    "TestAzureRefresh": [
      "t.Run",
      "prometheus.NewRegistry",
      "NewDiscovery",
      "discovery.NewRefreshMetrics",
      "context.Background",
      "azureSDConfig.NewDiscovererMetrics",
      "require.NoError",
      "sd.refreshAzureClient",
      "require.Equal",
      "defaultVMWithIDAndName",
      "to.Ptr",
      "t.Parallel",
      "createMockAzureClient",
      "defaultVMSSVMWithIDAndName",
      "sortTargetsByID"
    ],
    "TestBackfill": [
      "t.Run",
      "backfill",
      "t.Parallel",
      "labels.FromStrings",
      "int64",
      "t.Logf",
      "t.TempDir",
      "require.Error",
      "require.NoError",
      "tsdb.DefaultOptions",
      "tsdb.Open",
      "db.Close",
      "testBlocks"
    ],
    "TestBackfillLabels": [
      "os.WriteFile",
      "ruleImporter.loadGroups",
      "tsdb.DefaultOptions",
      "tsdb.Open",
      "q.Select",
      "t.TempDir",
      "context.Background",
      "time.Date",
      "series.Labels",
      "selectedSeries.Err",
      "t.Run",
      "selectedSeries.Next",
      "require.NoError",
      "filepath.Join",
      "ruleImporter.importAll",
      "labels.MustNewMatcher",
      "q.Close",
      "t.Parallel",
      "start.UnixNano",
      "db.Querier",
      "labels.FromStrings",
      "require.Equal",
      "db.Close",
      "model.TimeFromUnixNano",
      "newTestRuleImporter",
      "selectedSeries.At"
    ],
    "TestBackfillRuleIntegration": [
      "require.NotNil",
      "group1.Rules",
      "?.Name",
      "?.Len",
      "labels.MustNewMatcher",
      "int64",
      "model.Time",
      "?.Unix",
      "tsdb.Open",
      "db.Blocks",
      "labels.FromStrings",
      "series.Iterator",
      "it.Err",
      "?.String",
      "group2.Interval",
      "q.Select",
      "selectedSeries.Next",
      "time.Date",
      "time.ParseDuration",
      "it.Next",
      "createSingleRuleTestFiles",
      "ruleImporter.loadGroups",
      "require.Equal",
      "?.Labels",
      "db.Querier",
      "context.Background",
      "newTestRuleImporter",
      "t.Run",
      "require.NoError",
      "group1.Interval",
      "group2.Rules",
      "it.At",
      "selectedSeries.Err",
      "t.Parallel",
      "start.Add",
      "q.Close",
      "db.Close",
      "t.TempDir",
      "require.Len",
      "?.Query",
      "ruleImporter.importAll",
      "tsdb.DefaultOptions",
      "selectedSeries.At",
      "series.Labels",
      "filepath.Join",
      "createMultiRuleTestFiles"
    ],
    "TestBadConfigs": [
      "LoadFile",
      "promslog.NewNopLogger",
      "require.ErrorContains"
    ],
    "TestBadStaticConfigsYML": [
      "os.ReadFile",
      "require.NoError",
      "yaml.UnmarshalStrict",
      "require.Error"
    ],
    "TestBasicContentNegotiation": [
      "NewTestWriteClient",
      "c.expectSamples",
      "context.WithTimeout",
      "t.TempDir",
      "createSeriesMetadata",
      "len",
      "s.ApplyConfig",
      "toHash",
      "createTimeseries",
      "runutil.Retry",
      "float64",
      "s.Close",
      "c.injectErrors",
      "require.Equal",
      "errors.New",
      "qm.StoreMetadata",
      "t.Run",
      "qm.StoreSeries",
      "context.Background",
      "NewStorage",
      "qm.Append",
      "c.waitForExpectedData",
      "client_testutil.ToFloat64",
      "model.Duration",
      "require.NoError",
      "qm.SetClient",
      "cancel",
      "ctx.Done",
      "baseRemoteWriteConfig",
      "fmt.Errorf"
    ],
    "TestBigEndian": [
      "bep.Seek",
      "uint32",
      "bep.Next",
      "require.False",
      "make",
      "t.Run",
      "require.NoError",
      "bep.At",
      "binary.BigEndian.PutUint32",
      "newBigEndianPostings",
      "storage.SeriesRef",
      "bep.Err",
      "rand.Int31n",
      "require.True",
      "require.Equal"
    ],
    "TestBinaryExprPretty": [
      "ParseExpr",
      "require.NoError",
      "require.Equal",
      "Prettify",
      "t.Run"
    ],
    "TestBlockBaseSeriesSet": [
      "newMockIndex",
      "require.Equal",
      "labels.FromStrings",
      "mi.AddSeries",
      "index.NewListPostings",
      "tombstones.NewMemTombstones",
      "bcs.Next",
      "si.reset",
      "require.Len",
      "bcs.Err",
      "require.NoError"
    ],
    "TestBlockClosingBlockedDuringRemoteRead": [
      "db.Blocks",
      "block.Close",
      "genSeries",
      "Open",
      "db.Close",
      "http.NewRequest",
      "require.Equal",
      "close",
      "createBlock",
      "remote.ToQuery",
      "time.After",
      "t.TempDir",
      "require.NoError",
      "remote.NewReadHandler",
      "labels.NewMatcher",
      "proto.Marshal",
      "readAPI.ServeHTTP",
      "bytes.NewBuffer",
      "snappy.Encode",
      "httptest.NewRecorder",
      "make",
      "require.Fail"
    ],
    "TestBlockIndexReader_PostingsForLabelMatching": [
      "testPostingsForLabelMatching",
      "storage.NewListSeries",
      "require.NoError",
      "block.Index",
      "require.NotEmpty",
      "OpenBlock",
      "t.Cleanup",
      "append",
      "createBlock",
      "t.TempDir",
      "sequenceFiles",
      "chunkDir",
      "block.Close"
    ],
    "TestBlockMetaMustNeverBeVersion2": [
      "readMetaFile",
      "require.NotEqual",
      "t.TempDir",
      "writeMetaFile",
      "promslog.NewNopLogger",
      "require.NoError"
    ],
    "TestBlockQuerier": [
      "newMockChunkSeriesSet",
      "labels.MustNewMatcher",
      "storage.NewListChunkSeriesFromSamples",
      "testBlockQuerier",
      "tombstones.NewMemTombstones",
      "newMockSeriesSet",
      "storage.NewListSeries",
      "labels.FromStrings",
      "t.Run",
      "createIdxChkReaders"
    ],
    "TestBlockQuerierAndBlockChunkQuerier": [
      "b.Meta",
      "NewBlockChunkQuerier",
      "writeMetaFile",
      "seriesSet.Err",
      "DefaultOptions",
      "db.Dir",
      "OpenBlock",
      "labels.MustNewMatcher",
      "seriesSet.At",
      "db.ChunkQuerier",
      "storage.NoopChunkedQuerier",
      "require.NoError",
      "db.reloadBlocks",
      "querier.Select",
      "len",
      "querier.Close",
      "seriesSet.Next",
      "labels.EmptyLabels",
      "fmt.Sprintf",
      "require.Len",
      "context.Background",
      "?.Labels",
      "css.Next",
      "storage.NoopQuerier",
      "storage.NewListSeries",
      "createBlock",
      "lbls.Get",
      "css.At",
      "b.Close",
      "db.Blocks",
      "chunkQuerier.Close",
      "NewBlockQuerier",
      "openTestDB",
      "db.Close",
      "labels.FromMap",
      "db.Querier",
      "require.Equal",
      "chunkQuerier.Select",
      "css.Err"
    ],
    "TestBlockQuerierDelete": [
      "testBlockQuerier",
      "newMockSeriesSet",
      "labels.FromStrings",
      "createIdxChkReaders",
      "storage.NewListSeries",
      "storage.NewListChunkSeriesFromSamples",
      "t.Run",
      "tombstones.NewTestMemTombstones",
      "newMockChunkSeriesSet",
      "labels.MustNewMatcher"
    ],
    "TestBlockQuerierReturnsSortedLabelValues": [
      "t.TempDir",
      "append",
      "fmt.Sprintf",
      "t.Cleanup",
      "newBlockBaseQuerier",
      "q.Close",
      "require.True",
      "context.Background",
      "storage.NewListSeries",
      "labels.FromStrings",
      "require.NoError",
      "createBlock",
      "OpenBlock",
      "block.Close",
      "q.LabelValues",
      "slices.IsSorted"
    ],
    "TestBlockQuerier_AgainstHeadWithOpenChunks": [
      "require.NoError",
      "app.Append",
      "app.Commit",
      "labels.MustNewMatcher",
      "storage.NewListSeries",
      "labels.FromStrings",
      "storage.NewListChunkSeriesFromSamples",
      "t.Run",
      "ir.Close",
      "cr.Close",
      "DefaultHeadOptions",
      "NewHead",
      "h.Close",
      "h.Appender",
      "tombstones.NewMemTombstones",
      "hr.Index",
      "newMockSeriesSet",
      "time.Hour.Milliseconds",
      "context.Background",
      "labels.FromMap",
      "NewRangeHead",
      "newMockChunkSeriesSet",
      "hr.Chunks",
      "testBlockQuerier"
    ],
    "TestBlockQuerier_TrimmingDoesNotModifyOriginalTombstoneIntervals": [
      "newMockSeriesSet",
      "storage.NewListSeries",
      "labels.FromStrings",
      "stones.AddInterval",
      "testBlockQuerier",
      "require.Equal",
      "context.Background",
      "newMockChunkSeriesSet",
      "index.ExpandPostings",
      "storage.NewListChunkSeriesFromSamples",
      "tombstones.NewMemTombstones",
      "ir.Postings",
      "labels.MustNewMatcher",
      "createIdxChkReaders",
      "require.NoError",
      "stones.Get"
    ],
    "TestBlockRanges": [
      "createBlock",
      "len",
      "db.Blocks",
      "require.Len",
      "app.Append",
      "require.Error",
      "promslog.New",
      "genSeries",
      "require.NoError",
      "db.Appender",
      "labels.FromStrings",
      "t.TempDir",
      "rand.Float64",
      "time.Sleep",
      "db.Close",
      "require.LessOrEqual",
      "?.Meta",
      "db.DisableCompactions",
      "context.Background",
      "int64",
      "open",
      "DefaultOptions",
      "app.Commit",
      "require.Equal"
    ],
    "TestBlockSize": [
      "require.NoError",
      "require.Greater",
      "promslog.NewNopLogger",
      "?.String",
      "blockAfterCompact.Close",
      "blockAfterCompact.Dir",
      "t.TempDir",
      "genSeries",
      "fileutil.DirSize",
      "context.Background",
      "labels.MustNewMatcher",
      "NewLeveledCompactor",
      "c.Compact",
      "require.Len",
      "createBlock",
      "filepath.Join",
      "require.Equal",
      "blockInit.Delete",
      "OpenBlock",
      "blockInit.Size",
      "blockInit.Dir",
      "blockAfterCompact.Size",
      "blockInit.Close"
    ],
    "TestBlockWriter": [
      "context.Background",
      "NewBlockWriter",
      "int64",
      "float64",
      "app.Append",
      "labels.FromStrings",
      "w.Close",
      "promslog.NewNopLogger",
      "OpenBlock",
      "NewBlockQuerier",
      "query",
      "labels.MustNewMatcher",
      "require.Equal",
      "t.TempDir",
      "require.NoError",
      "id.String",
      "b.Close",
      "w.Appender",
      "app.Commit",
      "w.Flush",
      "filepath.Join"
    ],
    "TestBlockingWriteClient.NumCalls": [
      "c.numCalls.Load"
    ],
    "TestBlockingWriteClient.Store": [
      "c.numCalls.Inc",
      "ctx.Done"
    ],
    "TestBoundedRuleEvalConcurrency": [
      "ruleManager.LoadGroups",
      "require.Empty",
      "maxInflight.Load",
      "t.Cleanup",
      "optsFactory",
      "require.Len",
      "wg.Done",
      "context.Background",
      "wg.Add",
      "wg.Wait",
      "storage.Close",
      "context.WithCancel",
      "labels.EmptyLabels",
      "group.Eval",
      "time.Now",
      "require.Equal",
      "int32",
      "teststorage.New",
      "NewManager"
    ],
    "TestBstreamReader": [
      "w.bytes",
      "require.NoError",
      "r.readBitsFast",
      "r.readBits",
      "w.writeBit",
      "newBReader",
      "r.readBitFast",
      "r.readBit",
      "require.Equal",
      "uint8",
      "w.writeBits",
      "uint64"
    ],
    "TestBstream_Reset": [
      "bs.Reset",
      "require.Equal"
    ],
    "TestBucketIterator": [
      "require.Equal",
      "newBucketIterator",
      "b.Next",
      "append"
    ],
    "TestBucketLimitAppender": [
      "len",
      "require.NoError",
      "app.Commit",
      "t.Run",
      "fmt.Sprintf",
      "app.AppendHistogram",
      "require.Equal",
      "require.Error",
      "int64",
      "labels.FromStrings",
      "?.ToFloat",
      "c.h.Copy"
    ],
    "TestBucketQuantile_ForcedMonotonicity": [
      "math.Inf",
      "t.Run",
      "BucketQuantile",
      "tc.getInput",
      "require.Equal",
      "require.InEpsilon"
    ],
    "TestBufferedSeriesIterator": [
      "require.Equal",
      "it.At",
      "s.F",
      "NewBufferIterator",
      "it.Seek",
      "bit.Next",
      "s.T",
      "it.PeekBack",
      "NewListSeriesIterator",
      "bufferEq",
      "append",
      "bit.At",
      "sampleEq",
      "prevSampleEq",
      "it.Next",
      "it.Buffer"
    ],
    "TestBufferedSeriesIteratorMixedFloatsAndHistograms": [
      "?.Copy",
      "it.Seek",
      "buf.AtFloatHistogram",
      "it.Buffer",
      "buf.Next",
      "buf.AtHistogram",
      "NewListSeriesIteratorWithCopy",
      "?.ToFloat",
      "require.NoError",
      "it.Err",
      "tsdbutil.GenerateTestHistograms",
      "NewBufferIterator",
      "require.Equal",
      "buf.At"
    ],
    "TestBufferedSeriesIteratorMixedHistograms": [
      "NewBufferIterator",
      "?.ToFloat",
      "require.Equal",
      "it.Seek",
      "require.NoError",
      "buf.Next",
      "tsdbutil.GenerateTestHistograms",
      "NewListSeriesIterator",
      "it.Err",
      "it.Buffer",
      "buf.AtFloatHistogram"
    ],
    "TestBufferedSeriesIteratorNoBadAt": [
      "it.Next",
      "require.False",
      "NewBufferIterator"
    ],
    "TestBuildTimeSeries": [
      "require.NotNil",
      "require.Len",
      "require.Equal",
      "filterTsLimit",
      "t.Run",
      "buildTimeSeries"
    ],
    "TestBuilder": [
      "NewSymbolTable",
      "NewBuilder",
      "EmptyLabels",
      "tcase.want.BytesWithoutLabels",
      "t.Run",
      "fmt.Sprintf",
      "test",
      "b.Get",
      "b.Range",
      "require.Equal",
      "NewBuilderWithSymbolTable",
      "b.Set",
      "b.Keep",
      "b.Del",
      "Equal",
      "b.Labels",
      "FromStrings",
      "len",
      "require.True",
      "?.Bytes",
      "b.Reset",
      "reuseBuilder.Reset"
    ],
    "TestByteSize": [
      "require.Len",
      "len",
      "require.Equal",
      "?.ByteSize"
    ],
    "TestCORSHandler": [
      "http.NewRequest",
      "require.NoError",
      "resp.Header.Get",
      "require.Equal",
      "setup",
      "getCORSHandlerFunc",
      "req.Header.Set",
      "client.Do",
      "require.Empty",
      "tearDown",
      "mux.Handle"
    ],
    "TestCTParseFailures": [
      "NewOpenMetricsParser",
      "labels.NewSymbolTable",
      "WithOMParserCTSeriesSkipped",
      "testParse",
      "resetValAndLset",
      "requireEntries",
      "t.Run",
      "fmt.Sprintf"
    ],
    "TestCalcClassicBucketStatistics": [
      "t.Parallel",
      "t.Run",
      "fmt.Sprintf",
      "calcClassicBucketStatistics",
      "require.NoError",
      "require.Equal"
    ],
    "TestCalculateDesiredShards": [
      "int",
      "m.Start",
      "?.Add",
      "m.highestRecvTimestamp.Set",
      "m.dataOut.incr",
      "time.Duration",
      "m.metrics.highestSentTimestamp.Set",
      "m.calculateDesiredShards",
      "sendSamples",
      "require.GreaterOrEqual",
      "int64",
      "samplesIn.incr",
      "float64",
      "?.Unix",
      "require.Equal",
      "newTestClientAndQueueManager",
      "m.Stop",
      "startedAt.Add",
      "m.dataOutDuration.incr",
      "time.Now",
      "samplesIn.tick",
      "highestSent.Unix",
      "m.lastSendTimestamp.Store",
      "addSamples",
      "t.Log",
      "require.LessOrEqual"
    ],
    "TestCalculateDesiredShardsDetail": [
      "samplesIn.tick",
      "float64",
      "require.Equal",
      "m.calculateDesiredShards",
      "newTestClientAndQueueManager",
      "t.Run",
      "forceEMWA",
      "int64"
    ],
    "TestCalculateDuration": [
      "err.Error",
      "require.NoError",
      "require.Equal",
      "t.Run",
      "v.calculateDuration",
      "require.Error",
      "require.Contains"
    ],
    "TestCallExprPretty": [
      "expr.String",
      "require.Equal",
      "Prettify",
      "ParseExpr",
      "require.NoError",
      "fmt.Println"
    ],
    "TestCancelCompactions": [
      "genSeries",
      "require.NoError",
      "require.Len",
      "db.Blocks",
      "readOnlyDB.Blocks",
      "require.Falsef",
      "createBlock",
      "fileutil.CopyDirs",
      "time.Since",
      "OpenDBReadOnly",
      "b.Meta",
      "t.TempDir",
      "promslog.NewNopLogger",
      "require.Equal",
      "time.Sleep",
      "time.Now",
      "db.Close",
      "readOnlyDB.Close",
      "open",
      "prom_testutil.ToFloat64",
      "require.Less",
      "DefaultOptions"
    ],
    "TestChainSampleIterator": [
      "require.Equal",
      "NewListSeriesIterator",
      "require.NoError",
      "floatHistogramSample",
      "sampleFunc",
      "t.Run",
      "ChainSampleIteratorFromIterators",
      "ExpandSamples",
      "float64",
      "histogramSample"
    ],
    "TestChainSampleIteratorHistogramCounterResetHint": [
      "floatHistogramSample",
      "t.Run",
      "ChainSampleIteratorFromIterators",
      "ExpandSamples",
      "histogramSample",
      "NewListSeriesIterator",
      "sampleFunc",
      "require.NoError",
      "require.Equal"
    ],
    "TestChainSampleIteratorNextImmediatelyFailingIterator": [
      "require.EqualError",
      "merged.Err",
      "ChainSampleIteratorFromIterators",
      "NewListSeriesIterator",
      "errors.New",
      "require.Equal",
      "merged.Next"
    ],
    "TestChainSampleIteratorSeek": [
      "merged.AtFloatHistogram",
      "floatHistogramSample",
      "sampleFunc",
      "merged.Seek",
      "merged.AtHistogram",
      "t.Run",
      "merged.At",
      "append",
      "require.Equal",
      "float64",
      "histogramSample",
      "NewListSeriesIterator",
      "ChainSampleIteratorFromIterators",
      "ExpandSamples",
      "require.NoError"
    ],
    "TestChainSampleIteratorSeekFailingIterator": [
      "ChainSampleIteratorFromIterators",
      "NewListSeriesIterator",
      "errors.New",
      "require.Equal",
      "merged.Seek",
      "require.EqualError",
      "merged.Err"
    ],
    "TestChainSampleIteratorSeekHistogramCounterResetHint": [
      "append",
      "merged.AtHistogram",
      "ExpandSamples",
      "require.NoError",
      "ChainSampleIteratorFromIterators",
      "floatHistogramSample",
      "sampleFunc",
      "t.Run",
      "merged.At",
      "require.Equal",
      "histogramSample",
      "merged.Seek",
      "merged.AtFloatHistogram",
      "NewListSeriesIterator"
    ],
    "TestCheckAddError": [
      "newTestScrapeMetrics",
      "sl.checkAddError",
      "require.Equal",
      "promslog.NewNopLogger"
    ],
    "TestCheckConfigSyntax": [
      "t.Run",
      "checkConfig",
      "strings.Contains",
      "require.EqualErrorf",
      "err.Error",
      "require.NoError",
      "t.Parallel"
    ],
    "TestCheckDuplicates": [
      "t.Run",
      "rulefmt.ParseFile",
      "require.Empty",
      "checkDuplicates",
      "require.Equal",
      "t.Parallel",
      "labels.New"
    ],
    "TestCheckMetricsExtended": [
      "os.Open",
      "require.NoError",
      "f.Close",
      "checkMetricsExtended",
      "require.Equal",
      "float64",
      "t.Skip",
      "t.Parallel"
    ],
    "TestCheckRules": [
      "require.Equal",
      "t.Run",
      "os.ReadFile",
      "require.NoError",
      "t.Fatal",
      "w.Close",
      "CheckRules",
      "os.Pipe",
      "w.Write",
      "t.Error",
      "newRulesLintConfig"
    ],
    "TestCheckRulesWithFeatureFlag": [
      "exec.Command",
      "tool.Run",
      "require.NoError"
    ],
    "TestCheckRulesWithRuleFiles": [
      "t.Run",
      "t.Parallel",
      "CheckRules",
      "newRulesLintConfig",
      "require.Equal"
    ],
    "TestCheckSDFile": [
      "require.EqualErrorf",
      "err.Error",
      "require.NoError",
      "t.Parallel",
      "t.Run",
      "checkSDFile"
    ],
    "TestCheckScrapeConfigs": [
      "require.Equal",
      "model.Duration",
      "t.Run",
      "CheckConfig",
      "newConfigLintConfig"
    ],
    "TestCheckTargetConfig": [
      "t.Parallel",
      "t.Run",
      "checkConfig",
      "require.EqualErrorf",
      "err.Error",
      "require.NoError"
    ],
    "TestCheckpoint": [
      "compression.Types",
      "enc.Exemplars",
      "require.Len",
      "?.Name",
      "require.Less",
      "strconv.FormatInt",
      "Checkpoint",
      "DeleteCheckpoints",
      "os.ReadDir",
      "r.Next",
      "len",
      "dec.Metadata",
      "enc.CustomBucketsHistogramSamples",
      "enc.FloatHistogramSamples",
      "w.Truncate",
      "sort.Slice",
      "seg.Close",
      "dec.Series",
      "dec.Type",
      "dec.Samples",
      "int64",
      "labels.FromStrings",
      "testutil.RequireEqual",
      "fmt.Sprintf",
      "filepath.Join",
      "enc.Metadata",
      "sr.Close",
      "dec.Exemplars",
      "t.TempDir",
      "New",
      "NewSize",
      "dec.HistogramSamples",
      "require.NoError",
      "enc.Series",
      "enc.HistogramSamples",
      "labels.NewSymbolTable",
      "NewReader",
      "require.GreaterOrEqual",
      "r.Err",
      "require.Positive",
      "CreateSegment",
      "w.Log",
      "enc.Samples",
      "NewSegmentsReader",
      "record.NewDecoder",
      "r.Record",
      "dec.FloatHistogramSamples",
      "float64",
      "t.Run",
      "enc.CustomBucketsFloatHistogramSamples",
      "promslog.NewNopLogger",
      "require.Equal",
      "makeHistogram",
      "makeCustomBucketHistogram",
      "w.Close",
      "w.Dir",
      "makeFloatHistogram",
      "makeCustomBucketFloatHistogram",
      "require.Greater",
      "uint64",
      "Segments"
    ],
    "TestCheckpointNoTmpFolderAfterError": [
      "t.TempDir",
      "w.Close",
      "f.Close",
      "Checkpoint",
      "filepath.Walk",
      "info.Name",
      "w.Dir",
      "f.WriteAt",
      "promslog.NewNopLogger",
      "fmt.Errorf",
      "info.IsDir",
      "NewSize",
      "filepath.Join",
      "require.Error",
      "strings.HasSuffix",
      "require.NoError",
      "w.Log",
      "enc.Series",
      "labels.FromStrings",
      "os.OpenFile"
    ],
    "TestCheckpointSeriesReset": [
      "enc.Series",
      "os.Mkdir",
      "NewSize",
      "newWriteToMock",
      "require.Eventually",
      "fmt.Sprintf",
      "int64",
      "wt.checkNumSeries",
      "w.Truncate",
      "t.TempDir",
      "Segments",
      "NewWatcher",
      "watcher.Start",
      "retry",
      "enc.Samples",
      "overwriteReadTimeout",
      "w.Dir",
      "LastCheckpoint",
      "watcher.garbageCollectSeries",
      "path.Join",
      "w.Log",
      "w.Close",
      "chunks.HeadSeriesRef",
      "labels.FromStrings",
      "rand.Intn",
      "float64",
      "Checkpoint",
      "t.Run",
      "require.NoError",
      "promslog.NewNopLogger",
      "watcher.Stop"
    ],
    "TestChunk": [
      "testChunk",
      "NewXORChunk",
      "t.Run",
      "fmt.Sprintf",
      "make",
      "nc"
    ],
    "TestChunkAtBlockBoundary": [
      "db.Blocks",
      "block.Index",
      "context.Background",
      "require.NoError",
      "labels.FromStrings",
      "app.Append",
      "p.Next",
      "r.Series",
      "openTestDB",
      "db.Compact",
      "r.Close",
      "block.Meta",
      "index.AllPostingsKey",
      "int64",
      "db.Appender",
      "app.Commit",
      "r.Postings",
      "p.At",
      "require.True",
      "require.Equal",
      "db.Close"
    ],
    "TestChunkDiskMapper_Truncate": [
      "randomChunk",
      "len",
      "verifyFiles",
      "require.NoError",
      "hrw.Close",
      "make",
      "int64",
      "createChunkDiskMapper",
      "t.Helper",
      "addChunk",
      "hrw.Truncate",
      "close",
      "os.ReadDir",
      "hrw.dir.Name",
      "require.True",
      "hrw.WriteChunk",
      "require.Len",
      "hrw.CutNewFile"
    ],
    "TestChunkDiskMapper_Truncate_PreservesFileSequence": [
      "int64",
      "randomChunk",
      "hrw.evtlPosMtx.Unlock",
      "addChunk",
      "nonEmptyFile",
      "os.ReadDir",
      "require.NoError",
      "make",
      "require.True",
      "verifyFiles",
      "hrw.cut",
      "hrw.WriteChunk",
      "close",
      "hrw.evtlPosMtx.Lock",
      "hrw.evtlPos.toNewFile",
      "emptyFile",
      "hrw.dir.Name",
      "require.Len",
      "createChunkDiskMapper",
      "hrw.Close",
      "hrw.Truncate",
      "t.Helper",
      "len"
    ],
    "TestChunkDiskMapper_Truncate_WriteQueueRaceCondition": [
      "createChunkDiskMapper",
      "require.NoError",
      "time.Sleep",
      "origWriteChunk",
      "t.Skip",
      "hrw.CutNewFile",
      "wg.Wait",
      "t.Cleanup",
      "hrw.Close",
      "hrw.WriteChunk",
      "hrw.Truncate",
      "wg.Add",
      "randomChunk",
      "wg.Done",
      "ref.Unpack",
      "require.Equal"
    ],
    "TestChunkDiskMapper_WriteChunk_Chunk_IterateChunks": [
      "t.Helper",
      "uint16",
      "hrw.curFile.Name",
      "newChunkDiskMapperRef",
      "chunk.Bytes",
      "hrw.CutNewFile",
      "createChunkDiskMapper",
      "hrw.chkWriter.Buffered",
      "require.Equal",
      "binary.BigEndian.PutUint64",
      "require.Len",
      "uint64",
      "append",
      "hrw.ApplyOutOfOrderMask",
      "byte",
      "chunk.Encoding",
      "hrw.dir.Name",
      "expData.chunk.Bytes",
      "binary.PutUvarint",
      "len",
      "addChunks",
      "int",
      "binary.BigEndian.Uint32",
      "hrw.IterateAllChunks",
      "require.NoError",
      "newCRC32",
      "chkCRC32.Write",
      "os.ReadFile",
      "exp.chunk.Bytes",
      "createChunk",
      "chunk.NumSamples",
      "chkCRC32.Sum",
      "hrw.Chunk",
      "hrw.Close",
      "chkCRC32.Reset",
      "actChunk.Bytes"
    ],
    "TestChunkNotFoundHeadGCRace": [
      "q.Select",
      "wg.Add",
      "db.Compact",
      "s.Iterator",
      "it.Err",
      "db.Appender",
      "app.Append",
      "require.True",
      "q.Close",
      "storage.SeriesRef",
      "labels.FromStrings",
      "app.Commit",
      "wg.Done",
      "db.Blocks",
      "db.DisableCompactions",
      "float64",
      "labels.MustNewMatcher",
      "db.Querier",
      "ss.Next",
      "ss.Err",
      "newTestDB",
      "require.NotEmpty",
      "time.After",
      "it.Next",
      "wg.Wait",
      "context.Background",
      "ss.At",
      "int64",
      "require.NoError",
      "it.At"
    ],
    "TestChunkQuerierOOOQuery": [
      "app.Append",
      "labels.FromStrings",
      "tsdbutil.GenerateTestHistogram",
      "app.AppendHistogram",
      "tsdbutil.GenerateTestFloatHistogram",
      "time.Minute.Milliseconds",
      "nBucketHistogram",
      "uint32",
      "t.Run",
      "float64",
      "make",
      "testChunkQuerierOOOQuery",
      "uint64"
    ],
    "TestChunkQuerierReadWriteRace": [
      "float64",
      "q.Close",
      "copy",
      "close",
      "require.NoError",
      "labels.FromStrings",
      "cs.Iterator",
      "openTestDB",
      "time.After",
      "it.Next",
      "make",
      "querier.Select",
      "reader",
      "db.Appender",
      "context.Background",
      "int64",
      "it.At",
      "len",
      "labels.MustNewMatcher",
      "ss.At",
      "ss.Err",
      "db.ChunkQuerier",
      "m.Chunk.Bytes",
      "db.Close",
      "app.Append",
      "app.Commit",
      "ss.Next",
      "writer"
    ],
    "TestChunkQuerier_ShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks": [
      "t.Skip",
      "t.Run",
      "strconv.Itoa",
      "testChunkQuerierShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks"
    ],
    "TestChunkQueryOOOHeadDuringTruncate": [
      "it.Err",
      "s.Iterator",
      "metaIt.Next",
      "metaIt.At",
      "it.Next",
      "meta.Chunk.Iterator",
      "labels.MustNewMatcher",
      "ss.At",
      "testQueryOOOHeadDuringTruncate",
      "db.ChunkQuerier",
      "q.Select",
      "context.Background",
      "require.Equal",
      "it.AtT",
      "require.NoError",
      "require.True",
      "ss.Next",
      "require.False",
      "require.NotEqual"
    ],
    "TestChunkReader_ConcurrentReads": [
      "t.TempDir",
      "chunkw.WriteChunks",
      "chunks.NewDirReader",
      "require.Equal",
      "wg.Wait",
      "assureChunkFromSamples",
      "wg.Done",
      "chunk.Chunk.Bytes",
      "r.Close",
      "chkAct.Bytes",
      "chunks.NewWriter",
      "require.NoError",
      "chunkw.Close",
      "wg.Add",
      "r.ChunkOrIterable",
      "require.Nil"
    ],
    "TestChunkSeriesSetToSeriesSet": [
      "append",
      "s.Labels",
      "s.Iterator",
      "iter.Next",
      "NewMockChunkSeriesSet",
      "ss.At",
      "labels.FromStrings",
      "NewListChunkSeriesFromSamples",
      "NewSeriesSetFromChunkSeriesSet",
      "iter.At",
      "require.EqualValues",
      "ss.Next",
      "require.Len",
      "require.Equal"
    ],
    "TestChunkSnapshot": [
      "rand.Float64",
      "app.AppendHistogram",
      "os.ReadDir",
      "strings.HasPrefix",
      "openHeadAndCheckReplay",
      "tsdbutil.GenerateTestGaugeHistograms",
      "tsdbutil.GenerateTestGaugeFloatHistograms",
      "app.AppendExemplar",
      "head.Tombstones",
      "enc.Tombstones",
      "strconv.Itoa",
      "query",
      "head.exemplars.IterateExemplars",
      "head.Appender",
      "lblsFloatHist.String",
      "labels.MustNewMatcher",
      "wlog.NewSize",
      "head.wal.Dir",
      "head.tombstones.AddInterval",
      "LastChunkSnapshot",
      "checkTombstones",
      "int",
      "app.Append",
      "app.Commit",
      "labels.FromStrings",
      "NewBlockQuerier",
      "NewHead",
      "checkFloatHistograms",
      "fmt.Sprintf",
      "testutil.RequireEqualWithOptions",
      "storage.SeriesRef",
      "append",
      "lbls.String",
      "closeHeadAndCheckSnapshot",
      "rand.Int",
      "checkExemplars",
      "lblsHist.String",
      "head.wal.LastSegmentAndOffset",
      "checkHistograms",
      "chunkSnapshotDir",
      "head.Close",
      "context.Background",
      "make",
      "require.Equal",
      "fi.Name",
      "len",
      "checkSamples",
      "prom_testutil.ToFloat64",
      "tr.Iter",
      "cmp.AllowUnexported",
      "addExemplar",
      "head.wal.Log",
      "head.opts.MaxExemplars.Store",
      "newTestHead",
      "require.NoError",
      "?.Add",
      "head.Init",
      "int64"
    ],
    "TestChunkSnapshotReplayBug": [
      "fmt.Sprintf",
      "os.WriteFile",
      "DefaultHeadOptions",
      "NewHead",
      "head.Init",
      "NewBlockQuerier",
      "query",
      "prom_testutil.ToFloat64",
      "t.TempDir",
      "require.NoError",
      "rand.Int",
      "enc.Series",
      "chunkSnapshotDir",
      "os.MkdirAll",
      "require.Equal",
      "filepath.Join",
      "labels.FromStrings",
      "wal.Log",
      "head.Close",
      "labels.MustNewMatcher",
      "require.Empty",
      "wlog.NewSize",
      "chunks.HeadSeriesRef",
      "enc.Samples"
    ],
    "TestChunkSnapshotTakenAfterIncompleteSnapshot": [
      "wlog.NewSize",
      "chunkSnapshotDir",
      "labels.FromStrings",
      "filepath.Join",
      "os.MkdirAll",
      "NewHead",
      "head.Init",
      "prom_testutil.ToFloat64",
      "head.Close",
      "t.TempDir",
      "require.Equal",
      "head.Appender",
      "app.Append",
      "require.NotEmpty",
      "require.Positive",
      "require.NoError",
      "DefaultHeadOptions",
      "context.Background",
      "app.Commit",
      "LastChunkSnapshot"
    ],
    "TestChunkWriteQueue_GettingChunkFromQueue": [
      "require.NoError",
      "q.addJob",
      "require.Equal",
      "q.get",
      "blockWriterWg.Add",
      "blockWriterWg.Wait",
      "newChunkWriteQueue",
      "q.stop",
      "blockWriterWg.Done",
      "chunkenc.NewXORChunk"
    ],
    "TestChunkWriteQueue_HandlerErrorViaCallback": [
      "require.Equal",
      "errors.New",
      "make",
      "close",
      "newChunkWriteQueue",
      "q.stop",
      "require.NoError",
      "q.addJob"
    ],
    "TestChunkWriteQueue_WrappingAroundSizeLimit": [
      "callbackWg.Add",
      "q.addJob",
      "time.Sleep",
      "make",
      "require.NoError",
      "addChunk",
      "require.True",
      "addedJob.Store",
      "require.False",
      "close",
      "q.stop",
      "callbackWg.Done",
      "q.queueIsFull",
      "atomic.NewBool",
      "addedJob.Load",
      "callbackWg.Wait",
      "newChunkWriteQueue",
      "require.Eventually",
      "q.queueIsEmpty",
      "unblockChunkWriter"
    ],
    "TestChunkWriteQueue_WritingThroughQueue": [
      "close",
      "newChunkWriteQueue",
      "newChunkDiskMapperRef",
      "make",
      "require.NoError",
      "require.Equal",
      "q.stop",
      "HeadSeriesRef",
      "chunkenc.NewXORChunk",
      "q.addJob"
    ],
    "TestChunkWriter_ReadAfterWrite": [
      "int64",
      "os.ReadDir",
      "uint64",
      "chk.Chunk.Bytes",
      "chkAct.Bytes",
      "assureChunkFromSamples",
      "chk1.Chunk.Bytes",
      "chunks.WithSegmentSize",
      "chunkw.Close",
      "binary.PutUvarint",
      "t.Run",
      "chunkw.WriteChunks",
      "int",
      "chunks.NewDirReader",
      "require.Nil",
      "chkExp.Chunk.Bytes",
      "chunks.NewWriter",
      "make",
      "f.Info",
      "fi.Size",
      "require.GreaterOrEqual",
      "t.TempDir",
      "require.Equal",
      "len",
      "strconv.Itoa",
      "require.NoError",
      "r.ChunkOrIterable",
      "require.Len",
      "r.Close"
    ],
    "TestChunkedReaderCanReadFromChunkedWriter": [
      "len",
      "NewChunkedWriter",
      "w.Write",
      "require.Len",
      "require.Less",
      "require.Error",
      "NewChunkedReader",
      "require.NoError",
      "r.Next",
      "require.Equal"
    ],
    "TestChunkedReader_CorruptedFrame": [
      "?.Next",
      "bytes.NewReader",
      "require.EqualError",
      "require.NoError",
      "require.Equal",
      "b.Bytes",
      "require.Error",
      "NewChunkedWriter",
      "w.Write",
      "NewChunkedReader"
    ],
    "TestChunkedReader_Overflow": [
      "string",
      "bytes.NewReader",
      "require.Error",
      "?.Write",
      "copy",
      "?.Next",
      "NewChunkedReader",
      "require.Equal",
      "NewChunkedWriter",
      "require.NoError",
      "make",
      "b.Bytes",
      "require.EqualError"
    ],
    "TestChunkedSeries": [
      "require.Equal",
      "labels.FromStrings",
      "s.Iterator",
      "it.Err",
      "it.At",
      "int64",
      "float64",
      "t.Run",
      "buildTestChunks",
      "s.Labels",
      "it.Next",
      "require.NoError"
    ],
    "TestChunkedSeriesIterator": [
      "it2.Next",
      "it2.Seek",
      "buildTestChunks",
      "it.Next",
      "it.Err",
      "require.ErrorContains",
      "require.Nil",
      "make",
      "int64",
      "it.Seek",
      "it1.Err",
      "newChunkedSeriesIterator",
      "require.Equal",
      "it.At",
      "float64",
      "it1.Seek",
      "t.Run",
      "require.NoError",
      "require.NotNil",
      "it1.Next",
      "it2.Err"
    ],
    "TestChunkedSeriesSet": [
      "NewChunkedWriter",
      "int64",
      "require.NoError",
      "NewChunkedSeriesSet",
      "?.Get",
      "io.NopCloser",
      "ss.Next",
      "require.True",
      "ss.At",
      "require.Nil",
      "it.At",
      "float64",
      "t.Run",
      "newOneShotCloser",
      "proto.Marshal",
      "w.Write",
      "NewChunkedReader",
      "require.Equal",
      "ss.Warnings",
      "s.Labels",
      "require.ErrorContains",
      "buildTestChunks",
      "?.Len",
      "it.Next",
      "ss.Err",
      "?.Has",
      "s.Iterator",
      "require.False"
    ],
    "TestChunksRefOrdering": [
      "context.Background",
      "filepath.Join",
      "idx.AddSymbol",
      "labels.FromStrings",
      "require.EqualError",
      "t.TempDir",
      "NewWriter",
      "require.NoError",
      "idx.AddSeries",
      "idx.Close"
    ],
    "TestChunksTimeOrdering": [
      "NewWriter",
      "context.Background",
      "idx.AddSymbol",
      "idx.AddSeries",
      "labels.FromStrings",
      "require.EqualError",
      "idx.Close",
      "t.TempDir",
      "filepath.Join",
      "require.NoError"
    ],
    "TestCircularExemplarStorage_Concurrent_AddExemplar_Resize": [
      "es.AddExemplar",
      "int64",
      "wg.Add",
      "require.NoError",
      "labels.FromStrings",
      "t.Cleanup",
      "make",
      "wg.Done",
      "es.Resize",
      "close",
      "NewCircularExemplarStorage"
    ],
    "TestClient": [
      "require.NoError",
      "string",
      "server.Close",
      "model.SampleValue",
      "http.HandlerFunc",
      "url.Parse",
      "model.Time",
      "require.Equal",
      "httptest.NewServer",
      "io.ReadAll",
      "NewClient",
      "serverURL.String",
      "c.Write",
      "math.NaN",
      "math.Inf"
    ],
    "TestClientCustomHeaders": [
      "require.Equal",
      "receivedHeaders.Values",
      "server.Close",
      "require.NoError",
      "model.Duration",
      "httptest.NewServer",
      "url.Parse",
      "NewWriteClient",
      "c.Store",
      "context.Background",
      "require.True",
      "http.HandlerFunc"
    ],
    "TestClientRetryAfter": [
      "http.Error",
      "setupServer",
      "server.Close",
      "c.Store",
      "httptest.NewServer",
      "w.Header",
      "t.Run",
      "model.Duration",
      "toHash",
      "require.Equal",
      "context.Background",
      "http.HandlerFunc",
      "?.Set",
      "require.NoError",
      "NewWriteClient",
      "url.Parse",
      "getClient",
      "getClientConfig",
      "errors.As"
    ],
    "TestClose": [
      "Open",
      "require.NoError",
      "DefaultOptions",
      "db.Close",
      "db.Querier",
      "q.Close",
      "require.Error",
      "t.TempDir",
      "createBlock",
      "genSeries",
      "t.TempDir",
      "NewSize",
      "require.NoError",
      "w.Close",
      "require.Error"
    ],
    "TestCommit": [
      "record.NewDecoder",
      "len",
      "dec.HistogramSamples",
      "tsdbutil.GenerateTestHistograms",
      "?.F",
      "tsdbutil.GenerateTestCustomBucketsFloatHistograms",
      "s.Close",
      "r.Record",
      "DefaultOptions",
      "s.wal.Dir",
      "dec.Series",
      "dec.Samples",
      "dec.Exemplars",
      "?.T",
      "tsdbutil.GenerateTestFloatHistograms",
      "dec.Type",
      "dec.FloatHistogramSamples",
      "app.Append",
      "app.AppendExemplar",
      "app.Commit",
      "require.Equal",
      "chunks.GenerateSamples",
      "labels.New",
      "require.NoError",
      "app.AppendHistogram",
      "wlog.NewReader",
      "t.Name",
      "int64",
      "sr.Close",
      "createTestAgentDB",
      "context.TODO",
      "labelsForTest",
      "tsdbutil.GenerateTestCustomBucketsHistograms",
      "wlog.NewSegmentsReader",
      "labels.NewSymbolTable",
      "r.Next",
      "s.Appender"
    ],
    "TestCommitErr_V1Message": [
      "buildWriteRequest",
      "http.NewRequest",
      "bytes.NewReader",
      "NewWriteHandler",
      "recorder.Result",
      "io.ReadAll",
      "string",
      "require.NoError",
      "errors.New",
      "promslog.NewNopLogger",
      "httptest.NewRecorder",
      "handler.ServeHTTP",
      "require.Equal"
    ],
    "TestCommitErr_V2Message": [
      "bytes.NewReader",
      "errors.New",
      "NewWriteHandler",
      "buildV2WriteRequest",
      "require.NoError",
      "req.Header.Set",
      "http.NewRequest",
      "handler.ServeHTTP",
      "string",
      "promslog.NewNopLogger",
      "httptest.NewRecorder",
      "recorder.Result",
      "io.ReadAll",
      "require.Equal"
    ],
    "TestCompactBlockMetas": [
      "ulid.MustNew",
      "CompactBlockMetas",
      "require.Equal"
    ],
    "TestCompactEmptyResultBlockWithTombstone": [
      "OpenBlock",
      "require.NoError",
      "block.Delete",
      "NewLeveledCompactor",
      "require.Nil",
      "block.Close",
      "createBlock",
      "t.TempDir",
      "genSeries",
      "labels.MustNewMatcher",
      "promslog.NewNopLogger",
      "c.Compact",
      "context.Background"
    ],
    "TestCompactHead": [
      "t.TempDir",
      "db.Appender",
      "db.Dir",
      "series.At",
      "series.Err",
      "seriesSet.Err",
      "prometheus.NewRegistry",
      "deleteNonBlocks",
      "seriesSet.At",
      "series.Next",
      "rand.Float64",
      "NewRangeHead",
      "db.Close",
      "querier.Close",
      "require.NoError",
      "app.Append",
      "?.MinTime",
      "seriesSet.Next",
      "?.Iterator",
      "require.Len",
      "require.Equal",
      "querier.Select",
      "labels.FromStrings",
      "db.Head",
      "int64",
      "Open",
      "append",
      "app.Commit",
      "db.Blocks",
      "db.Querier",
      "promslog.NewNopLogger",
      "context.Background",
      "db.CompactHead"
    ],
    "TestCompactHeadWithDeletion": [
      "db.Appender",
      "app.Append",
      "rand.Float64",
      "app.Commit",
      "db.CompactHead",
      "db.Head",
      "prometheus.NewRegistry",
      "context.Background",
      "db.Close",
      "db.Delete",
      "labels.MustNewMatcher",
      "NewRangeHead",
      "promslog.NewNopLogger",
      "labels.FromStrings",
      "require.NoError",
      "Open",
      "t.TempDir"
    ],
    "TestCompactingChunkSeriesMerger": [
      "m",
      "merged.Iterator",
      "histogramSample",
      "chunks.GenerateSamples",
      "tc.expected.Labels",
      "chunks.ChunkMetasToSamples",
      "tc.expected.Iterator",
      "NewCompactingChunkSeriesMerger",
      "floatHistogramSample",
      "NewListChunkSeriesFromSamples",
      "labels.FromStrings",
      "t.Run",
      "require.Equal",
      "merged.Labels",
      "ExpandChunks"
    ],
    "TestCompactingChunkSeriesMergerHistogramCounterResetHint": [
      "labels.FromStrings",
      "merged.Labels",
      "merged.Iterator",
      "NewCompactingChunkSeriesMerger",
      "sampleFunc",
      "t.Run",
      "ExpandChunks",
      "tc.expected.Iterator",
      "histogramSample",
      "floatHistogramSample",
      "require.Equal",
      "NewListChunkSeriesFromSamples",
      "m",
      "tc.expected.Labels",
      "chunks.ChunkMetasToSamples"
    ],
    "TestCompactionFailWillCleanUpTempDir": [
      "require.True",
      "context.Background",
      "compactor.write",
      "require.NoError",
      "t.TempDir",
      "require.Error",
      "os.Stat",
      "filepath.Join",
      "?.ULID.String",
      "NewLeveledCompactor",
      "promslog.NewNopLogger",
      "os.IsNotExist"
    ],
    "TestCompaction_populateBlock": [
      "make",
      "NewLeveledCompactor",
      "s.l.Map",
      "iter.Err",
      "t.Run",
      "createIdxChkReaders",
      "chk.Chunk.NumSamples",
      "iter.Next",
      "uint64",
      "append",
      "context.Background",
      "require.NoError",
      "tc.expErr.Error",
      "require.Fail",
      "require.Equal",
      "iter.AtFloatHistogram",
      "tsdbutil.GenerateTestHistogram",
      "index.EmptyPostings",
      "reader.SortedPostings",
      "len",
      "chk.Chunk.Iterator",
      "iter.AtHistogram",
      "errors.New",
      "samplesForRange",
      "reader.Postings",
      "require.EqualError",
      "iter.At",
      "blockPopulator.PopulateBlock"
    ],
    "TestCompareSpansAndInsert": [
      "require.Equal",
      "expandSpansForward",
      "make",
      "insert",
      "require.True",
      "float64",
      "t.Run",
      "len",
      "expandSpansBothWays",
      "require.False"
    ],
    "TestCompression": [
      "make",
      "os.RemoveAll",
      "bootstrap",
      "require.Greater",
      "float64",
      "fileutil.DirSize",
      "t.TempDir",
      "NewSize",
      "require.NoError",
      "w.Log",
      "w.Close",
      "append"
    ],
    "TestCompressionHandler_Deflate": [
      "client.Do",
      "buf.ReadFrom",
      "buf.String",
      "setup",
      "tearDown",
      "req.Header.Set",
      "require.NoError",
      "resp.Body.Close",
      "require.Equal",
      "zlib.NewReader",
      "getCompressionHandlerFunc",
      "mux.Handle",
      "http.NewRequest",
      "resp.Header.Get"
    ],
    "TestCompressionHandler_Gzip": [
      "mux.Handle",
      "req.Header.Set",
      "client.Do",
      "gzip.NewReader",
      "buf.ReadFrom",
      "require.NoError",
      "tearDown",
      "http.NewRequest",
      "resp.Body.Close",
      "resp.Header.Get",
      "require.Equal",
      "buf.String",
      "setup",
      "getCompressionHandlerFunc"
    ],
    "TestCompressionHandler_PlainText": [
      "client.Get",
      "require.NoError",
      "resp.Body.Close",
      "io.ReadAll",
      "string",
      "tearDown",
      "mux.Handle",
      "require.Equal",
      "setup",
      "getCompressionHandlerFunc"
    ],
    "TestComputeChunkEndTime": [
      "t.Run",
      "computeChunkEndTime",
      "require.Equal"
    ],
    "TestComputeExternalURL": [
      "computeExternalURL",
      "require.NoError",
      "require.Error"
    ],
    "TestConcatenatingChunkIterator": [
      "require.Equal",
      "testCase.expectedError.Error",
      "chunks.ChunkFromSamples",
      "require.NoError",
      "errors.New",
      "it.Next",
      "append",
      "NewListChunkSeriesIterator",
      "t.Run",
      "it.At",
      "it.Err",
      "require.EqualError"
    ],
    "TestConcatenatingChunkSeriesMerger": [
      "m",
      "tc.expected.Labels",
      "merged.Labels",
      "ExpandChunks",
      "merged.Iterator",
      "NewListChunkSeriesFromSamples",
      "labels.FromStrings",
      "t.Run",
      "require.Equal",
      "tc.expected.Iterator",
      "NewConcatenatingChunkSeriesMerger",
      "chunks.GenerateSamples"
    ],
    "TestConcreteSeriesClonesLabels": [
      "labels.FromStrings",
      "cs.Labels",
      "require.Equal",
      "gotLabels.CopyFrom"
    ],
    "TestConcreteSeriesIterator_FloatAndHistogramSamples": [
      "prompb.FromIntHistogram",
      "it.At",
      "?.ToFloatHistogram",
      "tsdbutil.GenerateTestHistograms",
      "series.Iterator",
      "it.Next",
      "len",
      "int64",
      "require.Equal",
      "it.Seek",
      "make",
      "labels.FromStrings",
      "it.AtHistogram",
      "it.AtFloatHistogram"
    ],
    "TestConcreteSeriesIterator_FloatSamples": [
      "labels.FromStrings",
      "series.Iterator",
      "require.Equal",
      "it.Seek",
      "it.At",
      "int64",
      "it.Next"
    ],
    "TestConcreteSeriesIterator_HistogramSamples": [
      "it.AtHistogram",
      "it.Next",
      "make",
      "prompb.FromIntHistogram",
      "require.Equal",
      "it.Seek",
      "series.Iterator",
      "tsdbutil.GenerateTestHistograms",
      "len",
      "int64",
      "labels.FromStrings"
    ],
    "TestConcreteSeriesSet": [
      "labels.FromStrings",
      "require.True",
      "c.Next",
      "require.Equal",
      "c.At",
      "require.False"
    ],
    "TestConcurrentRangeQueries": [
      "make",
      "qry.Close",
      "teststorage.New",
      "g.Go",
      "int64",
      "t.Logf",
      "require.NoError",
      "strings.Contains",
      "time.Unix",
      "qry.Exec",
      "g.Wait",
      "stor.Close",
      "promqltest.NewTestEngineWithOpts",
      "setupRangeQueryTestData",
      "rangeQueryCases",
      "context.Background",
      "engine.NewRangeQuery"
    ],
    "TestConfigReloadAndShutdownRace": [
      "cancel",
      "prometheus.NewRegistry",
      "NewTestMetrics",
      "context.Background",
      "promslog.NewNopLogger",
      "discoveryManager.SyncCh",
      "wgBg.Add",
      "delete",
      "wgDiscovery.Add",
      "discoveryManager.Run",
      "staticConfig",
      "wgDiscovery.Wait",
      "context.WithCancel",
      "NewManager",
      "require.NotNil",
      "wgBg.Done",
      "mgrCancel",
      "wgDiscovery.Done",
      "time.Sleep",
      "ctx.Done",
      "discoveryManager.ApplyConfig",
      "wgBg.Wait"
    ],
    "TestConfig_UnmarshalThenMarshal": [
      "t.Run",
      "yaml.Unmarshal",
      "require.NoError",
      "yaml.Marshal",
      "require.Equal",
      "string"
    ],
    "TestConfigsCustomUnMarshalMarshal": [
      "require.Equal",
      "string",
      "yaml.UnmarshalStrict",
      "require.NoError",
      "yaml.Marshal"
    ],
    "TestConfiguredService": [
      "prometheus.NewRegistry",
      "NewDiscovery",
      "require.NoError",
      "require.True",
      "consulDiscovery.shouldWatch",
      "require.False",
      "NewTestMetrics",
      "prometheus.NewRegistry",
      "discovery.NewRefreshMetrics",
      "metrics.Unregister",
      "t.Run",
      "conf.NewDiscovererMetrics",
      "require.NoError",
      "metrics.Register",
      "NewDiscovery",
      "require.Error"
    ],
    "TestConfiguredServiceWithTag": [
      "require.NoError",
      "require.False",
      "consulDiscovery.shouldWatch",
      "require.True",
      "NewTestMetrics",
      "prometheus.NewRegistry",
      "NewDiscovery"
    ],
    "TestConfiguredServiceWithTags": [
      "NewTestMetrics",
      "prometheus.NewRegistry",
      "NewDiscovery",
      "require.NoError",
      "consulDiscovery.shouldWatch",
      "require.Equal"
    ],
    "TestContainsInOrder": [
      "require.False",
      "require.True",
      "containsInOrder"
    ],
    "TestContentTypeRegex": [
      "t.Run",
      "require.Equal",
      "matchContentType.MatchString"
    ],
    "TestConvertBucketsLayout": [
      "convertBucketsLayout",
      "?.BucketCounts",
      "?.Offset",
      "b.SetOffset",
      "?.FromRaw",
      "b.BucketCounts",
      "t.Run",
      "fmt.Sprintf",
      "pmetric.NewExponentialHistogramDataPointBuckets",
      "?.AsRaw",
      "tt.buckets",
      "require.Equal"
    ],
    "TestConvertClassicHistogramsToNHCB": [
      "genTestHistProto",
      "len",
      "require.Contains",
      "proto.Marshal",
      "close",
      "checkFloatSeries",
      "?.Parse",
      "i.AtFloatHistogram",
      "model.Duration",
      "buf.Bytes",
      "q.Select",
      "s.Labels",
      "i.AtHistogram",
      "checkHistSeries",
      "?.Iterator",
      "binary.AppendUvarint",
      "proto.UnmarshalText",
      "require.Eventually",
      "labels.MustNewMatcher",
      "checkBucketValues",
      "genTestCounterText",
      "t.Run",
      "simpleStorage.Close",
      "?.Set",
      "newScrapePool",
      "require.Equal",
      "q.Close",
      "?.UnixNano",
      "genTestCounterProto",
      "series.Next",
      "?.Get",
      "require.NoError",
      "ts.Close",
      "time.After",
      "context.Background",
      "?.Execute",
      "time.Now",
      "genTestHistText",
      "i.Next",
      "make",
      "buf.Write",
      "w.Write",
      "template.New",
      "teststorage.New",
      "httptest.NewServer",
      "fmt.Sprintf",
      "uint64",
      "model.LabelValue",
      "t.Fatalf",
      "require.Len",
      "http.HandlerFunc",
      "w.Header",
      "sp.stop",
      "sp.Sync",
      "cancel",
      "simpleStorage.Querier",
      "require.NotContains",
      "fmt.Fprint",
      "template.Must",
      "series.At",
      "i.At",
      "panic",
      "newTestScrapeMetrics",
      "context.WithCancel",
      "b.String",
      "sp.ActiveTargets",
      "url.Parse"
    ],
    "TestConvertExplicitHistogramBucketsToNHCBLayout": [
      "getBucketOffset",
      "convertBucketsLayout",
      "int32",
      "require.Equal",
      "t.Run"
    ],
    "TestCoordinationWithReceiver": [
      "require.NotNil",
      "mgr.Run",
      "require.Len",
      "NewTestMetrics",
      "ctx.Done",
      "len",
      "cancel",
      "context.Background",
      "prometheus.NewRegistry",
      "NewManager",
      "t.Fatalf",
      "mgr.SyncCh",
      "assertEqualGroups",
      "t.Run",
      "context.WithTimeout",
      "mgr.StartCustomProvider",
      "time.Sleep",
      "require.True",
      "newMockDiscoveryProvider"
    ],
    "TestCopyState": [
      "NewAlertingRule",
      "labels.EmptyLabels",
      "NewRecordingRule",
      "labels.FromStrings",
      "make",
      "newGroup.CopyState",
      "require.Equal"
    ],
    "TestCorrectNumTombstones": [
      "labels.MustNewMatcher",
      "uint64",
      "db.Delete",
      "require.Equal",
      "app.Append",
      "db.Compact",
      "openTestDB",
      "labels.FromStrings",
      "context.Background",
      "db.Appender",
      "int64",
      "require.NoError",
      "db.Close",
      "app.Commit",
      "require.Len"
    ],
    "TestCorruptAndCarryOn": [
      "w.Close",
      "t.Log",
      "f.Close",
      "reader.Next",
      "fi.Size",
      "sr.Close",
      "int64",
      "require.False",
      "w.segment.Index",
      "make",
      "fmt.Sprintf",
      "promslog.NewNopLogger",
      "filepath.Join",
      "w.Repair",
      "t.TempDir",
      "require.NoError",
      "w.Log",
      "require.Len",
      "reader.Err",
      "require.Error",
      "rand.Read",
      "os.OpenFile",
      "f.Stat",
      "require.Equal",
      "f.Truncate",
      "NewSegmentsReader",
      "reader.Record",
      "NewSize",
      "listSegments",
      "NewReader"
    ],
    "TestCorruptedChunk": [
      "int64",
      "make",
      "querier.Close",
      "set.Next",
      "tc.iterErr.Error",
      "require.NoError",
      "binary.BigEndian.PutUint32",
      "labels.FromStrings",
      "b.Close",
      "?.Iterator",
      "f.Seek",
      "t.TempDir",
      "require.True",
      "NewBlockQuerier",
      "labels.MustNewMatcher",
      "f.Truncate",
      "errors.New",
      "f.Write",
      "fi.Size",
      "int",
      "storage.NewListSeries",
      "it.Err",
      "require.NotEmpty",
      "os.OpenFile",
      "context.Background",
      "chunkDir",
      "tc.corrFunc",
      "OpenBlock",
      "tc.openErr.Error",
      "t.Run",
      "querier.Select",
      "set.At",
      "it.Next",
      "require.Equal",
      "f.Stat",
      "createBlock",
      "sequenceFiles",
      "f.Close",
      "require.EqualError"
    ],
    "TestCreateAttributes": [
      "resource.Attributes",
      "attrs.PutStr",
      "t.Run",
      "NewPromoteResourceAttributes",
      "require.ElementsMatch",
      "scopeAttrs.FromRaw",
      "?.PutStr",
      "createAttributes",
      "pcommon.NewMap",
      "pcommon.NewResource"
    ],
    "TestCreateBlock": [
      "t.TempDir",
      "OpenBlock",
      "createBlock",
      "genSeries",
      "require.NoError",
      "b.Close"
    ],
    "TestCreateNewHTTPResourceClient": [
      "NewHTTPResourceClient",
      "require.NoError",
      "require.Equal"
    ],
    "TestCumulativeBucketIterator": [
      "math.Inf",
      "t.Run",
      "strconv.Itoa",
      "c.histogram.CumulativeBucketIterator",
      "it.At",
      "make",
      "len",
      "it.Next",
      "append",
      "require.Equal"
    ],
    "TestCustomBucketsHistogramToFloat": [
      "h.String",
      "h.ToFloat",
      "fh.Validate",
      "require.Equal",
      "fh.String",
      "require.NoError",
      "h.Validate",
      "t.Run"
    ],
    "TestCustomDo": [
      "h.sendOne",
      "context.Background",
      "require.True",
      "NewManager",
      "io.ReadAll",
      "require.NoError",
      "req.URL.String",
      "io.NopCloser",
      "require.Equal",
      "string",
      "bytes.NewBuffer"
    ],
    "TestCuttingNewHeadChunks": [
      "len",
      "require.NoError",
      "h.Appender",
      "a.Append",
      "a.Commit",
      "tc.floatValFunc",
      "tc.histValFunc",
      "p.Next",
      "make",
      "require.Len",
      "context.Background",
      "newTestHead",
      "idxReader.Series",
      "h.Close",
      "h.Index",
      "chkReader.ChunkOrIterable",
      "require.Equal",
      "t.Run",
      "h.Chunks",
      "idxReader.Postings",
      "p.At",
      "chk.NumSamples",
      "chk.Bytes",
      "labels.FromStrings",
      "histogram.GenerateBigTestHistograms",
      "int64",
      "a.AppendHistogram",
      "require.Nil"
    ],
    "TestDBAllowOOOSamples": [
      "labelsForTest",
      "t.Name",
      "app.Commit",
      "context.Background",
      "int64",
      "app.AppendExemplar",
      "app.AppendHistogram",
      "tsdbutil.GenerateTestCustomBucketsHistograms",
      "db.Appender",
      "float64",
      "?.Counter.GetValue",
      "filepath.Dir",
      "Open",
      "t.Fatalf",
      "s.Appender",
      "tsdbutil.GenerateTestCustomBucketsFloatHistograms",
      "s.Close",
      "require.NoError",
      "tsdbutil.GenerateTestFloatHistograms",
      "require.Equal",
      "tsdbutil.GenerateTestHistograms",
      "prometheus.NewRegistry",
      "DefaultOptions",
      "createTestAgentDB",
      "context.TODO",
      "labels.New",
      "app.Append",
      "db.Close",
      "gatherFamily",
      "s.wal.Dir"
    ],
    "TestDBAppenderAddRef": [
      "openTestDB",
      "require.Equal",
      "require.NoError",
      "app1.Append",
      "app1.Commit",
      "app2.Append",
      "db.Querier",
      "context.Background",
      "query",
      "labels.MustNewMatcher",
      "?.String",
      "db.Close",
      "db.Appender",
      "labels.FromStrings",
      "labels.EmptyLabels",
      "require.ErrorIs",
      "app2.Commit"
    ],
    "TestDBCannotSeePartialCommits": [
      "labels.MustNewMatcher",
      "db.Close",
      "make",
      "int64",
      "app.Commit",
      "expandSeriesSet",
      "require.Equal",
      "Open",
      "require.NoError",
      "labels.FromStrings",
      "strconv.Itoa",
      "close",
      "db.Querier",
      "querier.Select",
      "len",
      "t.Skip",
      "context.Background",
      "db.Appender",
      "app.Append",
      "float64",
      "querier.Close",
      "require.Empty",
      "t.TempDir"
    ],
    "TestDBCreatedTimestampSamplesIngestion": [
      "prometheus.NewRegistry",
      "app.AppendCTZeroSample",
      "app.Commit",
      "s.wal.Dir",
      "t.Run",
      "DefaultOptions",
      "errors.Is",
      "reg.Gather",
      "require.Equal",
      "t.Parallel",
      "context.TODO",
      "app.Append",
      "t.Fatalf",
      "require.Len",
      "s.Close",
      "readWALSamples",
      "len",
      "expectedSample.lbls.String",
      "labels.New",
      "labelsForTest",
      "t.Name",
      "createTestAgentDB",
      "app.AppendHistogram",
      "f.GetName",
      "tsdbutil.GenerateTestHistograms",
      "s.Appender",
      "app.AppendHistogramCTZeroSample",
      "require.NoError",
      "sample.lbls.String"
    ],
    "TestDBOutOfOrderTimeWindow": [
      "s.Appender",
      "t.Name",
      "require.NoError",
      "?.Counter.GetValue",
      "require.Equal",
      "t.Run",
      "fmt.Sprintf",
      "require.ErrorIs",
      "float64",
      "s.Close",
      "createTestAgentDB",
      "labels.New",
      "app.Commit",
      "app.Append",
      "app.AppendHistogram",
      "tsdbutil.GenerateTestHistograms",
      "gatherFamily",
      "prometheus.NewRegistry",
      "DefaultOptions",
      "context.TODO",
      "labelsForTest"
    ],
    "TestDBPanicOnMmappingHeadChunk": [
      "db.Appender",
      "addSamples",
      "db.Compact",
      "context.Background",
      "DefaultOptions",
      "app.Append",
      "require.Len",
      "require.NoError",
      "int64",
      "labels.FromStrings",
      "float64",
      "require.Empty",
      "db.Blocks",
      "db.Close",
      "t.TempDir",
      "Open",
      "db.DisableCompactions",
      "app.Commit",
      "int"
    ],
    "TestDBQueryDoesntSeeAppendsAfterCreation": [
      "t.TempDir",
      "require.Empty",
      "db.Appender",
      "app.Append",
      "querierAfterAddButBeforeCommit.Close",
      "labels.MustNewMatcher",
      "app.Commit",
      "t.Skip",
      "Open",
      "db.Querier",
      "querierBeforeAdd.Close",
      "labels.FromStrings",
      "querierBeforeAdd.Select",
      "require.Equal",
      "querierAfterCommit.Select",
      "require.NoError",
      "db.Close",
      "context.Background",
      "expandSeriesSet",
      "querierAfterAddButBeforeCommit.Select",
      "querierAfterCommit.Close"
    ],
    "TestDBReadOnly": [
      "len",
      "dbReadOnly.Querier",
      "createHead",
      "testutil.DirHash",
      "require.Len",
      "fileutil.DirSize",
      "dbReadOnly.Blocks",
      "dbReadOnly.Block",
      "expBlock.Meta",
      "?.Meta",
      "require.Error",
      "?.ULID.String",
      "require.NoError",
      "Open",
      "query",
      "app.Append",
      "dbWritable.Head",
      "require.Equal",
      "dbReadOnly.ChunkQuerier",
      "t.TempDir",
      "filepath.Join",
      "h.Close",
      "dbWritable.Appender",
      "?.MaxTime",
      "require.Greater",
      "dbReadOnly.LastBlockID",
      "promslog.New",
      "createBlock",
      "wlog.New",
      "dbWritable.Blocks",
      "OpenDBReadOnly",
      "block.Meta",
      "labels.MustNewMatcher",
      "dbWritable.DisableCompactions",
      "labels.FromStrings",
      "queryAndExpandChunks",
      "dbReadOnly.Close",
      "genSeries",
      "dbWritable.Dir",
      "context.Background",
      "dbWritable.Close",
      "t.Run",
      "expBlock.meta.ULID.String",
      "app.Commit",
      "dbWritable.Querier",
      "dbWritable.ChunkQuerier"
    ],
    "TestDBReadOnlyClosing": [
      "OpenDBReadOnly",
      "promslog.New",
      "require.NoError",
      "db.Close",
      "require.NoDirExists",
      "require.Equal",
      "db.Blocks",
      "t.TempDir",
      "require.DirExists",
      "db.Querier"
    ],
    "TestDBReadOnly_FlushWAL": [
      "series.Err",
      "promslog.New",
      "labels.FromStrings",
      "db.Close",
      "OpenDBReadOnly",
      "series.At",
      "seriesSet.Warnings",
      "t.TempDir",
      "Open",
      "app.Commit",
      "db.Appender",
      "db.Querier",
      "querier.Close",
      "querier.Select",
      "require.Empty",
      "require.Equal",
      "app.Append",
      "require.Len",
      "?.Iterator",
      "series.Next",
      "require.NoError",
      "db.FlushWAL",
      "labels.MustNewMatcher",
      "seriesSet.At",
      "int64",
      "db.Blocks",
      "seriesSet.Next",
      "context.Background",
      "db.DisableCompactions",
      "seriesSet.Err"
    ],
    "TestDBReadOnly_Querier_NoAlteration": [
      "db.Close",
      "Open",
      "db.Appender",
      "db.ForceHeadMMap",
      "dirHash",
      "dbReadOnly.Querier",
      "t.Run",
      "os.Create",
      "require.Equal",
      "int64",
      "app.Commit",
      "len",
      "testutil.DirHash",
      "t.TempDir",
      "dbReadOnly.Close",
      "mmappedChunksDir",
      "require.NoError",
      "OpenDBReadOnly",
      "labels.FromStrings",
      "require.NotPanics",
      "path.Join",
      "chunk.Close",
      "os.ReadDir",
      "q.Close",
      "context.Background",
      "countChunks",
      "openTestDB",
      "app.Append",
      "spinUpQuerierAndCheck"
    ],
    "TestDB_InvalidSeries": [
      "tsdbutil.GenerateTestHistograms",
      "labels.EmptyLabels",
      "context.Background",
      "require.ErrorIs",
      "app.AppendHistogram",
      "labels.FromStrings",
      "require.NoError",
      "s.Appender",
      "t.Run",
      "app.Append",
      "createTestAgentDB",
      "s.Close",
      "app.AppendExemplar",
      "DefaultOptions",
      "require.EqualError"
    ],
    "TestDB_LabelNames": [
      "db.head.Index",
      "db.Blocks",
      "b.Index",
      "blockIndexr.LabelNames",
      "db.Querier",
      "app.Append",
      "t.Run",
      "headIndexr.LabelNames",
      "db.Compact",
      "require.Empty",
      "require.NoError",
      "appendSamples",
      "openTestDB",
      "headIndexr.Close",
      "blockIndexr.Close",
      "q.LabelNames",
      "q.Close",
      "int64",
      "app.Commit",
      "db.Appender",
      "labels.FromStrings",
      "db.Close",
      "require.Equal",
      "context.Background",
      "t.Helper"
    ],
    "TestDB_Snapshot": [
      "db.Appender",
      "db.Snapshot",
      "Open",
      "labels.MustNewMatcher",
      "seriesSet.Err",
      "require.Equal",
      "app.Commit",
      "t.TempDir",
      "db.Querier",
      "series.Next",
      "series.Err",
      "?.Iterator",
      "seriesSet.At",
      "series.At",
      "openTestDB",
      "context.Background",
      "int64",
      "app.Append",
      "require.NoError",
      "require.Empty",
      "seriesSet.Warnings",
      "labels.FromStrings",
      "db.Close",
      "querier.Close",
      "querier.Select",
      "seriesSet.Next"
    ],
    "TestDB_SnapshotWithDelete": [
      "labels.FromStrings",
      "res.Warnings",
      "storage.ExpandSamples",
      "db.Close",
      "int64",
      "app.Append",
      "sres.Iterator",
      "make",
      "db.Delete",
      "q.Select",
      "len",
      "expss.Next",
      "labels.MustNewMatcher",
      "db.Snapshot",
      "storage.NewListSeries",
      "require.Empty",
      "expss.At",
      "sres.Labels",
      "app.Commit",
      "require.False",
      "res.Next",
      "append",
      "require.NoError",
      "context.Background",
      "db.Appender",
      "rand.Float64",
      "Open",
      "newDB.Close",
      "q.Close",
      "newMockSeriesSet",
      "require.Equal",
      "sexp.Labels",
      "openTestDB",
      "newDB.Querier",
      "sexp.Iterator",
      "t.Run",
      "t.TempDir",
      "res.At"
    ],
    "TestDB_Snapshot_ChunksOutsideOfCompactedRange": [
      "labels.FromStrings",
      "require.NoError",
      "db.Close",
      "Open",
      "series.Next",
      "openTestDB",
      "app.Commit",
      "db.Querier",
      "seriesSet.Next",
      "context.Background",
      "series.Err",
      "seriesSet.Err",
      "querier.Close",
      "require.Equal",
      "querier.Select",
      "app.Append",
      "require.Empty",
      "seriesSet.Warnings",
      "int64",
      "db.Appender",
      "t.TempDir",
      "labels.MustNewMatcher",
      "?.Iterator",
      "seriesSet.At",
      "series.At",
      "db.Snapshot",
      "db.head.maxTime.Sub"
    ],
    "TestDB_e2e": [
      "ss.Warnings",
      "openTestDB",
      "db.Appender",
      "rand.Float64",
      "x.Labels",
      "labels.New",
      "db.Close",
      "app.Append",
      "ss.Err",
      "ss.At",
      "int64",
      "rand.Int63n",
      "s.Matches",
      "q.Select",
      "len",
      "q.Close",
      "?.String",
      "labels.MustNewMatcher",
      "sort.Sort",
      "boundedSamples",
      "lset.String",
      "m.String",
      "ss.Next",
      "storage.ExpandSamples",
      "x.Iterator",
      "require.Empty",
      "require.Equal",
      "require.NoError",
      "append",
      "app.Commit",
      "db.Querier",
      "context.Background",
      "labels.Selector"
    ],
    "TestDB_reloadOrder": [
      "createBlock",
      "db.Blocks",
      "openTestDB",
      "require.NoError",
      "genSeries",
      "db.reloadBlocks",
      "require.Len",
      "require.Equal",
      "?.Meta",
      "db.Close",
      "db.Dir"
    ],
    "TestDNS": [
      "NewDiscovery",
      "t.Run",
      "tc.config.NewDiscovererMetrics",
      "t.Parallel",
      "metrics.Register",
      "sd.refresh",
      "require.Equal",
      "metrics.Unregister",
      "model.Duration",
      "net.IPv4",
      "discovery.NewRefreshMetrics",
      "require.NoError",
      "context.Background",
      "errors.New",
      "prometheus.NewRegistry"
    ],
    "TestDataAvailableOnlyAfterCommit": [
      "app.Append",
      "query",
      "app.Commit",
      "db.Appender",
      "require.NoError",
      "db.Close",
      "context.Background",
      "labels.FromStrings",
      "db.Querier",
      "labels.MustNewMatcher",
      "require.Equal",
      "openTestDB",
      "querier.Close"
    ],
    "TestDataMissingOnQueryDuringCompaction": [
      "require.Equal",
      "storage.SeriesRef",
      "require.NoError",
      "app.Commit",
      "wg.Add",
      "db.Blocks",
      "time.After",
      "labels.MustNewMatcher",
      "db.DisableCompactions",
      "context.Background",
      "make",
      "db.Querier",
      "db.Compact",
      "wg.Wait",
      "newTestDB",
      "db.Appender",
      "int64",
      "app.Append",
      "append",
      "wg.Done",
      "require.NotEmpty",
      "labels.FromStrings",
      "float64",
      "query"
    ],
    "TestDataNotAvailableAfterRollback": [
      "app.Append",
      "labels.FromStrings",
      "app.Rollback",
      "db.Querier",
      "labels.MustNewMatcher",
      "openTestDB",
      "db.Appender",
      "context.Background",
      "query",
      "require.Equal",
      "require.NoError",
      "db.Close",
      "querier.Close"
    ],
    "TestDebugHandler": [
      "http.NewRequest",
      "require.NoError",
      "handler.router.ServeHTTP",
      "require.Equal",
      "New",
      "handler.SetReady",
      "httptest.NewRecorder"
    ],
    "TestDecbufUvarintWithInvalidBuffer": [
      "realByteSlice",
      "encoding.NewDecbufUvarintAt",
      "require.Error",
      "db.Err"
    ],
    "TestDecodeWriteRequest": [
      "bytes.NewReader",
      "require.Equal",
      "buildWriteRequest",
      "require.NoError",
      "DecodeWriteRequest"
    ],
    "TestDecodeWriteV2Request": [
      "require.Equal",
      "buildV2WriteRequest",
      "promslog.NewNopLogger",
      "require.NoError",
      "DecodeWriteV2Request",
      "bytes.NewReader"
    ],
    "TestDecoder_Postings_WrongInput": [
      "?.DecodePostings",
      "require.Error"
    ],
    "TestDedupe": [
      "append",
      "time.Sleep",
      "promslog.New",
      "slog.New",
      "dlog.Info",
      "strings.Split",
      "buf.String",
      "Dedupe",
      "d.Stop",
      "require.Len"
    ],
    "TestDedupeConcurrent": [
      "require.NotPanics",
      "Dedupe",
      "promslog.New",
      "d.Stop",
      "dlog.With",
      "dlog1.With",
      "dlog2.With",
      "slog.New",
      "?.Info",
      "concurrentWriteFunc"
    ],
    "TestDelayedCompaction": [
      "db.Appender",
      "getTimeWhenCompactionDelayStarted",
      "t.Helper",
      "time.Now",
      "labels.FromStrings",
      "require.GreaterOrEqual",
      "db.head.MinTime",
      "db.cmtx.Lock",
      "db.CompactHead",
      "db.head.compactable",
      "db.DisableCompactions",
      "require.True",
      "time.Sleep",
      "require.Less",
      "compactAndCheck",
      "db.EnableCompactions",
      "prom_testutil.ToFloat64",
      "require.NoError",
      "db.Close",
      "app.Commit",
      "time.Since",
      "db.Compact",
      "context.Background",
      "t.Run",
      "openTestDB",
      "require.Eventually",
      "require.Equal",
      "t.Parallel",
      "app.Append",
      "NewRangeHead",
      "require.Greater",
      "waitUntilCompactedAndCheck",
      "db.cmtx.Unlock",
      "?.IsZero",
      "db.Head"
    ],
    "TestDelayedCompactionDoesNotBlockUnrelatedOps": [
      "promslog.NewNopLogger",
      "require.NoError",
      "db.head.compactable",
      "t.Parallel",
      "db.DisableCompactions",
      "db.Blocks",
      "context.Background",
      "app.Append",
      "t.TempDir",
      "createBlock",
      "db.Appender",
      "app.Commit",
      "require.Len",
      "labels.FromStrings",
      "require.True",
      "t.Run",
      "genSeries",
      "DefaultOptions",
      "open",
      "db.Close",
      "db.Compact"
    ],
    "TestDeleteCheckpoints": [
      "t.TempDir",
      "DeleteCheckpoints",
      "os.MkdirAll",
      "os.ReadDir",
      "require.Equal",
      "require.NoError",
      "filepath.Join",
      "append",
      "f.Name"
    ],
    "TestDeleteCompactionBlockAfterFailedReload": [
      "bootStrap",
      "path.Join",
      "blockDirs",
      "require.Equal",
      "db.Compact",
      "labels.FromStrings",
      "db.Dir",
      "db.Blocks",
      "db.reload",
      "len",
      "openTestDB",
      "require.Error",
      "context.Background",
      "require.NoError",
      "app.Commit",
      "db.DisableCompactions",
      "prom_testutil.ToFloat64",
      "createBlock",
      "genSeries",
      "db.Close",
      "t.Run",
      "os.RemoveAll",
      "db.Appender",
      "app.Append",
      "require.Len"
    ],
    "TestDeleteSimple": [
      "storage.NewListSeries",
      "require.Equal",
      "sres.Iterator",
      "openTestDB",
      "db.Close",
      "int64",
      "labels.FromStrings",
      "q.Select",
      "t.Run",
      "rand.Float64",
      "labels.MustNewMatcher",
      "append",
      "app.Append",
      "db.Querier",
      "len",
      "res.Next",
      "sexp.Labels",
      "db.Appender",
      "expss.Next",
      "require.Empty",
      "db.Delete",
      "storage.ExpandSamples",
      "context.Background",
      "make",
      "res.At",
      "sres.Labels",
      "res.Warnings",
      "expss.At",
      "require.NoError",
      "app.Commit",
      "newMockSeriesSet",
      "sexp.Iterator"
    ],
    "TestDeleteUntilCurMax": [
      "rand.Float64",
      "labels.FromStrings",
      "require.Equal",
      "res.Err",
      "res.Warnings",
      "hb.Appender",
      "make",
      "app.Append",
      "NewBlockQuerier",
      "res.At",
      "s.Iterator",
      "context.Background",
      "it.Next",
      "require.Empty",
      "exps.Iterator",
      "storage.ExpandSamples",
      "labels.MustNewMatcher",
      "require.NoError",
      "hb.Close",
      "int64",
      "app.Commit",
      "hb.Delete",
      "q.Select",
      "require.True",
      "newTestHead",
      "res.Next"
    ],
    "TestDelete_e2e": [
      "s.Matches",
      "q.Select",
      "ss.Next",
      "expSs.At",
      "ss.Err",
      "q.Close",
      "labels.Selector",
      "NewBlockQuerier",
      "?.Next",
      "context.Background",
      "deletedSamples",
      "?.Iterator",
      "sexp.Labels",
      "sexp.Iterator",
      "ss.Warnings",
      "int64",
      "rand.Float64",
      "make",
      "m.String",
      "newMockSeriesSet",
      "sres.Iterator",
      "newTestHead",
      "labels.New",
      "rand.Int63n",
      "append",
      "labels.MustNewMatcher",
      "sort.Sort",
      "sres.Labels",
      "storage.ExpandSamples",
      "?.String",
      "require.Empty",
      "hb.Appender",
      "app.Commit",
      "len",
      "expSs.Next",
      "require.Equal",
      "require.NoError",
      "app.Append",
      "hb.Delete",
      "storage.NewListSeries",
      "ss.At",
      "hb.Close"
    ],
    "TestDeletedIterator": [
      "require.Less",
      "it.At",
      "chunkenc.NewXORChunk",
      "chk.Iterator",
      "tr.InBounds",
      "require.NoError",
      "it.Err",
      "require.GreaterOrEqual",
      "make",
      "rand.Float64",
      "app.Append",
      "require.Equal",
      "chk.Appender",
      "int64",
      "it.Next"
    ],
    "TestDeletedIterator_WithSeek": [
      "chunkenc.NewXORChunk",
      "chk.Appender",
      "require.NoError",
      "make",
      "it.AtT",
      "int64",
      "float64",
      "app.Append",
      "chk.Iterator",
      "require.Equal",
      "it.Seek"
    ],
    "TestDeletedRuleMarkedStale": [
      "newGroup.Eval",
      "labels.FromStrings",
      "newGroup.CopyState",
      "st.Querier",
      "labels.NewMatcher",
      "querier.Select",
      "?.String",
      "NewGroupMetrics",
      "context.Background",
      "time.Unix",
      "math.Float64bits",
      "require.True",
      "value.IsStaleNaN",
      "teststorage.New",
      "st.Close",
      "NewRecordingRule",
      "require.NoError",
      "querier.Close",
      "readSeriesSet"
    ],
    "TestDeletedSamplesAndSeriesStillInWALAfterCheckpoint": [
      "newTestHead",
      "app.Append",
      "hb.Delete",
      "hb.Truncate",
      "hb.Close",
      "append",
      "require.Equal",
      "hb.Appender",
      "labels.FromStrings",
      "require.NoError",
      "app.Commit",
      "labels.MustNewMatcher",
      "w.Dir",
      "readTestWAL",
      "int64",
      "context.Background",
      "wlog.LastCheckpoint",
      "require.Fail"
    ],
    "TestDeletingTombstones": [
      "time.Now",
      "make",
      "stones.Get",
      "NewMemTombstones",
      "storage.SeriesRef",
      "rand.Int63n",
      "require.NoError",
      "require.Equal",
      "stones.DeleteTombstones",
      "require.Empty",
      "?.UnixNano",
      "dranges.Add",
      "stones.AddInterval"
    ],
    "TestDependenciesEdgeCases": [
      "buildDependencyMap",
      "require.True",
      "context.Background",
      "promslog.NewNopLogger",
      "t.Run",
      "NewGroup",
      "parser.ParseExpr",
      "NewRecordingRule",
      "depMap.isIndependent",
      "require.False",
      "require.NoError",
      "require.Empty"
    ],
    "TestDependencyMap": [
      "context.Background",
      "require.NoError",
      "require.Zero",
      "require.Len",
      "require.False",
      "require.Equal",
      "depMap.dependents",
      "depMap.isIndependent",
      "promslog.NewNopLogger",
      "NewRecordingRule",
      "NewAlertingRule",
      "NewGroup",
      "depMap.dependencies",
      "parser.ParseExpr",
      "labels.EmptyLabels",
      "buildDependencyMap"
    ],
    "TestDependencyMapUpdatesOnGroupUpdate": [
      "require.NoError",
      "require.NotEmpty",
      "len",
      "require.Empty",
      "g.Name",
      "require.NotEqual",
      "context.Background",
      "ruleManager.Update",
      "make",
      "buildDependencyMap",
      "require.Equal",
      "require.NotEmptyf",
      "depMap.dependents",
      "require.Zero",
      "require.Len",
      "NewManager",
      "promslog.NewNopLogger",
      "ruleManager.start",
      "ruleManager.Stop",
      "labels.EmptyLabels",
      "r.Name",
      "?.Name",
      "depMap.dependencies"
    ],
    "TestDependentRulesWithNonMetricExpression": [
      "require.NoError",
      "NewGroup",
      "buildDependencyMap",
      "require.False",
      "require.True",
      "promslog.NewNopLogger",
      "parser.ParseExpr",
      "NewAlertingRule",
      "labels.EmptyLabels",
      "depMap.isIndependent",
      "context.Background",
      "NewRecordingRule"
    ],
    "TestDeriv": [
      "promqltest.NewTestEngineWithOpts",
      "storage.Appender",
      "len",
      "teststorage.New",
      "engine.NewInstantQuery",
      "labels.FromStrings",
      "a.Append",
      "a.Commit",
      "query.Exec",
      "storage.Close",
      "require.NoError",
      "timestamp.Time",
      "result.Vector",
      "require.Len",
      "require.Equal",
      "context.Background"
    ],
    "TestDialContextWithRandomConnections": [
      "mdc.getCount",
      "tc.setup",
      "dc.dialContextFn",
      "createDialContextWithRoundRobinDNS",
      "time.Now",
      "require.Equal",
      "require.NotEqual",
      "t.Run",
      "len",
      "newMockDialContext",
      "rand.New",
      "rand.NewSource",
      "?.Unix",
      "require.NotNil",
      "context.Background",
      "require.NoError",
      "tc.check"
    ],
    "TestDigitalOceanSDRefresh": [
      "refreshMetrics.Unregister",
      "url.Parse",
      "d.refresh",
      "fmt.Sprintf",
      "discovery.NewRefreshMetrics",
      "metrics.Unregister",
      "promslog.NewNopLogger",
      "t.Run",
      "require.Equal",
      "require.NoError",
      "t.Cleanup",
      "metrics.Register",
      "NewDiscovery",
      "sdmock.Mock.Endpoint",
      "context.Background",
      "require.Len",
      "model.LabelValue",
      "sdmock.SetupTest",
      "cfg.NewDiscovererMetrics",
      "require.NotNil",
      "prometheus.NewRegistry"
    ],
    "TestDirLockerUsage": [
      "t.TempDir",
      "closer.Close",
      "os.WriteFile",
      "open",
      "prom_testutil.ToFloat64",
      "require.True",
      "os.IsNotExist",
      "float64",
      "os.Stat",
      "t.Run",
      "fmt.Sprintf",
      "NewDirLocker",
      "require.NoError",
      "require.Equal",
      "t.Helper",
      "promslog.NewNopLogger"
    ],
    "TestDirectIOFile": [
      "require.NoError",
      "enableDirectIO",
      "f.Fd",
      "t.TempDir",
      "os.OpenFile",
      "path.Join"
    ],
    "TestDirectIOWriter": [
      "w.Flush",
      "t.TempDir",
      "make",
      "os.OpenFile",
      "require.NoError",
      "f.Seek",
      "int64",
      "newDirectIOWriter",
      "currentFileOffset",
      "require.Empty",
      "require.Equal",
      "require.Len",
      "path.Join",
      "len",
      "byte",
      "w.Write",
      "directIORqmtsForTest",
      "t.Run",
      "os.ReadFile",
      "require.True",
      "require.Error",
      "require.False"
    ],
    "TestDisableAutoCompactions": [
      "openTestDB",
      "db.Close",
      "int64",
      "db.Blocks",
      "labels.FromStrings",
      "db.Appender",
      "app.Commit",
      "time.Sleep",
      "require.Empty",
      "db.EnableCompactions",
      "len",
      "require.NotEmpty",
      "require.NoError",
      "context.Background",
      "app.Append",
      "prom_testutil.ToFloat64",
      "require.Greater",
      "db.DisableCompactions"
    ],
    "TestDisableReshardOnRetry": [
      "context.Background",
      "onStoreCalled",
      "newHighestTimestampMetric",
      "m.Append",
      "m.lastSendTimestamp.Store",
      "newPool",
      "m.StoreSeries",
      "context.WithCancel",
      "newQueueManagerMetrics",
      "errors.New",
      "newEWMARate",
      "labels.EmptyLabels",
      "m.Start",
      "onStoredContext.Done",
      "require.Eventually",
      "?.Unix",
      "m.Stop",
      "time.Now",
      "m.shouldReshard",
      "createTimeseries",
      "model.Duration",
      "NewQueueManager",
      "time.After",
      "require.FailNow"
    ],
    "TestDiscoveredLabelsUpdate": [
      "model.Duration",
      "t1.hash",
      "labels.NewBuilder",
      "labels.EmptyLabels",
      "t2.DiscoveredLabels",
      "newTestScrapeMetrics",
      "make",
      "sp.sync",
      "require.Equal",
      "?.DiscoveredLabels"
    ],
    "TestDiscoverer": [
      "getMockConf",
      "prometheus.NewRegistry",
      "conf.NewDiscovererMetrics",
      "refreshMetrics.Unregister",
      "promslog.NewNopLogger",
      "discovery.NewRefreshMetrics",
      "require.NoError",
      "metrics.Register",
      "metrics.Unregister",
      "conf.NewDiscoverer"
    ],
    "TestDiscovererConfigs": [
      "context.WithCancel",
      "NewManager",
      "require.NotNil",
      "verifyPresence",
      "require.Len",
      "prometheus.NewRegistry",
      "discoveryManager.Run",
      "staticConfig",
      "pk",
      "context.Background",
      "cancel",
      "promslog.NewNopLogger",
      "NewTestMetrics",
      "discoveryManager.ApplyConfig",
      "discoveryManager.SyncCh",
      "verifySyncedPresence"
    ],
    "TestDiskFillingUpAfterDisablingOOO": [
      "t.Run",
      "testDiskFillingUpAfterDisablingOOO"
    ],
    "TestDockerSDRefresh": [
      "NewSDMock",
      "len",
      "require.NoError",
      "metrics.Register",
      "metrics.Unregister",
      "promslog.NewNopLogger",
      "fmt.Sprintf",
      "discovery.NewRefreshMetrics",
      "t.Run",
      "require.Equal",
      "sdmock.Endpoint",
      "context.Background",
      "require.Len",
      "sdmock.Setup",
      "yaml.Unmarshal",
      "prometheus.NewRegistry",
      "cfg.NewDiscovererMetrics",
      "refreshMetrics.Unregister",
      "NewDockerDiscovery",
      "d.refresh",
      "require.NotNil",
      "sortFunc"
    ],
    "TestDockerSDRefreshMatchAllNetworks": [
      "promslog.NewNopLogger",
      "context.Background",
      "d.refresh",
      "sortFunc",
      "sdmock.Endpoint",
      "require.NoError",
      "metrics.Unregister",
      "yaml.Unmarshal",
      "cfg.NewDiscovererMetrics",
      "NewDockerDiscovery",
      "require.Equal",
      "NewSDMock",
      "len",
      "fmt.Sprintf",
      "t.Run",
      "sdmock.Setup",
      "prometheus.NewRegistry",
      "discovery.NewRefreshMetrics",
      "require.NotNil",
      "metrics.Register",
      "refreshMetrics.Unregister",
      "require.Len"
    ],
    "TestDockerSwarmNodesSDRefresh": [
      "prometheus.NewRegistry",
      "NewDiscovery",
      "model.LabelValue",
      "t.Run",
      "sdmock.Setup",
      "sdmock.Endpoint",
      "len",
      "yaml.Unmarshal",
      "refreshMetrics.Unregister",
      "context.Background",
      "require.NotNil",
      "require.Equal",
      "fmt.Sprintf",
      "discovery.NewRefreshMetrics",
      "cfg.NewDiscovererMetrics",
      "metrics.Unregister",
      "d.refresh",
      "require.Len",
      "NewSDMock",
      "require.NoError",
      "metrics.Register",
      "promslog.NewNopLogger"
    ],
    "TestDockerSwarmSDServicesRefresh": [
      "sdmock.Setup",
      "len",
      "context.Background",
      "d.refresh",
      "model.LabelValue",
      "fmt.Sprintf",
      "refreshMetrics.Unregister",
      "require.NotNil",
      "NewSDMock",
      "require.NoError",
      "yaml.Unmarshal",
      "NewDiscovery",
      "require.Equal",
      "metrics.Unregister",
      "promslog.NewNopLogger",
      "require.Len",
      "sdmock.Endpoint",
      "prometheus.NewRegistry",
      "discovery.NewRefreshMetrics",
      "cfg.NewDiscovererMetrics",
      "metrics.Register",
      "t.Run"
    ],
    "TestDockerSwarmSDServicesRefreshWithFilters": [
      "require.NoError",
      "discovery.NewRefreshMetrics",
      "metrics.Unregister",
      "NewDiscovery",
      "context.Background",
      "NewSDMock",
      "sdmock.Endpoint",
      "yaml.Unmarshal",
      "cfg.NewDiscovererMetrics",
      "require.Equal",
      "d.refresh",
      "require.Len",
      "require.NotNil",
      "len",
      "fmt.Sprintf",
      "prometheus.NewRegistry",
      "metrics.Register",
      "promslog.NewNopLogger",
      "model.LabelValue",
      "sdmock.Setup",
      "refreshMetrics.Unregister",
      "t.Run"
    ],
    "TestDockerSwarmTasksSDRefresh": [
      "NewSDMock",
      "cfg.NewDiscovererMetrics",
      "NewDiscovery",
      "promslog.NewNopLogger",
      "model.LabelValue",
      "require.NoError",
      "prometheus.NewRegistry",
      "metrics.Register",
      "refreshMetrics.Unregister",
      "context.Background",
      "sdmock.Endpoint",
      "yaml.Unmarshal",
      "discovery.NewRefreshMetrics",
      "require.Equal",
      "t.Run",
      "sdmock.Setup",
      "len",
      "fmt.Sprintf",
      "metrics.Unregister",
      "d.refresh",
      "require.Len",
      "require.NotNil"
    ],
    "TestDocumentation": [
      "t.SkipNow",
      "context.Background",
      "cancel",
      "filepath.Base",
      "context.WithTimeout",
      "errors.As",
      "strings.TrimSuffix",
      "require.NoError",
      "exec.CommandContext",
      "cmd.Run",
      "exitError.ExitCode",
      "fmt.Println",
      "os.ReadFile",
      "require.Equal",
      "string",
      "t.Parallel",
      "strings.ReplaceAll",
      "stdout.String",
      "filepath.Join",
      "os.ReadFile",
      "cmd.Run",
      "t.Parallel",
      "context.WithTimeout",
      "exec.CommandContext",
      "fmt.Println",
      "filepath.Join",
      "string",
      "t.SkipNow",
      "exitError.ExitCode",
      "strings.ReplaceAll",
      "cancel",
      "errors.As",
      "stdout.String",
      "filepath.Base",
      "strings.TrimSuffix",
      "require.NoError",
      "require.Equal",
      "context.Background"
    ],
    "TestDropOldTimeSeries": [
      "newTestQueueManager",
      "m.Start",
      "m.Stop",
      "t.Run",
      "fmt.Sprint",
      "c.expectSamples",
      "m.StoreSeries",
      "m.Append",
      "c.waitForExpectedData",
      "createTimeseriesWithOldSamples",
      "NewTestWriteClient",
      "model.Duration"
    ],
    "TestDroppedAlertmanagers": [
      "NewManager",
      "yaml.UnmarshalStrict",
      "require.NoError",
      "n.ApplyConfig",
      "make",
      "cfg.AlertingConfig.AlertmanagerConfigs.ToMap",
      "n.DroppedAlertmanagers",
      "require.Len",
      "n.reload",
      "?.String",
      "require.Equal"
    ],
    "TestDroppedTargetsList": [
      "require.Equal",
      "newScrapePool",
      "sp.Sync",
      "newTestScrapeMetrics",
      "require.Len",
      "labels.NewBuilder",
      "labels.EmptyLabels",
      "?.String",
      "?.DiscoveredLabels",
      "model.Duration",
      "relabel.MustNewRegexp"
    ],
    "TestDuplicateNaNDatapointNoAmendError": [
      "openTestDB",
      "require.NoError",
      "db.Close",
      "app.Append",
      "labels.FromStrings",
      "context.Background",
      "db.Appender",
      "math.NaN",
      "app.Commit"
    ],
    "TestDurationExprPretty": [
      "ParseExpr",
      "require.NoError",
      "require.Equal",
      "Prettify",
      "t.Cleanup",
      "t.Run"
    ],
    "TestDurationVisitor": [
      "require.True",
      "require.Equal",
      "t.Cleanup",
      "parser.ParseExpr",
      "require.NoError",
      "parser.Walk"
    ],
    "TestEC2DiscoveryRefresh": [
      "strptr",
      "int64ptr",
      "require.NoError",
      "require.Equal",
      "context.Background",
      "model.LabelValue",
      "boolptr",
      "t.Run",
      "newMockEC2Client",
      "d.refresh"
    ],
    "TestEC2DiscoveryRefreshAZIDs": [
      "newMockEC2Client",
      "d.refreshAZIDs",
      "require.Error",
      "require.NoError",
      "require.Equal",
      "context.Background",
      "t.Run"
    ],
    "TestElideSecrets": [
      "string",
      "secretRe.FindAllStringIndex",
      "require.Len",
      "require.NotContains",
      "LoadFile",
      "promslog.NewNopLogger",
      "require.NoError",
      "regexp.MustCompile",
      "yaml.Marshal"
    ],
    "TestEmptyConfig": [
      "Load",
      "promslog.NewNopLogger",
      "require.NoError",
      "require.Equal"
    ],
    "TestEmptyGlobalBlock": [
      "require.NoError",
      "require.Equal",
      "Load",
      "promslog.NewNopLogger"
    ],
    "TestEmptyLabelsetCausesError": [
      "openTestDB",
      "context.Background",
      "app.Append",
      "err.Error",
      "require.NoError",
      "db.Close",
      "db.Appender",
      "require.Error",
      "require.Equal"
    ],
    "TestEncodeDecode": [
      "require.Less",
      "Types",
      "NewConcurrentDecodeBuffer",
      "errors.New",
      "require.NotEmpty",
      "NewConcurrentEncodeBuffer",
      "t.Run",
      "Encode",
      "tcase.expectEncErr.Error",
      "NewSyncEncodeBuffer",
      "NewSyncDecodeBuffer",
      "require.NoError",
      "require.Equal",
      "string",
      "fmt.Sprintf",
      "require.ErrorContains",
      "len",
      "Decode"
    ],
    "TestEndpointSliceDiscoveryAdd": [
      "int32ptr",
      "protocolptr",
      "boolptr",
      "c.DiscoveryV1",
      "context.Background",
      "t.Parallel",
      "makeDiscovery",
      "?.Run",
      "strptr",
      "?.Create",
      "?.EndpointSlices",
      "types.UID"
    ],
    "TestEndpointSliceDiscoveryBeforeRun": [
      "?.Create",
      "?.EndpointSlices",
      "c.DiscoveryV1",
      "context.Background",
      "t.Parallel",
      "makeDiscovery",
      "?.Run",
      "makeEndpointSliceV1"
    ],
    "TestEndpointSliceDiscoveryDelete": [
      "t.Parallel",
      "makeDiscovery",
      "makeEndpointSliceV1",
      "?.Run",
      "?.Delete",
      "?.EndpointSlices",
      "c.DiscoveryV1",
      "context.Background"
    ],
    "TestEndpointSliceDiscoveryEmptyEndpoints": [
      "context.Background",
      "t.Parallel",
      "makeDiscovery",
      "makeEndpointSliceV1",
      "?.Run",
      "?.Update",
      "?.EndpointSlices",
      "c.DiscoveryV1"
    ],
    "TestEndpointSliceDiscoveryEmptyPodStatus": [
      "t.Parallel",
      "makeEndpointSliceV1",
      "types.UID",
      "makeDiscovery",
      "?.Run"
    ],
    "TestEndpointSliceDiscoveryNamespaces": [
      "strptr",
      "int32ptr",
      "protocolptr",
      "types.UID",
      "makeDiscovery",
      "?.Run",
      "t.Parallel",
      "makeEndpointSliceV1"
    ],
    "TestEndpointSliceDiscoveryOwnNamespace": [
      "podOne.DeepCopy",
      "makeDiscovery",
      "?.Run",
      "t.Parallel",
      "makeEndpointSliceV1",
      "types.UID"
    ],
    "TestEndpointSliceDiscoverySidecarContainer": [
      "makeDiscovery",
      "?.Run",
      "t.Parallel",
      "strptr",
      "int32ptr",
      "protocolptr",
      "types.UID"
    ],
    "TestEndpointSliceDiscoveryUpdate": [
      "t.Parallel",
      "makeDiscovery",
      "makeEndpointSliceV1",
      "?.Run",
      "?.Update",
      "?.EndpointSlices",
      "c.DiscoveryV1",
      "context.Background"
    ],
    "TestEndpointSliceDiscoveryWithService": [
      "makeEndpointSliceV1",
      "?.Run",
      "?.Create",
      "?.Services",
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "makeDiscovery"
    ],
    "TestEndpointSliceDiscoveryWithServiceUpdate": [
      "c.CoreV1",
      "?.Update",
      "t.Parallel",
      "makeEndpointSliceV1",
      "?.Run",
      "context.Background",
      "makeDiscovery",
      "?.Create",
      "?.Services"
    ],
    "TestEndpointSliceInfIndexersCount": [
      "makeDiscovery",
      "require.Len",
      "?.endpointSliceInf.GetIndexer",
      "n.RUnlock",
      "?.GetIndexers",
      "t.Parallel",
      "t.Run",
      "makeDiscoveryWithMetadata",
      "?.Run",
      "n.RLock"
    ],
    "TestEndpoints": [
      "al.Set",
      "t.TempDir",
      "remote.ApplyConfig",
      "storage.AppendExemplar",
      "t.Run",
      "testTargetRetriever.toFactory",
      "context.Background",
      "setupTestTargetRetriever",
      "setupRemote",
      "promslog.NewFormat",
      "promslog.New",
      "storage.Close",
      "start.Add",
      "require.NoError",
      "time.Now",
      "promslog.NewLevel",
      "model.Duration",
      "algr.toFactory",
      "url.Parse",
      "remote.NewStorage",
      "labels.FromStrings",
      "algr.RuleGroups",
      "server.Close",
      "?.Eval",
      "?.toFactory",
      "t.Cleanup",
      "testEngine",
      "algr.CreateRuleGroups",
      "algr.CreateAlertingRules",
      "storage.ExemplarQueryable",
      "testEndpoints",
      "af.Set",
      "promqltest.LoadedStorage",
      "time.Unix",
      "timestamp.FromTime"
    ],
    "TestEndpointsDiscoveryAdd": [
      "?.Run",
      "?.Create",
      "?.Endpoints",
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "types.UID",
      "makeDiscovery"
    ],
    "TestEndpointsDiscoveryBeforeRun": [
      "makeDiscovery",
      "?.Run",
      "makeEndpoints",
      "?.Create",
      "?.Endpoints",
      "c.CoreV1",
      "context.Background",
      "t.Parallel"
    ],
    "TestEndpointsDiscoveryDelete": [
      "?.Delete",
      "?.Endpoints",
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "makeDiscovery",
      "makeEndpoints",
      "?.Run"
    ],
    "TestEndpointsDiscoveryEmptyPodStatus": [
      "t.Parallel",
      "makeEndpoints",
      "types.UID",
      "makeDiscovery",
      "?.Run"
    ],
    "TestEndpointsDiscoveryEmptySubsets": [
      "?.Endpoints",
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "makeDiscovery",
      "makeEndpoints",
      "?.Run",
      "?.Update"
    ],
    "TestEndpointsDiscoveryNamespaces": [
      "t.Parallel",
      "makeEndpoints",
      "types.UID",
      "makeDiscovery",
      "?.Run"
    ],
    "TestEndpointsDiscoveryOwnNamespace": [
      "t.Parallel",
      "makeEndpoints",
      "types.UID",
      "podOne.DeepCopy",
      "makeDiscovery",
      "?.Run"
    ],
    "TestEndpointsDiscoverySidecarContainer": [
      "types.UID",
      "makeDiscovery",
      "?.Run",
      "t.Parallel"
    ],
    "TestEndpointsDiscoveryUpdate": [
      "makeDiscovery",
      "makeEndpoints",
      "?.Run",
      "?.Update",
      "?.Endpoints",
      "c.CoreV1",
      "context.Background",
      "t.Parallel"
    ],
    "TestEndpointsDiscoveryUpdatePod": [
      "?.Run",
      "?.Update",
      "?.Pods",
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "types.UID",
      "makeDiscovery"
    ],
    "TestEndpointsDiscoveryWithNodeMetadata": [
      "makeDiscoveryWithMetadata",
      "makeEndpoints",
      "?.Run",
      "t.Parallel",
      "makeNode"
    ],
    "TestEndpointsDiscoveryWithService": [
      "makeDiscovery",
      "makeEndpoints",
      "?.Run",
      "?.Create",
      "?.Services",
      "c.CoreV1",
      "context.Background",
      "t.Parallel"
    ],
    "TestEndpointsDiscoveryWithServiceUpdate": [
      "c.CoreV1",
      "makeDiscovery",
      "?.Services",
      "?.Run",
      "?.Create",
      "context.Background",
      "?.Update",
      "t.Parallel",
      "makeEndpoints"
    ],
    "TestEndpointsDiscoveryWithUpdatedNodeMetadata": [
      "context.Background",
      "t.Parallel",
      "makeNode",
      "makeDiscoveryWithMetadata",
      "makeEndpoints",
      "?.Run",
      "?.Update",
      "?.Nodes",
      "c.CoreV1"
    ],
    "TestEndpointsSlicesDiscoveryWithNodeMetadata": [
      "makeEndpointSliceV1",
      "makeNode",
      "makeDiscoveryWithMetadata",
      "?.Run",
      "t.Parallel"
    ],
    "TestEndpointsSlicesDiscoveryWithUpdatedNodeMetadata": [
      "c.CoreV1",
      "makeNode",
      "makeEndpointSliceV1",
      "makeDiscoveryWithMetadata",
      "?.Run",
      "?.Update",
      "?.Nodes",
      "context.Background",
      "t.Parallel"
    ],
    "TestEngineEvalStmtTimestamps": [
      "require.Equal",
      "time.Unix",
      "labels.FromStrings",
      "engine.NewRangeQuery",
      "qry.Exec",
      "require.Error",
      "t.Cleanup",
      "labels.EmptyLabels",
      "t.Run",
      "engine.NewInstantQuery",
      "promqltest.LoadedStorage",
      "fmt.Sprintf",
      "context.Background",
      "require.NoError",
      "storage.Close",
      "newTestEngine"
    ],
    "TestEngineOptsValidation": [
      "eng.NewRangeQuery",
      "require.Equal",
      "require.NoError",
      "promqltest.NewTestEngineWithOpts",
      "eng.NewInstantQuery",
      "context.Background",
      "time.Unix"
    ],
    "TestEngineShutdown": [
      "promqltest.NewTestEngineWithOpts",
      "cancelCtx",
      "require.ErrorAs",
      "engine.NewTestQuery",
      "query1.Exec",
      "require.Error",
      "require.Equal",
      "context.WithCancel",
      "context.Background",
      "make",
      "contextDone",
      "require.FailNow",
      "query2.Exec"
    ],
    "TestEngine_Close": [
      "t.Run",
      "require.NoError",
      "ng.Close",
      "promql.NewEngine"
    ],
    "TestEqual": [
      "t.Errorf",
      "math.Float64frombits",
      "math.NaN",
      "t.Run",
      "fmt.Sprintf",
      "Equal"
    ],
    "TestEqualMultiStringMapMatcher_addPrefix": [
      "matcher.addPrefix",
      "t.Run",
      "newEqualMultiStringMatcher",
      "require.Panics"
    ],
    "TestEqualMultiStringMatcher_Matches": [
      "require.False",
      "len",
      "newEqualMultiStringMatcher",
      "matcher.add",
      "panic",
      "t.Run",
      "matcher.addPrefix",
      "require.True",
      "matcher.Matches"
    ],
    "TestErrDuplicateSampleForTimestamp": [
      "require.NotErrorIs",
      "fmt.Errorf",
      "require.ErrorIs",
      "NewDuplicateFloatErr"
    ],
    "TestErrReuseAppender": [
      "head.Appender",
      "app.Append",
      "require.Error",
      "app.Rollback",
      "newTestHead",
      "require.NoError",
      "head.Close",
      "context.Background",
      "labels.FromStrings",
      "app.Commit"
    ],
    "TestError": [
      "errors.New",
      "t.Run",
      "require.EqualError"
    ],
    "TestErrorInitClient": [
      "require.ErrorContains",
      "fmt.Sprintf",
      "getMockConfFromString",
      "createClient"
    ],
    "TestErrorUnwrap": [
      "errors.New",
      "t.Run",
      "tt.wrappedError.Error",
      "require.ErrorIs"
    ],
    "TestEscape": [
      "model.LabelValue",
      "require.Equal",
      "escape"
    ],
    "TestEurekaSDEmptyList": [
      "w.WriteHeader",
      "?.Set",
      "w.Header",
      "io.WriteString",
      "testUpdateServices",
      "require.NoError",
      "require.Len"
    ],
    "TestEurekaSDHandleError": [
      "w.WriteHeader",
      "?.Set",
      "w.Header",
      "io.WriteString",
      "testUpdateServices",
      "require.EqualError",
      "require.Empty"
    ],
    "TestEurekaSDSendGroup": [
      "require.Len",
      "require.Equal",
      "w.WriteHeader",
      "?.Set",
      "w.Header",
      "io.WriteString",
      "testUpdateServices",
      "require.NoError",
      "model.LabelValue"
    ],
    "TestEvaluationWithDelayedNameRemovalDisabled": [
      "promqltest.RunTest",
      "promqltest.NewTestEngineWithOpts"
    ],
    "TestEvaluations": [
      "promqltest.RunBuiltinTests",
      "newTestEngine"
    ],
    "TestEveryNTimes": [
      "context.Background",
      "require.NoError",
      "e.checkContext",
      "cancel",
      "require.EqualError",
      "context.Canceled.Error",
      "context.WithCancel"
    ],
    "TestExitCodes": [
      "exitError.Sys",
      "t.Parallel",
      "tool.Run",
      "require.Equal",
      "append",
      "errors.As",
      "exec.Command",
      "require.NoError",
      "require.Error",
      "status.ExitStatus",
      "t.Errorf",
      "t.Skip",
      "t.Run",
      "testing.Short",
      "strconv.FormatBool"
    ],
    "TestExpandExternalLabels": [
      "os.Setenv",
      "LoadFile",
      "promslog.NewNopLogger",
      "require.NoError",
      "testutil.RequireEqual",
      "labels.FromStrings"
    ],
    "TestExponentialToNativeHistogram": [
      "validateNativeHistogramCount",
      "pcommon.NewTimestampFromTime",
      "?.SetOffset",
      "t.Run",
      "require.ErrorContains",
      "require.NoError",
      "tt.wantNativeHist",
      "pmetric.NewExponentialHistogramDataPoint",
      "pt.SetSum",
      "exponentialToNativeHistogram",
      "require.Equal",
      "validateExponentialHistogramCount",
      "require.Empty",
      "pt.SetTimestamp",
      "pt.SetCount",
      "pt.SetScale",
      "pt.SetZeroCount",
      "?.FromRaw",
      "?.BucketCounts",
      "pt.SetStartTimestamp",
      "time.UnixMilli",
      "pt.Positive",
      "pt.Negative",
      "tt.exponentialHist"
    ],
    "TestExprPretty": [
      "ParseExpr",
      "require.NoError",
      "require.Equal",
      "Prettify"
    ],
    "TestExprString": [
      "t.Run",
      "ParseExpr",
      "require.NoError",
      "require.Equal",
      "expr.String",
      "t.Cleanup"
    ],
    "TestExternalLabels": [
      "NewManager",
      "labels.FromStrings",
      "relabel.MustNewRegexp",
      "h.Send",
      "require.NoError",
      "alertsEqual"
    ],
    "TestExternalLabelsQuerierAddExternalLabels": [
      "labels.FromStrings",
      "q.addExternalLabels",
      "sort.Slice",
      "require.Equal",
      "labels.MustNewMatcher"
    ],
    "TestExtractQueryOpts": [
      "require.Equal",
      "require.NoError",
      "require.EqualError",
      "test.err.Error",
      "promql.NewPrometheusQueryOpts",
      "errors.New",
      "t.Run",
      "extractQueryOpts"
    ],
    "TestExtractSelectors": [
      "require.Equal",
      "ExtractSelectors",
      "ParseExpr",
      "require.NoError",
      "ParseMetricSelector",
      "append"
    ],
    "TestFailedStartupExitCode": [
      "testing.Short",
      "t.Parallel",
      "exec.Command",
      "require.Error",
      "t.Skip",
      "prom.Run",
      "require.ErrorAs",
      "exitError.Sys",
      "require.Equal",
      "status.ExitStatus"
    ],
    "TestFailuresCountMetric": [
      "string",
      "apierrors.NewUnauthorized",
      "float64",
      "prom_testutil.ToFloat64",
      "?.PrependWatchReactor",
      "c.Discovery",
      "t.Parallel",
      "t.Run",
      "makeDiscovery",
      "require.Equal",
      "?.Run",
      "require.GreaterOrEqual"
    ],
    "TestFanoutErrors": [
      "querier.Select",
      "context.Background",
      "ss.Err",
      "t.Run",
      "fanoutStorage.Querier",
      "ss.At",
      "workingStorage.Close",
      "querier.Close",
      "ss.Next",
      "tc.err.Error",
      "ss.Warnings",
      "w.AsErrors",
      "fanoutStorage.ChunkQuerier",
      "teststorage.New",
      "labels.MustNewMatcher",
      "require.EqualError",
      "require.NotEmpty",
      "tc.warning.Error",
      "t.Skip",
      "storage.NewFanout",
      "require.NoError"
    ],
    "TestFanout_SelectSorted": [
      "querier.Close",
      "remoteStorage2.Close",
      "remoteStorage2.Appender",
      "seriesSet.Next",
      "series.Iterator",
      "app1.Append",
      "priStorage.Close",
      "app3.Append",
      "app3.Commit",
      "labels.FromStrings",
      "series.Labels",
      "require.Len",
      "seriesSet.Err",
      "app2.Append",
      "labels.NewMatcher",
      "fanoutStorage.Querier",
      "app1.Commit",
      "make",
      "seriesSet.At",
      "iterator.Next",
      "require.Equal",
      "fanoutStorage.ChunkQuerier",
      "storage.NewSeriesSetFromChunkSeriesSet",
      "priStorage.Appender",
      "remoteStorage1.Close",
      "t.Run",
      "context.Background",
      "require.NoError",
      "remoteStorage1.Appender",
      "app2.Commit",
      "storage.NewFanout",
      "querier.Select",
      "iterator.At",
      "teststorage.New"
    ],
    "TestFastRegexMatcher_MatchString": [
      "append",
      "require.NoError",
      "require.Equal",
      "re.MatchString",
      "m.MatchString",
      "generateRandomValues",
      "t.Run",
      "readable",
      "t.Parallel",
      "NewFastRegexMatcher",
      "regexp.MustCompile"
    ],
    "TestFastRegexMatcher_SetMatches_ShouldReturnACopy": [
      "NewFastRegexMatcher",
      "require.NoError",
      "require.Equal",
      "m.SetMatches"
    ],
    "TestFederation": [
      "httptest.NewRequest",
      "httptest.NewRecorder",
      "normalizeBody",
      "promqltest.LoadedStorage",
      "storage.Close",
      "t.Run",
      "t.Cleanup",
      "h.federation",
      "require.Equal"
    ],
    "TestFederationWithNativeHistograms": [
      "labels.NewSymbolTable",
      "testutil.RequireEqual",
      "teststorage.New",
      "app.Append",
      "hist.Copy",
      "hist.ToFloat",
      "httptest.NewRecorder",
      "histWithoutZeroBucket.ToFloat",
      "httptest.NewRequest",
      "h.federation",
      "require.Nil",
      "storage.Close",
      "req.Header.Add",
      "p.Labels",
      "p.Histogram",
      "strconv.Itoa",
      "app.AppendHistogram",
      "labels.FromStrings",
      "require.NoError",
      "io.ReadAll",
      "textparse.NewProtobufParser",
      "t.Cleanup",
      "float64",
      "app.Commit",
      "p.Series",
      "db.Appender",
      "append",
      "require.Equal",
      "errors.Is",
      "context.Background",
      "histWithoutZeroBucket.Copy",
      "p.Next"
    ],
    "TestFederation_NotReady": [
      "t.Run",
      "httptest.NewRequest",
      "httptest.NewRecorder",
      "h.federation",
      "require.Equal"
    ],
    "TestFetchApps": [
      "require.NoError",
      "w.Header",
      "io.WriteString",
      "httptest.NewServer",
      "ts.Close",
      "context.TODO",
      "require.Len",
      "require.Equal",
      "w.WriteHeader",
      "?.Set",
      "http.HandlerFunc",
      "fetchApps"
    ],
    "TestFileUpdate": [
      "t.Parallel",
      "newTestRunner",
      "runner.copyFile",
      "runner.stop",
      "validTg",
      "runner.lastReceive",
      "runner.copyFileTo",
      "t.Skip",
      "runner.run",
      "runner.requireUpdate",
      "valid2Tg"
    ],
    "TestFilterExternalLabels": [
      "require.NoError",
      "s.ApplyConfig",
      "baseRemoteReadConfig",
      "require.Len",
      "require.Equal",
      "s.Close",
      "NewStorage",
      "labels.FromStrings",
      "?.externalLabels.Len",
      "t.TempDir",
      "require.Empty"
    ],
    "TestFilterOption": [
      "newDiscovery",
      "context.Background",
      "d.Run",
      "close",
      "checkOneTarget",
      "cancel",
      "newServer",
      "stub.Close",
      "context.WithCancel",
      "make"
    ],
    "TestFindEqualOrPrefixStringMatchers": [
      "t.Run",
      "findEqualOrPrefixStringMatchersAndCollectMatches",
      "require.False",
      "require.Empty",
      "require.True",
      "require.Equal",
      "findEqualOrPrefixStringMatchers",
      "append"
    ],
    "TestFindIntersectingPostings": [
      "require.Empty",
      "ErrPostings",
      "require.Error",
      "EmptyPostings",
      "sort.Ints",
      "FindIntersectingPostings",
      "require.NoError",
      "require.Equal",
      "t.Run",
      "NewListPostings"
    ],
    "TestFindSetMatches": [
      "require.NoError",
      "findSetMatches",
      "require.Equal",
      "NewFastRegexMatcher",
      "r.SetMatches",
      "t.Run",
      "t.Parallel",
      "syntax.Parse"
    ],
    "TestFirstFloatHistogramExplicitCounterReset": [
      "NewFloatHistogramChunk",
      "chk.Appender",
      "app.AppendFloatHistogram",
      "require.Nil",
      "require.Equal",
      "chk.GetCounterResetHeader",
      "assertFirstFloatHistogramSampleHint",
      "t.Run",
      "require.False",
      "require.NoError"
    ],
    "TestFirstHistogramExplicitCounterReset": [
      "t.Run",
      "require.NoError",
      "app.AppendHistogram",
      "require.Nil",
      "require.False",
      "assertFirstIntHistogramSampleHint",
      "NewHistogramChunk",
      "chk.Appender",
      "require.Equal",
      "chk.GetCounterResetHeader"
    ],
    "TestFloatBucketIteratorTargetSchema": [
      "h.floatBucketIterator",
      "require.True",
      "it.Next",
      "require.Equal",
      "it.At",
      "require.False"
    ],
    "TestFloatCustomBucketsIterators": [
      "c.h.AllReverseBucketIterator",
      "c.h.PositiveReverseBucketIterator",
      "c.h.AllBucketIterator",
      "require.False",
      "len",
      "c.h.PositiveBucketIterator",
      "c.h.floatBucketIterator",
      "strconv.Itoa",
      "require.True",
      "c.h.NegativeReverseBucketIterator",
      "math.Inf",
      "t.Run",
      "it.Next",
      "require.Equal",
      "it.At",
      "c.h.NegativeBucketIterator"
    ],
    "TestFloatHistogramAdd": [
      "t.Run",
      "testHistogramAdd"
    ],
    "TestFloatHistogramAppendOnlyErrors": [
      "require.Nil",
      "require.False",
      "h.Copy",
      "require.EqualError",
      "tsdbutil.GenerateTestCustomBucketsFloatHistogram",
      "require.NoError",
      "app.AppendFloatHistogram",
      "NewFloatHistogramChunk",
      "c.Appender",
      "tsdbutil.GenerateTestFloatHistogram",
      "t.Run",
      "Chunk"
    ],
    "TestFloatHistogramChunkAppendable": [
      "assertNoNewFloatHistogramChunkOnAppend",
      "require.True",
      "assertNewFloatHistogramChunkOnAppend",
      "int64",
      "h.Copy",
      "require.Nil",
      "?.GetCounterResetHeader",
      "setup",
      "hApp.appendable",
      "require.False",
      "require.NotEqual",
      "assertSampleCount",
      "make",
      "c.Appender",
      "eh.Copy",
      "nextChunk.Appender",
      "NewFloatHistogramChunk",
      "Chunk",
      "require.Equal",
      "require.NoError",
      "c.NumSamples",
      "require.NotEmpty",
      "require.Empty",
      "len",
      "app.AppendFloatHistogram",
      "h1.Copy",
      "assertRecodedFloatHistogramChunkOnAppend",
      "nextChunk.GetCounterResetHeader",
      "assertFirstFloatHistogramSampleHint"
    ],
    "TestFloatHistogramChunkAppendableGauge": [
      "require.NoError",
      "require.Equal",
      "int64",
      "app.AppendFloatHistogram",
      "require.Nil",
      "require.NotEmpty",
      "require.Empty",
      "assertNoNewFloatHistogramChunkOnAppend",
      "Chunk",
      "NewFloatHistogramChunk",
      "c.NumSamples",
      "h.Copy",
      "?.GetCounterResetHeader",
      "setup",
      "h1.Copy",
      "c.Appender",
      "hApp.appendableGauge",
      "require.False",
      "assertNewFloatHistogramChunkOnAppend",
      "require.True",
      "assertRecodedFloatHistogramChunkOnAppend"
    ],
    "TestFloatHistogramChunkAppendableWithEmptySpan": [
      "t.Run",
      "NewFloatHistogramChunk",
      "c.Appender",
      "require.Equal",
      "c.NumSamples",
      "app.AppendFloatHistogram",
      "Chunk",
      "require.NoError",
      "hApp.appendable",
      "require.Empty",
      "require.True",
      "require.False"
    ],
    "TestFloatHistogramChunkBucketChanges": [
      "hApp.appendable",
      "h2.ToFloat",
      "require.Nil",
      "require.NotEmpty",
      "require.Empty",
      "hApp.recode",
      "Chunk",
      "NewFloatHistogramChunk",
      "require.Equal",
      "c.NumSamples",
      "it.Next",
      "it.AtFloatHistogram",
      "it.Err",
      "require.NoError",
      "app.AppendFloatHistogram",
      "h1.ToFloat",
      "append",
      "require.False",
      "c.Iterator",
      "c.Appender",
      "int64",
      "h1.Copy",
      "require.True"
    ],
    "TestFloatHistogramChunkSameBuckets": [
      "h.ToFloat",
      "it4.AtFloatHistogram",
      "require.Nil",
      "append",
      "it.AtFloatHistogram",
      "int64",
      "it2.AtFloatHistogram",
      "it4.Seek",
      "c.iterator",
      "it3.Err",
      "len",
      "it4.Next",
      "require.Equal",
      "h.Copy",
      "c.Iterator",
      "it4.Err",
      "c.NumSamples",
      "it2.Next",
      "it2.Err",
      "app.AppendFloatHistogram",
      "it.Err",
      "it.Next",
      "itX.Next",
      "it3.Next",
      "NewFloatHistogramChunk",
      "c.Appender",
      "require.NoError",
      "it3.AtFloatHistogram"
    ],
    "TestFloatHistogramCompact": [
      "t.Run",
      "require.Equal",
      "c.in.Compact"
    ],
    "TestFloatHistogramCopy": [
      "make",
      "t.Run",
      "tcase.orig.Copy",
      "require.Equal",
      "assertDeepCopyFHSpans"
    ],
    "TestFloatHistogramCopyTo": [
      "make",
      "t.Run",
      "tcase.orig.CopyTo",
      "require.Equal",
      "assertDeepCopyFHSpans"
    ],
    "TestFloatHistogramCopyToSchema": [
      "require.Equal",
      "c.in.CopyToSchema",
      "t.Run",
      "c.in.Copy"
    ],
    "TestFloatHistogramDetectReset": [
      "t.Run",
      "require.Equal",
      "c.current.DetectReset"
    ],
    "TestFloatHistogramDiv": [
      "math.Inf",
      "t.Run",
      "require.Equal",
      "c.fh.Div"
    ],
    "TestFloatHistogramEquals": [
      "h2.Equals",
      "require.False",
      "h1.Copy",
      "math.NaN",
      "require.NoError",
      "cbh1.Copy",
      "require.True",
      "h1.Equals",
      "equals",
      "notEquals",
      "cbh1.Validate"
    ],
    "TestFloatHistogramMul": [
      "t.Run",
      "require.Equal",
      "c.in.Mul"
    ],
    "TestFloatHistogramReduceResolution": [
      "tc.origin.ReduceResolution",
      "require.Equal"
    ],
    "TestFloatHistogramSize": [
      "c.fh.Size",
      "t.Run",
      "require.Equal"
    ],
    "TestFloatHistogramString": [
      "t.Run",
      "require.NoError",
      "c.fh.Validate",
      "require.Equal",
      "c.fh.String"
    ],
    "TestFloatHistogramSub": [
      "t.Run",
      "testFloatHistogramSub",
      "?.Mul",
      "c.expected.Copy"
    ],
    "TestFloatHistogramUniqueCustomValuesAfterNext": [
      "app.AppendFloatHistogram",
      "c.Iterator",
      "it.Next",
      "it.AtFloatHistogram",
      "require.NotSame",
      "require.NoError",
      "NewFloatHistogramChunk",
      "c.Appender",
      "require.Equal",
      "h1.Copy"
    ],
    "TestFloatHistogramUniqueSpansAfterNext": [
      "h1.Copy",
      "require.NoError",
      "app.AppendFloatHistogram",
      "it.Next",
      "it.AtFloatHistogram",
      "require.NotSame",
      "NewFloatHistogramChunk",
      "c.Appender",
      "c.Iterator",
      "require.Equal"
    ],
    "TestForStateAddSamples": [
      "len",
      "rule.ActiveAlerts",
      "NewAlertingRule",
      "float64",
      "smpl.Metric.Get",
      "fmt.Sprintf",
      "labels.FromStrings",
      "aa.Labels.Get",
      "timestamp.FromTime",
      "storage.Close",
      "?.Add",
      "context.TODO",
      "require.Len",
      "sort.Slice",
      "rule.Eval",
      "labels.Compare",
      "queryOffset.String",
      "labels.EmptyLabels",
      "t.Logf",
      "evalTime.Add",
      "require.Empty",
      "promqltest.LoadedStorage",
      "append",
      "evalTime.Unix",
      "testEngine",
      "EngineQueryFunc",
      "require.Equal",
      "t.Cleanup",
      "parser.ParseExpr",
      "time.Unix",
      "prom_testutil.RequireEqual",
      "t.Run",
      "require.NoError",
      "baseTime.Add"
    ],
    "TestForStateRestore": [
      "promslog.NewNopLogger",
      "newRule.Restored",
      "context.TODO",
      "newRule.ActiveAlerts",
      "labels.Compare",
      "t.Run",
      "testEngine",
      "context.Background",
      "labels.EmptyLabels",
      "time.Unix",
      "require.Equal",
      "math.Abs",
      "aa.Labels.Get",
      "len",
      "labels.FromStrings",
      "make",
      "rule.ActiveAlerts",
      "tt.before",
      "require.Empty",
      "float64",
      "int64",
      "promqltest.LoadedStorage",
      "t.Cleanup",
      "storage.Close",
      "EngineQueryFunc",
      "?.Sub",
      "require.NoError",
      "?.Add",
      "newGroup.Eval",
      "require.Truef",
      "require.Len",
      "fmt.Sprintf",
      "parser.ParseExpr",
      "queryOffset.Seconds",
      "e.ActiveAt.Unix",
      "NewAlertingRule",
      "sort.Slice",
      "?.ActiveAt.Unix",
      "e.ActiveAt.Add",
      "sortAlerts",
      "queryOffset.String",
      "NewGroup",
      "baseTime.Add",
      "group.Eval",
      "newGroup.RestoreForState"
    ],
    "TestFromFloatToFloatHistogram": [
      "h.IsFloatHistogram",
      "h.ToIntHistogram",
      "writev2.FromFloatHistogram",
      "testFloatHistogram",
      "require.True",
      "require.Equal",
      "int64",
      "require.Nil",
      "h.ToFloatHistogram",
      "t.Run",
      "prompb.FromFloatHistogram"
    ],
    "TestFromIntOrFloatHistogram_ResetHint": [
      "t.Run",
      "prompb.FromIntHistogram",
      "got.GetResetHint",
      "testFloatHistogram",
      "testIntHistogram",
      "require.Equal",
      "prompb.FromFloatHistogram",
      "got2.GetResetHint",
      "writev2.FromIntHistogram",
      "writev2.FromFloatHistogram"
    ],
    "TestFromIntToFloatOrIntHistogram": [
      "testFloatHistogram",
      "h.IsFloatHistogram",
      "require.Equal",
      "h.ToIntHistogram",
      "t.Run",
      "testIntHistogram",
      "int64",
      "h.ToFloatHistogram",
      "writev2.FromIntHistogram",
      "prompb.FromIntHistogram",
      "require.False"
    ],
    "TestFromMetadataType": [
      "t.Run",
      "require.Equal",
      "prompb.FromMetadataType",
      "writev2.FromMetadataType"
    ],
    "TestFromMetrics": [
      "?.Attributes",
      "metrics.AppendEmpty",
      "m.SetName",
      "context.WithCancel",
      "ts.AsTime",
      "namer.Build",
      "?.UnixMilli",
      "require.Empty",
      "generateAttributes",
      "rm.ScopeMetrics",
      "point.SetDoubleValue",
      "createExportRequest",
      "rm.Resource",
      "require.Nil",
      "require.NotEmpty",
      "curTs.Add",
      "m.Description",
      "converter.Metadata",
      "m.ExponentialHistogram",
      "m.SetDescription",
      "otelMetricTypeToPromMetricType",
      "request.Metrics",
      "m.SetEmptyHistogram",
      "m.Unit",
      "time.Now",
      "converter.FromMetrics",
      "labels.NewScratchBuilder",
      "lbls.Get",
      "m.SetEmptyGauge",
      "t.Run",
      "pmetricotlp.NewExportRequest",
      "m.Histogram",
      "require.Equal",
      "?.AppendEmpty",
      "h.SetCount",
      "t.Cleanup",
      "payload.Metrics",
      "require.False",
      "?.SetAggregationTemporality",
      "require.ErrorIs",
      "m.SetEmptyExponentialHistogram",
      "context.Background",
      "fmt.Sprintf",
      "?.ResourceMetrics",
      "NewPrometheusConverter",
      "append",
      "require.Len",
      "m.SetUnit",
      "converter.TimeSeries",
      "annots.AsStrings",
      "?.PutStr",
      "m.Gauge",
      "point.Attributes",
      "?.Add",
      "?.DataPoints",
      "s.ToLabels",
      "?.Metrics",
      "h.SetSum",
      "context.WithTimeout",
      "point.SetTimestamp",
      "TranslatorMetricFromOtelMetric",
      "require.NoError",
      "lbls.Has",
      "pcommon.NewTimestampFromTime",
      "h.SetTimestamp",
      "h.Attributes",
      "cancel",
      "testutil.RequireEqual"
    ],
    "TestFromOriginContext": [
      "t.Run",
      "FromOriginContext",
      "context.Background",
      "require.Zero",
      "require.False"
    ],
    "TestFromQueryResultWithDuplicates": [
      "FromQueryResult",
      "require.True",
      "?.Error",
      "errSeries.Err",
      "require.Equalf"
    ],
    "TestFullTruncateWAL": [
      "int64",
      "app.Commit",
      "DefaultOptions",
      "require.NoError",
      "app.Append",
      "t.Name",
      "tsdbutil.GenerateTestCustomBucketsHistograms",
      "s.Close",
      "s.Appender",
      "context.TODO",
      "?.Gauge.GetValue",
      "prometheus.NewRegistry",
      "tsdbutil.GenerateTestCustomBucketsFloatHistograms",
      "gatherFamily",
      "tsdbutil.GenerateTestHistograms",
      "app.AppendHistogram",
      "tsdbutil.GenerateTestFloatHistograms",
      "s.truncate",
      "require.Equal",
      "createTestAgentDB",
      "labelsForTest",
      "labels.New",
      "float64"
    ],
    "TestFunctionList": [
      "require.True"
    ],
    "TestGCChunkAccess": [
      "require.NoError",
      "require.Len",
      "h.Truncate",
      "newTestHead",
      "h.getOrCreate",
      "require.True",
      "require.Equal",
      "h.chunksRange",
      "h.Close",
      "labels.FromStrings",
      "h.indexRange",
      "idx.Series",
      "cr.ChunkOrIterable",
      "h.initTime",
      "s.append",
      "require.False",
      "builder.Labels"
    ],
    "TestGCSeriesAccess": [
      "labels.FromStrings",
      "s.append",
      "require.True",
      "require.Len",
      "h.chunksRange",
      "newTestHead",
      "require.NoError",
      "idx.Series",
      "cr.ChunkOrIterable",
      "h.series.getByID",
      "require.False",
      "h.indexRange",
      "builder.Labels",
      "h.getOrCreate",
      "require.Equal",
      "h.Truncate",
      "h.Close",
      "h.initTime"
    ],
    "TestGaugeFailedConfigs": [
      "errors.New",
      "discoveryManager.ApplyConfig",
      "context.WithCancel",
      "discoveryManager.SyncCh",
      "staticConfig",
      "prometheus.NewRegistry",
      "NewTestMetrics",
      "NewManager",
      "promslog.NewNopLogger",
      "discoveryManager.Run",
      "client_testutil.ToFloat64",
      "require.Equal",
      "cancel",
      "require.NotNil",
      "context.Background"
    ],
    "TestGaugeFloatHistogramWALAndChunkHeader": [
      "t.Cleanup",
      "head.Init",
      "os.RemoveAll",
      "NewHead",
      "int64",
      "app.Commit",
      "head.chunkDiskMapper.Chunk",
      "len",
      "checkHeaders",
      "wlog.NewSize",
      "labels.FromStrings",
      "newTestHead",
      "head.Close",
      "head.Appender",
      "app.AppendHistogram",
      "head.mmapHeadChunks",
      "tsdbutil.GenerateTestGaugeFloatHistograms",
      "appendHistogram",
      "require.Len",
      "require.Equal",
      "readTestWAL",
      "require.NoError",
      "h.Copy",
      "l.Hash",
      "head.wal.Dir",
      "context.Background",
      "head.getOrCreate",
      "?.GetCounterResetHeader",
      "mmappedChunksDir"
    ],
    "TestGaugeHistogramWALAndChunkHeader": [
      "newTestHead",
      "head.getOrCreate",
      "require.Equal",
      "len",
      "t.Cleanup",
      "appendHistogram",
      "head.mmapHeadChunks",
      "l.Hash",
      "app.AppendHistogram",
      "require.NoError",
      "int64",
      "head.Appender",
      "tsdbutil.GenerateTestGaugeHistograms",
      "require.Len",
      "head.chunkDiskMapper.Chunk",
      "?.GetCounterResetHeader",
      "readTestWAL",
      "head.Close",
      "head.Init",
      "head.wal.Dir",
      "mmappedChunksDir",
      "wlog.NewSize",
      "labels.FromStrings",
      "context.Background",
      "h.Copy",
      "app.Commit",
      "checkHeaders",
      "os.RemoveAll",
      "NewHead"
    ],
    "TestGenerateBucket": [
      "t.Parallel",
      "generateBucket",
      "require.Equal"
    ],
    "TestGenerateChecksum": [
      "filepath.Join",
      "t.Run",
      "require.NoError",
      "os.WriteFile",
      "require.NotEqual",
      "require.Equal",
      "os.Remove",
      "t.TempDir",
      "calculateChecksum",
      "fmt.Sprintf"
    ],
    "TestGenerateCompactionDelay": [
      "time.Duration",
      "DefaultOptions",
      "openTestDB",
      "assertDelay",
      "db.generateCompactionDelay",
      "t.Helper",
      "require.GreaterOrEqual",
      "require.LessOrEqual",
      "require.NoError",
      "db.Close"
    ],
    "TestGenerateTargetGroups": [
      "model.LabelName",
      "model.LabelValue",
      "generateTargetGroups",
      "require.Equal"
    ],
    "TestGetBoundExponential": [
      "math.Inf",
      "getBoundExponential",
      "require.Equal"
    ],
    "TestGetBucketCountsAtTime": [
      "require.NoError",
      "require.Equal",
      "t.Parallel",
      "t.Run",
      "fmt.Sprintf",
      "getBucketCountsAtTime"
    ],
    "TestGetDatacenterShouldReturnError": [
      "w.WriteHeader",
      "http.HandlerFunc",
      "require.NoError",
      "newDiscovery",
      "d.getDatacenter",
      "require.Empty",
      "require.EqualError",
      "w.Write",
      "httptest.NewServer",
      "url.Parse",
      "model.Duration",
      "stub.Close"
    ],
    "TestGetGlobalURL": [
      "require.Error",
      "require.Equal",
      "url.Parse",
      "require.NoError",
      "mustParseURL",
      "t.Run",
      "fmt.Sprintf",
      "getGlobalURL"
    ],
    "TestGetPromExemplars": [
      "getPromExemplars",
      "float64",
      "require.Error",
      "?.AppendEmpty",
      "pt.Exemplars",
      "exemplar.SetTimestamp",
      "?.UnixNano",
      "context.Background",
      "exemplar.SetDoubleValue",
      "pcommon.Timestamp",
      "require.NoError",
      "require.Len",
      "require.Equal",
      "t.Run",
      "pmetric.NewNumberDataPoint",
      "time.Now",
      "exemplar.SetIntValue"
    ],
    "TestGetScrapeConfigs": [
      "require.ErrorContains",
      "require.Equal",
      "filepath.FromSlash",
      "promslog.NewNopLogger",
      "c.GetScrapeConfigs",
      "t.Run",
      "LoadFile",
      "require.NoError",
      "len",
      "boolPtr",
      "sc",
      "model.Duration"
    ],
    "TestGetScrapeConfigs_Loaded": [
      "t.Run",
      "c.GetScrapeConfigs",
      "require.EqualError",
      "Load",
      "promslog.NewNopLogger",
      "require.NoError"
    ],
    "TestGetSeries": [
      "assertAPIError",
      "byLabels",
      "testutil.RequireEqual",
      "t.Cleanup",
      "url.Parse",
      "require.NoError",
      "q.Encode",
      "context.Background",
      "labels.FromStrings",
      "tc.api.series",
      "req.WithContext",
      "storage.Close",
      "u.Query",
      "r.Header.Set",
      "request",
      "t.Run",
      "sort.Sort",
      "promqltest.LoadedStorage",
      "q.Add",
      "http.NewRequest",
      "u.String",
      "errors.New"
    ],
    "TestGroupHasAlertingRules": [
      "NewRecordingRule",
      "test.group.HasAlertingRules",
      "require.Equal",
      "NewAlertingRule",
      "labels.EmptyLabels"
    ],
    "TestGroupStalenessOnRemoval": [
      "require.Equal",
      "countStaleNaN",
      "ruleManager.start",
      "ruleManager.Update",
      "storage.Close",
      "require.NoError",
      "testing.Short",
      "teststorage.New",
      "NewManager",
      "EngineQueryFunc",
      "ruleManager.Stop",
      "t.Skip",
      "promqltest.NewTestEngineWithOpts",
      "labels.EmptyLabels",
      "time.Sleep",
      "context.Background",
      "promslog.NewNopLogger"
    ],
    "TestGroup_Equals": [
      "t.Run",
      "require.Equal",
      "testData.first.Equals",
      "testData.second.Equals"
    ],
    "TestGroup_Eval_RaceConditionOnStoppingGroupEvaluationWhileRulesAreEvaluatedConcurrently": [
      "teststorage.New",
      "t.Cleanup",
      "optsFactory",
      "ruleManager.Update",
      "labels.EmptyLabels",
      "ruleManager.Stop",
      "storage.Close",
      "NewManager",
      "ruleManager.Run",
      "require.NoError",
      "time.Sleep"
    ],
    "TestGroup_QueryOffset": [
      "labels.EmptyLabels",
      "m.RuleGroups",
      "?.QueryOffset",
      "time.Duration",
      "path.Join",
      "os.WriteFile",
      "require.NoError",
      "NewManager",
      "m.start",
      "?.Name",
      "m.Stop",
      "t.TempDir",
      "m.Update",
      "sort.Slice",
      "promslog.NewNopLogger",
      "require.Equal"
    ],
    "TestHCloudSDRefresh": [
      "require.Len",
      "t.Run",
      "require.Equal",
      "suite.Mock.Endpoint",
      "newHcloudDiscovery",
      "promslog.NewNopLogger",
      "require.NoError",
      "d.refresh",
      "context.Background",
      "require.NotNil",
      "model.LabelValue",
      "suite.SetupTest",
      "fmt.Sprintf"
    ],
    "TestHTTPInvalidCode": [
      "httptest.NewServer",
      "w.WriteHeader",
      "t.Cleanup",
      "require.NoError",
      "promslog.NewNopLogger",
      "require.EqualError",
      "refreshMetrics.Unregister",
      "NewDiscovery",
      "prometheus.NewRegistry",
      "discovery.NewRefreshMetrics",
      "cfg.NewDiscovererMetrics",
      "metrics.Register",
      "context.Background",
      "getFailureCount",
      "http.HandlerFunc",
      "model.Duration",
      "metrics.Unregister",
      "d.Refresh",
      "require.Equal"
    ],
    "TestHTTPInvalidFormat": [
      "t.Cleanup",
      "model.Duration",
      "promslog.NewNopLogger",
      "httptest.NewServer",
      "cfg.NewDiscovererMetrics",
      "metrics.Register",
      "metrics.Unregister",
      "require.EqualError",
      "require.Equal",
      "refreshMetrics.Unregister",
      "fmt.Fprintln",
      "context.Background",
      "getFailureCount",
      "http.HandlerFunc",
      "discovery.NewRefreshMetrics",
      "require.NoError",
      "NewDiscovery",
      "d.Refresh",
      "prometheus.NewRegistry"
    ],
    "TestHTTPMetrics": [
      "require.NoError",
      "handler.router.ServeHTTP",
      "http.NewRequest",
      "New",
      "getReady",
      "strconv.Itoa",
      "t.Parallel",
      "int",
      "require.Equal",
      "httptest.NewRecorder",
      "prom_testutil.ToFloat64",
      "counter.WithLabelValues",
      "handler.SetReady",
      "t.Helper"
    ],
    "TestHTTPResourceClientFetchEmptyResponse": [
      "require.NoError",
      "createTestHTTPResourceClient",
      "testHTTPResourceConfig",
      "cleanup",
      "client.Fetch",
      "context.Background",
      "require.Nil"
    ],
    "TestHTTPResourceClientFetchFullResponse": [
      "testHTTPResourceConfig",
      "cleanup",
      "context.Background",
      "require.NoError",
      "require.NotNil",
      "require.Equal",
      "client.ResourceTypeURL",
      "createTestHTTPResourceClient",
      "require.Nil",
      "require.Empty",
      "client.Fetch"
    ],
    "TestHTTPResourceClientServerError": [
      "client.Fetch",
      "context.Background",
      "require.Nil",
      "require.Error",
      "createTestHTTPResourceClient",
      "testHTTPResourceConfig",
      "errors.New",
      "cleanup"
    ],
    "TestHTTPValidRefresh": [
      "model.Duration",
      "cfg.NewDiscovererMetrics",
      "metrics.Register",
      "model.LabelName",
      "urlSource",
      "t.Cleanup",
      "prometheus.NewRegistry",
      "require.NoError",
      "NewDiscovery",
      "d.Refresh",
      "getFailureCount",
      "http.Dir",
      "model.LabelValue",
      "require.Equal",
      "context.Background",
      "httptest.NewServer",
      "http.FileServer",
      "discovery.NewRefreshMetrics",
      "refreshMetrics.Unregister",
      "metrics.Unregister",
      "promslog.NewNopLogger"
    ],
    "TestHandleMultipleQuitRequests": [
      "time.After",
      "testutil.RandomUnprivilegedPort",
      "context.Background",
      "time.Sleep",
      "strings.NewReader",
      "require.NoError",
      "cancel",
      "http.Post",
      "wg.Wait",
      "fmt.Sprintf",
      "webHandler.Listeners",
      "close",
      "wg.Done",
      "require.Equal",
      "require.FailNow",
      "New",
      "panic",
      "context.WithCancel",
      "make",
      "webHandler.Run",
      "wg.Add"
    ],
    "TestHandlerNextBatch": [
      "labels.FromStrings",
      "require.NoError",
      "h.nextBatch",
      "require.Empty",
      "len",
      "NewManager",
      "append",
      "strconv.Itoa",
      "alertsEqual",
      "make"
    ],
    "TestHandlerQueuing": [
      "require.FailNow",
      "http.HandlerFunc",
      "json.Unmarshal",
      "server.Close",
      "append",
      "httptest.NewServer",
      "io.ReadAll",
      "h.Send",
      "assertAlerts",
      "t.Helper",
      "time.After",
      "panic",
      "close",
      "NewManager",
      "h.Stop",
      "labels.FromStrings",
      "strconv.Itoa",
      "require.NoError",
      "make",
      "alertsEqual",
      "model.Duration",
      "h.Run"
    ],
    "TestHandlerRelabel": [
      "NewManager",
      "relabel.MustNewRegexp",
      "h.Send",
      "labels.FromStrings",
      "require.NoError",
      "alertsEqual"
    ],
    "TestHandlerSendAll": [
      "labels.FromStrings",
      "require.True",
      "int32",
      "config_util.NewClientFromConfig",
      "strconv.Itoa",
      "require.NoError",
      "require.False",
      "newTestHTTPServerBuilder",
      "model.Duration",
      "server2.Close",
      "append",
      "checkNoErr",
      "status1.Store",
      "status3.Store",
      "server1.Close",
      "server3.Close",
      "NewManager",
      "t.Helper",
      "h.sendAll",
      "make",
      "status2.Store"
    ],
    "TestHandlerSendAllRemapPerAm": [
      "newTestHTTPServerBuilder",
      "server2.Close",
      "checkNoErr",
      "status3.Store",
      "server3.Close",
      "NewManager",
      "append",
      "labels.FromStrings",
      "strconv.Itoa",
      "require.True",
      "?.mtx.Lock",
      "status2.Store",
      "?.mtx.Unlock",
      "relabel.MustNewRegexp",
      "t.Helper",
      "require.False",
      "model.Duration",
      "status1.Store",
      "int32",
      "server1.Close",
      "require.NoError",
      "h.sendAll",
      "make"
    ],
    "TestHangingNotifier": [
      "require.Len",
      "time.After",
      "url.Parse",
      "prometheus.NewRegistry",
      "sdManager.Run",
      "model.Duration",
      "discovery.RegisterSDMetrics",
      "require.Positive",
      "labels.FromStrings",
      "close",
      "context.WithCancel",
      "discovery.NewManager",
      "functionalURL.String",
      "notifier.Stop",
      "http.HandlerFunc",
      "notifier.Run",
      "functionalCalled.Load",
      "append",
      "notifier.Send",
      "len",
      "cancel",
      "discovery.Name",
      "discovery.Updatert",
      "faultyURL.String",
      "notifier.Alertmanagers",
      "make",
      "functionalCalled.Store",
      "sdManager.ApplyConfig",
      "notifier.queueLen",
      "sdManager.SyncCh",
      "httptest.NewServer",
      "faultyCalled.Store",
      "require.NoError",
      "discovery.NewRefreshMetrics",
      "promslog.NewNopLogger",
      "model.LabelValue",
      "context.Background",
      "NewManager",
      "strconv.Itoa",
      "t.Fatalf",
      "faultyCalled.Load"
    ],
    "TestHasPrefixCaseInsensitive": [
      "require.True",
      "hasPrefixCaseInsensitive",
      "require.False"
    ],
    "TestHasSuffixCaseInsensitive": [
      "require.True",
      "hasSuffixCaseInsensitive",
      "require.False"
    ],
    "TestHeadAppendHistogramAndCommitConcurrency": [
      "labels.FromStrings",
      "strconv.Itoa",
      "t.Run",
      "testHeadAppendHistogramAndCommitConcurrency",
      "tsdbutil.GenerateTestHistogram",
      "tsdbutil.GenerateTestFloatHistogram",
      "app.AppendHistogram"
    ],
    "TestHeadAppender_AppendCT": [
      "query",
      "t.Run",
      "newTestHead",
      "require.NoError",
      "a.AppendHistogram",
      "NewBlockQuerier",
      "tsdbutil.GenerateTestFloatHistogram",
      "a.Append",
      "require.Equal",
      "labels.FromStrings",
      "a.AppendCTZeroSample",
      "a.AppendHistogramCTZeroSample",
      "a.Commit",
      "labels.MustNewMatcher",
      "tsdbutil.GenerateTestHistogram",
      "h.Close",
      "h.Appender",
      "context.Background"
    ],
    "TestHeadAppender_AppendFloatWithSameTimestampAsPreviousHistogram": [
      "head.Appender",
      "context.Background",
      "require.NoError",
      "tsdbutil.GenerateTestHistogram",
      "app.AppendHistogram",
      "require.Error",
      "require.ErrorIs",
      "newTestHead",
      "labels.FromStrings",
      "app.Append",
      "storage.NewDuplicateHistogramToFloatErr",
      "t.Cleanup",
      "head.Close",
      "app.Commit"
    ],
    "TestHeadAppender_AppendHistogramCTZeroSample": [
      "require.ErrorIs",
      "a.AppendHistogram",
      "a.Commit",
      "require.NoError",
      "context.Background",
      "a.AppendHistogramCTZeroSample",
      "newTestHead",
      "h.Close",
      "labels.FromStrings",
      "h.Appender",
      "tsdbutil.GenerateTestHistogram",
      "tsdbutil.GenerateTestFloatHistogram",
      "t.Run"
    ],
    "TestHeadCompactableDoesNotCompactEmptyHead": [
      "newTestHead",
      "require.NoError",
      "head.Close",
      "require.False",
      "head.compactable"
    ],
    "TestHeadCompactionWhileAppendAndCommitExemplar": [
      "context.Background",
      "labels.FromStrings",
      "app.Append",
      "require.NoError",
      "newTestHead",
      "h.Appender",
      "app.Commit",
      "app.AppendExemplar",
      "h.Truncate",
      "h.Close"
    ],
    "TestHeadCompactionWhileScraping": [
      "fmt.Sprintf",
      "prometheusCommandWithLogging",
      "http.Get",
      "require.Zero",
      "strconv.Itoa",
      "testutil.RandomUnprivilegedPort",
      "require.NoError",
      "prom.Start",
      "io.ReadAll",
      "getMetricValue",
      "t.TempDir",
      "os.WriteFile",
      "require.Eventually",
      "t.Run",
      "filepath.Join",
      "r.Body.Close",
      "bytes.NewReader",
      "require.NotZero",
      "t.Parallel"
    ],
    "TestHeadCompactionWithHistograms": [
      "appendHistogram",
      "path.Join",
      "?.String",
      "require.Equal",
      "h.Copy",
      "app.Commit",
      "app.Append",
      "block.MaxTime",
      "series1.String",
      "float64",
      "labels.FromStrings",
      "NewBlockQuerier",
      "append",
      "head.MaxTime",
      "NewLeveledCompactor",
      "chunkenc.NewPool",
      "compactor.Write",
      "t.Run",
      "head.Close",
      "app.AppendHistogram",
      "block.Close",
      "appendFloat",
      "block.MinTime",
      "series4.String",
      "fmt.Sprintf",
      "t.Helper",
      "minute",
      "context.Background",
      "require.Len",
      "series3.String",
      "labels.MustNewMatcher",
      "head.Init",
      "OpenBlock",
      "query",
      "head.Appender",
      "h.ToFloat",
      "head.MinTime",
      "newTestHead",
      "t.Cleanup",
      "int64",
      "require.NoError",
      "time.Minute.Milliseconds",
      "series2.String"
    ],
    "TestHeadDeleteSeriesWithoutSamples": [
      "newTestHead",
      "require.NoError",
      "head.Close",
      "populateTestWL",
      "t.Run",
      "fmt.Sprintf",
      "labels.FromStrings",
      "head.Init",
      "head.Delete",
      "context.Background",
      "labels.MustNewMatcher"
    ],
    "TestHeadDeleteSimple": [
      "actSeriesSet.Next",
      "wlog.New",
      "DefaultHeadOptions",
      "expSeriesSet.Next",
      "h.Close",
      "head.Appender",
      "context.Background",
      "fmt.Sprintf",
      "head.Init",
      "app.Append",
      "labels.MustNewMatcher",
      "h.MaxTime",
      "q.Select",
      "len",
      "labels.FromStrings",
      "q.Close",
      "newMockSeriesSet",
      "require.Equal",
      "actSeries.Iterator",
      "append",
      "newTestHead",
      "actSeries.Labels",
      "expSeries.Iterator",
      "NewBlockQuerier",
      "h.MinTime",
      "NewHead",
      "actSeriesSet.Err",
      "expSeries.Labels",
      "buildSmpls",
      "require.NoError",
      "app.Commit",
      "w.Dir",
      "reloadedW.Dir",
      "reloadedHead.Init",
      "require.Empty",
      "actSeriesSet.Warnings",
      "float64",
      "t.Run",
      "storage.ExpandSamples",
      "storage.NewListSeries",
      "expSeriesSet.At",
      "actSeriesSet.At",
      "make",
      "head.Delete"
    ],
    "TestHeadDetectsDuplicateSampleAtSizeLimit": [
      "h.Appender",
      "labels.FromStrings",
      "indexReader.Series",
      "require.Nil",
      "require.Equal",
      "int64",
      "newTestHead",
      "require.NoError",
      "context.Background",
      "h.Close",
      "a.Append",
      "h.Index",
      "chunkReader.ChunkOrIterable",
      "len",
      "a.Commit",
      "h.Chunks",
      "chunk.NumSamples"
    ],
    "TestHeadExemplars": [
      "newTestHead",
      "app.AppendExemplar",
      "head.Close",
      "app.Append",
      "require.NoError",
      "app.Commit",
      "int64",
      "head.Appender",
      "context.Background",
      "labels.FromStrings"
    ],
    "TestHeadIndexReader_PostingsForLabelMatching": [
      "app.Append",
      "DefaultHeadOptions",
      "t.TempDir",
      "NewHead",
      "require.NoError",
      "t.Cleanup",
      "h.Appender",
      "context.Background",
      "app.Commit",
      "testPostingsForLabelMatching",
      "h.Close",
      "h.Index"
    ],
    "TestHeadInit_DiscardChunksWithUnsupportedEncoding": [
      "require.NotNil",
      "make",
      "NewHead",
      "h.chunkDiskMapper.WriteChunk",
      "chunks.HeadSeriesRef",
      "require.False",
      "require.Equal",
      "series.mmapChunks",
      "copy",
      "filepath.Join",
      "h.Appender",
      "int64",
      "h.getOrCreate",
      "wlog.NewSize",
      "require.NoError",
      "context.Background",
      "labels.FromStrings",
      "seriesLabels.Hash",
      "newTestHead",
      "float64",
      "require.Greater",
      "h.Close",
      "len",
      "h.Init",
      "app.Append",
      "app.Commit",
      "prom_testutil.ToFloat64",
      "newUnsupportedChunk"
    ],
    "TestHeadLabelNamesValuesWithMinMaxRange": [
      "head.Close",
      "head.Appender",
      "t.Run",
      "len",
      "require.NoError",
      "head.MaxTime",
      "context.Background",
      "labels.FromStrings",
      "app.Commit",
      "headIdxReader.LabelNames",
      "headIdxReader.SortedLabelValues",
      "newTestHead",
      "app.Append",
      "require.Equal",
      "head.MinTime",
      "head.indexRange"
    ],
    "TestHeadLabelNamesWithMatchers": [
      "app.Commit",
      "head.indexRange",
      "require.Equal",
      "head.Appender",
      "app.Append",
      "labels.FromStrings",
      "fmt.Sprintf",
      "headIdxReader.LabelNames",
      "newTestHead",
      "context.Background",
      "labels.MustNewMatcher",
      "require.NoError",
      "head.Close",
      "t.Run"
    ],
    "TestHeadLabelValuesWithMatchers": [
      "app.Append",
      "fmt.Sprintf",
      "app.Commit",
      "t.Cleanup",
      "context.Background",
      "append",
      "sort.Strings",
      "headIdxReader.LabelValues",
      "require.NoError",
      "head.Appender",
      "labels.FromStrings",
      "labels.MustNewMatcher",
      "head.indexRange",
      "newTestHead",
      "t.Run",
      "headIdxReader.SortedLabelValues",
      "require.Equal",
      "head.Close"
    ],
    "TestHeadMinOOOTimeUpdate": [
      "t.Run",
      "testHeadMinOOOTimeUpdate"
    ],
    "TestHeadMintAfterTruncation": [
      "int64",
      "labels.FromStrings",
      "head.Close",
      "require.NoError",
      "head.minValidTime.Load",
      "newTestHead",
      "context.Background",
      "app.Append",
      "head.appendableMinValidTime",
      "require.Equal",
      "head.MinTime",
      "head.Appender",
      "app.Commit",
      "head.Truncate"
    ],
    "TestHeadReadWriterRepair": [
      "require.True",
      "s.append",
      "Open",
      "wlog.New",
      "DefaultHeadOptions",
      "prom_testutil.ToFloat64",
      "float64",
      "DefaultOptions",
      "os.OpenFile",
      "require.Equal",
      "int64",
      "h.chunkDiskMapper.CutNewFile",
      "h.Close",
      "require.Len",
      "t.TempDir",
      "filepath.Join",
      "require.NoError",
      "h.getOrCreate",
      "NewHead",
      "labels.FromStrings",
      "s.mmapChunks",
      "?.Name",
      "os.ReadDir",
      "mmappedChunksDir",
      "f.WriteAt",
      "f.Close",
      "h.Init",
      "require.False",
      "db.Close"
    ],
    "TestHeadReadWriter_ReadRepairOnEmptyLastFile": [
      "checkRepair",
      "randomChunk",
      "hrw.CutNewFile",
      "f.Close",
      "writeCorruptLastFile",
      "require.LessOrEqual",
      "t.Helper",
      "int64",
      "require.Len",
      "f.Sync",
      "strconv.ParseUint",
      "uint64",
      "createChunkDiskMapper",
      "make",
      "require.NoError",
      "hrw.Close",
      "fi.Name",
      "close",
      "os.ReadDir",
      "addChunk",
      "nonEmptyFile",
      "segmentFile",
      "stat.Size",
      "f.Stat",
      "hrw.WriteChunk",
      "require.Equal",
      "hrw.dir.Name",
      "os.OpenFile",
      "f.Write",
      "len"
    ],
    "TestHeadReadWriter_TruncateAfterFailedIterateChunks": [
      "createChunkDiskMapper",
      "make",
      "randomChunk",
      "hrw.dir.Name",
      "hrw.IterateAllChunks",
      "errors.New",
      "hrw.Truncate",
      "require.NoError",
      "hrw.Close",
      "hrw.WriteChunk",
      "close",
      "require.Error"
    ],
    "TestHeadSeriesChunkRace": [
      "testHeadSeriesChunkRace"
    ],
    "TestHeadShardedPostings": [
      "newTestHeadWithOptions",
      "head.Appender",
      "app.Append",
      "labels.FromStrings",
      "app.Commit",
      "p.Err",
      "require.Equal",
      "head.Close",
      "fmt.Sprintf",
      "head.indexRange",
      "p.Next",
      "append",
      "len",
      "ir.Series",
      "labels.StableHash",
      "p.At",
      "uint64",
      "ir.ShardedPostings",
      "lbls.Labels",
      "newTestHeadDefaultOptions",
      "require.NoError",
      "context.Background",
      "ir.Postings",
      "require.NotEmpty",
      "make",
      "require.ElementsMatch"
    ],
    "TestHead_ActiveAppenders": [
      "app.Commit",
      "app.Append",
      "head.Init",
      "prom_testutil.ToFloat64",
      "app.Rollback",
      "head.Appender",
      "context.Background",
      "require.Equal",
      "labels.FromStrings",
      "newTestHead",
      "head.Close",
      "require.NoError"
    ],
    "TestHead_CanGarbagecollectSeriesCreatedWithoutSamples": [
      "newTestHead",
      "t.Cleanup",
      "context.Background",
      "require.Equal",
      "head.gc",
      "app.Rollback",
      "time.Hour.Milliseconds",
      "head.Close",
      "require.ErrorIs",
      "labels.FromStrings",
      "int",
      "finishTxn",
      "require.Error",
      "app.Commit",
      "t.Run",
      "require.NoError",
      "head.Init",
      "head.Appender",
      "app.Append",
      "head.NumSeries",
      "require.NotErrorIs"
    ],
    "TestHead_HighConcurrencyReadAndWrite": [
      "query",
      "close",
      "ctx.Done",
      "newTestHead",
      "uint64",
      "len",
      "sample.F",
      "workerReadyWg.Wait",
      "head.Close",
      "errgroup.WithContext",
      "app.Append",
      "int64",
      "head.Init",
      "f",
      "labels.FromStrings",
      "strconv.Itoa",
      "time.Minute.Milliseconds",
      "make",
      "float64",
      "NewBlockQuerier",
      "labels.MustNewMatcher",
      "queryHead",
      "lbls.String",
      "context.Background",
      "ctx.Err",
      "app.Commit",
      "g.Wait",
      "fmt.Errorf",
      "whileNotCanceled",
      "head.Appender",
      "g.Go",
      "workerReadyWg.Done",
      "lbls.Range",
      "sample.T",
      "require.NoError",
      "workerReadyWg.Add"
    ],
    "TestHead_KeepSeriesInWALCheckpoint": [
      "h.setWALExpiry",
      "newTestHead",
      "t.Cleanup",
      "tc.prepare",
      "h.keepSeriesInWALCheckpoint",
      "require.Equal",
      "h.getOrCreateWithID",
      "chunks.HeadSeriesRef",
      "require.NoError",
      "t.Run",
      "h.Close",
      "labels.FromStrings",
      "existingLbls.Hash"
    ],
    "TestHead_LogRollback": [
      "require.NoError",
      "context.Background",
      "w.Dir",
      "require.Equal",
      "app.Append",
      "require.Len",
      "require.True",
      "fmt.Sprintf",
      "h.Close",
      "h.Appender",
      "readTestWAL",
      "t.Run",
      "newTestHead",
      "labels.FromStrings",
      "app.Rollback"
    ],
    "TestHead_RaceBetweenSeriesCreationAndGC": [
      "make",
      "done.Store",
      "context.Background",
      "app.Commit",
      "head.gc",
      "require.NoError",
      "strconv.Itoa",
      "head.Appender",
      "labels.FromStrings",
      "done.Load",
      "require.Equal",
      "head.NumSeries",
      "head.Init",
      "t.Cleanup",
      "head.Close",
      "atomic.NewBool",
      "t.Errorf",
      "app.Append",
      "int",
      "newTestHead"
    ],
    "TestHead_ReadWAL": [
      "labels.FromStrings",
      "head.Init",
      "c.Next",
      "append",
      "labels.MustNewMatcher",
      "expandChunk",
      "?.Equals",
      "w.Dir",
      "context.Background",
      "s100.chunk",
      "storage.SeriesRef",
      "require.NotNil",
      "head.tombstones.Get",
      "uint8",
      "populateTestWL",
      "head.lastSeriesID.Load",
      "wlog.Segments",
      "q.Select",
      "head.Close",
      "require.Equal",
      "uint64",
      "require.False",
      "s50.chunk",
      "c.At",
      "c.Err",
      "s10.chunk",
      "fmt.Sprintf",
      "newTestHead",
      "head.series.getByID",
      "require.Nil",
      "head.getWALExpiry",
      "c.chunk.Iterator",
      "head.ExemplarQuerier",
      "require.True",
      "t.Run",
      "require.NoError",
      "testutil.RequireEqual",
      "require.NotEmpty"
    ],
    "TestHead_ReturnsSortedLabelValues": [
      "app.Append",
      "require.True",
      "slices.IsSorted",
      "h.initTime",
      "fmt.Sprintf",
      "context.Background",
      "q.Close",
      "newTestHead",
      "h.Close",
      "labels.FromStrings",
      "NewBlockQuerier",
      "q.LabelValues",
      "require.NoError",
      "h.appender"
    ],
    "TestHead_Truncate": [
      "append",
      "newTestHead",
      "require.Nil",
      "h.postings.Postings",
      "storage.SeriesRef",
      "h.postings.Symbols",
      "iter.Next",
      "context.Background",
      "require.Equal",
      "iter.At",
      "h.Close",
      "labels.FromStrings",
      "h.postings.LabelNames",
      "h.postings.LabelValues",
      "require.NoError",
      "h.initTime",
      "h.getOrCreate",
      "h.Truncate",
      "h.series.getByID",
      "index.ExpandPostings"
    ],
    "TestHead_UnknownWALRecord": [
      "newTestHead",
      "w.Log",
      "require.NoError",
      "head.Init",
      "head.Close"
    ],
    "TestHead_WALMultiRef": [
      "head.Appender",
      "app.Append",
      "require.Equal",
      "NewBlockQuerier",
      "wlog.New",
      "labels.MustNewMatcher",
      "newTestHead",
      "head.Init",
      "context.Background",
      "app.Commit",
      "require.NotEqual",
      "head.Close",
      "DefaultHeadOptions",
      "require.NoError",
      "labels.FromStrings",
      "prom_testutil.ToFloat64",
      "head.Truncate",
      "w.Dir",
      "NewHead",
      "query"
    ],
    "TestHistogramAppendAndQuery": [
      "testHistogramAppendAndQueryHelper",
      "t.Run"
    ],
    "TestHistogramAppendOnlyErrors": [
      "require.False",
      "require.NoError",
      "tsdbutil.GenerateTestHistogram",
      "NewHistogramChunk",
      "c.Appender",
      "app.AppendHistogram",
      "require.Nil",
      "h.Copy",
      "require.EqualError",
      "t.Run",
      "Chunk",
      "tsdbutil.GenerateTestCustomBucketsHistogram"
    ],
    "TestHistogramChunkAppendable": [
      "Chunk",
      "h.Copy",
      "eh.Copy",
      "nextChunk.Appender",
      "make",
      "require.Nil",
      "hApp.appendable",
      "require.NotEqual",
      "assertNewHistogramChunkOnAppend",
      "assertRecodedHistogramChunkOnAppend",
      "assertSampleCount",
      "nextChunk.GetCounterResetHeader",
      "setup",
      "h1.Copy",
      "require.False",
      "require.Equal",
      "c.NumSamples",
      "int64",
      "app.AppendHistogram",
      "NewHistogramChunk",
      "require.NoError",
      "require.True",
      "c.Appender",
      "?.GetCounterResetHeader",
      "require.NotEmpty",
      "require.Empty",
      "assertNoNewHistogramChunkOnAppend",
      "assertFirstIntHistogramSampleHint",
      "len"
    ],
    "TestHistogramChunkAppendableGauge": [
      "NewHistogramChunk",
      "require.NoError",
      "c.NumSamples",
      "h.Copy",
      "require.Nil",
      "?.GetCounterResetHeader",
      "require.False",
      "Chunk",
      "c.Appender",
      "require.Equal",
      "h1.Copy",
      "require.Empty",
      "assertRecodedHistogramChunkOnAppend",
      "int64",
      "app.AppendHistogram",
      "setup",
      "require.NotEmpty",
      "require.True",
      "assertNoNewHistogramChunkOnAppend",
      "hApp.appendableGauge",
      "assertNewHistogramChunkOnAppend"
    ],
    "TestHistogramChunkAppendableWithEmptySpan": [
      "app.AppendHistogram",
      "require.Empty",
      "require.Equal",
      "c.NumSamples",
      "NewHistogramChunk",
      "c.Appender",
      "require.NoError",
      "hApp.appendable",
      "require.True",
      "t.Run",
      "Chunk"
    ],
    "TestHistogramChunkBucketChanges": [
      "it.Next",
      "append",
      "int64",
      "h1.Copy",
      "h2.Copy",
      "c.Iterator",
      "NewHistogramChunk",
      "c.Appender",
      "require.Equal",
      "require.NotEmpty",
      "it.AtFloatHistogram",
      "app.AppendHistogram",
      "hApp.appendable",
      "hApp.recode",
      "hExp.ToFloat",
      "require.Empty",
      "require.True",
      "h1.ToFloat",
      "it.AtHistogram",
      "Chunk",
      "require.NoError",
      "c.NumSamples",
      "require.Nil",
      "it.Err"
    ],
    "TestHistogramChunkSameBuckets": [
      "it4.Next",
      "int64",
      "app.AppendHistogram",
      "h.ToFloat",
      "it.Err",
      "itX.Next",
      "it4.Seek",
      "it4.AtFloatHistogram",
      "NewHistogramChunk",
      "it.AtHistogram",
      "it2.Next",
      "it2.AtHistogram",
      "it2.Err",
      "require.Equal",
      "it.Next",
      "c.iterator",
      "c.NumSamples",
      "c.Iterator",
      "c.Appender",
      "require.Nil",
      "it3.AtHistogram",
      "it4.Err",
      "require.NoError",
      "it.AtFloatHistogram",
      "it2.AtFloatHistogram",
      "append",
      "h.Copy",
      "hExp.ToFloat",
      "it3.Next",
      "it3.AtFloatHistogram",
      "it4.AtHistogram",
      "it3.Err",
      "len"
    ],
    "TestHistogramCompact": [
      "t.Run",
      "require.Equal",
      "c.in.Compact"
    ],
    "TestHistogramCopy": [
      "tcase.orig.Copy",
      "require.Equal",
      "assertDeepCopyHSpans",
      "make",
      "t.Run"
    ],
    "TestHistogramCopyFromIteratorRegression": [
      "require.Len",
      "require.Empty",
      "require.Equal",
      "promqltest.LoadedStorage",
      "require.NoError",
      "len",
      "engine.NewRangeQuery",
      "promqltest.NewTestEngine",
      "require.True",
      "context.Background",
      "time.Unix",
      "engine.NewInstantQuery",
      "storage.Close",
      "qry.Exec",
      "verify",
      "t.Cleanup",
      "?.Add"
    ],
    "TestHistogramCopyTo": [
      "make",
      "t.Run",
      "tcase.orig.CopyTo",
      "require.Equal",
      "assertDeepCopyHSpans"
    ],
    "TestHistogramCounterResetHeader": [
      "?.GetCounterResetHeader",
      "t.Run",
      "labels.FromStrings",
      "head.Init",
      "app.AppendHistogram",
      "h.Copy",
      "len",
      "t.Cleanup",
      "head.getOrCreate",
      "newTestHead",
      "head.Appender",
      "require.Len",
      "tsdbutil.GenerateTestHistograms",
      "checkExpCounterResetHeader",
      "head.Close",
      "context.Background",
      "head.chunkDiskMapper.Chunk",
      "int64",
      "append",
      "l.Hash",
      "ms.mmapChunks",
      "fmt.Sprintf",
      "app.Commit",
      "appendHistogram",
      "require.NoError",
      "h.ToFloat",
      "require.Equal"
    ],
    "TestHistogramCustomValuesInternedAfterNextWithAtFloatHistogram": [
      "h1.Copy",
      "NewHistogramChunk",
      "c.Iterator",
      "it.AtFloatHistogram",
      "require.NotSame",
      "require.Same",
      "c.Appender",
      "require.NoError",
      "app.AppendHistogram",
      "require.Equal",
      "it.Next"
    ],
    "TestHistogramCustomValuesInternedAfterNextWithAtHistogram": [
      "c.Appender",
      "require.NoError",
      "app.AppendHistogram",
      "c.Iterator",
      "require.NotSame",
      "h1.Copy",
      "require.Equal",
      "it.Next",
      "it.AtHistogram",
      "require.Same",
      "NewHistogramChunk"
    ],
    "TestHistogramEquals": [
      "require.True",
      "h1.Equals",
      "h2.Equals",
      "require.False",
      "h1.Validate",
      "len",
      "math.Float64frombits",
      "h1.ToFloat",
      "h2f.Equals",
      "h1.Copy",
      "equals",
      "append",
      "h2.ToFloat",
      "require.NoError",
      "notEquals",
      "cbh1.Validate",
      "h1f.Equals",
      "math.NaN",
      "cbh1.Copy",
      "notEqualsUntilFloatConv"
    ],
    "TestHistogramFixtureValid": [
      "h.ToIntHistogram",
      "h.IsFloatHistogram",
      "require.NoError",
      "?.Validate",
      "h.ToFloatHistogram"
    ],
    "TestHistogramInWALAndMmapChunk": [
      "h.Copy",
      "app.Commit",
      "require.Positive",
      "float64",
      "require.Equal",
      "labels.FromStrings",
      "context.Background",
      "NewHead",
      "head.MinTime",
      "head.series.getByHash",
      "wlog.NewSize",
      "tsdbutil.GenerateTestFloatHistograms",
      "tsdbutil.GenerateTestGaugeFloatHistograms",
      "make",
      "app.Append",
      "query",
      "mmappedChunksDir",
      "head.Init",
      "tsdbutil.GenerateTestGaugeHistograms",
      "head.Appender",
      "tsdbutil.GenerateTestHistograms",
      "s1.Hash",
      "head.wal.Dir",
      "head.MaxTime",
      "testQuery",
      "t.Cleanup",
      "int64",
      "head.mmapHeadChunks",
      "labels.MustNewMatcher",
      "app.AppendHistogram",
      "append",
      "ms.headChunks.chunk.NumSamples",
      "s2.String",
      "startHead",
      "NewBlockQuerier",
      "compareSeries",
      "os.RemoveAll",
      "newTestHead",
      "head.Close",
      "require.Len",
      "require.NoError",
      "s1.String"
    ],
    "TestHistogramMetrics": [
      "prom_testutil.ToFloat64",
      "head.metrics.samplesAppended.WithLabelValues",
      "require.NoError",
      "head.Appender",
      "tsdbutil.GenerateTestFloatHistograms",
      "require.Equal",
      "head.Init",
      "context.Background",
      "NewHead",
      "t.Cleanup",
      "head.Close",
      "labels.FromStrings",
      "head.wal.Dir",
      "int64",
      "app.Commit",
      "float64",
      "wlog.NewSize",
      "newTestHead",
      "fmt.Sprintf",
      "tsdbutil.GenerateTestHistograms",
      "app.AppendHistogram"
    ],
    "TestHistogramQuantileAnnotations": [
      "t.Cleanup",
      "newTestEngine",
      "engine.NewInstantQuery",
      "context.Background",
      "timestamp.Time",
      "require.NoError",
      "t.Run",
      "strings.TrimSpace",
      "res.Warnings.AsStrings",
      "promqltest.LoadedStorage",
      "testutil.RequireEqual",
      "store.Close",
      "?.Add",
      "query.Exec"
    ],
    "TestHistogramRateWithFloatStaleness": [
      "require.Nil",
      "app.Append",
      "c1.Appender",
      "h1.Copy",
      "math.Float64frombits",
      "engine.NewInstantQuery",
      "q.Close",
      "res.Vector",
      "require.NotNil",
      "require.NoError",
      "c3.Appender",
      "promqltest.NewTestEngine",
      "timestamp.Time",
      "require.Len",
      "require.Equal",
      "app.AppendHistogram",
      "require.False",
      "chunkenc.NewXORChunk",
      "c2.Appender",
      "h2.Copy",
      "context.Background",
      "q.Exec",
      "chunkenc.NewHistogramChunk"
    ],
    "TestHistogramReduceResolution": [
      "require.Equal",
      "tc.origin.ReduceResolution"
    ],
    "TestHistogramSeriesToChunks": [
      "testHistogramsSeriesToChunks",
      "math.Float64frombits",
      "t.Run"
    ],
    "TestHistogramStaleSample": [
      "t.Run",
      "testHistogramStaleSampleHelper"
    ],
    "TestHistogramStatsDecoding": [
      "require.True",
      "NewHistogramStatsIterator",
      "statsIterator.AtFloatHistogram",
      "t.Run",
      "make",
      "append",
      "require.Equalf",
      "value.IsStaleNaN",
      "tsdbutil.GenerateTestHistogramWithHint",
      "statsIterator.AtHistogram",
      "newHistogramSeries",
      "statsIterator.Reset",
      "?.ToFloat",
      "require.Equal",
      "?.Iterator",
      "float64",
      "math.Float64frombits",
      "statsIterator.Next",
      "len",
      "uint64",
      "check"
    ],
    "TestHistogramStatsMixedUse": [
      "statsIterator.AtHistogram",
      "series.Iterator",
      "statsIterator.Next",
      "NewHistogramStatsIterator",
      "make",
      "require.Equal",
      "statsIterator.AtFloatHistogram",
      "tsdbutil.GenerateTestHistogramWithHint",
      "newHistogramSeries"
    ],
    "TestHistogramString": [
      "t.Run",
      "strconv.Itoa",
      "c.histogram.String",
      "require.Equal"
    ],
    "TestHistogramTestExpression": [
      "require.NoError",
      "require.Len",
      "require.NotNil",
      "canonical.TestExpression",
      "t.Run",
      "test.input.TestExpression",
      "require.Equal",
      "ParseSeriesDesc"
    ],
    "TestHistogramToCustomBucketsHistogram": [
      "t.Run",
      "require.ErrorContains",
      "pcommon.NewTimestampFromTime",
      "pt.SetSum",
      "pt.BucketCounts",
      "require.NoError",
      "require.Empty",
      "pmetric.NewHistogramDataPoint",
      "pt.SetStartTimestamp",
      "tt.hist",
      "validateNativeHistogramCount",
      "pt.SetTimestamp",
      "?.FromRaw",
      "validateHistogramCount",
      "explicitHistogramToCustomBucketsHistogram",
      "require.Equal",
      "tt.wantNativeHist",
      "time.UnixMilli",
      "pt.SetCount",
      "pt.ExplicitBounds"
    ],
    "TestHistogramToFloat": [
      "fh.String",
      "t.Run",
      "h.ToFloat",
      "require.Equal",
      "h.String"
    ],
    "TestHistogramUniqueSpansAfterNextWithAtFloatHistogram": [
      "require.Equal",
      "it.Next",
      "require.NotSame",
      "h1.Copy",
      "app.AppendHistogram",
      "c.Iterator",
      "it.AtFloatHistogram",
      "NewHistogramChunk",
      "c.Appender",
      "require.NoError"
    ],
    "TestHistogramUniqueSpansAfterNextWithAtHistogram": [
      "h1.Copy",
      "NewHistogramChunk",
      "it.AtHistogram",
      "c.Appender",
      "require.NoError",
      "app.AppendHistogram",
      "c.Iterator",
      "require.Equal",
      "it.Next",
      "require.NotSame"
    ],
    "TestHistogramValidation": [
      "math.NaN",
      "t.Run",
      "tc.h.Validate",
      "require.EqualError",
      "require.NoError",
      "tc.h.ToFloat",
      "fh.Validate"
    ],
    "TestIONOSServerRefresh": [
      "httptest.NewServer",
      "http.HandlerFunc",
      "newServerDiscovery",
      "d.refresh",
      "fmt.Sprintf",
      "require.Equal",
      "mock.Close",
      "require.NoError",
      "context.Background",
      "require.Len",
      "require.NotNil",
      "t.Run"
    ],
    "TestIdenticalConfigurationsAreCoalesced": [
      "context.Background",
      "NewTestMetrics",
      "NewManager",
      "pk",
      "cancel",
      "require.NotNil",
      "discoveryManager.ApplyConfig",
      "prometheus.NewRegistry",
      "discoveryManager.Run",
      "staticConfig",
      "discoveryManager.SyncCh",
      "require.Len",
      "verifySyncedPresence",
      "context.WithCancel",
      "verifyPresence"
    ],
    "TestIgnoreExternalLabels": [
      "NewStorage",
      "require.Empty",
      "require.Len",
      "require.Equal",
      "t.TempDir",
      "require.NoError",
      "s.ApplyConfig",
      "baseRemoteReadConfig",
      "?.externalLabels.Len",
      "s.Close",
      "labels.FromStrings"
    ],
    "TestIgnoreOverriddenMetadataLabelsScratchBuilder": [
      "t.Run",
      "wrapped.Add",
      "require.Equal",
      "lb.Labels",
      "labels.FromStrings",
      "string",
      "tcase.highPrioMeta.AddToLabels",
      "incomingLabels.Range",
      "lb.Sort",
      "fmt.Sprintf",
      "labels.NewScratchBuilder"
    ],
    "TestInconsistentHistogramCount": [
      "head.Appender",
      "tsdb.NewHead",
      "labels.FromStrings",
      "time.Now",
      "opts.EnableNativeHistograms.Store",
      "t.Cleanup",
      "app.Commit",
      "promql.NewEngine",
      "require.Greater",
      "require.NoError",
      "?.UnixMilli",
      "?.Add",
      "int64",
      "time.UnixMilli",
      "query.Close",
      "require.Equal",
      "t.TempDir",
      "storage.QueryableFunc",
      "tsdb.NewBlockQuerier",
      "engine.NewInstantQuery",
      "query.Exec",
      "app.AppendHistogram",
      "queryResult.Vector",
      "tsdb.DefaultHeadOptions",
      "require.NotNil",
      "require.Len",
      "float64",
      "head.Close",
      "context.Background",
      "require.Nil"
    ],
    "TestIndexOverwrite": [
      "labels.FromStrings",
      "es.AddExemplar",
      "l1.Bytes",
      "require.False",
      "require.Equal",
      "NewCircularExemplarStorage",
      "require.NoError",
      "string",
      "l2.Bytes"
    ],
    "TestIndexRW_Create_Open": [
      "iw.Close",
      "NewFileReader",
      "t.TempDir",
      "NewWriter",
      "require.NoError",
      "ir.Close",
      "os.OpenFile",
      "f.WriteAt",
      "f.Close",
      "require.Error",
      "filepath.Join",
      "context.Background"
    ],
    "TestIndexRW_Postings": [
      "append",
      "labels.FromStrings",
      "p.At",
      "d.Err",
      "ir.Close",
      "require.NotEmpty",
      "lbls.Labels",
      "strconv.Itoa",
      "createFileReader",
      "ir.Postings",
      "builder.Labels",
      "d.UvarintStr",
      "make",
      "ir.Series",
      "encoding.NewDecbufAt",
      "require.Equal",
      "ir.lookupSymbol",
      "t.Cleanup",
      "p.Err",
      "d.Uvarint64",
      "t.Run",
      "NewFileReader",
      "require.ElementsMatch",
      "testutil.RequireEqual",
      "len",
      "d.Be32",
      "d.Len",
      "ir.ShardedPostings",
      "require.NoError",
      "int",
      "d.Be32int",
      "uint64",
      "context.Background",
      "p.Next",
      "require.Empty",
      "d.Uvarint",
      "labels.StableHash"
    ],
    "TestIndexReuse": [
      "make",
      "queryLogger.generateIndices",
      "queryLogger.Insert",
      "context.Background",
      "queryLogger.Delete",
      "require.True",
      "?.Match",
      "regexp.MustCompile"
    ],
    "TestInfo": [
      "promqltest.NewTestEngine",
      "promqltest.RunTest"
    ],
    "TestIngressDiscoveryAdd": [
      "makeDiscovery",
      "?.Run",
      "makeIngress",
      "?.Create",
      "t.Parallel",
      "c.NetworkingV1",
      "context.Background",
      "expectedTargetGroups",
      "?.Ingresses"
    ],
    "TestIngressDiscoveryAddMixed": [
      "c.NetworkingV1",
      "expectedTargetGroups",
      "makeIngress",
      "?.Create",
      "?.Ingresses",
      "context.Background",
      "t.Parallel",
      "makeDiscovery",
      "?.Run"
    ],
    "TestIngressDiscoveryAddTLS": [
      "?.Run",
      "makeIngress",
      "?.Create",
      "?.Ingresses",
      "c.NetworkingV1",
      "expectedTargetGroups",
      "t.Parallel",
      "makeDiscovery",
      "context.Background"
    ],
    "TestIngressDiscoveryNamespaces": [
      "context.Background",
      "makeDiscovery",
      "expectedTargetGroups",
      "makeIngress",
      "?.Ingresses",
      "c.NetworkingV1",
      "t.Parallel",
      "?.Run",
      "?.Create"
    ],
    "TestIngressDiscoveryOwnNamespace": [
      "t.Parallel",
      "expectedTargetGroups",
      "makeIngress",
      "?.Create",
      "?.Ingresses",
      "makeDiscovery",
      "?.Run",
      "c.NetworkingV1",
      "context.Background"
    ],
    "TestInitialUpdate": [
      "runner.copyFile",
      "runner.stop",
      "validTg",
      "t.Skip",
      "t.Parallel",
      "newTestRunner",
      "runner.requireUpdate",
      "t.Run",
      "runner.run",
      "filepath.Ext"
    ],
    "TestInitializeHeadTimestamp": [
      "w.Close",
      "require.Equal",
      "context.Background",
      "require.True",
      "db.Close",
      "app.Append",
      "w.Log",
      "enc.Series",
      "db.head.MaxTime",
      "labels.FromStrings",
      "wlog.New",
      "genSeries",
      "prometheus.NewRegistry",
      "t.TempDir",
      "Open",
      "require.False",
      "db.Appender",
      "os.MkdirAll",
      "enc.Samples",
      "db.head.MinTime",
      "createBlock",
      "t.Run",
      "require.NoError",
      "int64",
      "db.head.initialized",
      "path.Join",
      "prom_testutil.ToFloat64"
    ],
    "TestInstallingNewTracerProvider": [
      "promslog.NewNopLogger",
      "require.NoError",
      "m.ApplyConfig",
      "require.NotEqual",
      "otel.GetTracerProvider",
      "NewManager"
    ],
    "TestInstantQueryWithRangeVectorSelector": [
      "t.Run",
      "engine.NewInstantQuery",
      "context.Background",
      "q.Exec",
      "require.NoError",
      "timestamp.FromTime",
      "storage.Close",
      "labels.FromStrings",
      "q.Close",
      "testutil.RequireEqual",
      "newTestEngine",
      "timestamp.Time",
      "promqltest.LoadedStorage",
      "t.Cleanup",
      "baseT.Add"
    ],
    "TestInterleavedInOrderAndOOOHistogramCompactionWithCounterResets": [
      "db.Appender",
      "sort.Slice",
      "verifyDBSamples",
      "db.DisableCompactions",
      "Open",
      "t.Cleanup",
      "app.Commit",
      "db.Compact",
      "context.Background",
      "db.CompactOOOHead",
      "?.T",
      "time.Minute.Milliseconds",
      "db.EnableNativeHistograms",
      "tsdbutil.GenerateTestHistogram",
      "db.Querier",
      "requireEqualSeries",
      "require.Len",
      "db.Blocks",
      "t.TempDir",
      "int64",
      "t.Helper",
      "NewRangeHead",
      "DefaultOptions",
      "tsdbutil.GenerateTestFloatHistogram",
      "app.AppendHistogram",
      "h.Copy",
      "series1.String",
      "query",
      "labels.MustNewMatcher",
      "db.Close",
      "copyWithCounterReset",
      "labels.FromStrings",
      "addSample",
      "append",
      "db.CompactHead",
      "require.NoError"
    ],
    "TestIntern": [
      "require.Equalf",
      "int64",
      "interned.refs.Load",
      "newPool",
      "interner.intern",
      "require.True"
    ],
    "TestIntern_DeleteRef": [
      "interner.intern",
      "require.True",
      "require.Equalf",
      "int64",
      "interned.refs.Load",
      "interner.release",
      "require.False",
      "newPool"
    ],
    "TestIntern_MultiRef": [
      "newPool",
      "interner.intern",
      "require.True",
      "require.Equalf",
      "int64",
      "interned.refs.Load"
    ],
    "TestIntern_MultiRef_Concurrent": [
      "interner.mtx.RUnlock",
      "newPool",
      "require.True",
      "require.Equal",
      "interner.release",
      "close",
      "interner.intern",
      "int64",
      "interned.refs.Load",
      "make",
      "interner.mtx.RLock"
    ],
    "TestInteropV1UnmarshalWithV2_DeterministicEmpty": [
      "proto.Unmarshal",
      "require.Equal",
      "?.UnixMilli",
      "time.Now",
      "t.Run",
      "proto.Marshal",
      "require.NoError"
    ],
    "TestInteropV2UnmarshalWithV1_DeterministicEmpty": [
      "?.UnixMilli",
      "time.Now",
      "t.Run",
      "proto.Marshal",
      "require.NoError",
      "proto.Unmarshal",
      "require.Equal"
    ],
    "TestIntersect": [
      "newListPostings",
      "EmptyPostings",
      "t.Run",
      "require.NoError",
      "require.NotNil",
      "ExpandPostings",
      "Intersect",
      "require.Equal",
      "require.NotEqual"
    ],
    "TestIntersectWithMerge": [
      "require.Equal",
      "newListPostings",
      "Merge",
      "context.Background",
      "Intersect",
      "ExpandPostings",
      "require.NoError"
    ],
    "TestInvalidFile": [
      "runner.targets",
      "t.Run",
      "t.Parallel",
      "time.Now",
      "newTestRunner",
      "filepath.Ext",
      "time.Sleep",
      "runner.copyFile",
      "runner.run",
      "runner.stop",
      "require.False",
      "?.After",
      "runner.lastReceive"
    ],
    "TestInvalidFileUpdate": [
      "runner.run",
      "time.Sleep",
      "runner.targets",
      "newTestRunner",
      "runner.stop",
      "validTg",
      "runner.lastReceive",
      "runner.writeString",
      "t.Parallel",
      "runner.requireUpdate",
      "runner.requireTargetGroups",
      "t.Skip",
      "runner.copyFile",
      "?.After"
    ],
    "TestInverse": [
      "test.matcher.Inverse",
      "require.NoError",
      "require.Equal"
    ],
    "TestIsQuerierCollidingWithTruncation": [
      "int64",
      "require.NoError",
      "app.Commit",
      "t.Run",
      "require.Equal",
      "newTestDB",
      "db.DisableCompactions",
      "storage.SeriesRef",
      "app.Append",
      "db.head.memTruncationInProcess.Store",
      "db.head.lastMemoryTruncationTime.Store",
      "context.Background",
      "labels.FromStrings",
      "fmt.Sprintf",
      "db.Appender",
      "float64",
      "db.head.IsQuerierCollidingWithTruncation"
    ],
    "TestIsRegexOptimized": [
      "mustNewMatcher",
      "t.Run",
      "fmt.Sprintf",
      "require.Equal",
      "tc.matcher.IsRegexOptimized"
    ],
    "TestIsSampleOld": [
      "timestamp.FromTime",
      "currentTime.Add",
      "require.False",
      "time.Now",
      "require.True",
      "isSampleOld"
    ],
    "TestIsSeriesPartOfFamily": [
      "t.Run",
      "require.True",
      "isSeriesPartOfFamily",
      "require.False"
    ],
    "TestIsolation": [
      "uint64",
      "int64",
      "iso.lowestAppendTime",
      "iso.State",
      "countOpenReads",
      "iso.closeAppend",
      "stateA.Close",
      "newIsolation",
      "require.Equal",
      "iso.lowWatermark",
      "iso.newAppendID"
    ],
    "TestIsolationAppendIDZeroIsNoop": [
      "h.chunkRange.Load",
      "h.getOrCreate",
      "require.True",
      "h.initTime",
      "newTestHead",
      "require.NoError",
      "h.Close",
      "labels.FromStrings",
      "s.append",
      "require.Equal",
      "int",
      "t.Skip"
    ],
    "TestIsolationLowWatermarkMonotonous": [
      "t.Skip",
      "hb.Close",
      "hb.iso.lowWatermark",
      "require.NoError",
      "hb.Appender",
      "context.Background",
      "labels.FromStrings",
      "app1.Commit",
      "app2.Commit",
      "is.Close",
      "newTestHead",
      "app1.Append",
      "require.Equal",
      "uint64",
      "app2.Append",
      "hb.iso.State"
    ],
    "TestIsolationRollback": [
      "t.Skip",
      "require.NoError",
      "hb.Close",
      "app.Append",
      "hb.iso.lowWatermark",
      "app.Rollback",
      "context.Background",
      "labels.FromStrings",
      "app.Commit",
      "require.Error",
      "newTestHead",
      "hb.Appender",
      "require.Equal",
      "uint64"
    ],
    "TestIsolationWithoutAdd": [
      "t.Skip",
      "context.Background",
      "app.Append",
      "hb.iso.lastAppendID",
      "app.Commit",
      "labels.FromStrings",
      "require.Equal",
      "hb.iso.lowWatermark",
      "newTestHead",
      "require.NoError",
      "hb.Close",
      "hb.Appender"
    ],
    "TestIteratorSeekIntoBuffer": [
      "require.Equal",
      "it.Next",
      "require.NoError",
      "newMemSeries",
      "s.append",
      "int64",
      "float64",
      "t.TempDir",
      "chunks.NewChunkDiskMapper",
      "chunkenc.NewPool",
      "require.True",
      "it.At",
      "chunkDiskMapper.Close",
      "s.chunk",
      "it.Seek",
      "c.chunk.Iterator"
    ],
    "TestJSONFileLogger_basic": [
      "f.Close",
      "slog.New",
      "logHandler.Close",
      "strings.HasSuffix",
      "os.Remove",
      "require.Len",
      "regexp.Match",
      "logHandler.file.Close",
      "require.Error",
      "require.NoError",
      "f.Name",
      "require.NotNil",
      "require.True",
      "err.Error",
      "os.ErrClosed.Error",
      "os.CreateTemp",
      "NewJSONFileLogger",
      "logger.Info",
      "getLogLines"
    ],
    "TestJSONFileLogger_parallel": [
      "f.Name",
      "logger2.Info",
      "strings.HasSuffix",
      "slog.New",
      "require.True",
      "os.ErrClosed.Error",
      "logHandler2.Close",
      "err.Error",
      "logHandler2.file.Close",
      "os.CreateTemp",
      "require.NoError",
      "f.Close",
      "os.Remove",
      "logger.Info",
      "require.Error",
      "NewJSONFileLogger",
      "require.NotNil",
      "logHandler.Close",
      "logHandler.file.Close"
    ],
    "TestJsonCodec_Encode": [
      "labels.FromStrings",
      "math.NaN",
      "math.Inf",
      "codec.Encode",
      "t.Fatalf",
      "string"
    ],
    "TestJunitOutput": [
      "t.Fatalf",
      "buf.Bytes",
      "xml.Unmarshal",
      "t.Errorf",
      "len",
      "FakeTestSuites",
      "x.WriteXML"
    ],
    "TestKahanSumInc": [
      "math.Inf",
      "kahanSumInc",
      "math.IsNaN",
      "runTest",
      "math.NaN",
      "t.Run",
      "fmt.Sprintf",
      "require.Truef",
      "require.Equalf"
    ],
    "TestKeepFiringFor": [
      "t.Cleanup",
      "parser.ParseExpr",
      "t.Logf",
      "context.TODO",
      "append",
      "promqltest.LoadedStorage",
      "storage.Close",
      "NewAlertingRule",
      "time.Unix",
      "rule.Eval",
      "require.Equal",
      "len",
      "require.NoError",
      "labels.EmptyLabels",
      "EngineQueryFunc",
      "smpl.Metric.Get",
      "require.Empty",
      "labels.FromStrings",
      "testEngine",
      "baseTime.Add",
      "time.Duration",
      "timestamp.FromTime",
      "testutil.RequireEqual"
    ],
    "TestKubernetesEmptyAPIServer": [
      "LoadFile",
      "promslog.NewNopLogger",
      "require.NoError"
    ],
    "TestKubernetesSelectors": [
      "LoadFile",
      "promslog.NewNopLogger",
      "require.NoError"
    ],
    "TestKubernetesWithKubeConfig": [
      "LoadFile",
      "promslog.NewNopLogger",
      "require.NoError"
    ],
    "TestKumaHTTPDiscoveryRefresh": [
      "s.Close",
      "require.NotNil",
      "kd.poll",
      "context.WithCancel",
      "ctx.Done",
      "getKumaMadsV1DiscoveryResponse",
      "require.NoError",
      "require.Fail",
      "kd.metrics.Unregister",
      "make",
      "time.Sleep",
      "require.Len",
      "require.Equal",
      "cancel",
      "fmt.Sprintf",
      "yaml.Unmarshal",
      "context.Background",
      "createTestHTTPServer",
      "newKumaTestHTTPDiscovery"
    ],
    "TestKumaMadsV1ResourceParserEmptySlice": [
      "kumaMadsV1ResourceParser",
      "require.Empty",
      "require.NoError",
      "make"
    ],
    "TestKumaMadsV1ResourceParserInvalidResources": [
      "protoJSONMarshalOptions.Marshal",
      "require.NoError",
      "kumaMadsV1ResourceParser",
      "require.Nil",
      "require.ErrorContains"
    ],
    "TestKumaMadsV1ResourceParserInvalidTypeURL": [
      "make",
      "kumaMadsV1ResourceParser",
      "require.Nil",
      "require.Error"
    ],
    "TestKumaMadsV1ResourceParserValidResources": [
      "getKumaMadsV1DiscoveryResponse",
      "require.NoError",
      "kumaMadsV1ResourceParser",
      "require.Len",
      "require.Equal"
    ],
    "TestLabelNames": [
      "errors.New",
      "t.Run",
      "t.Cleanup",
      "require.NoError",
      "http.NewRequest",
      "tc.api.labelNames",
      "req.WithContext",
      "url.Parse",
      "q.Add",
      "q.Encode",
      "u.String",
      "r.Header.Set",
      "request",
      "promqltest.LoadedStorage",
      "storage.Close",
      "u.Query",
      "context.Background",
      "assertAPIError",
      "assertAPIResponse"
    ],
    "TestLabelNamesWithMatchers": [
      "block.Index",
      "context.Background",
      "append",
      "require.NoError",
      "t.Cleanup",
      "require.NotEmpty",
      "block.Close",
      "indexReader.LabelNames",
      "labels.MustNewMatcher",
      "t.Run",
      "storage.NewListSeries",
      "fmt.Sprintf",
      "chunkDir",
      "OpenBlock",
      "indexReader.Close",
      "require.Equal",
      "t.TempDir",
      "labels.FromStrings",
      "createBlock",
      "sequenceFiles"
    ],
    "TestLabelSetNotReused": [
      "require.NoError",
      "require.Equal",
      "makeInputTargetGroup",
      "AlertmanagerFromGroup"
    ],
    "TestLabelValuesWithMatchers": [
      "block.Close",
      "indexReader.Close",
      "t.Run",
      "fmt.Sprintf",
      "require.NoError",
      "require.NotEmpty",
      "OpenBlock",
      "block.Index",
      "context.Background",
      "append",
      "storage.NewListSeries",
      "createBlock",
      "indexReader.SortedLabelValues",
      "t.TempDir",
      "chunkDir",
      "sort.Strings",
      "labels.MustNewMatcher",
      "labels.FromStrings",
      "sequenceFiles",
      "require.Equal",
      "indexReader.LabelValues"
    ],
    "TestLabelsToOpenAPILabelSet": [
      "require.Equal",
      "labelsToOpenAPILabelSet",
      "labels.FromStrings"
    ],
    "TestLabels_BytesWithLabels": [
      "require.Equal",
      "?.Bytes",
      "FromStrings",
      "?.BytesWithLabels"
    ],
    "TestLabels_BytesWithoutLabels": [
      "require.Equal",
      "?.Bytes",
      "FromStrings",
      "?.BytesWithoutLabels"
    ],
    "TestLabels_Compare": [
      "sign",
      "FromStrings",
      "EmptyLabels",
      "Compare",
      "require.Equal"
    ],
    "TestLabels_Copy": [
      "require.Equal",
      "FromStrings",
      "?.Copy"
    ],
    "TestLabels_DropMetricName": [
      "?.DropMetricName",
      "original.Copy",
      "check.DropMetricName",
      "require.True",
      "Equal",
      "FromStrings"
    ],
    "TestLabels_DropReserved": [
      "FromStrings",
      "?.DropReserved",
      "string",
      "original.Copy",
      "check.DropReserved",
      "require.True",
      "Equal"
    ],
    "TestLabels_Equal": [
      "FromStrings",
      "Equal",
      "require.Equal"
    ],
    "TestLabels_FromMaps": [
      "FromMaps",
      "labels.New",
      "require.Equal"
    ],
    "TestLabels_FromStrings": [
      "require.Panics",
      "FromStrings",
      "labels.Range",
      "require.Equal",
      "t.Fatalf"
    ],
    "TestLabels_Get": [
      "require.Empty",
      "?.Get",
      "FromStrings",
      "require.Equal"
    ],
    "TestLabels_Has": [
      "FromStrings",
      "labelsSet.Has",
      "require.Equal"
    ],
    "TestLabels_HasDuplicateLabelNames": [
      "FromMap",
      "FromStrings",
      "c.Input.HasDuplicateLabelNames",
      "require.Equal"
    ],
    "TestLabels_Hash": [
      "FromStrings",
      "lbls.Hash",
      "require.Equal",
      "require.NotEqual",
      "?.Hash"
    ],
    "TestLabels_IsValid": [
      "FromStrings",
      "t.Run",
      "require.Equal",
      "test.input.IsValid"
    ],
    "TestLabels_Map": [
      "require.Equal",
      "?.Map",
      "FromStrings"
    ],
    "TestLabels_MatchLabels": [
      "FromStrings",
      "labels.MatchLabels",
      "require.True",
      "Equal"
    ],
    "TestLabels_String": [
      "len",
      "?.String",
      "require.Equal",
      "require.Len"
    ],
    "TestLabels_ValidationModes": [
      "FromStrings",
      "require.Equal",
      "test.input.IsValid"
    ],
    "TestLabels_WithoutEmpty": [
      "Equal",
      "test.input.WithoutEmpty",
      "FromStrings",
      "EmptyLabels",
      "t.Run",
      "require.True"
    ],
    "TestLastCheckpoint": [
      "t.TempDir",
      "LastCheckpoint",
      "require.Equal",
      "require.NoError",
      "os.MkdirAll",
      "filepath.Join"
    ],
    "TestLazyLoader_WithSamplesTill": [
      "it.Next",
      "require.Equal",
      "labels.NewMatcher",
      "append",
      "querier.Select",
      "require.True",
      "ss.Next",
      "ss.At",
      "require.NoError",
      "suite.Context",
      "require.False",
      "storageSeries.Labels",
      "time.Unix",
      "labels.FromStrings",
      "NewLazyLoader",
      "suite.WithSamplesTill",
      "suite.Queryable",
      "queryable.Querier",
      "suite.Close",
      "s.Metric.Range",
      "storageSeries.Iterator",
      "it.At",
      "it.Err"
    ],
    "TestLeQuantileReLabel": [
      "simpleStorage.Close",
      "relabel.MustNewRegexp",
      "sp.ActiveTargets",
      "context.Background",
      "?.Get",
      "sp.stop",
      "t.Fatalf",
      "s.Labels",
      "require.NoError",
      "model.LabelValue",
      "cancel",
      "simpleStorage.Querier",
      "q.Close",
      "require.Contains",
      "newScrapableServer",
      "sp.Sync",
      "?.UnixNano",
      "time.Now",
      "require.NotContains",
      "len",
      "q.Select",
      "labels.MustNewMatcher",
      "model.Duration",
      "newScrapePool",
      "time.After",
      "context.WithCancel",
      "series.Next",
      "checkValues",
      "teststorage.New",
      "ts.Close",
      "newTestScrapeMetrics",
      "url.Parse",
      "require.Len",
      "series.At"
    ],
    "TestLeveledCompactor_plan": [
      "require.Equal",
      "NewLeveledCompactor",
      "context.Background",
      "require.NoError",
      "metaRange",
      "t.Run",
      "compactor.plan"
    ],
    "TestLexer": [
      "len",
      "require.True",
      "require.NotEqual",
      "posrange.Pos",
      "require.Equal",
      "t.Run",
      "append",
      "l.NextItem"
    ],
    "TestLink": [
      "GraphLinkForExpression",
      "require.Equal",
      "TableLinkForExpression"
    ],
    "TestLinodeSDRefresh": [
      "require.Len",
      "t.Run",
      "NewSDMock",
      "sdmock.Setup",
      "model.LabelValue",
      "require.NoError",
      "metrics.Register",
      "d.refresh",
      "fmt.Sprintf",
      "refreshMetrics.Unregister",
      "promslog.NewNopLogger",
      "sdmock.Endpoint",
      "endpoint.String",
      "context.Background",
      "prometheus.NewRegistry",
      "discovery.NewRefreshMetrics",
      "cfg.NewDiscovererMetrics",
      "metrics.Unregister",
      "d.client.SetBaseURL",
      "NewDiscovery",
      "url.Parse",
      "require.NotNil",
      "require.Equal"
    ],
    "TestListPostings": [
      "NewListPostings",
      "require.Equal",
      "?.Len",
      "require.False",
      "p.Next",
      "storage.SeriesRef",
      "p.At",
      "fmt.Sprintf",
      "make",
      "p.Err",
      "require.True",
      "t.Run",
      "p.Seek",
      "require.NoError"
    ],
    "TestListSeriesIterator": [
      "NewListSeriesIterator",
      "require.Equal",
      "it.Seek",
      "it.At",
      "int64",
      "it.Next"
    ],
    "TestLiteralPrefixInsensitiveStringMatcher": [
      "require.True",
      "m.Matches",
      "require.False"
    ],
    "TestLiteralPrefixSensitiveStringMatcher": [
      "require.True",
      "m.Matches",
      "require.False"
    ],
    "TestLiteralSuffixStringMatcher": [
      "require.True",
      "m.Matches",
      "require.False"
    ],
    "TestLiveReaderCorrupt_RecordTooLongAndShort": [
      "t.TempDir",
      "NewSize",
      "Segments",
      "w.Dir",
      "seg.Close",
      "binary.BigEndian.PutUint16",
      "segmentFile.WriteAt",
      "promslog.NewNopLogger",
      "require.NoError",
      "make",
      "rand.Read",
      "os.OpenFile",
      "w.Close",
      "OpenReadSegment",
      "SegmentName",
      "NewLiveReaderMetrics",
      "r.Next",
      "require.False",
      "require.EqualError",
      "r.Err",
      "w.Log",
      "filepath.Join",
      "byte",
      "segmentFile.Close",
      "NewLiveReader"
    ],
    "TestLiveReaderCorrupt_ShortFile": [
      "NewSize",
      "NewLiveReader",
      "w.Close",
      "segmentFile.Truncate",
      "OpenReadSegment",
      "SegmentName",
      "t.TempDir",
      "rand.Read",
      "w.Log",
      "filepath.Join",
      "require.False",
      "require.Equal",
      "seg.Close",
      "promslog.NewNopLogger",
      "require.NoError",
      "make",
      "os.OpenFile",
      "segmentFile.Close",
      "Segments",
      "w.Dir",
      "r.Next",
      "r.Err"
    ],
    "TestLoadConfig": [
      "LoadFile",
      "promslog.NewNopLogger",
      "require.NoError",
      "require.Equal"
    ],
    "TestLoadConfigRuleFilesAbsolutePath": [
      "LoadFile",
      "promslog.NewNopLogger",
      "require.NoError",
      "require.Equal"
    ],
    "TestLockfile": [
      "promslog.NewNopLogger",
      "prometheus.NewRegistry",
      "remote.NewStorage",
      "require.NoError",
      "db.Close",
      "tsdbutil.TestDirLockerUsage",
      "t.Cleanup",
      "rs.Close",
      "DefaultOptions",
      "Open",
      "testutil.NewCallbackCloser",
      "tsdbutil.TestDirLockerUsage",
      "DefaultOptions",
      "Open",
      "require.NoError",
      "testutil.NewCallbackCloser",
      "db.Close",
      "require.NoError",
      "locker.Lock",
      "testutil.NewCallbackCloser",
      "locker.Release",
      "TestDirLockerUsage",
      "NewDirLocker",
      "promslog.NewNopLogger"
    ],
    "TestLocking": [
      "testutil.NewTemporaryDirectory",
      "dir.Close",
      "filepath.Join",
      "dir.Path",
      "require.Nil",
      "lock.Release",
      "os.Stat",
      "require.Error",
      "Flock",
      "require.NoError",
      "require.False",
      "require.True"
    ],
    "TestLogPartialWrite": [
      "w.Log",
      "require.Equal",
      "require.NoError",
      "w.Close",
      "OpenReadSegment",
      "NewReader",
      "require.True",
      "t.TempDir",
      "require.ErrorIs",
      "SegmentName",
      "s.Close",
      "r.Record",
      "len",
      "NewSize",
      "NewSegmentBufReader",
      "r.Next",
      "r.Err",
      "require.False",
      "t.Run"
    ],
    "TestMIMEType_Satisfies": [
      "m.Satisfies",
      "require.Equal",
      "t.Run"
    ],
    "TestMIMEType_String": [
      "require.Equal",
      "m.String"
    ],
    "TestMMapFile": [
      "require.NoError",
      "copy",
      "closer.Close",
      "t.Cleanup",
      "f.Close",
      "make",
      "f.Read",
      "t.TempDir",
      "getMMappedFile",
      "os.Open",
      "require.Equal",
      "filepath.Join"
    ],
    "TestMain": [
      "os.Exit",
      "append",
      "main",
      "os.Setenv",
      "m.Run",
      "append",
      "main",
      "m.Run",
      "os.Exit",
      "goleak.VerifyTestMain",
      "goleak.VerifyTestMain",
      "goleak.IgnoreTopFunction",
      "goleak.VerifyTestMain",
      "goleak.VerifyTestMain",
      "goleak.VerifyTestMain",
      "testutil.TolerantVerifyLeak",
      "testutil.TolerantVerifyLeak",
      "goleak.VerifyTestMain",
      "goleak.VerifyTestMain",
      "goleak.VerifyTestMain",
      "testutil.TolerantVerifyLeak",
      "prom_testutil.TolerantVerifyLeak",
      "testutil.TolerantVerifyLeak",
      "m.Run",
      "os.Exit",
      "flag.BoolVar",
      "flag.Parse",
      "goleak.VerifyTestMain",
      "goleak.IgnoreTopFunction",
      "goleak.VerifyTestMain",
      "goleak.VerifyTestMain",
      "goleak.VerifyTestMain",
      "os.Setenv",
      "os.Exit",
      "m.Run"
    ],
    "TestMakeXDSResourceHttpEndpoint": [
      "require.Equal",
      "endpointURL.String",
      "makeXDSResourceHTTPEndpointURL",
      "urlMustParse",
      "require.NoError"
    ],
    "TestMakeXDSResourceHttpEndpointEmptyServerURLHost": [
      "makeXDSResourceHTTPEndpointURL",
      "urlMustParse",
      "require.Empty",
      "require.ErrorContains"
    ],
    "TestMakeXDSResourceHttpEndpointEmptyServerURLScheme": [
      "makeXDSResourceHTTPEndpointURL",
      "urlMustParse",
      "require.Empty",
      "require.EqualError"
    ],
    "TestManagerApplyConfig": [
      "require.Error",
      "loadConfiguration",
      "require.NoError",
      "noopLoop",
      "labels.NewSymbolTable",
      "scrapeManager.ApplyConfig",
      "require.FailNow",
      "make",
      "prometheus.NewRegistry",
      "NewManager"
    ],
    "TestManagerCTZeroIngestion": [
      "require.Empty",
      "applyConfig",
      "errors.New",
      "require.Len",
      "float64",
      "require.NoError",
      "findSamplesForMetric",
      "context.Background",
      "sampleTs.Add",
      "runManagers",
      "runutil.Retry",
      "app.mtx.Lock",
      "len",
      "t.Run",
      "context.WithTimeout",
      "ctx.Done",
      "?.UnixNano",
      "?.AsTime",
      "timestamppb.New",
      "cancel",
      "setupTestServer",
      "url.Parse",
      "require.Equal",
      "timestamp.FromTime",
      "context.WithCancel",
      "time.Now",
      "scrapeManager.Stop",
      "fmt.Sprintf",
      "app.mtx.Unlock",
      "prepareTestEncodedCounter"
    ],
    "TestManagerCTZeroIngestionHistogram": [
      "runManagers",
      "server.Close",
      "app.mtx.Lock",
      "len",
      "once.Do",
      "fmt.Sprintf",
      "h.metric.Get",
      "errors.New",
      "proto.String",
      "runutil.Retry",
      "context.Background",
      "applyConfig",
      "tc.inputHistSample.CreatedTimestamp.IsValid",
      "require.Len",
      "t.Run",
      "cancel",
      "w.WriteHeader",
      "tc.inputHistSample.GetSampleSum",
      "app.mtx.Unlock",
      "timestamppb.Now",
      "http.HandlerFunc",
      "?.Set",
      "url.Parse",
      "ctx.Done",
      "require.Equal",
      "generateTestHistogram",
      "w.Header",
      "protoMarshalDelimited",
      "require.NoError",
      "append",
      "context.WithCancel",
      "scrapeManager.Stop",
      "httptest.NewServer",
      "w.Write",
      "context.WithTimeout"
    ],
    "TestManagerScrapePools": [
      "require.ElementsMatch",
      "prometheus.NewRegistry",
      "context.WithCancel",
      "context.Background",
      "cancel",
      "NewManager",
      "require.NoError",
      "loadConfiguration",
      "noopLoop",
      "uint64",
      "reload",
      "scrapeManager.ScrapePools"
    ],
    "TestManagerTargetsUpdates": [
      "time.After",
      "require.Fail",
      "prometheus.NewRegistry",
      "NewManager",
      "require.NoError",
      "m.Run",
      "m.Stop",
      "strconv.Itoa",
      "m.mtxScrape.Lock",
      "m.mtxScrape.Unlock",
      "require.Equal",
      "make"
    ],
    "TestManager_LoadGroups_ShouldCheckWhetherEachRuleHasDependentsAndDependencies": [
      "storage.Close",
      "promslog.NewNopLogger",
      "labels.EmptyLabels",
      "require.Len",
      "require.NoError",
      "NewManager",
      "r.Name",
      "r.NoDependencyRules",
      "t.Cleanup",
      "t.Run",
      "ruleManager.Rules",
      "r.NoDependentRules",
      "teststorage.New",
      "context.Background",
      "ruleManager.LoadGroups",
      "require.Empty",
      "require.Truef",
      "r.String",
      "require.Equalf"
    ],
    "TestMapFromVMScaleSetVMWithEmptyOSType": [
      "armcompute.VirtualMachineSizeTypes",
      "mapFromVMScaleSetVM",
      "require.Equal"
    ],
    "TestMapFromVMScaleSetVMWithEmptyTags": [
      "armcompute.VirtualMachineSizeTypes",
      "mapFromVMScaleSetVM",
      "require.Equal"
    ],
    "TestMapFromVMScaleSetVMWithTags": [
      "armcompute.VirtualMachineSizeTypes",
      "new",
      "mapFromVMScaleSetVM",
      "require.Equal"
    ],
    "TestMapFromVMWithEmptyOSType": [
      "armcompute.VirtualMachineSizeTypes",
      "mapFromVM",
      "require.Equal"
    ],
    "TestMapFromVMWithEmptyTags": [
      "armcompute.VirtualMachineSizeTypes",
      "mapFromVM",
      "require.Equal"
    ],
    "TestMapFromVMWithTags": [
      "armcompute.VirtualMachineSizeTypes",
      "new",
      "mapFromVM",
      "require.Equal"
    ],
    "TestMarathonSDEmptyList": [
      "testUpdateServices",
      "require.NoError",
      "require.Empty"
    ],
    "TestMarathonSDHandleError": [
      "errors.New",
      "testUpdateServices",
      "require.ErrorIs",
      "require.Empty"
    ],
    "TestMarathonSDRemoveApp": [
      "discovery.NewRefreshMetrics",
      "md.refresh",
      "require.NotEmpty",
      "testConfig",
      "NewDiscovery",
      "cfg.NewDiscovererMetrics",
      "context.Background",
      "require.Len",
      "require.Equal",
      "prometheus.NewRegistry",
      "require.NoError",
      "metrics.Register",
      "metrics.Unregister",
      "refreshMetrics.Unregister",
      "marathonTestAppList"
    ],
    "TestMarathonSDSendGroup": [
      "require.NoError",
      "require.Len",
      "require.Equal",
      "string",
      "model.LabelName",
      "marathonTestAppList",
      "testUpdateServices"
    ],
    "TestMarathonSDSendGroupWithContainerNetworkAndPortMapping": [
      "testUpdateServices",
      "require.NoError",
      "require.Len",
      "require.Equal",
      "string",
      "model.LabelName",
      "require.Empty",
      "marathonTestAppListWithContainerNetworkAndPortMappings"
    ],
    "TestMarathonSDSendGroupWithContainerPortMappings": [
      "require.Empty",
      "marathonTestAppListWithContainerPortMappings",
      "testUpdateServices",
      "require.NoError",
      "require.Len",
      "require.Equal",
      "string",
      "model.LabelName"
    ],
    "TestMarathonSDSendGroupWithDockerContainerPortMappings": [
      "require.Len",
      "require.Equal",
      "string",
      "model.LabelName",
      "require.Empty",
      "marathonTestAppListWithDockerContainerPortMappings",
      "testUpdateServices",
      "require.NoError"
    ],
    "TestMarathonSDSendGroupWithMultiplePort": [
      "model.LabelName",
      "require.Empty",
      "marathonTestAppListWithMultiplePorts",
      "testUpdateServices",
      "require.NoError",
      "require.Len",
      "require.Equal",
      "string"
    ],
    "TestMarathonSDSendGroupWithPortDefinitions": [
      "require.NoError",
      "require.Len",
      "require.Equal",
      "string",
      "require.Empty",
      "model.LabelName",
      "marathonTestAppListWithPortDefinitions",
      "testUpdateServices"
    ],
    "TestMarathonSDSendGroupWithPortDefinitionsRequirePorts": [
      "require.Len",
      "require.Equal",
      "string",
      "require.Empty",
      "model.LabelName",
      "marathonTestAppListWithPortDefinitionsRequirePorts",
      "testUpdateServices",
      "require.NoError"
    ],
    "TestMarathonSDSendGroupWithPorts": [
      "require.Equal",
      "string",
      "require.Empty",
      "model.LabelName",
      "marathonTestAppListWithPorts",
      "testUpdateServices",
      "require.NoError",
      "require.Len"
    ],
    "TestMarathonZeroTaskPorts": [
      "require.Len",
      "require.Equal",
      "require.Empty",
      "marathonTestZeroTaskPortAppList",
      "testUpdateServices",
      "require.NoError"
    ],
    "TestMarshalStoreSamplesRequest": [
      "TagValue",
      "tagsFromMetric",
      "json.Marshal",
      "require.NoError",
      "require.JSONEq",
      "string",
      "json.Unmarshal",
      "require.Equal"
    ],
    "TestMarshaling": [
      "json.Unmarshal",
      "require.Equal",
      "require.YAMLEq",
      "require.NoError",
      "require.JSONEq",
      "string",
      "yaml.Marshal",
      "yaml.Unmarshal",
      "FromStrings",
      "json.Marshal"
    ],
    "TestMatcher": [
      "test.matcher.Matches",
      "mustNewMatcher",
      "require.Equal"
    ],
    "TestMatrix_ContainsSameLabelset": [
      "labels.FromStrings",
      "t.Run",
      "require.Equal",
      "tc.matrix.ContainsSameLabelset"
    ],
    "TestMaxBlockChunkSegmentSizeBounds": [
      "require.Equal",
      "wg.Done",
      "prom.Wait",
      "require.Error",
      "exec.Command",
      "wg.Wait",
      "io.ReadAll",
      "make",
      "t.Fatalf",
      "testing.Short",
      "t.Skip",
      "t.Run",
      "time.After",
      "exitError.Sys",
      "string",
      "prom.Start",
      "status.ExitStatus",
      "t.Parallel",
      "filepath.Join",
      "prom.StderrPipe",
      "t.Log",
      "prom.Process.Kill",
      "require.ErrorAs",
      "t.TempDir",
      "require.NoError",
      "wg.Add"
    ],
    "TestMaxQuerySamples": [
      "engine.NewInstantQuery",
      "context.Background",
      "engine.NewRangeQuery",
      "require.NotNil",
      "t.Cleanup",
      "t.Run",
      "require.Equal",
      "promqltest.NewTestEngine",
      "promql.ErrTooManySamples",
      "promqltest.LoadedStorage",
      "storage.Close",
      "testFunc",
      "time.Unix",
      "newTestEngine",
      "require.NoError",
      "qry.Exec",
      "qry.Stats"
    ],
    "TestMaxSchemaAppender": [
      "app.Commit",
      "app.AppendHistogram",
      "fmt.Sprintf",
      "int64",
      "labels.FromStrings",
      "?.ToFloat",
      "c.h.Copy",
      "require.Equal",
      "require.NoError",
      "t.Run"
    ],
    "TestMaxSubscribers": [
      "require.False",
      "unsubscribe1",
      "unsubscribe2",
      "unsubscribe4",
      "NewNotifications",
      "notifs.Sub",
      "require.True"
    ],
    "TestMemPostingsStats": [
      "NewMemPostings",
      "p.Add",
      "labels.FromStrings",
      "p.Stats",
      "uint64",
      "len",
      "require.Equal"
    ],
    "TestMemPostings_Delete": [
      "p.Add",
      "labels.FromStrings",
      "p.Postings",
      "ExpandPostings",
      "require.NoError",
      "require.Empty",
      "NewMemPostings",
      "context.Background",
      "p.Delete",
      "require.Equal"
    ],
    "TestMemPostings_PostingsForAllLabelValues": [
      "labels.FromStrings",
      "mp.PostingsForAllLabelValues",
      "require.NoError",
      "p.Err",
      "NewMemPostings",
      "mp.Add",
      "context.Background",
      "ExpandPostings",
      "require.Equal"
    ],
    "TestMemPostings_PostingsForLabelMatching": [
      "strconv.Atoi",
      "require.NoError",
      "p.Err",
      "require.Equal",
      "ExpandPostings",
      "NewMemPostings",
      "mp.Add",
      "labels.FromStrings",
      "panic",
      "mp.PostingsForLabelMatching",
      "context.Background"
    ],
    "TestMemPostings_PostingsForLabelMatchingHonorsContextCancel": [
      "memP.PostingsForLabelMatching",
      "require.Error",
      "require.Equal",
      "ctx.Count",
      "NewMemPostings",
      "memP.Add",
      "labels.FromStrings",
      "uint64",
      "storage.SeriesRef",
      "fmt.Sprintf",
      "p.Err"
    ],
    "TestMemPostings_addFor": [
      "NewMemPostings",
      "p.addFor",
      "require.Equal"
    ],
    "TestMemPostings_ensureOrder": [
      "require.True",
      "NewUnorderedMemPostings",
      "make",
      "storage.SeriesRef",
      "rand.Uint64",
      "strconv.Itoa",
      "p.EnsureOrder",
      "sort.SliceIsSorted"
    ],
    "TestMemSeriesIsolation": [
      "require.Empty",
      "float64",
      "len",
      "lastValue",
      "hb.appender",
      "wal.Dir",
      "h.iso.State",
      "h.chunksRange",
      "querier.Close",
      "w.Dir",
      "context.Background",
      "int",
      "app.Rollback",
      "DefaultHeadOptions",
      "NewHead",
      "querier.Select",
      "h.mmapHeadChunks",
      "hb.Close",
      "h.appender",
      "int64",
      "expandSeriesSet",
      "newTestHead",
      "hb.Init",
      "t.Skip",
      "h.Index",
      "require.NoError",
      "tombstones.NewMemTombstones",
      "addSamples",
      "testIsolation",
      "labels.FromStrings",
      "app.Commit",
      "require.Equal",
      "wlog.NewSize",
      "labels.MustNewMatcher",
      "h.MinTime",
      "app.Append"
    ],
    "TestMemSeries_append": [
      "chunks.NewChunkDiskMapper",
      "require.NoError",
      "chunkDiskMapper.Close",
      "require.True",
      "require.False",
      "s.mmapChunks",
      "require.Equal",
      "len",
      "t.TempDir",
      "chunkenc.NewPool",
      "chk.NumSamples",
      "float64",
      "chunkDiskMapper.Chunk",
      "newMemSeries",
      "s.append",
      "require.Greater",
      "require.Len",
      "int64"
    ],
    "TestMemSeries_appendHistogram": [
      "require.NoError",
      "s.appendHistogram",
      "chunkenc.NewPool",
      "int64",
      "tsdbutil.GenerateTestHistograms",
      "append",
      "t.TempDir",
      "chunkDiskMapper.Close",
      "newMemSeries",
      "?.Copy",
      "require.True",
      "require.Equal",
      "chunks.NewChunkDiskMapper",
      "require.False",
      "s.mmapChunks",
      "require.Len"
    ],
    "TestMemSeries_append_atVariableRate": [
      "chunkDiskMapper.Close",
      "require.True",
      "s.mmapChunks",
      "require.LessOrEqualf",
      "chunkenc.NewPool",
      "s.append",
      "uint16",
      "len",
      "t.TempDir",
      "require.NoError",
      "t.Cleanup",
      "int",
      "require.Equal",
      "chunks.NewChunkDiskMapper",
      "newMemSeries",
      "float64",
      "require.Truef"
    ],
    "TestMemSeries_chunk": [
      "tc.setup",
      "require.Empty",
      "require.Equal",
      "int64",
      "s.headChunks.oldest",
      "t.Run",
      "chunkDiskMapper.Close",
      "series.chunk",
      "float64",
      "require.True",
      "appendSamples",
      "require.Len",
      "chunkenc.NewPool",
      "require.Nil",
      "s.mmapChunks",
      "cdm.Close",
      "require.NoError",
      "newMemSeries",
      "require.False",
      "require.Error",
      "s.append",
      "s.headChunks.len",
      "t.TempDir",
      "chunks.NewChunkDiskMapper",
      "labels.EmptyLabels"
    ],
    "TestMemSeries_truncateChunks": [
      "chunkenc.NewPool",
      "require.NoError",
      "newMemSeries",
      "s.append",
      "require.True",
      "s.mmapChunks",
      "t.TempDir",
      "chunks.NewChunkDiskMapper",
      "labels.FromStrings",
      "len",
      "s.chunk",
      "s.truncateChunksBefore",
      "require.Equal",
      "chunkDiskMapper.Close",
      "int64",
      "float64",
      "s.headChunkID",
      "require.NotNil"
    ],
    "TestMemSeries_truncateChunks_scenarios": [
      "chunks.NewChunkDiskMapper",
      "labels.EmptyLabels",
      "float64",
      "require.NotNil",
      "series.headChunks.oldest",
      "require.NoError",
      "newMemSeries",
      "require.True",
      "require.Equal",
      "series.headChunks.len",
      "require.Len",
      "require.GreaterOrEqual",
      "t.TempDir",
      "chunkenc.NewPool",
      "chunkDiskMapper.Close",
      "int64",
      "require.Nil",
      "t.Run",
      "series.append",
      "series.mmapChunks",
      "series.truncateChunksBefore",
      "len",
      "series.maxTime"
    ],
    "TestMemTombstonesConcurrency": [
      "tomb.AddInterval",
      "storage.SeriesRef",
      "int64",
      "wg.Done",
      "tomb.Get",
      "require.NoError",
      "wg.Wait",
      "NewMemTombstones",
      "wg.Add"
    ],
    "TestMemoizedSeriesIterator": [
      "NewMemoizedIterator",
      "NewListSeriesIterator",
      "tsdbutil.GenerateTestFloatHistogram",
      "it.Seek",
      "it.AtT",
      "require.Equal",
      "it.AtFloatHistogram",
      "it.PeekPrev",
      "tsdbutil.GenerateTestHistogram",
      "sampleEq",
      "prevSampleEq",
      "it.At"
    ],
    "TestMergeChunkQuerierWithNoVerticalChunkSeriesMerger": [
      "t.Run",
      "append",
      "NewCompactingChunkSeriesMerger",
      "require.True",
      "merged.At",
      "NewMockChunkSeriesSet",
      "NewListChunkSeriesFromSamples",
      "NoopChunkedQuerier",
      "ExpandChunks",
      "merged.Err",
      "require.False",
      "expectedSeries.Iterator",
      "actualSeries.Iterator",
      "require.NoError",
      "math.NaN",
      "NewMergeChunkQuerier",
      "tc.expected.At",
      "actualSeries.Labels",
      "labels.FromStrings",
      "context.Background",
      "tc.expected.Next",
      "expectedSeries.Labels",
      "?.Select",
      "merged.Next",
      "require.Equal"
    ],
    "TestMergeLabels": [
      "require.Equal",
      "MergeLabels"
    ],
    "TestMergeQuerierConcurrentSelectMatchers": [
      "context.Background",
      "mergedQuerier.Close",
      "genSeries",
      "NewBlockQuerier",
      "storage.NewMergeQuerier",
      "require.NoError",
      "block.Close",
      "labels.MustNewMatcher",
      "append",
      "require.Equal",
      "OpenBlock",
      "createBlock",
      "t.TempDir",
      "mergedQuerier.Select"
    ],
    "TestMergeQuerierWithChainMerger": [
      "append",
      "mergedQuerier.Next",
      "mergedQuerier.At",
      "mergedQuerier.Err",
      "NewListSeries",
      "labels.FromStrings",
      "math.NaN",
      "t.Run",
      "tc.expected.At",
      "expectedSeries.Iterator",
      "actualSeries.Iterator",
      "require.Equal",
      "ExpandSamples",
      "NoopQuerier",
      "context.Background",
      "require.NoError",
      "tc.expected.Next",
      "expectedSeries.Labels",
      "actualSeries.Labels",
      "NewMockSeriesSet",
      "?.Select",
      "NewMergeQuerier",
      "require.True",
      "require.False"
    ],
    "TestMergeQuerierWithSecondaries_ErrorHandling": [
      "require.ErrorIs",
      "visitMockQueriers",
      "annotations.New",
      "q.Select",
      "res.Next",
      "res.At",
      "require.Subset",
      "res.Warnings",
      "requireEqualSlice",
      "q.LabelValues",
      "labels.FromStrings",
      "?.Add",
      "t.Run",
      "?.Labels",
      "require.Equal",
      "len",
      "context.Background",
      "NewMergeQuerier",
      "append",
      "res.Err",
      "q.LabelNames",
      "errors.New",
      "labels.MustNewMatcher"
    ],
    "TestMergedPostings": [
      "EmptyPostings",
      "newListPostings",
      "t.Run",
      "m.Next",
      "require.NotEqual",
      "require.Equal",
      "require.NotNil",
      "context.Background",
      "ExpandPostings",
      "require.NoError",
      "Merge",
      "require.False"
    ],
    "TestMergedPostingsSeek": [
      "newListPostings",
      "Merge",
      "require.Equal",
      "p.At",
      "ExpandPostings",
      "require.NoError",
      "context.Background",
      "p.Seek",
      "append"
    ],
    "TestMetadata": [
      "string",
      "expectedMeta.IsEmptyFor",
      "testutil.RequireEqual",
      "labels.NewScratchBuilder",
      "lb.Labels",
      "slb.Add",
      "expectedMeta.AddToLabels",
      "labels.FromStrings",
      "expectedMeta.SetToLabels",
      "fmt.Sprintf",
      "NewMetadataFromLabels",
      "slb.Labels",
      "lb.Add",
      "lb.Sort",
      "t.Run",
      "require.Equal",
      "expectedMeta.IsTypeEmpty",
      "slb.Sort",
      "labels.NewBuilder"
    ],
    "TestMetadataAssertInMemoryData": [
      "openTestDB",
      "s3.Hash",
      "db.Close",
      "Open",
      "t.Cleanup",
      "reopenDB.Close",
      "app.UpdateMetadata",
      "s2.Hash",
      "updateMetadata",
      "labels.FromStrings",
      "app.Append",
      "app.Commit",
      "require.Equal",
      "require.Nil",
      "reopenDB.head.wal.Size",
      "require.NoError",
      "db.Appender",
      "db.head.series.getByHash",
      "s1.Hash",
      "s4.Hash",
      "db.Dir",
      "reopenDB.head.series.getByHash",
      "context.Background"
    ],
    "TestMetadataCheckpointingOnlyKeepsLatestEntry": [
      "require.NoError",
      "newTestHead",
      "app.Append",
      "updateMetadata",
      "append",
      "sort.Slice",
      "require.Equal",
      "app.UpdateMetadata",
      "hb.Close",
      "labels.FromStrings",
      "wlog.Segments",
      "w.Dir",
      "wlog.Checkpoint",
      "context.Background",
      "hb.Appender",
      "app.Commit",
      "readTestWAL",
      "int64",
      "wlog.LastCheckpoint",
      "record.GetMetricType",
      "require.Len",
      "promslog.NewNopLogger"
    ],
    "TestMetadataDelivery": [
      "m.Stop",
      "strconv.Itoa",
      "require.Equal",
      "context.Background",
      "client_testutil.ToFloat64",
      "require.Len",
      "len",
      "newTestClientAndQueueManager",
      "m.Start",
      "append",
      "m.AppendWatcherMetadata"
    ],
    "TestMetadataInWAL": [
      "newTestDB",
      "path.Join",
      "require.Len",
      "context.Background",
      "app.Append",
      "updateMetadata",
      "readTestWAL",
      "db.Dir",
      "append",
      "require.NoError",
      "db.Appender",
      "record.GetMetricType",
      "app.UpdateMetadata",
      "labels.FromStrings",
      "app.Commit",
      "require.Equal"
    ],
    "TestMetricStreamingDecoder": [
      "make",
      "float64",
      "?.GetValue",
      "d.GetUnit",
      "d.Metric.GetCounter",
      "nextFn",
      "proto.Marshal",
      "d.NextMetricFamily",
      "labels.NewScratchBuilder",
      "d.Label",
      "require.NoError",
      "len",
      "buf.Bytes",
      "d.GetType",
      "firstMetricLset.String",
      "?.String",
      "proto.UnmarshalText",
      "errors.Is",
      "b.Labels",
      "uint64",
      "buf.Write",
      "d.NextMetric",
      "d.GetName",
      "d.GetHelp",
      "binary.PutUvarint",
      "NewMetricStreamingDecoder",
      "require.Equal",
      "d.GetGauge"
    ],
    "TestMetricTextToWriteRequestErrorParsingFloatValue": [
      "bytes.NewReader",
      "MetricTextToWriteRequest",
      "require.Equal",
      "err.Error"
    ],
    "TestMetricTextToWriteRequestErrorParsingMetricType": [
      "bytes.NewReader",
      "MetricTextToWriteRequest",
      "require.Equal",
      "err.Error"
    ],
    "TestMetricsStalenessOnManagerShutdown": [
      "promslog.NewNopLogger",
      "ruleManager.Stop",
      "require.Less",
      "testing.Short",
      "t.Skip",
      "context.Background",
      "ruleManager.start",
      "time.Sleep",
      "time.Now",
      "teststorage.New",
      "storage.Close",
      "require.Equal",
      "ruleManager.Update",
      "labels.EmptyLabels",
      "EngineQueryFunc",
      "require.NoError",
      "time.Since",
      "countStaleNaN",
      "promqltest.NewTestEngineWithOpts",
      "NewManager"
    ],
    "TestMetricsUpdate": [
      "prometheus.NewRegistry",
      "EngineQueryFunc",
      "context.Background",
      "ruleManager.Stop",
      "m.GetName",
      "labels.EmptyLabels",
      "time.Sleep",
      "countMetrics",
      "teststorage.New",
      "storage.Close",
      "promslog.NewNopLogger",
      "ruleManager.start",
      "registry.Gather",
      "slices.Contains",
      "promqltest.NewTestEngineWithOpts",
      "require.NoError",
      "ruleManager.Update",
      "require.Equal",
      "NewManager",
      "len"
    ],
    "TestMigrateTestData_BasicMode": [
      "t.Run",
      "assertMigration"
    ],
    "TestMigrateTestData_StrictMode": [
      "assertMigration",
      "t.Run"
    ],
    "TestMigrateTestData_TolerantMode": [
      "t.Run",
      "assertMigration"
    ],
    "TestMmapPanicAfterMmapReplayCorruption": [
      "opts.MaxExemplars.Store",
      "NewHead",
      "context.Background",
      "float64",
      "app.Commit",
      "h.Close",
      "t.TempDir",
      "wlog.NewSize",
      "DefaultHeadOptions",
      "os.OpenFile",
      "f.WriteAt",
      "f.Close",
      "require.NoError",
      "labels.FromStrings",
      "addChunks",
      "h.Appender",
      "app.Append",
      "filepath.Join",
      "h.Init",
      "int64"
    ],
    "TestMockSeries": [
      "require.Equal",
      "storage.MockSeries",
      "s.Iterator",
      "it.Next",
      "it.At",
      "append"
    ],
    "TestModeSpecificFlags": [
      "errors.As",
      "exitError.Sys",
      "append",
      "prom.Start",
      "t.Errorf",
      "status.ExitStatus",
      "t.Skip",
      "prom.StderrPipe",
      "prom.Wait",
      "prom.Process.Kill",
      "require.Equal",
      "fmt.Sprintf",
      "wg.Wait",
      "t.Log",
      "exec.Command",
      "wg.Add",
      "string",
      "wg.Done",
      "time.After",
      "testing.Short",
      "t.Parallel",
      "require.NoError",
      "t.Run",
      "require.Error",
      "t.TempDir",
      "io.ReadAll",
      "make"
    ],
    "TestMultiError_As": [
      "require.Equal",
      "require.NotErrorAs",
      "t.Run",
      "?.Err",
      "NewMulti",
      "require.ErrorAs"
    ],
    "TestMultiError_Is": [
      "fmt.Errorf",
      "?.Err",
      "NewMulti",
      "t.Run",
      "require.Equal",
      "errors.Is",
      "mErr.Err",
      "errors.New"
    ],
    "TestMultiIntersect": [
      "require.Equal",
      "make",
      "len",
      "append",
      "newListPostings",
      "ExpandPostings",
      "Intersect",
      "require.NoError"
    ],
    "TestMultiMerge": [
      "require.NoError",
      "require.Equal",
      "newListPostings",
      "ExpandPostings",
      "Merge",
      "context.Background"
    ],
    "TestMultipleEncodingsCommitOrder": [
      "require.Len",
      "requireEqualSamples",
      "append",
      "db.Appender",
      "?.T",
      "app.Append",
      "float64",
      "series1.String",
      "queryChunks",
      "require.NotNil",
      "storage.ExpandSamples",
      "context.Background",
      "db.Close",
      "query",
      "app.Commit",
      "db.DisableCompactions",
      "db.EnableNativeHistograms",
      "app.AppendHistogram",
      "labels.MustNewMatcher",
      "chunkQuerier.Close",
      "it.Err",
      "int64",
      "sort.Slice",
      "labels.FromStrings",
      "require.NoError",
      "requireEqualOOOSamples",
      "db.Querier",
      "querier.Close",
      "verifySamples",
      "DefaultOptions",
      "time.Hour.Milliseconds",
      "tsdbutil.GenerateTestFloatHistogram",
      "db.ChunkQuerier",
      "chunk.Chunk.Iterator",
      "addSample",
      "openTestDB",
      "tsdbutil.GenerateTestHistogram"
    ],
    "TestMultipleListenAddresses": [
      "t.Cleanup",
      "panic",
      "cancel",
      "t.TempDir",
      "tsdb.Open",
      "context.WithCancel",
      "webHandler.Run",
      "webHandler.SetReady",
      "cleanupTestResponse",
      "db.Close",
      "testutil.RandomUnprivilegedPort",
      "New",
      "webHandler.Listeners",
      "time.Sleep",
      "http.Get",
      "require.Equal",
      "t.Parallel",
      "fmt.Sprintf",
      "require.NoError",
      "context.Background"
    ],
    "TestMultipleSubscribers": [
      "wg.Done",
      "notifs.DeleteNotification",
      "wg.Wait",
      "NewNotifications",
      "notifs.Sub",
      "make",
      "append",
      "notifs.AddNotification",
      "unsubscribe2",
      "require.Len",
      "require.True",
      "wg.Add",
      "time.Sleep",
      "unsubscribe1",
      "require.Equal"
    ],
    "TestNHCBConvert": [
      "fh.Validate",
      "NewTempHistogram",
      "h.SetSum",
      "math.Inf",
      "th.Convert",
      "require.ErrorIs",
      "require.Equal",
      "require.NoError",
      "h.Validate",
      "h.SetBucketCount",
      "h.SetCount",
      "t.Run",
      "test.setup"
    ],
    "TestNHCBParserErrorHandling": [
      "NewNHCBParser",
      "testParse",
      "requireEntries",
      "labels.FromStrings",
      "NewOpenMetricsParser",
      "labels.NewSymbolTable",
      "WithOMParserCTSeriesSkipped"
    ],
    "TestNHCBParserOMParser_MultipleHistograms": [
      "NewNHCBParser",
      "testParse",
      "requireEntries",
      "labels.FromStrings",
      "NewOpenMetricsParser",
      "labels.NewSymbolTable",
      "WithOMParserCTSeriesSkipped"
    ],
    "TestNHCBParserOnOMParser": [
      "WithOMParserCTSeriesSkipped",
      "NewNHCBParser",
      "testParse",
      "requireEntries",
      "labels.FromStrings",
      "int64p",
      "NewOpenMetricsParser",
      "labels.NewSymbolTable"
    ],
    "TestNHCBParserResetLastExponential": [
      "proto.UnmarshalText",
      "buf.Write",
      "labels.FromStrings",
      "labels.NewSymbolTable",
      "NewNHCBParser",
      "testParse",
      "make",
      "uint64",
      "len",
      "NewProtobufParser",
      "buf.Bytes",
      "requireEntries",
      "require.NoError",
      "binary.PutUvarint",
      "proto.Marshal",
      "int64p"
    ],
    "TestNHCBParser_NoNHCBWhenExponential": [
      "bucketForMetric",
      "t.Run",
      "testParse",
      "strconv.FormatBool",
      "int64p",
      "NewPromParser",
      "require.True",
      "strconv.Itoa",
      "NewNHCBParser",
      "inputBuf.Bytes",
      "WithOMParserCTSeriesSkipped",
      "labels.NewSymbolTable",
      "NewOpenMetricsParser",
      "append",
      "labels.FromStrings",
      "tc.parser",
      "createTestProtoBufHistogram",
      "NewProtobufParser",
      "parser",
      "requireEntries",
      "createTestOpenMetricsHistogram",
      "createTestPromHistogram"
    ],
    "TestNaNExpression": [
      "ParseExpr",
      "require.NoError",
      "require.True",
      "math.IsNaN"
    ],
    "TestNativeHistogramFlag": [
      "db.Close",
      "context.Background",
      "h.ToFloat",
      "query",
      "labels.MustNewMatcher",
      "t.TempDir",
      "Open",
      "t.Cleanup",
      "db.DisableNativeHistograms",
      "db.EnableNativeHistograms",
      "db.Querier",
      "l.String",
      "require.NoError",
      "app.AppendHistogram",
      "require.Equal",
      "labels.FromStrings",
      "db.Appender",
      "app.Commit"
    ],
    "TestNativeHistogramMaxSchemaSet": [
      "t.Run",
      "t.Parallel",
      "testNativeHistogramMaxSchemaSet"
    ],
    "TestNativeHistogramsInRecordingRules": [
      "require.Equal",
      "storage.Close",
      "ts.UnixMilli",
      "EngineQueryFunc",
      "?.UnixMilli",
      "require.False",
      "db.Querier",
      "labels.MustNewMatcher",
      "s.Labels",
      "time.Now",
      "context.Background",
      "strconv.Itoa",
      "it.Next",
      "expHist.Add",
      "it.AtFloatHistogram",
      "ss.Next",
      "t.Cleanup",
      "tsdbutil.GenerateTestHistograms",
      "db.Appender",
      "promslog.NewNopLogger",
      "group.Eval",
      "?.ToFloat",
      "s.Iterator",
      "labels.FromStrings",
      "app.AppendHistogram",
      "testEngine",
      "q.Select",
      "ss.At",
      "require.NoError",
      "app.Commit",
      "parser.ParseExpr",
      "NewGroup",
      "require.True",
      "teststorage.New",
      "h.Copy",
      "NewRecordingRule",
      "ts.Add",
      "h.ToFloat"
    ],
    "TestNegotiateResponseType": [
      "NegotiateResponseType",
      "require.NoError",
      "require.Equal",
      "require.Error",
      "require.EqualError"
    ],
    "TestNewAzureResourceFromID": [
      "newAzureResourceFromID",
      "require.NoError",
      "require.Equal"
    ],
    "TestNewClientWithBadTLSConfig": [
      "require.Error",
      "config_util.NewClientFromConfig"
    ],
    "TestNewCompactorFunc": [
      "block1.String",
      "openTestDB",
      "require.NoError",
      "db.Close",
      "require.Len",
      "db.compactor.Write",
      "ulid.MustNew",
      "block2.String",
      "db.compactor.Plan",
      "require.Equal",
      "db.compactor.Compact",
      "DefaultOptions"
    ],
    "TestNewDiscoveryError": [
      "NewDiscovery",
      "require.Error"
    ],
    "TestNewEqualMultiStringMatcher": [
      "matcher.add",
      "matcher.addPrefix",
      "require.IsType",
      "require.Equal",
      "t.Run",
      "len",
      "newEqualMultiStringMatcher"
    ],
    "TestNewFileReaderErrorNoOpenFiles": [
      "testutil.NewTemporaryDirectory",
      "filepath.Join",
      "dir.Path",
      "os.WriteFile",
      "require.NoError",
      "NewFileReader",
      "require.Error",
      "dir.Close"
    ],
    "TestNewHTTPBasicAuth": [
      "http.HandlerFunc",
      "server.Close",
      "require.Equal",
      "config_util.NewClientFromConfig",
      "require.NoError",
      "c.Get",
      "httptest.NewServer",
      "r.BasicAuth",
      "require.True"
    ],
    "TestNewHTTPBearerToken": [
      "config_util.NewClientFromConfig",
      "require.NoError",
      "c.Get",
      "httptest.NewServer",
      "http.HandlerFunc",
      "r.Header.Get",
      "require.Equal",
      "server.Close"
    ],
    "TestNewHTTPBearerTokenFile": [
      "require.NoError",
      "c.Get",
      "httptest.NewServer",
      "http.HandlerFunc",
      "r.Header.Get",
      "require.Equal",
      "server.Close",
      "config_util.NewClientFromConfig"
    ],
    "TestNewHTTPCACert": [
      "w.Header",
      "config_util.NewClientFromConfig",
      "?.Set",
      "http.HandlerFunc",
      "w.Write",
      "newTLSConfig",
      "server.StartTLS",
      "server.Close",
      "require.NoError",
      "c.Get",
      "httptest.NewUnstartedServer"
    ],
    "TestNewHTTPClientCert": [
      "http.HandlerFunc",
      "w.Write",
      "newTLSConfig",
      "require.NoError",
      "config_util.NewClientFromConfig",
      "c.Get",
      "httptest.NewUnstartedServer",
      "?.Set",
      "w.Header",
      "server.StartTLS",
      "server.Close"
    ],
    "TestNewHTTPWithBadServerName": [
      "server.StartTLS",
      "server.Close",
      "config_util.NewClientFromConfig",
      "require.Error",
      "http.HandlerFunc",
      "w.Header",
      "w.Write",
      "newTLSConfig",
      "require.NoError",
      "c.Get",
      "httptest.NewUnstartedServer",
      "?.Set"
    ],
    "TestNewHTTPWithServerName": [
      "newTLSConfig",
      "httptest.NewUnstartedServer",
      "http.HandlerFunc",
      "w.Header",
      "server.Close",
      "config_util.NewClientFromConfig",
      "require.NoError",
      "c.Get",
      "?.Set",
      "w.Write",
      "server.StartTLS"
    ],
    "TestNewKumaHTTPDiscovery": [
      "require.NoError",
      "require.True",
      "resClient.Server",
      "resClient.ID",
      "kd.metrics.Unregister",
      "newKumaTestHTTPDiscovery",
      "require.Equal",
      "resClient.ResourceTypeURL",
      "require.NotNil"
    ],
    "TestNewParser": [
      "require.NoError",
      "require.ErrorContains",
      "t.Parallel",
      "t.Run",
      "labels.NewSymbolTable",
      "tt.fallbackScrapeProtocol.HeaderMediaType",
      "New",
      "tt.validateParser",
      "require.Nil",
      "require.NotNil",
      "require.True"
    ],
    "TestNewRuleDetail": [
      "labels.FromStrings",
      "t.Run",
      "NewRuleDetail",
      "require.False",
      "rule.SetDependentRules",
      "require.True",
      "rule.SetDependencyRules",
      "NewAlertingRule",
      "promslog.NewNopLogger",
      "NewRecordingRule",
      "labels.EmptyLabels"
    ],
    "TestNewRuleDetailPanics": [
      "require.PanicsWithValue",
      "NewRuleDetail"
    ],
    "TestNewRuleGroupRestoration": [
      "labels.EmptyLabels",
      "waitForEvaluations",
      "append",
      "require.False",
      "store.Close",
      "evalCount.Inc",
      "NewManager",
      "require.NoError",
      "require.Equal",
      "int32",
      "group.Name",
      "?.restored.Load",
      "teststorage.New",
      "t.Cleanup",
      "time.After",
      "optsFactory",
      "make",
      "ruleManager.Run",
      "require.True",
      "ruleManager.Stop",
      "evalCount.Load",
      "ruleManager.Update"
    ],
    "TestNewRuleGroupRestorationWithRestoreNewGroupOption": [
      "require.False",
      "require.True",
      "?.restored.Load",
      "int32",
      "evalCount.Load",
      "ruleManager.Run",
      "labels.EmptyLabels",
      "require.NoError",
      "append",
      "evalCount.Inc",
      "optsFactory",
      "make",
      "ruleManager.Update",
      "require.Equal",
      "group.Name",
      "ruleManager.Stop",
      "teststorage.New",
      "store.Close",
      "time.After",
      "NewManager",
      "waitForEvaluations",
      "t.Cleanup"
    ],
    "TestNewScrapePool": [
      "newScrapePool",
      "newTestScrapeMetrics",
      "require.NoError",
      "require.True",
      "require.Equal",
      "require.NotNil"
    ],
    "TestNewWalSegmentOnTruncate": [
      "newTestHead",
      "require.NoError",
      "app.Commit",
      "wlog.Segments",
      "labels.FromStrings",
      "add",
      "wal.Dir",
      "require.Equal",
      "h.Close",
      "h.Appender",
      "context.Background",
      "app.Append",
      "h.Truncate"
    ],
    "TestNoDeadlock": [
      "wg.Done",
      "labels.FromMap",
      "stripeSeries.Set",
      "wg.Wait",
      "wg.Add",
      "stripeSeries.GC",
      "chunks.HeadSeriesRef",
      "strconv.Itoa",
      "close",
      "time.After",
      "require.FailNow",
      "make",
      "newStripeSeries",
      "series.lset.Hash"
    ],
    "TestNoDependency": [
      "require.Empty",
      "context.Background",
      "promslog.NewNopLogger",
      "parser.ParseExpr",
      "require.NoError",
      "NewRecordingRule",
      "NewGroup",
      "buildDependencyMap"
    ],
    "TestNoDuplicateReadConfigs": [
      "require.NoError",
      "s.Close",
      "t.TempDir",
      "t.Run",
      "NewStorage",
      "s.ApplyConfig",
      "prometheus.Unregister",
      "require.Equal"
    ],
    "TestNoEmptyBlocks": [
      "require.NoError",
      "require.Equal",
      "int",
      "t.Run",
      "db.Head",
      "genSeries",
      "labels.FromStrings",
      "db.Dir",
      "require.Empty",
      "app.Append",
      "db.Appender",
      "createBlock",
      "openTestDB",
      "context.Background",
      "db.DisableCompactions",
      "blockDirs",
      "?.MaxTime",
      "db.head.Delete",
      "require.Len",
      "db.reloadBlocks",
      "db.Compact",
      "app.Commit",
      "db.Delete",
      "prom_testutil.ToFloat64",
      "db.Close",
      "labels.MustNewMatcher",
      "len",
      "db.Blocks"
    ],
    "TestNoGapAfterRestartWithOOO": [
      "t.Run",
      "testNoGapAfterRestartWithOOO"
    ],
    "TestNoMetricSelector": [
      "promslog.NewNopLogger",
      "NewGroup",
      "require.False",
      "buildDependencyMap",
      "depMap.isIndependent",
      "context.Background",
      "parser.ParseExpr",
      "require.NoError",
      "NewRecordingRule"
    ],
    "TestNoPanicAfterWALCorruption": [
      "require.NoError",
      "?.Name",
      "r.Next",
      "Open",
      "wlog.NewReader",
      "db.Querier",
      "openTestDB",
      "db.Appender",
      "bufio.NewReader",
      "db.Dir",
      "require.True",
      "query",
      "context.Background",
      "labels.FromStrings",
      "os.ReadDir",
      "len",
      "require.Equal",
      "app.Append",
      "app.Commit",
      "path.Join",
      "r.Offset",
      "db.Close",
      "f.WriteAt",
      "labels.MustNewMatcher",
      "append",
      "os.OpenFile",
      "f.Close",
      "prom_testutil.ToFloat64"
    ],
    "TestNoPanicFor0Tombstones": [
      "NewLeveledCompactor",
      "context.Background",
      "require.NoError",
      "c.plan"
    ],
    "TestNoPanicOnTSDBOpenError": [
      "t.TempDir",
      "tsdbutil.NewDirLocker",
      "require.NoError",
      "l.Lock",
      "l.Release",
      "promslog.NewNopLogger",
      "Open",
      "DefaultOptions",
      "require.Error"
    ],
    "TestNoTargets": [
      "stub.Close",
      "newDiscovery",
      "context.WithCancel",
      "context.Background",
      "require.Empty",
      "cancel",
      "newServer",
      "make",
      "d.Run",
      "close"
    ],
    "TestNodeDiscoveryAdd": [
      "t.Parallel",
      "makeDiscovery",
      "?.Run",
      "makeEnumeratedNode",
      "?.Create",
      "?.Nodes",
      "c.CoreV1",
      "context.Background"
    ],
    "TestNodeDiscoveryBeforeStart": [
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "makeDiscovery",
      "?.Run",
      "makeNode",
      "?.Create",
      "?.Nodes"
    ],
    "TestNodeDiscoveryDelete": [
      "?.Nodes",
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "makeEnumeratedNode",
      "makeDiscovery",
      "?.Run",
      "?.Delete"
    ],
    "TestNodeDiscoveryUpdate": [
      "?.Run",
      "makeEnumeratedNode",
      "context.Background",
      "?.Nodes",
      "c.CoreV1",
      "makeNode",
      "?.Update",
      "t.Parallel",
      "makeDiscovery",
      "?.Create"
    ],
    "TestNodeName": [
      "t.Parallel",
      "nodeName",
      "require.NoError",
      "require.Equal"
    ],
    "TestNomadSDRefresh": [
      "refreshMetrics.Unregister",
      "context.Background",
      "sdmock.SetupTest",
      "discovery.NewRefreshMetrics",
      "cfg.NewDiscovererMetrics",
      "d.refresh",
      "t.Cleanup",
      "require.NoError",
      "promslog.NewNopLogger",
      "NewDiscovery",
      "require.Len",
      "require.NotNil",
      "url.Parse",
      "sdmock.Mock.Endpoint",
      "metrics.Unregister",
      "model.LabelValue",
      "require.Equal",
      "endpoint.String",
      "prometheus.NewRegistry",
      "metrics.Register"
    ],
    "TestNonConfiguredService": [
      "consulDiscovery.shouldWatch",
      "NewTestMetrics",
      "prometheus.NewRegistry",
      "NewDiscovery",
      "require.NoError",
      "require.True"
    ],
    "TestNonDuplicateNaNDatapointsCausesAmendError": [
      "app.Append",
      "math.Float64frombits",
      "require.ErrorIs",
      "openTestDB",
      "require.NoError",
      "db.Close",
      "context.Background",
      "db.Appender",
      "labels.FromStrings",
      "app.Commit"
    ],
    "TestNoopFileUpdate": [
      "t.Skip",
      "newTestRunner",
      "validTg",
      "runner.copyFileTo",
      "t.Parallel",
      "runner.copyFile",
      "runner.run",
      "runner.stop",
      "runner.requireUpdate",
      "runner.lastReceive"
    ],
    "TestNotMatcherSelectsLabelsUnsetSeries": [
      "db.Querier",
      "openTestDB",
      "require.NoError",
      "db.Close",
      "labels.FromStrings",
      "context.Background",
      "app.Commit",
      "expandSeriesSet",
      "db.Appender",
      "app.Append",
      "labels.MustNewMatcher",
      "q.Close",
      "q.Select",
      "require.Empty",
      "require.Equal"
    ],
    "TestNotificationLifecycle": [
      "require.True",
      "notifs.DeleteNotification",
      "require.Empty",
      "NewNotifications",
      "notifs.AddNotification",
      "notifs.Get",
      "require.Len",
      "require.Equal"
    ],
    "TestNotify": [
      "EngineQueryFunc",
      "parser.ParseExpr",
      "storage.Appender",
      "group.Eval",
      "require.Len",
      "promqltest.NewTestEngineWithOpts",
      "require.NoError",
      "NewAlertingRule",
      "NewGroup",
      "teststorage.New",
      "context.Background",
      "labels.EmptyLabels",
      "time.Unix",
      "app.Commit",
      "require.NotZero",
      "require.Empty",
      "storage.Close",
      "promslog.NewNopLogger",
      "app.Append",
      "labels.FromStrings"
    ],
    "TestOMNullByteHandling": [
      "p.Next",
      "require.ErrorIs",
      "require.EqualError",
      "NewOpenMetricsParser",
      "labels.NewSymbolTable",
      "WithOMParserCTSeriesSkipped"
    ],
    "TestOOOAppendAndQuery": [
      "t.Run",
      "testOOOAppendAndQuery"
    ],
    "TestOOOAppendWithNoSeries": [
      "testOOOAppendWithNoSeries",
      "t.Run"
    ],
    "TestOOOChunks_ToEncodedChunks": [
      "tsdbutil.GenerateTestHistogram",
      "t.Fatalf",
      "require.NoError",
      "storage.ExpandSamples",
      "s.H",
      "?.Compact",
      "append",
      "len",
      "s.Type",
      "oooChunk.Insert",
      "s.fh.Copy",
      "c.chunk.Iterator",
      "s.F",
      "?.h.Copy",
      "h2.Copy",
      "t.Run",
      "s.h.Copy",
      "require.Equal",
      "c.chunk.Encoding",
      "require.GreaterOrEqual",
      "?.fh.Copy",
      "h1.Copy",
      "require.Len",
      "oooChunk.ToEncodedChunks",
      "s.FH"
    ],
    "TestOOOCompaction": [
      "t.Run",
      "testOOOCompaction"
    ],
    "TestOOOCompactionFailure": [
      "testOOOCompactionFailure",
      "t.Run"
    ],
    "TestOOOCompactionWithDisabledWriteLog": [
      "t.Run",
      "testOOOCompactionWithDisabledWriteLog"
    ],
    "TestOOOCompactionWithNormalCompaction": [
      "t.Run",
      "testOOOCompactionWithNormalCompaction"
    ],
    "TestOOODisabled": [
      "t.Run",
      "testOOODisabled"
    ],
    "TestOOOHeadChunkReader_Chunk": [
      "t.Run",
      "testOOOHeadChunkReader_Chunk"
    ],
    "TestOOOHeadChunkReader_Chunk_ConsistentQueryResponseDespiteOfHeadExpanding": [
      "t.Run",
      "testOOOHeadChunkReader_Chunk_ConsistentQueryResponseDespiteOfHeadExpanding"
    ],
    "TestOOOHeadChunkReader_LabelValues": [
      "t.Run",
      "testOOOHeadChunkReader_LabelValues"
    ],
    "TestOOOHeadIndexReader_Series": [
      "chunks.ChunkRef",
      "chunks.HeadSeriesRef",
      "fmt.Sprintf",
      "h.Init",
      "t.Run",
      "s1.oooHeadChunkID",
      "append",
      "NewHeadAndOOOIndexReader",
      "uint64",
      "len",
      "newTestHead",
      "h.getOrCreate",
      "NewOOOChunk",
      "require.Equal",
      "labels.FromStrings",
      "permutateChunkIntervals",
      "chunks.NewHeadChunkRef",
      "findID",
      "ir.Series",
      "storage.SeriesRef",
      "b.Labels",
      "require.NoError",
      "h.Close"
    ],
    "TestOOOHistogramCompactionWithCounterResets": [
      "Open",
      "context.Background",
      "require.Len",
      "db.EnableNativeHistograms",
      "h.Copy",
      "copyWithCounterReset",
      "db.Querier",
      "time.Minute.Milliseconds",
      "db.Appender",
      "tsdbutil.GenerateTestHistogram",
      "require.Empty",
      "?.Name",
      "db.CompactOOOHead",
      "t.TempDir",
      "labels.FromStrings",
      "series1.String",
      "mmappedChunksDir",
      "require.NoError",
      "db.Close",
      "db.head.wbl.Dir",
      "NewRangeHead",
      "append",
      "?.T",
      "lbls.Hash",
      "series2.String",
      "require.Positive",
      "len",
      "db.Compact",
      "checkEmptyOOOChunk",
      "sort.Slice",
      "checkNonEmptyOOOChunk",
      "s.T",
      "db.CompactHead",
      "DefaultOptions",
      "tsdbutil.GenerateTestFloatHistogram",
      "app.AppendHistogram",
      "require.False",
      "require.Greater",
      "t.Cleanup",
      "app.Commit",
      "verifyDBSamples",
      "requireEqualSeries",
      "os.ReadDir",
      "f.Size",
      "int64",
      "require.Nil",
      "query",
      "ms.ooo.oooHeadChunk.chunk.NumSamples",
      "db.head.wbl.Sync",
      "NewBlockQuerier",
      "db.DisableCompactions",
      "addSample",
      "labels.MustNewMatcher",
      "db.Blocks",
      "require.Equal",
      "?.Info",
      "db.head.getOrCreate",
      "verifyBlockSamples"
    ],
    "TestOOOHistogramCounterResetHeaders": [
      "tsdbutil.SetHistogramNotCounterReset",
      "t.Run",
      "head.Close",
      "h.Copy",
      "?.GetCounterResetHeader",
      "checkOOOExpCounterResetHeader",
      "app.Commit",
      "l.Hash",
      "appendHistogram",
      "context.Background",
      "tsdbutil.GenerateTestHistogram",
      "fmt.Sprintf",
      "labels.FromStrings",
      "head.opts.OutOfOrderCapMax.Store",
      "head.Appender",
      "app.AppendHistogram",
      "newTestHead",
      "h.ToFloat",
      "require.Len",
      "len",
      "int64",
      "require.NoError",
      "head.Init",
      "t.Cleanup",
      "append",
      "head.chunkDiskMapper.Chunk",
      "head.getOrCreate",
      "require.Equal",
      "tsdbutil.SetHistogramCounterReset"
    ],
    "TestOOOInsert": [
      "float64",
      "tsdbutil.GenerateTestHistogram",
      "tsdbutil.GenerateTestFloatHistogram",
      "t.Run",
      "testOOOInsert"
    ],
    "TestOOOInsertDuplicate": [
      "tsdbutil.GenerateTestHistogram",
      "tsdbutil.GenerateTestFloatHistogram",
      "t.Run",
      "testOOOInsertDuplicate",
      "float64"
    ],
    "TestOOOInterleavedImplicitCounterResets": [
      "testOOOInterleavedImplicitCounterResets",
      "t.Run"
    ],
    "TestOOOIsolation": [
      "i.HasOpenReadsAtOrBefore",
      "i.TrackReadAfter",
      "require.True",
      "read2.Close",
      "read1.Close",
      "newOOOIsolation",
      "require.False"
    ],
    "TestOOOMmapCorruption": [
      "t.Run",
      "testOOOMmapCorruption"
    ],
    "TestOOOMmapReplay": [
      "testOOOMmapReplay",
      "t.Run"
    ],
    "TestOOONativeHistogramsSettings": [
      "t.Run",
      "openTestDB",
      "db.EnableNativeHistograms",
      "requireEqualSeries",
      "DefaultOptions",
      "require.NoError",
      "labels.MustNewMatcher",
      "app.AppendHistogram",
      "db.Querier",
      "query",
      "db.DisableNativeHistograms",
      "labels.FromStrings",
      "db.Close",
      "context.Background",
      "l.String",
      "db.Appender",
      "app.Commit",
      "require.Equal"
    ],
    "TestOOONativeHistogramsWithCounterResets": [
      "t.Run",
      "testOOONativeHistogramsWithCounterResets"
    ],
    "TestOOOQueryAfterRestartWithSnapshotAndRemovedWBL": [
      "t.Run",
      "testOOOQueryAfterRestartWithSnapshotAndRemovedWBL"
    ],
    "TestOOOWALWrite": [
      "tsdbutil.GenerateTestHistogram",
      "testOOOWALWrite",
      "time.Minute.Milliseconds",
      "labels.NewScratchBuilderWithSymbolTable",
      "app.Append",
      "float64",
      "app.AppendHistogram",
      "labels.NewSymbolTable",
      "scratchBuilder2.Add",
      "require.NoError",
      "tsdbutil.GenerateTestFloatHistogram",
      "scratchBuilder1.Add",
      "scratchBuilder1.Labels",
      "minutes",
      "tsdbutil.GenerateTestCustomBucketsHistogram",
      "tsdbutil.GenerateTestCustomBucketsFloatHistogram",
      "scratchBuilder2.Labels",
      "t.Run"
    ],
    "TestOTLPAllowServiceNameInTargetInfo": [
      "LoadFile",
      "filepath.Join",
      "promslog.NewNopLogger",
      "require.NoError",
      "yaml.Marshal",
      "yaml.UnmarshalStrict",
      "require.True",
      "t.Run"
    ],
    "TestOTLPAllowUTF8": [
      "t.Run",
      "t.Helper",
      "require.NoError",
      "os.ReadFile",
      "string",
      "t.Log",
      "filepath.Join",
      "require.Equal",
      "LoadFile",
      "promslog.NewNopLogger",
      "verify",
      "Load",
      "require.ErrorContains"
    ],
    "TestOTLPConvertHistogramsToNHCB": [
      "yaml.UnmarshalStrict",
      "require.True",
      "t.Run",
      "LoadFile",
      "filepath.Join",
      "promslog.NewNopLogger",
      "require.NoError",
      "yaml.Marshal"
    ],
    "TestOTLPDelta": [
      "http.NewRequest",
      "dp.SetIntValue",
      "md.ResourceMetrics",
      "?.UnixMilli",
      "?.Metrics",
      "time.Duration",
      "?.MarshalProto",
      "require.NoError",
      "cmp.Exporter",
      "slog.New",
      "handler.ServeHTTP",
      "require.Equal",
      "rec.Result",
      "?.AppendEmpty",
      "time.Date",
      "?.ScopeMetrics",
      "pmetricotlp.NewExportRequestFromMetrics",
      "t.Fatal",
      "dp.SetTimestamp",
      "pmetric.NewMetrics",
      "ms.AppendEmpty",
      "m.SetName",
      "m.SetEmptySum",
      "sum.SetAggregationTemporality",
      "sum.DataPoints",
      "pcommon.NewTimestampFromTime",
      "slog.NewTextHandler",
      "int64",
      "ts.Add",
      "bytes.NewReader",
      "req.Header.Set",
      "httptest.NewRecorder",
      "labels.FromStrings",
      "milli",
      "NewOTLPWriteHandler",
      "cmp.Diff"
    ],
    "TestOTLPPromoteScopeMetadata": [
      "yaml.Marshal",
      "yaml.UnmarshalStrict",
      "require.True",
      "t.Run",
      "LoadFile",
      "filepath.Join",
      "promslog.NewNopLogger",
      "require.NoError"
    ],
    "TestOTLPSanitizeResourceAttributes": [
      "LoadFile",
      "filepath.Join",
      "require.NoError",
      "yaml.Marshal",
      "require.False",
      "require.Empty",
      "t.Run",
      "yaml.UnmarshalStrict",
      "require.Equal",
      "require.ErrorContains",
      "require.True",
      "promslog.NewNopLogger"
    ],
    "TestOTLPWriteHandler": [
      "requireContainsSample",
      "require.Len",
      "time.Now",
      "generateOTLPWriteRequest",
      "labels.New",
      "timestamp.UnixMilli",
      "t.Run",
      "handleOTLP"
    ],
    "TestOneCheckpointPerCompactCall": [
      "Open",
      "promslog.NewNopLogger",
      "db.Appender",
      "require.Len",
      "context.Background",
      "app.Commit",
      "?.Meta",
      "int",
      "require.NoError",
      "db.Blocks",
      "wlog.LastCheckpoint",
      "app.Append",
      "require.Equal",
      "prom_testutil.ToFloat64",
      "createBlock",
      "genSeries",
      "db.head.wal.NextSegment",
      "prometheus.NewRegistry",
      "t.Cleanup",
      "int64",
      "db.DisableCompactions",
      "db.Close",
      "rand.Float64",
      "wlog.Segments",
      "db.Compact",
      "len",
      "db.head.NumSeries",
      "db.head.MinTime",
      "t.TempDir",
      "db.head.wal.Dir",
      "?.MaxTime",
      "db.Head",
      "labels.FromStrings"
    ],
    "TestOneService": [
      "context.WithCancel",
      "make",
      "checkOneTarget",
      "newServer",
      "stub.Close",
      "d.Run",
      "cancel",
      "newDiscovery",
      "context.Background"
    ],
    "TestOnlyProviderStaleTargetsAreDropped": [
      "requireTargets",
      "context.Background",
      "cancel",
      "fmt.Sprintf",
      "writeIntoFile",
      "applyConfig",
      "context.WithCancel",
      "runManagers",
      "scrapeManager.Stop",
      "sDFile1.Name",
      "sDFile2.Name"
    ],
    "TestOnlyStaleTargetsAreDropped": [
      "requireTargets",
      "cancel",
      "fmt.Sprintf",
      "writeIntoFile",
      "runManagers",
      "scrapeManager.Stop",
      "applyConfig",
      "context.WithCancel",
      "context.Background",
      "sDFile.Name"
    ],
    "TestOpenMetricsParse": [
      "typeAndUnitLabels",
      "WithOMParserCTSeriesSkipped",
      "fmt.Sprintf",
      "requireEntries",
      "append",
      "string",
      "todoDetectFamilySwitch",
      "int64p",
      "NewOpenMetricsParser",
      "labels.FromStrings",
      "WithOMParserTypeAndUnitLabels",
      "labels.NewSymbolTable",
      "testParse",
      "t.Run"
    ],
    "TestOpenMetricsParseErrors": [
      "WithOMParserCTSeriesSkipped",
      "p.Next",
      "require.Equal",
      "err.Error",
      "NewOpenMetricsParser",
      "labels.NewSymbolTable"
    ],
    "TestOpenMetricsParse_UTF8": [
      "labels.FromStrings",
      "NewOpenMetricsParser",
      "labels.NewSymbolTable",
      "WithOMParserCTSeriesSkipped",
      "testParse",
      "requireEntries"
    ],
    "TestOpen_VariousBlockStates": [
      "os.Stat",
      "Open",
      "f.Name",
      "os.RemoveAll",
      "os.Remove",
      "require.NoError",
      "os.MkdirAll",
      "ulid.MustNew",
      "writeMetaFile",
      "promslog.New",
      "l.meta.ULID.String",
      "db.Close",
      "genSeries",
      "fileutil.CopyDirs",
      "ulid.MustParse",
      "DefaultOptions",
      "require.True",
      "os.ReadDir",
      "createBlock",
      "readMetaFile",
      "append",
      "t.TempDir",
      "os.Mkdir",
      "require.False",
      "fileutil.Replace",
      "filepath.Base",
      "db.Blocks",
      "require.Len",
      "os.IsNotExist",
      "filepath.Join",
      "path.Join"
    ],
    "TestOpenstackSDHypervisorRefresh": [
      "model.LabelValue",
      "mock.openstackAuthSuccess",
      "hypervisor.refresh",
      "require.Len",
      "require.NotNil",
      "model.LabelName",
      "mock.SetupTest",
      "context.Background",
      "require.NoError",
      "require.Equal"
    ],
    "TestOpenstackSDHypervisorRefreshWithDoneContext": [
      "mock.SetupTest",
      "mock.openstackAuthSuccess",
      "context.WithCancel",
      "context.Background",
      "cancel",
      "hypervisor.refresh",
      "require.ErrorContains",
      "context.Canceled.Error"
    ],
    "TestOpenstackSDInstanceRefresh": [
      "mock.openstackAuthSuccess",
      "require.NoError",
      "instance.refresh",
      "require.Len",
      "require.NotNil",
      "model.LabelValue",
      "t.Run",
      "mock.SetupTest",
      "context.Background",
      "fmt.Sprintf",
      "require.Equal"
    ],
    "TestOpenstackSDInstanceRefreshWithDoneContext": [
      "require.ErrorContains",
      "context.Canceled.Error",
      "mock.SetupTest",
      "mock.openstackAuthSuccess",
      "context.WithCancel",
      "context.Background",
      "cancel",
      "hypervisor.refresh"
    ],
    "TestOpenstackSDLoadBalancerRefresh": [
      "require.NoError",
      "require.NotNil",
      "require.Equal",
      "model.LabelValue",
      "t.Run",
      "fmt.Sprintf",
      "mock.SetupTest",
      "mock.openstackAuthSuccess",
      "context.Background",
      "instance.refresh",
      "require.Len"
    ],
    "TestOpenstackSDLoadBalancerRefreshWithDoneContext": [
      "mock.openstackAuthSuccess",
      "context.WithCancel",
      "context.Background",
      "cancel",
      "loadbalancer.refresh",
      "require.ErrorContains",
      "context.Canceled.Error",
      "mock.SetupTest"
    ],
    "TestOptimizeConcatRegex": [
      "syntax.Parse",
      "require.NoError",
      "optimizeConcatRegex",
      "require.Equal"
    ],
    "TestOptimizeEqualOrPrefixStringMatchers": [
      "require.Equal",
      "t.Run",
      "optimizeEqualOrPrefixStringMatchers",
      "require.IsType"
    ],
    "TestOptimizedMarshal": [
      "require.Equal",
      "m.Unmarshal",
      "t.Run",
      "make",
      "tt.m.Marshal",
      "require.NoError",
      "tt.m.OptimizedMarshal"
    ],
    "TestOptionsMethod": [
      "api.Register",
      "httptest.NewServer",
      "s.Close",
      "http.NewRequest",
      "require.NoError",
      "client.Do",
      "require.Equal",
      "route.New"
    ],
    "TestOutOfOrderExemplar_V1Message": [
      "recorder.Result",
      "require.NoError",
      "?.Hash",
      "httptest.NewRecorder",
      "handler.ServeHTTP",
      "labels.FromStrings",
      "NewWriteHandler",
      "promslog.NewNopLogger",
      "require.Equal",
      "t.Run",
      "buildWriteRequest",
      "http.NewRequest",
      "bytes.NewReader"
    ],
    "TestOutOfOrderHistogram_V1Message": [
      "require.NoError",
      "httptest.NewRecorder",
      "recorder.Result",
      "require.Equal",
      "?.Hash",
      "NewWriteHandler",
      "handler.ServeHTTP",
      "bytes.NewReader",
      "prompb.FromFloatHistogram",
      "testHistogram.ToFloat",
      "http.NewRequest",
      "labels.FromStrings",
      "promslog.NewNopLogger",
      "t.Run",
      "buildWriteRequest",
      "prompb.FromIntHistogram"
    ],
    "TestOutOfOrderRuntimeConfig": [
      "t.Run",
      "testOutOfOrderRuntimeConfig"
    ],
    "TestOutOfOrderSample_V1Message": [
      "require.NoError",
      "NewWriteHandler",
      "httptest.NewRecorder",
      "handler.ServeHTTP",
      "recorder.Result",
      "require.Equal",
      "t.Run",
      "buildWriteRequest",
      "?.Hash",
      "labels.FromStrings",
      "promslog.NewNopLogger",
      "http.NewRequest",
      "bytes.NewReader"
    ],
    "TestOutOfOrderSamplesMetric": [
      "t.Run",
      "DefaultOptions",
      "testOutOfOrderSamplesMetric"
    ],
    "TestOutOfOrderSamplesMetricNativeHistogramOOODisabled": [
      "t.Run",
      "DefaultOptions",
      "testOutOfOrderSamplesMetric"
    ],
    "TestOverlappingBlocksDetectsAllOverlaps": [
      "make",
      "int64",
      "require.Empty",
      "OverlappingBlocks",
      "append",
      "sort.Slice",
      "require.Equal",
      "add"
    ],
    "TestOvhCloudVpsRefresh": [
      "t.Run",
      "require.Equal",
      "fmt.Sprintf",
      "promslog.NewNopLogger",
      "context.Background",
      "require.NotNil",
      "httptest.NewServer",
      "mock.Close",
      "require.NoError",
      "newRefresher",
      "d.refresh",
      "http.HandlerFunc",
      "yaml.UnmarshalStrict",
      "require.Len"
    ],
    "TestOvhcloudDedicatedServerRefresh": [
      "fmt.Sprintf",
      "require.NoError",
      "require.Equal",
      "require.NotNil",
      "http.HandlerFunc",
      "mock.Close",
      "promslog.NewNopLogger",
      "d.refresh",
      "t.Run",
      "context.Background",
      "require.Len",
      "httptest.NewServer",
      "yaml.UnmarshalStrict",
      "newRefresher"
    ],
    "TestPanicOnApplyConfig": [
      "testPanicOnApplyConfig",
      "t.Run"
    ],
    "TestParenExprPretty": [
      "require.NoError",
      "require.Equal",
      "Prettify",
      "ParseExpr"
    ],
    "TestParseAndPushMetricsTextAndFormat": [
      "bytes.NewReader",
      "MetricTextToWriteRequest",
      "require.NoError",
      "require.Equal"
    ],
    "TestParseBrokenJSON": [
      "t.Run",
      "parseBrokenJSON",
      "require.Equal"
    ],
    "TestParseCustomFunctions": [
      "NewParser",
      "WithFunctions",
      "p.ParseExpr",
      "require.NoError",
      "require.True",
      "require.Equal"
    ],
    "TestParseDuration": [
      "parseDuration",
      "require.NoError",
      "require.Equal",
      "require.Error"
    ],
    "TestParseExpressions": [
      "require.NotEqual",
      "require.Len",
      "?.String",
      "require.Error",
      "require.LessOrEqual",
      "ParseExpr",
      "require.Equal",
      "require.ErrorContains",
      "t.Run",
      "readable",
      "require.IsType",
      "len",
      "posrange.Pos",
      "t.Cleanup",
      "require.NoError",
      "err.Error",
      "errors.As",
      "require.True"
    ],
    "TestParseFileFailure": [
      "ParseFile",
      "filepath.Join",
      "require.NotEmpty",
      "require.ErrorContainsf",
      "t.Run"
    ],
    "TestParseFileSuccess": [
      "ParseFile",
      "require.Empty"
    ],
    "TestParseFileSuccessWithAliases": [
      "ParseFile",
      "require.Empty",
      "require.Equal"
    ],
    "TestParseFiles": [
      "require.NoError",
      "require.ErrorContains",
      "t.Run",
      "ParseFiles",
      "filepath.Join"
    ],
    "TestParseHistogramSeries": [
      "require.Equal",
      "t.Run",
      "ParseSeriesDesc",
      "require.EqualError",
      "require.NoError",
      "append"
    ],
    "TestParseIPs": [
      "errors.New",
      "t.Run",
      "parseIPList",
      "require.Equal"
    ],
    "TestParseSeries": [
      "testutil.RequireEqual",
      "require.Equal",
      "require.Error",
      "ParseSeriesDesc",
      "require.NotEqual",
      "require.NoError"
    ],
    "TestParseSeriesDesc": [
      "labels.Equal",
      "labels.EmptyLabels",
      "err.Error",
      "require.NoError",
      "require.Contains",
      "require.True",
      "require.Equal",
      "labels.FromStrings",
      "t.Run",
      "ParseSeriesDesc"
    ],
    "TestParseTime": [
      "MinTime.Format",
      "MaxTime.Format",
      "parseTime",
      "require.NoError",
      "require.NotNil",
      "require.Error",
      "time.Parse",
      "panic",
      "ts.Equal",
      "time.Unix",
      "require.True"
    ],
    "TestParseTimeParam": [
      "result.asError",
      "asTime.Equal",
      "parseTime",
      "require.NoError",
      "require.EqualError",
      "?.Error",
      "require.True",
      "fmt.Errorf",
      "http.NewRequest",
      "parseTimeParam"
    ],
    "TestPartialTruncateWAL": [
      "prometheus.NewRegistry",
      "tsdbutil.GenerateTestFloatHistograms",
      "tsdbutil.GenerateTestCustomBucketsFloatHistograms",
      "gatherFamily",
      "require.Len",
      "float64",
      "require.Equal",
      "DefaultOptions",
      "require.NoError",
      "context.TODO",
      "app.Append",
      "app.Commit",
      "tsdbutil.GenerateTestHistograms",
      "s.Appender",
      "app.AppendHistogram",
      "tsdbutil.GenerateTestCustomBucketsHistograms",
      "?.Gauge.GetValue",
      "createTestAgentDB",
      "s.Close",
      "labelsForTest",
      "t.Name",
      "labels.New",
      "s.truncate"
    ],
    "TestPathFromMetric": [
      "pathFromMetric",
      "require.Equal"
    ],
    "TestPendingAndKeepFiringFor": [
      "time.Unix",
      "baseTime.Add",
      "require.Equal",
      "parser.ParseExpr",
      "labels.FromStrings",
      "timestamp.FromTime",
      "smpl.Metric.Get",
      "rule.Eval",
      "require.Len",
      "promqltest.LoadedStorage",
      "storage.Close",
      "require.NoError",
      "testEngine",
      "EngineQueryFunc",
      "testutil.RequireEqual",
      "require.Empty",
      "t.Cleanup",
      "NewAlertingRule",
      "labels.EmptyLabels",
      "context.TODO"
    ],
    "TestPersistence_index_e2e": [
      "require.NoError",
      "chunkenc.NewXORChunk",
      "ir.Postings",
      "ir.Series",
      "chunks.ChunkRef",
      "newMockIndex",
      "it.At",
      "context.Background",
      "labels.ReadLabels",
      "append",
      "expp.Next",
      "gotp.At",
      "require.Len",
      "builder.Labels",
      "gotp.Err",
      "int64",
      "createFileReader",
      "storage.SeriesRef",
      "mi.Series",
      "testutil.RequireEqual",
      "eBuilder.Labels",
      "it.Err",
      "filepath.Join",
      "postings.Add",
      "gotp.Next",
      "require.Equal",
      "sort.Strings",
      "ir.SortedLabelValues",
      "uint64",
      "mi.AddSeries",
      "require.True",
      "expp.At",
      "labels.Slice",
      "s.labels.Range",
      "mi.Postings",
      "require.False",
      "len",
      "sort.Sort",
      "NewMemPostings",
      "ir.Symbols",
      "it.Next"
    ],
    "TestPickSchema": [
      "require.Equal",
      "pickSchema"
    ],
    "TestPodDiscoveryAdd": [
      "?.Run",
      "makePods",
      "?.Create",
      "?.Pods",
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "makeDiscovery",
      "expectedPodTargetGroups"
    ],
    "TestPodDiscoveryBeforeRun": [
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "makeDiscovery",
      "?.Run",
      "makeMultiPortPods",
      "?.Create",
      "?.Pods"
    ],
    "TestPodDiscoveryDelete": [
      "?.Pods",
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "makePods",
      "makeDiscovery",
      "?.Run",
      "?.Delete"
    ],
    "TestPodDiscoveryInitContainer": [
      "expectedPodTargetGroups",
      "append",
      "makeInitContainerPods",
      "?.Pods",
      "t.Parallel",
      "fmt.Sprintf",
      "?.Run",
      "?.Create",
      "c.CoreV1",
      "context.Background",
      "makeDiscovery"
    ],
    "TestPodDiscoveryNamespaces": [
      "context.Background",
      "makeDiscovery",
      "expectedPodTargetGroups",
      "?.Run",
      "?.Create",
      "?.Pods",
      "t.Parallel",
      "makePods",
      "c.CoreV1"
    ],
    "TestPodDiscoveryOwnNamespace": [
      "makeDiscovery",
      "?.Pods",
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "expectedPodTargetGroups",
      "?.Run",
      "makePods",
      "?.Create"
    ],
    "TestPodDiscoveryUpdate": [
      "t.Parallel",
      "int32",
      "makeDiscovery",
      "?.Run",
      "makePods",
      "?.Update",
      "c.CoreV1",
      "?.Pods",
      "context.Background",
      "expectedPodTargetGroups"
    ],
    "TestPodDiscoveryUpdateEmptyPodIP": [
      "?.Create",
      "?.Pods",
      "c.CoreV1",
      "context.Background",
      "makePods",
      "makeDiscovery",
      "?.Run",
      "?.Update",
      "t.Parallel"
    ],
    "TestPodDiscoveryWithNodeMetadata": [
      "?.Run",
      "makeNode",
      "?.Create",
      "?.Nodes",
      "context.Background",
      "?.Pods",
      "expectedPodTargetGroupsWithNodeMeta",
      "t.Parallel",
      "makeDiscoveryWithMetadata",
      "c.CoreV1",
      "makePods"
    ],
    "TestPodDiscoveryWithNodeMetadataUpdateNode": [
      "t.Parallel",
      "makeDiscoveryWithMetadata",
      "?.Run",
      "makeNode",
      "?.Create",
      "makePods",
      "?.Pods",
      "expectedPodTargetGroupsWithNodeMeta",
      "?.Nodes",
      "c.CoreV1",
      "context.Background",
      "?.Update"
    ],
    "TestPollingDisappearingTargets": [
      "make",
      "require.Len",
      "refreshMetrics.Unregister",
      "discovery.NewRefreshMetrics",
      "cfg.NewDiscovererMetrics",
      "require.NoError",
      "pd.poll",
      "require.NotNil",
      "require.Equal",
      "metrics.Unregister",
      "prometheus.NewRegistry",
      "metrics.Register",
      "require.Fail",
      "context.Background"
    ],
    "TestPollingRefreshAttachesGroupMetadata": [
      "newDiscovererMetrics",
      "metrics.Register",
      "require.Equal",
      "discovery.NewRefreshMetrics",
      "make",
      "pd.poll",
      "model.LabelName",
      "refreshMetrics.Unregister",
      "prometheus.NewRegistry",
      "context.Background",
      "require.NotNil",
      "require.Len",
      "require.Contains",
      "metrics.Unregister",
      "require.NoError",
      "constantResourceParser",
      "model.LabelValue",
      "require.True"
    ],
    "TestPollingRefreshSkipUpdate": [
      "pd.poll",
      "require.Fail",
      "make",
      "cancel",
      "ctx.Done",
      "refreshMetrics.Unregister",
      "prometheus.NewRegistry",
      "cfg.NewDiscovererMetrics",
      "context.WithCancel",
      "time.Sleep",
      "discovery.NewRefreshMetrics",
      "metrics.Register",
      "metrics.Unregister",
      "require.NoError",
      "context.Background"
    ],
    "TestPool": [
      "errors.New",
      "require.Equal",
      "NewPool",
      "t.Run",
      "p.Get",
      "require.EqualError",
      "tc.expErr.Error",
      "require.NoError",
      "p.Put",
      "New",
      "testPool.Get",
      "require.Equal",
      "cap",
      "testPool.Put",
      "done.Add",
      "byte",
      "require.Len",
      "pool.Put",
      "counter.Load",
      "counter.Add",
      "t.Logf",
      "done.Done",
      "require.Less",
      "t.Run",
      "zeropool.New",
      "close",
      "panic",
      "done.Wait",
      "testing.AllocsPerRun",
      "make",
      "pool.Get"
    ],
    "TestPopulateLabels": [
      "model.Duration",
      "relabel.MustNewRegexp",
      "PopulateDiscoveredLabels",
      "require.Equal",
      "labels.FromMap",
      "require.EqualError",
      "testutil.RequireEqual",
      "require.NoError",
      "labels.EmptyLabels",
      "string",
      "PopulateLabels",
      "maps.Clone",
      "labels.NewBuilder",
      "lb.Labels"
    ],
    "TestPopulateWithDelSeriesIterator_DoubleSeek": [
      "it.reset",
      "it.Seek",
      "int64",
      "createFakeReaderAndNotPopulatedChunks",
      "tsdbutil.GenerateTestFloatHistogram",
      "t.Run",
      "require.Equal",
      "checkCurrVal",
      "tsdbutil.GenerateTestHistogram"
    ],
    "TestPopulateWithDelSeriesIterator_NextWithMinTime": [
      "tsdbutil.GenerateTestHistogram",
      "tsdbutil.GenerateTestFloatHistogram",
      "createFakeReaderAndNotPopulatedChunks",
      "require.Equal",
      "t.Run",
      "it.reset",
      "?.Add",
      "it.Next",
      "int64"
    ],
    "TestPopulateWithDelSeriesIterator_SeekInCurrentChunk": [
      "tsdbutil.GenerateTestHistogram",
      "tsdbutil.GenerateTestFloatHistogram",
      "createFakeReaderAndNotPopulatedChunks",
      "require.Equal",
      "checkCurrVal",
      "it.Seek",
      "int64",
      "t.Run",
      "it.reset",
      "it.Next"
    ],
    "TestPopulateWithDelSeriesIterator_SeekWithMinTime": [
      "it.reset",
      "require.Equal",
      "it.Seek",
      "int64",
      "tsdbutil.GenerateTestHistogram",
      "tsdbutil.GenerateTestFloatHistogram",
      "t.Run",
      "createFakeReaderAndNotPopulatedChunks"
    ],
    "TestPopulateWithTombSeriesIterators": [
      "storage.ExpandSamples",
      "t.Skip",
      "storage.ExpandChunks",
      "tsdbutil.GenerateTestFloatHistogram",
      "tsdbutil.GenerateTestGaugeFloatHistogram",
      "tsdbutil.SetFloatHistogramCounterReset",
      "require.Equal",
      "t.Run",
      "createFakeReaderAndNotPopulatedChunks",
      "it.reset",
      "it.At",
      "tsdbutil.GenerateTestHistogram",
      "tsdbutil.SetFloatHistogramNotCounterReset",
      "tsdbutil.GenerateTestGaugeHistogram",
      "tsdbutil.SetHistogramCounterReset",
      "assureChunkFromSamples",
      "append",
      "rmChunkRefs",
      "require.NoError",
      "?.Add",
      "tsdbutil.SetHistogramNotCounterReset",
      "createFakeReaderAndIterables",
      "it.Seek"
    ],
    "TestPostPath": [
      "require.Equal",
      "postPath"
    ],
    "TestPostingsCardinalityStats": [
      "require.NotEqual",
      "index.NewMemPostings",
      "head.postings.Add",
      "labels.FromStrings",
      "head.PostingsCardinalityStats",
      "require.Equal"
    ],
    "TestPostingsForMatcher": [
      "labels.MustNewMatcher",
      "t.Run",
      "tc.matcher.String",
      "postingsForMatcher",
      "require.Error",
      "require.NoError",
      "context.Background"
    ],
    "TestPostingsForMatchers": [
      "p.Next",
      "builder.Labels",
      "t.Errorf",
      "require.Empty",
      "t.TempDir",
      "DefaultHeadOptions",
      "t.Run",
      "ir.Series",
      "p.At",
      "require.NoError",
      "h.Index",
      "matcher.String",
      "labels.MustNewMatcher",
      "PostingsForMatchers",
      "p.Err",
      "h.Appender",
      "app.Append",
      "labels.FromStrings",
      "app.Commit",
      "l.String",
      "lbls.String",
      "delete",
      "context.Background",
      "NewHead",
      "h.Close"
    ],
    "TestPostingsMany": [
      "append",
      "require.NoError",
      "?.Get",
      "builder.Labels",
      "fmt.Sprintf",
      "require.Equalf",
      "context.Background",
      "createFileReader",
      "labels.FromStrings",
      "ir.Postings",
      "it.Next",
      "ir.Series",
      "it.At",
      "it.Err"
    ],
    "TestPostingsStats": [
      "stats.init",
      "uint64",
      "stats.push",
      "stats.get",
      "require.Len",
      "require.Equal"
    ],
    "TestPostingsStats2": [
      "stats.get",
      "require.Len",
      "require.Equal",
      "uint64",
      "stats.init",
      "stats.push"
    ],
    "TestPostingsWithIndexHeap": [
      "require.True",
      "storage.SeriesRef",
      "heap.Pop",
      "t.Run",
      "NewListPostings",
      "heap.Init",
      "require.NoError",
      "h.next",
      "h.empty",
      "node.p.At",
      "node.p.Next",
      "require.Equal",
      "h.at"
    ],
    "TestPrefix": [
      "t.Run",
      "fmt.Sprintf",
      "require.Equal",
      "tc.matcher.Prefix",
      "mustNewMatcher"
    ],
    "TestPreprocessAndWrapWithStepInvariantExpr": [
      "parser.MustLabelMatcher",
      "makeInt64Pointer",
      "parser.MustGetFunction",
      "timestamp.FromTime",
      "promql.PreprocessExpr",
      "expr.String",
      "time.Unix",
      "t.Run",
      "parser.ParseExpr",
      "require.NoError",
      "require.Equal"
    ],
    "TestProcessExternalLabels": [
      "labels.NewBuilder",
      "labels.EmptyLabels",
      "labels.FromStrings",
      "b.Reset",
      "processExternalLabels",
      "testutil.RequireEqual",
      "b.Labels"
    ],
    "TestPromNullByteHandling": [
      "NewPromParser",
      "labels.NewSymbolTable",
      "p.Next",
      "require.Equal",
      "require.EqualError"
    ],
    "TestPromParse": [
      "labels.NewSymbolTable",
      "testParse",
      "t.Run",
      "labels.FromStrings",
      "string",
      "todoDetectFamilySwitch",
      "int64p",
      "NewPromParser",
      "requireEntries",
      "fmt.Sprintf",
      "typeAndUnitLabels"
    ],
    "TestPromParseErrors": [
      "NewPromParser",
      "labels.NewSymbolTable",
      "p.Next",
      "require.EqualError"
    ],
    "TestPromTextToProto": [
      "expfmt.NewFormat",
      "t.Fatal",
      "require.Len",
      "readTextParseTestMetrics",
      "bytes.NewReader",
      "expfmt.NewDecoder",
      "d.Decode",
      "errors.Is",
      "append",
      "mf.GetName",
      "require.Equal",
      "bytes.ReplaceAll",
      "promTextToProto"
    ],
    "TestPrometheusConverter_AddHistogramDataPoints": [
      "?.AppendEmpty",
      "append",
      "t.Run",
      "float64",
      "?.SetAggregationTemporality",
      "metric.Histogram",
      "pt.SetStartTimestamp",
      "context.Background",
      "tt.want",
      "require.Empty",
      "?.UnixNano",
      "metric.SetName",
      "metric.SetEmptyHistogram",
      "pt.SetTimestamp",
      "timeSeriesSignature",
      "pcommon.NewResource",
      "scopeAttrs.FromRaw",
      "pcommon.Timestamp",
      "converter.addHistogramDataPoints",
      "require.Equal",
      "pcommon.NewMap",
      "tt.metric",
      "NewPrometheusConverter",
      "metric.Name",
      "convertTimeStamp",
      "pmetric.NewMetric",
      "?.DataPoints",
      "time.Now"
    ],
    "TestPrometheusConverter_AddSummaryDataPoints": [
      "time.Now",
      "scopeAttrs.FromRaw",
      "converter.addSummaryDataPoints",
      "testutil.RequireEqual",
      "metric.SetEmptySummary",
      "t.Run",
      "tt.want",
      "convertTimeStamp",
      "pmetric.NewMetric",
      "dp.SetTimestamp",
      "context.Background",
      "pcommon.Timestamp",
      "?.DataPoints",
      "float64",
      "append",
      "tt.metric",
      "?.AppendEmpty",
      "timeSeriesSignature",
      "metric.Name",
      "require.Empty",
      "metric.SetName",
      "?.UnixNano",
      "metric.Summary",
      "dp.SetStartTimestamp",
      "NewPrometheusConverter",
      "pcommon.NewResource",
      "pcommon.NewMap"
    ],
    "TestPrometheusConverter_addCustomBucketsHistogramDataPoints": [
      "tt.metric",
      "NewPrometheusConverter",
      "metric.SetName",
      "pt.SetCount",
      "?.FromRaw",
      "pt.ExplicitBounds",
      "pcommon.NewMap",
      "?.AppendEmpty",
      "?.PutStr",
      "pt.Attributes",
      "require.Equal",
      "tt.wantSeries",
      "metric.SetEmptyHistogram",
      "timeSeriesSignature",
      "require.NoError",
      "?.DataPoints",
      "metric.Histogram",
      "pt.SetSum",
      "converter.addCustomBucketsHistogramDataPoints",
      "pcommon.NewResource",
      "namer.Build",
      "?.SetDoubleValue",
      "t.Run",
      "pmetric.NewMetric",
      "context.Background",
      "require.Empty",
      "scopeAttrs.FromRaw",
      "?.SetAggregationTemporality",
      "pt.BucketCounts",
      "pt.Exemplars",
      "TranslatorMetricFromOtelMetric"
    ],
    "TestPrometheusConverter_addExponentialHistogramDataPoints": [
      "metric.SetEmptyExponentialHistogram",
      "tt.wantSeries",
      "?.SetAggregationTemporality",
      "pt.Exemplars",
      "?.PutStr",
      "converter.addExponentialHistogramDataPoints",
      "require.NoError",
      "metric.SetName",
      "require.Empty",
      "pmetric.NewMetric",
      "pt.SetCount",
      "pt.Positive",
      "?.BucketCounts",
      "timeSeriesSignature",
      "NewPrometheusConverter",
      "TranslatorMetricFromOtelMetric",
      "?.AppendEmpty",
      "?.SetOffset",
      "pt.Attributes",
      "t.Run",
      "tt.metric",
      "pcommon.NewResource",
      "pt.SetScale",
      "?.FromRaw",
      "?.SetDoubleValue",
      "require.Equal",
      "metric.ExponentialHistogram",
      "pcommon.NewMap",
      "scopeAttrs.FromRaw",
      "?.DataPoints",
      "pt.Negative",
      "context.Background",
      "namer.Build"
    ],
    "TestPrometheusConverter_addGaugeNumberDataPoints": [
      "?.UnixNano",
      "time.Now",
      "NewPrometheusConverter",
      "converter.addGaugeNumberDataPoints",
      "?.DataPoints",
      "scopeAttrs.FromRaw",
      "uint64",
      "require.Equal",
      "tt.metric",
      "context.Background",
      "timeSeriesSignature",
      "metric.Gauge",
      "pcommon.NewResource",
      "metric.Name",
      "tt.want",
      "require.Empty",
      "pcommon.NewMap",
      "getIntGaugeMetric",
      "t.Run",
      "convertTimeStamp",
      "pcommon.Timestamp"
    ],
    "TestPrometheusConverter_addSumNumberDataPoints": [
      "?.DataPoints",
      "dp.SetDoubleValue",
      "NewPrometheusConverter",
      "uint64",
      "timeSeriesSignature",
      "convertTimeStamp",
      "?.SetDoubleValue",
      "?.AppendEmpty",
      "?.At",
      "m.Sum",
      "metric.SetEmptySum",
      "dp.SetTimestamp",
      "tt.metric",
      "pcommon.NewResource",
      "pmetric.NewMetric",
      "metric.SetName",
      "?.SetIsMonotonic",
      "time.Now",
      "tt.want",
      "?.Exemplars",
      "?.SetAggregationTemporality",
      "dp.SetStartTimestamp",
      "float64",
      "t.Run",
      "converter.addSumNumberDataPoints",
      "context.Background",
      "require.Empty",
      "pcommon.NewMap",
      "scopeAttrs.FromRaw",
      "?.UnixNano",
      "getIntSumMetric",
      "ts.AsTime",
      "metric.Name",
      "pcommon.Timestamp",
      "metric.Sum",
      "require.Equal"
    ],
    "TestProtobufParse": [
      "createTestProtoBuf",
      "labels.NewSymbolTable",
      "labels.FromStrings",
      "t.Run",
      "NewProtobufParser",
      "inputBuf.Bytes",
      "int64p",
      "string",
      "testParse",
      "requireEntries"
    ],
    "TestProviderStaleTargetsAreDropped": [
      "fmt.Sprintf",
      "scrapeManager.Stop",
      "requireTargets",
      "sDFile.Name",
      "context.WithCancel",
      "context.Background",
      "cancel",
      "writeIntoFile",
      "runManagers",
      "applyConfig"
    ],
    "TestPuppetDBInvalidCode": [
      "t.Cleanup",
      "prometheus.NewRegistry",
      "context.Background",
      "w.WriteHeader",
      "discovery.NewRefreshMetrics",
      "cfg.NewDiscovererMetrics",
      "d.refresh",
      "require.EqualError",
      "httptest.NewServer",
      "http.HandlerFunc",
      "model.Duration",
      "require.NoError",
      "metrics.Register",
      "NewDiscovery",
      "promslog.NewNopLogger",
      "metrics.Unregister"
    ],
    "TestPuppetDBInvalidFormat": [
      "httptest.NewServer",
      "fmt.Fprintln",
      "model.Duration",
      "prometheus.NewRegistry",
      "promslog.NewNopLogger",
      "http.HandlerFunc",
      "t.Cleanup",
      "discovery.NewRefreshMetrics",
      "cfg.NewDiscovererMetrics",
      "NewDiscovery",
      "context.Background",
      "require.EqualError",
      "metrics.Unregister",
      "require.NoError",
      "metrics.Register",
      "d.refresh"
    ],
    "TestPuppetDBRefresh": [
      "d.refresh",
      "prometheus.NewRegistry",
      "model.LabelValue",
      "model.LabelName",
      "require.Equal",
      "metrics.Unregister",
      "discovery.NewRefreshMetrics",
      "NewDiscovery",
      "mockServer",
      "model.Duration",
      "cfg.NewDiscovererMetrics",
      "require.NoError",
      "metrics.Register",
      "promslog.NewNopLogger",
      "context.Background"
    ],
    "TestPuppetDBRefreshWithParameters": [
      "model.Duration",
      "NewDiscovery",
      "discovery.NewRefreshMetrics",
      "model.LabelName",
      "metrics.Unregister",
      "mockServer",
      "cfg.NewDiscovererMetrics",
      "require.NoError",
      "promslog.NewNopLogger",
      "model.LabelValue",
      "require.Equal",
      "prometheus.NewRegistry",
      "metrics.Register",
      "context.Background",
      "d.refresh"
    ],
    "TestPuppetSlashInURL": [
      "cfg.NewDiscovererMetrics",
      "metrics.Register",
      "NewDiscovery",
      "model.Duration",
      "prometheus.NewRegistry",
      "promslog.NewNopLogger",
      "require.Equal",
      "metrics.Unregister",
      "discovery.NewRefreshMetrics",
      "require.NoError"
    ],
    "TestQuerierIndexQueriesRace": [
      "fmt.Sprintf",
      "openTestDB",
      "DefaultOptions",
      "t.Cleanup",
      "appendSeries",
      "db.Querier",
      "t.Run",
      "db.Head",
      "context.WithCancel",
      "time.Sleep",
      "context.Background",
      "q.LabelValues",
      "labels.MustNewMatcher",
      "t.Parallel",
      "require.NoError",
      "db.Close",
      "wg.Add",
      "require.Emptyf"
    ],
    "TestQuerierOOOQuery": [
      "app.Append",
      "labels.FromStrings",
      "float64",
      "tsdbutil.GenerateTestHistogram",
      "app.AppendHistogram",
      "tsdbutil.GenerateTestFloatHistogram",
      "t.Run",
      "testQuerierOOOQuery"
    ],
    "TestQuerierShouldNotFailIfOOOCompactionOccursAfterRetrievingIterators": [
      "iterator.Next",
      "iterator.Err",
      "openTestDB",
      "float64",
      "app.Commit",
      "querier.Close",
      "DefaultOptions",
      "int64",
      "app.Append",
      "iterator.At",
      "seriesSet.Next",
      "prom_testutil.ToFloat64",
      "?.Chunk.NumSamples",
      "context.Background",
      "labels.MustNewMatcher",
      "db.Head",
      "db.CompactOOOHead",
      "compactionComplete.Store",
      "time.Sleep",
      "require.False",
      "require.NoError",
      "append",
      "seriesSet.Err",
      "querier.Select",
      "?.Iterator",
      "seriesSet.At",
      "require.Len",
      "atomic.NewBool",
      "db.DisableCompactions",
      "labels.FromStrings",
      "db.ChunkQuerier",
      "compactionComplete.Load",
      "require.Eventually",
      "db.Close",
      "db.Appender",
      "require.Equal"
    ],
    "TestQuerierShouldNotFailIfOOOCompactionOccursAfterRetrievingQuerier": [
      "iterator.Next",
      "context.Background",
      "db.ChunkQuerier",
      "append",
      "?.Iterator",
      "seriesSet.Err",
      "DefaultOptions",
      "int64",
      "db.Appender",
      "compactionComplete.Store",
      "q.Select",
      "iterator.At",
      "testQuerier",
      "openTestDB",
      "require.NoError",
      "labels.FromStrings",
      "app.Commit",
      "db.CompactOOOHead",
      "require.Eventually",
      "db.DisableCompactions",
      "float64",
      "atomic.NewBool",
      "time.Sleep",
      "require.False",
      "querierCreatedBeforeCompaction.Close",
      "querierCreatedAfterCompaction.Close",
      "db.Close",
      "require.Equal",
      "iterator.Err",
      "prom_testutil.ToFloat64",
      "labels.MustNewMatcher",
      "seriesSet.Next",
      "seriesSet.At",
      "app.Append",
      "db.Head",
      "compactionComplete.Load",
      "require.Len",
      "?.Chunk.NumSamples"
    ],
    "TestQuerierShouldNotFailIfOOOCompactionOccursAfterSelecting": [
      "seriesSet.Next",
      "iterator.At",
      "querier.Close",
      "require.NoError",
      "atomic.NewBool",
      "db.Head",
      "querier.Select",
      "?.Iterator",
      "iterator.Next",
      "require.Eventually",
      "app.Append",
      "float64",
      "require.Len",
      "context.Background",
      "db.CompactOOOHead",
      "db.DisableCompactions",
      "int64",
      "app.Commit",
      "labels.MustNewMatcher",
      "compactionComplete.Store",
      "DefaultOptions",
      "openTestDB",
      "db.Close",
      "require.Equal",
      "time.Sleep",
      "compactionComplete.Load",
      "iterator.Err",
      "db.ChunkQuerier",
      "prom_testutil.ToFloat64",
      "seriesSet.Err",
      "append",
      "seriesSet.At",
      "?.Chunk.NumSamples",
      "labels.FromStrings",
      "db.Appender",
      "require.False"
    ],
    "TestQuerierWithBoundaryChunks": [
      "require.Equal",
      "context.Background",
      "labels.FromStrings",
      "app.Append",
      "strconv.FormatInt",
      "q.Close",
      "q.LabelValues",
      "require.NoError",
      "db.Close",
      "db.Appender",
      "db.Querier",
      "app.Commit",
      "db.Compact",
      "len",
      "openTestDB",
      "int64",
      "require.GreaterOrEqual"
    ],
    "TestQuerier_ShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks": [
      "testQuerierShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks",
      "t.Skip",
      "t.Run",
      "strconv.Itoa"
    ],
    "TestQueryCancel": [
      "require.Error",
      "require.NoError",
      "cancelCtx",
      "query1.Exec",
      "query2.Exec",
      "context.WithCancel",
      "make",
      "engine.NewTestQuery",
      "contextDone",
      "require.Equal",
      "promqltest.NewTestEngineWithOpts",
      "context.Background",
      "query1.Cancel",
      "query2.Cancel"
    ],
    "TestQueryConcurrency": [
      "context.WithCancel",
      "close",
      "time.After",
      "wg.Wait",
      "make",
      "promql.NewActiveQueryTracker",
      "q.Exec",
      "require.Fail",
      "t.TempDir",
      "promqltest.NewTestEngineWithOpts",
      "context.Background",
      "t.Cleanup",
      "engine.NewTestQuery",
      "wg.Add",
      "wg.Done"
    ],
    "TestQueryError": [
      "promqltest.NewTestEngineWithOpts",
      "cancelCtx",
      "engine.NewInstantQuery",
      "require.NoError",
      "vectorQuery.Exec",
      "require.Error",
      "require.ErrorIs",
      "matrixQuery.Exec",
      "errors.New",
      "storage.QueryableFunc",
      "context.WithCancel",
      "context.Background",
      "time.Unix"
    ],
    "TestQueryExemplars": [
      "timestamp.FromTime",
      "errors.New",
      "promqltest.LoadedStorage",
      "storage.Close",
      "storage.ExemplarQueryable",
      "http.NewRequest",
      "labels.FromStrings",
      "qs.Encode",
      "u.String",
      "request",
      "assertAPIError",
      "time.Unix",
      "require.NoError",
      "tc.api.queryExemplars",
      "req.WithContext",
      "assertAPIResponse",
      "t.Run",
      "context.Background",
      "es.AppendExemplar",
      "t.Cleanup",
      "testEngine",
      "url.Parse",
      "r.Header.Set",
      "start.Add"
    ],
    "TestQueryForStateSeries": [
      "rule.QueryForStateSeries",
      "?.Labels",
      "sample.Metric.Len",
      "storage.TestSeriesSet",
      "NewAlertingRule",
      "labels.FromStrings",
      "storage.MockSeries",
      "context.Background",
      "require.Equal",
      "errors.New",
      "storage.ErrSeriesSet",
      "seriesSet.Next",
      "?.Len",
      "seriesSet.At",
      "testFunc",
      "storage.EmptySeriesSet",
      "labels.EmptyLabels",
      "rule.forStateSample"
    ],
    "TestQueryHistogramFromBlocksWithCompaction": [
      "append",
      "?.T",
      "?.Type",
      "db.Close",
      "createBlock",
      "require.Empty",
      "db.Blocks",
      "t.Run",
      "rand.Float64",
      "t.Helper",
      "make",
      "sort.Slice",
      "db.compactor.Compact",
      "s.FH",
      "int64",
      "DefaultOptions",
      "openTestDB",
      "?.String",
      "s.Labels",
      "s.Iterator",
      "db.reload",
      "query",
      "genHistogramSeries",
      "genHistogramAndFloatSeries",
      "time.Minute.Milliseconds",
      "t.Cleanup",
      "require.Len",
      "testBlockQuerying",
      "genSeriesFromSampleGenerator",
      "db.Dir",
      "labels.MustNewMatcher",
      "b.Dir",
      "s.H",
      "require.NoError",
      "len",
      "db.Querier",
      "compareSeries",
      "fmt.Sprintf",
      "storage.ExpandSamples",
      "s.Type",
      "minute"
    ],
    "TestQueryInstant": [
      "require.Equal",
      "form.Get",
      "t.Parallel",
      "s.Close",
      "url.Parse",
      "require.NoError",
      "QueryInstant",
      "getRequest",
      "mockServer"
    ],
    "TestQueryLog": [
      "t.Skip",
      "t.Parallel",
      "testutil.RandomUnprivilegedPort",
      "t.Run",
      "p.String",
      "p.run",
      "testing.Short",
      "os.Getwd",
      "require.NoError"
    ],
    "TestQueryLogger_basic": [
      "promqltest.NewTestEngineWithOpts",
      "context.WithCancel",
      "require.NoError",
      "queryExec",
      "len",
      "contextDone",
      "engine.SetQueryLogger",
      "f3.Close",
      "context.Background",
      "engine.NewTestQuery",
      "query.Exec",
      "filepath.Join",
      "getLogLines",
      "require.Len",
      "require.ErrorContains",
      "cancelCtx",
      "t.TempDir",
      "logging.NewJSONFileLogger",
      "require.Contains",
      "require.Equal",
      "f1.Close",
      "f2.Close"
    ],
    "TestQueryLogger_error": [
      "engine.SetQueryLogger",
      "cancelCtx",
      "getLogLines",
      "require.Contains",
      "t.TempDir",
      "filepath.Join",
      "logging.NewJSONFileLogger",
      "t.Cleanup",
      "require.NoError",
      "errors.New",
      "query.Exec",
      "require.Error",
      "promql.NewOriginContext",
      "engine.NewTestQuery",
      "promqltest.NewTestEngineWithOpts",
      "f1.Close",
      "context.WithCancel",
      "context.Background"
    ],
    "TestQueryLogger_fields": [
      "promqltest.NewTestEngineWithOpts",
      "logging.NewJSONFileLogger",
      "engine.SetQueryLogger",
      "filepath.Join",
      "context.Background",
      "promql.NewOriginContext",
      "query.Exec",
      "require.Contains",
      "t.TempDir",
      "cancelCtx",
      "contextDone",
      "require.NoError",
      "t.Cleanup",
      "f1.Close",
      "context.WithCancel",
      "engine.NewTestQuery",
      "getLogLines"
    ],
    "TestQueryLogging": [
      "trimStringByBytes",
      "?.Match",
      "make",
      "queryLogger.generateIndices",
      "string",
      "require.True",
      "?.MatchString",
      "regexp.MustCompile",
      "queryLogger.Delete",
      "queryLogger.Insert",
      "context.Background"
    ],
    "TestQueryLookbackDelta": [
      "lastDatapointTs.Add",
      "promqltest.NewTestEngine",
      "context.Background",
      "require.NoError",
      "qry.Exec",
      "t.Cleanup",
      "storage.Close",
      "promql.NewPrometheusQueryOpts",
      "engine.NewInstantQuery",
      "t.Run",
      "require.True",
      "require.NotEmpty",
      "require.Empty",
      "time.Unix",
      "promqltest.LoadedStorage"
    ],
    "TestQueryOOOHeadDuringTruncate": [
      "require.NotEqual",
      "it.Next",
      "testQueryOOOHeadDuringTruncate",
      "db.Querier",
      "require.True",
      "q.Select",
      "s.Iterator",
      "require.NoError",
      "context.Background",
      "require.False",
      "require.Equal",
      "it.AtT",
      "labels.MustNewMatcher",
      "ss.Next",
      "ss.At",
      "it.Err"
    ],
    "TestQueryRange": [
      "QueryRange",
      "form.Get",
      "getRequest",
      "t.Parallel",
      "mockServer",
      "s.Close",
      "url.Parse",
      "require.NoError",
      "require.Equal"
    ],
    "TestQueryStatistics": [
      "t.Run",
      "runQuery",
      "context.Background",
      "promqltest.LoadedStorage",
      "t.Cleanup",
      "storage.Close",
      "time.Unix",
      "promql.NewPrometheusQueryOpts",
      "promqltest.NewTestEngine",
      "engine.NewInstantQuery",
      "require.NoError",
      "qry.Exec",
      "promql.ErrTooManySamples",
      "stats.Samples.TotalSamplesPerStepMap",
      "engine.NewRangeQuery",
      "require.Equal",
      "qry.Stats"
    ],
    "TestQueryStatsWithSpanTimers": [
      "NewQuerySamples",
      "time.Sleep",
      "NewQueryStats",
      "require.True",
      "NewQueryTimers",
      "qt.GetSpanTimer",
      "prometheus.NewSummary",
      "qst.Finish",
      "json.Marshal",
      "require.NoError",
      "regexp.MatchString",
      "string",
      "make"
    ],
    "TestQueryStatsWithTimersAndSamples": [
      "qs.InitStepTracking",
      "qt.GetTimer",
      "json.Marshal",
      "require.NoError",
      "string",
      "require.True",
      "NewQueryTimers",
      "time.Sleep",
      "require.Regexpf",
      "timer.Start",
      "timer.Stop",
      "qs.IncrementSamplesAtTimestamp",
      "NewQueryStats",
      "regexp.MatchString",
      "NewQuerySamples"
    ],
    "TestQueryTimeout": [
      "promqltest.NewTestEngineWithOpts",
      "time.Sleep",
      "contextDone",
      "require.ErrorAs",
      "context.WithCancel",
      "context.Background",
      "cancelCtx",
      "engine.NewTestQuery",
      "query.Exec",
      "require.Error",
      "t.Run",
      "storage.ExemplarQueryable",
      "t.Cleanup",
      "api.query",
      "assertAPIError",
      "require.Len",
      "require.Equal",
      "storage.Close",
      "context.Background",
      "http.NewRequest",
      "query.Encode",
      "require.NoError",
      "?.Deadline",
      "now.Add",
      "time.Now",
      "?.toFactory",
      "fmt.Sprintf",
      "req.WithContext",
      "require.True",
      "promqltest.LoadedStorage"
    ],
    "TestQueryWithDeletedHistograms": [
      "chunkQuerier.Select",
      "tsdbutil.GenerateTestHistogram",
      "rand.Int63",
      "series.Iterator",
      "cit.Next",
      "tsdbutil.GenerateTestGaugeHistogram",
      "css.At",
      "it.Err",
      "require.Equal",
      "context.Background",
      "appender.Commit",
      "chk.Chunk.Iterator",
      "int64",
      "t.Run",
      "require.NoError",
      "db.Close",
      "db.Delete",
      "db.ChunkQuerier",
      "openTestDB",
      "db.Appender",
      "db.EnableNativeHistograms",
      "labels.FromStrings",
      "css.Next",
      "css.Err",
      "tsdbutil.GenerateTestFloatHistogram",
      "tsdbutil.GenerateTestGaugeFloatHistogram",
      "tc",
      "appender.AppendHistogram",
      "labels.NewMatcher",
      "it.Next",
      "it.At"
    ],
    "TestQueryWithOneChunkCompletelyDeleted": [
      "context.Background",
      "db.ChunkQuerier",
      "it.At",
      "css.Next",
      "css.At",
      "chk.Chunk.Iterator",
      "db.Close",
      "db.Appender",
      "tsdbutil.GenerateTestHistogram",
      "appender.AppendHistogram",
      "labels.NewMatcher",
      "it.Err",
      "openTestDB",
      "int64",
      "db.Delete",
      "chunkQuerier.Select",
      "series.Iterator",
      "it.Next",
      "cit.Next",
      "require.Equal",
      "require.NoError",
      "db.EnableNativeHistograms",
      "labels.FromStrings",
      "tsdbutil.GenerateTestFloatHistogram",
      "appender.Commit",
      "css.Err"
    ],
    "TestQueueFilledDeadlock": [
      "pprof.Lookup",
      "t.Run",
      "fmt.Sprint",
      "model.Duration",
      "m.Start",
      "make",
      "createTimeseries",
      "newTestQueueManager",
      "m.Stop",
      "?.WriteTo",
      "t.FailNow",
      "NewNopWriteClient",
      "testDefaultQueueConfig",
      "time.After",
      "t.Error",
      "m.StoreSeries",
      "time.Sleep",
      "m.Append"
    ],
    "TestQueueManagerMetrics": [
      "strings.NewReader",
      "prometheus.NewPedanticRegistry",
      "newQueueManagerMetrics",
      "client_testutil.GatherAndLint",
      "require.NoError",
      "require.Empty",
      "metrics.unregister",
      "client_testutil.GatherAndCompare"
    ],
    "TestQueuePopAfterCloseReturnsAllElements": [
      "require.Equal",
      "newWriteJobQueue",
      "require.True",
      "queue.push",
      "HeadSeriesRef",
      "queue.close",
      "require.False",
      "queue.pop"
    ],
    "TestQueuePopBlocksOnEmptyQueue": [
      "make",
      "require.True",
      "HeadSeriesRef",
      "time.Now",
      "require.Fail",
      "time.Duration",
      "require.Equal",
      "queue.push",
      "require.GreaterOrEqual",
      "require.Greater",
      "newWriteJobQueue",
      "time.After",
      "queue.pop",
      "timeAfterPop.Sub"
    ],
    "TestQueuePopUnblocksOnClose": [
      "queue.push",
      "time.After",
      "require.Fail",
      "queue.pop",
      "time.Now",
      "require.False",
      "make",
      "require.Equal",
      "queue.close",
      "timeAfterPop.Sub",
      "time.Duration",
      "newWriteJobQueue",
      "require.True",
      "HeadSeriesRef",
      "require.GreaterOrEqual"
    ],
    "TestQueuePushBlocksOnFullQueue": [
      "HeadSeriesRef",
      "newWriteJobQueue",
      "make",
      "require.True",
      "queue.push",
      "require.Fail",
      "queue.pop",
      "require.Equal",
      "time.Now",
      "time.After",
      "require.GreaterOrEqual",
      "timeAfterPush.Sub",
      "time.Duration"
    ],
    "TestQueuePushPopManyGoroutines": [
      "readersWG.Add",
      "readersWG.Done",
      "writersWG.Wait",
      "queue.push",
      "HeadSeriesRef",
      "refsMx.Unlock",
      "writersWG.Done",
      "id.Inc",
      "require.True",
      "readersWG.Wait",
      "newWriteJobQueue",
      "queue.pop",
      "refsMx.Lock",
      "writersWG.Add",
      "queue.close",
      "require.Len"
    ],
    "TestQueuePushPopSingleGoroutine": [
      "rand.New",
      "rand.NewSource",
      "queue.pop",
      "require.Equal",
      "queue.length",
      "queue.assertInvariants",
      "?.UnixNano",
      "newWriteJobQueue",
      "r.Int",
      "HeadSeriesRef",
      "time.Now",
      "t.Log",
      "require.True",
      "queue.push"
    ],
    "TestQueueSegmentIsKeptEvenIfEmpty": [
      "queue.push",
      "queue.pop",
      "require.NotNil",
      "require.Equal",
      "newWriteJobQueue",
      "require.True"
    ],
    "TestQueue_FlushAndShutdownDoesNotDeadlock": [
      "t.Error",
      "?.WriteTo",
      "newQueue",
      "queue.FlushAndShutdown",
      "queue.Batch",
      "close",
      "time.After",
      "pprof.Lookup",
      "t.FailNow",
      "queue.Append",
      "make",
      "time.Sleep"
    ],
    "TestRangeForTimestamp": [
      "require.Equal",
      "rangeForTimestamp"
    ],
    "TestRangeWithFailedCompactionWontGetSelected": [
      "NewLeveledCompactor",
      "context.Background",
      "require.NoError",
      "metaRange",
      "compactor.plan",
      "require.Equal"
    ],
    "TestRateAnnotations": [
      "t.Run",
      "promqltest.LoadedStorage",
      "strings.TrimSpace",
      "promqltest.NewTestEngineWithOpts",
      "timestamp.Time",
      "res.Warnings.AsStrings",
      "?.Add",
      "require.NoError",
      "int64",
      "testutil.RequireEqual",
      "t.Cleanup",
      "store.Close",
      "engine.NewInstantQuery",
      "context.Background",
      "query.Exec"
    ],
    "TestReadCheckpoint": [
      "int64",
      "t.Cleanup",
      "Checkpoint",
      "w.Truncate",
      "require.Equal",
      "SegmentName",
      "labels.FromStrings",
      "w.Log",
      "rand.Intn",
      "watcher.Stop",
      "os.Mkdir",
      "f.Close",
      "chunks.HeadSeriesRef",
      "w.NextSegmentSync",
      "path.Join",
      "enc.Series",
      "promslog.NewNopLogger",
      "NewWatcher",
      "os.Create",
      "t.Run",
      "NewSize",
      "enc.Samples",
      "Segments",
      "newWriteToMock",
      "watcher.Start",
      "retry",
      "compression.Types",
      "float64",
      "w.Dir",
      "w.Close",
      "t.TempDir",
      "require.NoError",
      "wt.checkNumSeries",
      "fmt.Sprintf"
    ],
    "TestReadCheckpointMultipleSegments": [
      "require.NoError",
      "labels.FromStrings",
      "w.Log",
      "rand.Intn",
      "LastCheckpoint",
      "watcher.readCheckpoint",
      "fmt.Sprintf",
      "chunks.HeadSeriesRef",
      "w.Close",
      "NewWatcher",
      "t.Run",
      "t.TempDir",
      "os.Mkdir",
      "NewSize",
      "enc.Samples",
      "os.Rename",
      "SegmentName",
      "compression.Types",
      "path.Join",
      "enc.Series",
      "int64",
      "float64",
      "newWriteToMock",
      "watcher.SetMetrics"
    ],
    "TestReadClient": [
      "http.Error",
      "t.Run",
      "require.EqualError",
      "float64",
      "model.Time",
      "int64",
      "ss.Next",
      "l.Len",
      "require.True",
      "NewReadClient",
      "c.Read",
      "ss.Err",
      "l.Has",
      "delayedResponseHTTPHandler",
      "context.Background",
      "require.Len",
      "l.Get",
      "NewChunkedWriter",
      "model.Duration",
      "require.Equal",
      "http.HandlerFunc",
      "require.NoError",
      "ss.At",
      "s.Labels",
      "it.Err",
      "it.At",
      "w.Header",
      "cw.Write",
      "httptest.NewServer",
      "require.ErrorContains",
      "errors.Unwrap",
      "?.Set",
      "model.SampleValue",
      "buildTestChunks",
      "proto.Marshal",
      "server.Close",
      "url.Parse",
      "s.Iterator",
      "it.Next",
      "sampledResponseHTTPHandler"
    ],
    "TestReadIndexFormatV1": [
      "filepath.Join",
      "OpenBlock",
      "require.NoError",
      "NewBlockQuerier",
      "require.Equal",
      "query",
      "labels.MustNewMatcher"
    ],
    "TestReadToEndNoCheckpoint": [
      "rand.Intn",
      "w.Log",
      "NewWatcher",
      "NewSize",
      "append",
      "enc.Samples",
      "t.TempDir",
      "path.Join",
      "watcher.Stop",
      "os.Mkdir",
      "chunks.HeadSeriesRef",
      "newWriteToMock",
      "require.NoError",
      "labels.FromStrings",
      "require.Eventually",
      "t.Run",
      "fmt.Sprintf",
      "float64",
      "int64",
      "watcher.Start",
      "wt.checkNumSeries",
      "w.Close",
      "enc.Series",
      "Segments",
      "overwriteReadTimeout",
      "w.Dir",
      "compression.Types"
    ],
    "TestReadToEndWithCheckpoint": [
      "wt.checkNumSeries",
      "Checkpoint",
      "newWriteToMock",
      "NewSize",
      "w.Close",
      "int64",
      "float64",
      "Segments",
      "path.Join",
      "os.Mkdir",
      "enc.Series",
      "watcher.Start",
      "compression.Types",
      "t.Run",
      "t.TempDir",
      "enc.Samples",
      "promslog.NewNopLogger",
      "NewWatcher",
      "fmt.Sprintf",
      "require.NoError",
      "chunks.HeadSeriesRef",
      "w.Log",
      "w.Truncate",
      "watcher.Stop",
      "overwriteReadTimeout",
      "require.Eventually",
      "labels.FromStrings",
      "rand.Intn",
      "w.Dir"
    ],
    "TestReader": [
      "encodedRecord",
      "t.Logf",
      "r.Err",
      "require.NoError",
      "fmt.Sprintf",
      "fn",
      "r.Next",
      "r.Record",
      "require.Less",
      "len",
      "require.Equal",
      "require.Error",
      "t.Run",
      "append",
      "bytes.NewReader"
    ],
    "TestReaderData": [
      "t.Run",
      "New",
      "reader.Next",
      "reader.Err",
      "w.Repair",
      "os.Getenv",
      "require.NoError",
      "allSegments",
      "fn"
    ],
    "TestReaderFuzz": [
      "allSegments",
      "sr.Close",
      "fn",
      "make",
      "w.Dir",
      "require.True",
      "len",
      "require.Empty",
      "w.Close",
      "reader.Err",
      "reader.Record",
      "compression.Types",
      "fmt.Sprintf",
      "NewSize",
      "generateRandomEntries",
      "close",
      "require.Equal",
      "require.False",
      "t.Run",
      "t.TempDir",
      "require.NoError",
      "reader.Next"
    ],
    "TestReaderFuzz_Live": [
      "w.Close",
      "Segments",
      "r.Err",
      "os.Stat",
      "fi.Size",
      "compression.Types",
      "t.TempDir",
      "w.Dir",
      "SegmentName",
      "readSegment",
      "t.Run",
      "NewSize",
      "OpenReadSegment",
      "r.Next",
      "r.Offset",
      "make",
      "close",
      "len",
      "promslog.NewNopLogger",
      "fmt.Sprintf",
      "seg.Close",
      "NewLiveReader",
      "time.NewTicker",
      "require.Empty",
      "r.Record",
      "require.NoError",
      "generateRandomEntries",
      "time.Sleep",
      "require.True",
      "require.Equal"
    ],
    "TestReaderWithInvalidBuffer": [
      "require.Error",
      "realByteSlice",
      "r.ChunkOrIterable",
      "realByteSlice",
      "NewReader",
      "require.Error"
    ],
    "TestReader_LabelNamesForHonorsContextCancel": [
      "require.Error",
      "require.Equal",
      "append",
      "labels.FromStrings",
      "ir.Postings",
      "uint64",
      "require.NoError",
      "ir.LabelNamesFor",
      "ctx.Count",
      "fmt.Sprintf",
      "createFileReader",
      "context.Background",
      "AllPostingsKey"
    ],
    "TestReader_Live": [
      "require.False",
      "require.Error",
      "NewLiveReaderMetrics",
      "reader.Record",
      "writeFd.Name",
      "encodedRecord",
      "runtime.Gosched",
      "promslog.NewNopLogger",
      "os.Remove",
      "os.CreateTemp",
      "require.NoError",
      "writeFd.Close",
      "NewLiveReader",
      "reader.Next",
      "require.Equal",
      "t.Run",
      "strconv.Itoa",
      "reader.Err",
      "writeFd.Write",
      "os.Open"
    ],
    "TestReader_PostingsForAllLabelValues": [
      "require.NoError",
      "p.Err",
      "require.Equal",
      "labels.FromStrings",
      "strconv.Itoa",
      "createFileReader",
      "context.Background",
      "ir.PostingsForAllLabelValues",
      "append",
      "ExpandPostings"
    ],
    "TestReader_PostingsForLabelMatching": [
      "ir.PostingsForLabelMatching",
      "require.NoError",
      "p.Err",
      "ExpandPostings",
      "append",
      "labels.FromStrings",
      "strconv.Itoa",
      "createFileReader",
      "context.Background",
      "strconv.Atoi",
      "panic",
      "require.Equal"
    ],
    "TestReader_PostingsForLabelMatchingHonorsContextCancel": [
      "require.Error",
      "require.Equal",
      "fmt.Sprintf",
      "createFileReader",
      "ir.PostingsForLabelMatching",
      "uint64",
      "p.Err",
      "ctx.Count",
      "append",
      "labels.FromStrings",
      "context.Background",
      "require.Error",
      "require.Equal",
      "ctx.Count",
      "uint64",
      "labelValuesWithMatchers",
      "labels.MustNewMatcher"
    ],
    "TestReadyAndHealthy": [
      "cleanupTestResponse",
      "http.Head",
      "http.Post",
      "strings.NewReader",
      "webHandler.SetReady",
      "cleanupSnapshot",
      "db.Close",
      "panic",
      "context.WithCancel",
      "require.Equal",
      "webHandler.Listeners",
      "context.Background",
      "cancel",
      "http.Get",
      "t.Parallel",
      "t.Cleanup",
      "require.NoError",
      "fmt.Sprintf",
      "testutil.RandomUnprivilegedPort",
      "New",
      "webHandler.Run",
      "time.Sleep",
      "t.TempDir",
      "tsdb.Open"
    ],
    "TestRecord_Corrupted": [
      "dec.Samples",
      "uint8",
      "enc.Metadata",
      "dec.Metadata",
      "NewDecoder",
      "dec.Series",
      "require.Equal",
      "enc.Samples",
      "t.Run",
      "enc.CustomBucketsHistogramSamples",
      "dec.HistogramSamples",
      "labels.NewSymbolTable",
      "enc.Series",
      "rand.Float64",
      "enc.HistogramSamples",
      "enc.Exemplars",
      "dec.Exemplars",
      "labels.FromStrings",
      "require.ErrorIs",
      "enc.Tombstones",
      "dec.Tombstones"
    ],
    "TestRecord_EncodeDecode": [
      "dec.Series",
      "dec.Samples",
      "rand.Float64",
      "dec.HistogramSamples",
      "make",
      "enc.Samples",
      "enc.CustomBucketsHistogramSamples",
      "enc.CustomBucketsFloatHistogramSamples",
      "labels.NewSymbolTable",
      "labels.FromStrings",
      "enc.Metadata",
      "len",
      "h.H.ToFloat",
      "dec.Metadata",
      "enc.Tombstones",
      "dec.FloatHistogramSamples",
      "enc.Series",
      "append",
      "NewDecoder",
      "require.NoError",
      "uint8",
      "require.Equal",
      "dec.Exemplars",
      "enc.HistogramSamples",
      "testutil.RequireEqual",
      "dec.Tombstones",
      "enc.Exemplars",
      "enc.FloatHistogramSamples"
    ],
    "TestRecord_MetadataDecodeUnknownExtraFields": [
      "enc.PutUvarint",
      "uint8",
      "require.Equal",
      "enc.PutByte",
      "enc.PutUvarint64",
      "enc.PutUvarintStr",
      "dec.Metadata",
      "enc.Get",
      "require.NoError",
      "byte"
    ],
    "TestRecord_Type": [
      "enc.HistogramSamples",
      "dec.Type",
      "enc.Series",
      "enc.Samples",
      "uint8",
      "enc.Metadata",
      "rand.Float64",
      "enc.CustomBucketsHistogramSamples",
      "labels.FromStrings",
      "require.Equal",
      "enc.Tombstones"
    ],
    "TestRecordingEvalWithOrigin": [
      "labels.FromStrings",
      "NewRecordingRule",
      "rule.Eval",
      "FromOriginContext",
      "time.Now",
      "parser.ParseExpr",
      "require.NoError",
      "require.Equal",
      "NewRuleDetail",
      "context.Background"
    ],
    "TestRecordingRuleLimit": [
      "storage.Close",
      "NewRecordingRule",
      "labels.FromStrings",
      "time.Unix",
      "rule.Eval",
      "context.TODO",
      "require.EqualError",
      "promqltest.LoadedStorage",
      "t.Cleanup",
      "parser.ParseExpr",
      "testEngine",
      "EngineQueryFunc",
      "t.Errorf"
    ],
    "TestRecordingRule_SetDependencyRules": [
      "rule.SetDependencyRules",
      "require.True",
      "rule.DependencyRules",
      "require.Empty",
      "NewRecordingRule",
      "labels.EmptyLabels",
      "require.False",
      "rule.NoDependencyRules",
      "require.Equal"
    ],
    "TestRecordingRule_SetDependentRules": [
      "rule.SetDependentRules",
      "rule.DependentRules",
      "require.Empty",
      "NewRecordingRule",
      "labels.EmptyLabels",
      "require.False",
      "rule.NoDependentRules",
      "require.Equal",
      "require.True"
    ],
    "TestRecoverEvaluatorError": [
      "ev.recover",
      "panic",
      "promslog.NewNopLogger",
      "errors.New",
      "require.EqualError",
      "e.Error"
    ],
    "TestRecoverEvaluatorErrorWithWarnings": [
      "panic",
      "promslog.NewNopLogger",
      "?.Add",
      "annotations.New",
      "require.EqualError",
      "errors.New",
      "e.Error",
      "require.Equal",
      "ev.recover"
    ],
    "TestRecoverEvaluatorRuntime": [
      "parser.ParseExpr",
      "require.EqualError",
      "require.Contains",
      "output.String",
      "ev.recover",
      "promslog.New"
    ],
    "TestRecoverParserError": [
      "NewParser",
      "errors.New",
      "require.EqualError",
      "e.Error",
      "p.recover",
      "panic"
    ],
    "TestRecoverParserRuntime": [
      "NewParser",
      "require.Equal",
      "p.recover"
    ],
    "TestReduceResolutionFloatHistogram": [
      "require.Equal",
      "len",
      "slices.Clone",
      "reduceResolution"
    ],
    "TestReduceResolutionHistogram": [
      "reduceResolution",
      "require.Equal",
      "len",
      "slices.Clone"
    ],
    "TestRefresh": [
      "require.Equal",
      "tick.Stop",
      "errors.New",
      "require.NoError",
      "metrics.Register",
      "context.Background",
      "d.Run",
      "discovery.NewRefreshMetrics",
      "prometheus.NewRegistry",
      "metrics.Unregister",
      "context.WithCancel",
      "model.LabelValue",
      "NewDiscovery",
      "require.FailNow",
      "model.LabelName",
      "make",
      "cancel",
      "time.NewTicker"
    ],
    "TestRegexp_JSONUnmarshalThenMarshal": [
      "require.Equal",
      "string",
      "t.Run",
      "json.Unmarshal",
      "require.NoError",
      "json.Marshal"
    ],
    "TestRegexp_ShouldMarshalAndUnmarshalZeroValue": [
      "yaml.Marshal",
      "require.NoError",
      "require.Equal",
      "string",
      "yaml.Unmarshal",
      "require.Nil"
    ],
    "TestRegularBucketIterator": [
      "strconv.Itoa",
      "len",
      "append",
      "it.At",
      "math.Inf",
      "t.Run",
      "it.Next",
      "require.Equal",
      "c.histogram.NegativeBucketIterator",
      "c.histogram.PositiveBucketIterator",
      "make"
    ],
    "TestReinstallingTracerProvider": [
      "NewManager",
      "promslog.NewNopLogger",
      "require.NoError",
      "m.ApplyConfig",
      "otel.GetTracerProvider",
      "require.Equal",
      "require.NotEqual"
    ],
    "TestReinstallingTracerProviderWithTLS": [
      "NewManager",
      "promslog.NewNopLogger",
      "require.NoError",
      "m.ApplyConfig",
      "otel.GetTracerProvider",
      "require.NotEqual"
    ],
    "TestRelabel": [
      "require.NoError",
      "cfg.Validate",
      "Process",
      "require.Equal",
      "testutil.RequireEqual",
      "labels.FromMap",
      "MustNewRegexp",
      "cfg.Regex.String"
    ],
    "TestRelabelValidate": [
      "require.NoError",
      "require.ErrorContains",
      "MustNewRegexp",
      "t.Run",
      "strconv.Itoa",
      "test.config.Validate"
    ],
    "TestReleaseNoninternedString": [
      "fmt.Sprint",
      "newTestClientAndQueueManager",
      "m.Start",
      "m.Stop",
      "chunks.HeadSeriesRef",
      "require.Equal",
      "t.Run",
      "labels.FromStrings",
      "strconv.Itoa",
      "m.SeriesReset",
      "client_testutil.ToFloat64",
      "int",
      "m.StoreSeries"
    ],
    "TestReload": [
      "yaml.UnmarshalStrict",
      "require.NoError",
      "cfg.AlertingConfig.AlertmanagerConfigs.ToMap",
      "n.reload",
      "?.String",
      "n.Alertmanagers",
      "NewManager",
      "require.Len",
      "n.ApplyConfig",
      "make",
      "require.Equal"
    ],
    "TestRemoteWriteHandlerHeadersHandling_V1Message": [
      "resp.Body.Close",
      "string",
      "bytes.NewReader",
      "req.Header.Set",
      "require.Equal",
      "t.Run",
      "http.NewRequest",
      "NewWriteHandler",
      "promslog.NewNopLogger",
      "recorder.Result",
      "buildWriteRequest",
      "httptest.NewRecorder",
      "handler.ServeHTTP",
      "io.ReadAll",
      "require.NoError"
    ],
    "TestRemoteWriteHandlerHeadersHandling_V2Message": [
      "http.NewRequest",
      "NewWriteHandler",
      "io.ReadAll",
      "require.Equal",
      "require.NoError",
      "httptest.NewRecorder",
      "promslog.NewNopLogger",
      "t.Run",
      "bytes.NewReader",
      "resp.Body.Close",
      "buildV2WriteRequest",
      "req.Header.Set",
      "handler.ServeHTTP",
      "recorder.Result",
      "string"
    ],
    "TestRemoteWriteHandler_V1Message": [
      "e.ToExemplar",
      "promslog.NewNopLogger",
      "requireEqual",
      "hp.ToFloatHistogram",
      "hp.ToIntHistogram",
      "http.NewRequest",
      "NewWriteHandler",
      "ts.ToLabels",
      "hp.IsFloatHistogram",
      "buildWriteRequest",
      "bytes.NewReader",
      "httptest.NewRecorder",
      "handler.ServeHTTP",
      "recorder.Result",
      "require.Equal",
      "labels.NewScratchBuilder",
      "require.NoError"
    ],
    "TestRemoteWriteHandler_V2Message": [
      "require.True",
      "errors.New",
      "t.Run",
      "promslog.NewNopLogger",
      "recorder.Result",
      "io.ReadAll",
      "ts.ToLabels",
      "hp.ToIntHistogram",
      "e.ToExemplar",
      "proto.Clone",
      "NewWriteHandler",
      "string",
      "len",
      "expectHeaderValue",
      "hp.IsFloatHistogram",
      "ts.ToMetadata",
      "resp.Header.Get",
      "require.Empty",
      "testHistogram.ToFloat",
      "http.NewRequest",
      "requireEqual",
      "append",
      "writev2.FromFloatHistogram",
      "handler.ServeHTTP",
      "buildV2WriteRequest",
      "bytes.NewReader",
      "require.Equal",
      "labels.NewScratchBuilder",
      "hp.ToFloatHistogram",
      "require.NoError",
      "req.Header.Set",
      "httptest.NewRecorder"
    ],
    "TestRemoteWriteRetryOnRateLimit": [
      "require.True",
      "require.False",
      "LoadFile",
      "promslog.NewNopLogger",
      "require.NoError",
      "yaml.Marshal",
      "Load",
      "string"
    ],
    "TestRemoveFile": [
      "fileSource",
      "t.Parallel",
      "newTestRunner",
      "runner.requireUpdate",
      "validTg",
      "os.Remove",
      "runner.copyFile",
      "runner.run",
      "runner.stop",
      "runner.lastReceive",
      "require.NoError"
    ],
    "TestRemoveSeriesAfterRollbackAndTruncate": [
      "labels.FromStrings",
      "lset.Hash",
      "app.Rollback",
      "NewBlockQuerier",
      "ss.Warnings",
      "q.Close",
      "newTestHead",
      "require.NoError",
      "q.Select",
      "context.Background",
      "h.Close",
      "require.NotNil",
      "h.Truncate",
      "h.appender",
      "app.Append",
      "labels.MustNewMatcher",
      "require.False",
      "ss.Next",
      "require.Empty",
      "require.Equal",
      "h.initTime",
      "h.series.getByHash"
    ],
    "TestRemovedNextStackoverflow": [
      "newListPostings",
      "newRemovedPostings",
      "rp.Next",
      "require.NoError",
      "rp.Err",
      "require.False",
      "append"
    ],
    "TestRemovedPostings": [
      "ExpandPostings",
      "newRemovedPostings",
      "require.NoError",
      "require.Equal",
      "newListPostings"
    ],
    "TestRemovedPostingsSeek": [
      "require.Equal",
      "p.Seek",
      "p.At",
      "ExpandPostings",
      "require.NoError",
      "append",
      "newListPostings",
      "newRemovedPostings"
    ],
    "TestRepairBadIndexVersion": [
      "db.Close",
      "readMetaFile",
      "require.Error",
      "t.Logf",
      "p.Err",
      "append",
      "testutil.RequireEqual",
      "labels.FromStrings",
      "require.Equal",
      "t.TempDir",
      "require.NoError",
      "r.Series",
      "Open",
      "builder.Labels",
      "filepath.Join",
      "os.MkdirAll",
      "r.Postings",
      "p.Next",
      "r.Close",
      "context.Background",
      "fileutil.CopyDirs",
      "index.NewFileReader",
      "p.At"
    ],
    "TestReplayAfterMmapReplayError": [
      "filepath.Join",
      "app.Commit",
      "lbls.String",
      "context.Background",
      "float64",
      "append",
      "h.Init",
      "int64",
      "opts.MaxExemplars.Store",
      "NewHead",
      "labels.FromStrings",
      "app.Append",
      "h.Appender",
      "os.OpenFile",
      "h.mmapHeadChunks",
      "require.Equal",
      "wlog.NewSize",
      "require.NoError",
      "h.Close",
      "f.WriteAt",
      "f.Close",
      "labels.MustNewMatcher",
      "t.TempDir",
      "DefaultHeadOptions",
      "openHead",
      "addSamples",
      "require.Len",
      "query",
      "os.ReadDir",
      "NewBlockQuerier"
    ],
    "TestReshard": [
      "t.Run",
      "createTimeseries",
      "m.StoreSeries",
      "m.Start",
      "m.Append",
      "NewTestWriteClient",
      "m.shards.start",
      "fmt.Sprint",
      "len",
      "require.True",
      "time.Sleep",
      "newTestQueueManager",
      "c.expectSamples",
      "m.Stop",
      "m.shards.stop",
      "c.waitForExpectedData"
    ],
    "TestReshardPartialBatch": [
      "pprof.Lookup",
      "testDefaultQueueConfig",
      "m.Start",
      "make",
      "time.Sleep",
      "m.shards.stop",
      "m.shards.start",
      "fmt.Sprint",
      "NewTestBlockedWriteClient",
      "model.Duration",
      "t.FailNow",
      "t.Run",
      "newTestQueueManager",
      "m.StoreSeries",
      "time.After",
      "?.WriteTo",
      "createTimeseries",
      "m.Append",
      "t.Error",
      "m.Stop"
    ],
    "TestReshardRaceWithStop": [
      "NewTestWriteClient",
      "testDefaultQueueConfig",
      "t.Run",
      "fmt.Sprint",
      "h.Lock",
      "make",
      "newTestQueueManager",
      "m.Start",
      "h.Unlock",
      "m.Stop"
    ],
    "TestResize": [
      "es.AddExemplar",
      "labels.FromStrings",
      "int64",
      "context.TODO",
      "labels.MustNewMatcher",
      "es.Querier",
      "q.Select",
      "require.Empty",
      "require.NoError",
      "strconv.Itoa",
      "es.Resize",
      "require.Equal",
      "require.NotEmpty",
      "t.Run",
      "NewCircularExemplarStorage",
      "float64"
    ],
    "TestRespondError": [
      "s.Close",
      "http.Get",
      "require.NoError",
      "resp.Body.Close",
      "resp.Header.Get",
      "http.HandlerFunc",
      "api.respondError",
      "errors.New",
      "require.JSONEq",
      "string",
      "httptest.NewServer",
      "io.ReadAll",
      "require.Equal"
    ],
    "TestRespondSuccess": [
      "s.Close",
      "resp.Body.Close",
      "httptest.NewServer",
      "api.respond",
      "api.ClearCodecs",
      "http.HandlerFunc",
      "http.NewRequest",
      "require.NoError",
      "http.DefaultClient.Do",
      "io.ReadAll",
      "require.Equal",
      "string",
      "promslog.NewNopLogger",
      "api.InstallCodec",
      "t.Run",
      "req.Header.Set",
      "resp.Header.Get"
    ],
    "TestRespondSuccess_DefaultCodecCannotEncodeResponse": [
      "http.HandlerFunc",
      "api.respond",
      "s.Close",
      "http.NewRequest",
      "http.DefaultClient.Do",
      "require.JSONEq",
      "api.InstallCodec",
      "require.Equal",
      "resp.Header.Get",
      "io.ReadAll",
      "string",
      "resp.Body.Close",
      "api.ClearCodecs",
      "httptest.NewServer",
      "require.NoError",
      "promslog.NewNopLogger"
    ],
    "TestRetentionDurationMetric": [
      "db.Close",
      "prom_testutil.ToFloat64",
      "require.Equal",
      "openTestDB",
      "require.NoError"
    ],
    "TestRetryAfterDuration": [
      "model.Duration",
      "require.Equal",
      "retryAfterDuration"
    ],
    "TestRetryOnError": [
      "t.Parallel",
      "errors.New",
      "retryOnError",
      "context.TODO",
      "require.Equal"
    ],
    "TestReturnAPIError": [
      "fmt.Errorf",
      "promql.ErrQueryTimeout",
      "promql.ErrQueryCanceled",
      "returnAPIError",
      "require.Error",
      "require.Equal",
      "errors.New"
    ],
    "TestReusableConfig": [
      "model.Duration",
      "require.True",
      "reusableCache",
      "require.False"
    ],
    "TestReuseCacheRace": [
      "time.Now",
      "sp.reload",
      "make",
      "labels.FromStrings",
      "sp.stop",
      "newTestScrapeMetrics",
      "sp.sync",
      "uint",
      "time.Since",
      "model.Duration",
      "pool.New",
      "newScrapePool"
    ],
    "TestReuseScrapeCache": [
      "require.NotEqual",
      "newScrapePool",
      "newTestScrapeMetrics",
      "make",
      "fmt.Sprintf",
      "sp.reload",
      "sp.stop",
      "sp.sync",
      "l.getCache",
      "require.Equal",
      "model.Duration",
      "labels.FromStrings",
      "url.Parse",
      "cacheAddr"
    ],
    "TestReverseFloatBucketIterator": [
      "require.Equal",
      "h.NegativeBucketIterator",
      "h.NegativeReverseBucketIterator",
      "h.PositiveBucketIterator",
      "it.Next",
      "append",
      "it.At",
      "h.PositiveReverseBucketIterator",
      "require.NotEmpty"
    ],
    "TestRobotSDRefresh": [
      "require.NotNil",
      "model.LabelValue",
      "suite.SetupTest",
      "suite.Mock.Endpoint",
      "newRobotDiscovery",
      "promslog.NewNopLogger",
      "require.NoError",
      "require.Len",
      "fmt.Sprintf",
      "d.refresh",
      "context.Background",
      "t.Run",
      "require.Equal"
    ],
    "TestRobotSDRefreshHandleError": [
      "require.EqualError",
      "require.Empty",
      "suite.SetupTest",
      "suite.Mock.Endpoint",
      "promslog.NewNopLogger",
      "require.NoError",
      "newRobotDiscovery",
      "d.refresh",
      "context.Background"
    ],
    "TestRollback": [
      "r.Next",
      "dec.Type",
      "dec.FloatHistogramSamples",
      "createTestAgentDB",
      "s.Close",
      "wlog.NewSegmentsReader",
      "app.Rollback",
      "?.F",
      "tsdbutil.GenerateTestCustomBucketsHistograms",
      "tsdbutil.GenerateTestCustomBucketsFloatHistograms",
      "s.wal.Dir",
      "wlog.NewReader",
      "len",
      "dec.HistogramSamples",
      "context.TODO",
      "t.Name",
      "app.Commit",
      "tsdbutil.GenerateTestHistograms",
      "sr.Close",
      "dec.Exemplars",
      "DefaultOptions",
      "chunks.GenerateSamples",
      "require.NoError",
      "app.Append",
      "int64",
      "r.Record",
      "dec.Samples",
      "labelsForTest",
      "labels.New",
      "app.AppendHistogram",
      "require.Equal",
      "record.NewDecoder",
      "labels.NewSymbolTable",
      "dec.Series",
      "s.Appender",
      "?.T",
      "tsdbutil.GenerateTestFloatHistograms"
    ],
    "TestRoutePrefix": [
      "require.Equal",
      "fmt.Sprintf",
      "testutil.RandomUnprivilegedPort",
      "cancel",
      "http.Get",
      "webHandler.Listeners",
      "panic",
      "context.WithCancel",
      "webHandler.SetReady",
      "t.TempDir",
      "tsdb.Open",
      "require.NoError",
      "New",
      "t.Cleanup",
      "cleanupTestResponse",
      "strings.NewReader",
      "time.Sleep",
      "http.Post",
      "cleanupSnapshot",
      "t.Parallel",
      "db.Close",
      "context.Background",
      "webHandler.Run"
    ],
    "TestRuleDependencyController_AnalyseRules": [
      "storage.Close",
      "r.NoDependencyRules",
      "labels.EmptyLabels",
      "require.Equalf",
      "r.NoDependentRules",
      "teststorage.New",
      "t.Cleanup",
      "NewManager",
      "context.Background",
      "ruleManager.LoadGroups",
      "require.Empty",
      "require.Len",
      "t.Run",
      "promslog.NewNopLogger",
      "ruleManager.opts.RuleDependencyController.AnalyseRules",
      "r.Name",
      "require.Truef",
      "r.String"
    ],
    "TestRuleEval": [
      "t.Cleanup",
      "testEngine",
      "NewRecordingRule",
      "rule.Eval",
      "testutil.RequireEqual",
      "setUpRuleEvalTest",
      "storage.Close",
      "t.Run",
      "context.TODO",
      "EngineQueryFunc",
      "require.NoError"
    ],
    "TestRuleEvalDuplicate": [
      "rule.Eval",
      "EngineQueryFunc",
      "teststorage.New",
      "storage.Close",
      "context.Background",
      "parser.ParseExpr",
      "NewRecordingRule",
      "labels.FromStrings",
      "require.Error",
      "cancelCtx",
      "promqltest.NewTestEngineWithOpts",
      "context.WithCancel",
      "time.Now",
      "require.EqualError"
    ],
    "TestRuleGroupEvalIterationFunc": [
      "promqltest.LoadedStorage",
      "parser.ParseExpr",
      "time.Now",
      "NewGroup",
      "context.Background",
      "labels.EmptyLabels",
      "require.Zero",
      "time.ParseDuration",
      "t.Cleanup",
      "storage.Close",
      "labels.FromStrings",
      "group.stop",
      "require.WithinDuration",
      "require.NoError",
      "EngineQueryFunc",
      "atomic.NewBool",
      "atomic.NewString",
      "atomic.NewError",
      "testFunc",
      "testEngine",
      "atomic.NewDuration",
      "DefaultEvalIterationFunc",
      "string",
      "atomic.NewTime",
      "time.Sleep",
      "require.Equal",
      "group.run",
      "group.GetLastEvalTimestamp",
      "t.Logf",
      "promslog.NewNopLogger"
    ],
    "TestRuleHealthUpdates": [
      "teststorage.New",
      "promqltest.NewTestEngineWithOpts",
      "group.Rules",
      "require.NoError",
      "group.Eval",
      "require.EqualError",
      "parser.ParseExpr",
      "NewGroup",
      "require.Equal",
      "rules.Health",
      "time.Unix",
      "storage.ErrOutOfOrderSample.Error",
      "app.Append",
      "labels.FromStrings",
      "st.Close",
      "EngineQueryFunc",
      "context.Background",
      "promslog.NewNopLogger",
      "NewRecordingRule",
      "st.Appender",
      "app.Commit",
      "rules.LastError"
    ],
    "TestRuleMovedBetweenGroups": [
      "labels.EmptyLabels",
      "time.Sleep",
      "testing.Short",
      "context.Background",
      "promslog.NewNopLogger",
      "require.NoError",
      "require.Equal",
      "countStaleNaN",
      "t.Skip",
      "NewManager",
      "ruleManager.Stop",
      "teststorage.New",
      "storage.Close",
      "ruleManager.start",
      "promql.NewEngine",
      "EngineQueryFunc",
      "ruleManager.Update"
    ],
    "TestRulesDependentOnMetaMetrics": [
      "parser.ParseExpr",
      "NewRecordingRule",
      "NewGroup",
      "buildDependencyMap",
      "require.False",
      "depMap.isIndependent",
      "context.Background",
      "promslog.NewNopLogger",
      "require.NoError"
    ],
    "TestRulesUnitTest": [
      "t.Run",
      "t.Errorf",
      "RulesUnitTestResult",
      "xml.Unmarshal",
      "t.Parallel",
      "append",
      "len",
      "RulesUnitTest",
      "buf.Bytes",
      "fmt.Println"
    ],
    "TestRulesUnitTestRun": [
      "RulesUnitTest",
      "require.Equal",
      "t.Parallel",
      "t.Run"
    ],
    "TestRunTest": [
      "require.NoError",
      "require.EqualError",
      "t.Run",
      "testTest",
      "NewTestEngine"
    ],
    "TestRun_AvoidNotifyWhenBehind": [
      "NewSize",
      "time.Now",
      "watcher.Run",
      "w.Close",
      "os.Mkdir",
      "fmt.Sprintf",
      "t.TempDir",
      "time.Since",
      "t.SkipNow",
      "newWriteToMock",
      "watcher.SetMetrics",
      "g.Go",
      "retry",
      "wt.checkNumSeries",
      "generateWALRecords",
      "t.Run",
      "path.Join",
      "require.NoError",
      "w.NextSegment",
      "NewWatcher",
      "fmt.Errorf",
      "g.Wait",
      "compression.Types",
      "require.Equal"
    ],
    "TestRun_StartupTime": [
      "path.Join",
      "rand.Intn",
      "float64",
      "t.TempDir",
      "require.NoError",
      "enc.Series",
      "chunks.HeadSeriesRef",
      "enc.Samples",
      "int64",
      "w.Close",
      "newWriteToMock",
      "fmt.Sprintf",
      "time.Now",
      "os.Mkdir",
      "NewSize",
      "w.Log",
      "watcher.Run",
      "require.Less",
      "time.Since",
      "compression.Types",
      "labels.FromStrings",
      "NewWatcher",
      "watcher.SetMetrics",
      "t.Run"
    ],
    "TestRuntimeGOGCConfig": [
      "testing.Short",
      "prometheusCommandWithLogging",
      "fmt.Sprintf",
      "t.Run",
      "filepath.Join",
      "os.WriteFile",
      "require.Eventually",
      "t.TempDir",
      "testutil.RandomUnprivilegedPort",
      "os.Environ",
      "prom.Start",
      "http.Get",
      "require.Equal",
      "reloadPrometheusConfig",
      "t.Skip",
      "t.Parallel",
      "append",
      "require.NoError",
      "r.Body.Close",
      "getMetricValue",
      "ensureGOGCValue"
    ],
    "TestRwProtoMsgFlagParser": [
      "t.Run",
      "kingpin.New",
      "?.Default",
      "rwProtoMsgFlagValue",
      "require.Equal",
      "errors.New",
      "strings.Join",
      "a.Flag",
      "require.NoError",
      "t.Parallel",
      "?.SetValue",
      "defaultOpts.Strings",
      "a.Parse",
      "require.Error"
    ],
    "TestSDCheckResult": [
      "getSDCheckResult",
      "t.Parallel",
      "relabel.NewRegexp",
      "require.NoError",
      "model.Duration",
      "labels.FromStrings",
      "testutil.RequireEqual"
    ],
    "TestSDConfigUnmarshalYAML": [
      "require.Equal",
      "yaml.Marshal",
      "panic",
      "yaml.Unmarshal",
      "t.Run",
      "marshal",
      "config.UnmarshalYAML",
      "unmarshal"
    ],
    "TestSampleAndChunkQueryableClient": [
      "m.reset",
      "NewSampleAndChunkQueryableClient",
      "require.NoError",
      "append",
      "ss.Err",
      "t.Run",
      "q.Select",
      "ss.Warnings",
      "labels.NewScratchBuilder",
      "labels.MustNewMatcher",
      "labels.FromStrings",
      "q.Close",
      "context.Background",
      "ss.Next",
      "ss.At",
      "testutil.RequireEqual",
      "c.Querier",
      "require.Equal",
      "annotations.Annotations",
      "?.Labels"
    ],
    "TestSampleDelivery": [
      "fmt.Sprintf",
      "createSeriesMetadata",
      "len",
      "t.TempDir",
      "s.Close",
      "createHistograms",
      "c.expectHistograms",
      "qm.AppendFloatHistograms",
      "t.Run",
      "NewStorage",
      "qm.Append",
      "c.waitForExpectedData",
      "baseRemoteWriteConfig",
      "require.NoError",
      "NewTestWriteClient",
      "c.expectSamples",
      "qm.AppendExemplars",
      "qm.SetClient",
      "c.expectExemplars",
      "qm.StoreMetadata",
      "c.expectFloatHistograms",
      "qm.AppendHistograms",
      "createTimeseries",
      "createExemplars",
      "model.Duration",
      "s.ApplyConfig",
      "toHash",
      "qm.StoreSeries"
    ],
    "TestSampleDeliveryOrder": [
      "make",
      "append",
      "chunks.HeadSeriesRef",
      "labels.FromStrings",
      "c.expectSamples",
      "newTestClientAndQueueManager",
      "m.StoreSeries",
      "m.Start",
      "m.Append",
      "t.Run",
      "fmt.Sprint",
      "fmt.Sprintf",
      "int64",
      "float64",
      "m.Stop",
      "c.waitForExpectedData"
    ],
    "TestSampleDeliveryTimeout": [
      "m.StoreSeries",
      "m.Stop",
      "m.Append",
      "c.waitForExpectedData",
      "t.Run",
      "fmt.Sprint",
      "createTimeseries",
      "NewTestWriteClient",
      "testDefaultQueueConfig",
      "newTestQueueManager",
      "m.Start",
      "c.expectSamples"
    ],
    "TestSampleRing": [
      "r.add",
      "r.samples",
      "bs.T",
      "require.Less",
      "bs.F",
      "require.GreaterOrEqual",
      "newSampleRing",
      "append",
      "float64",
      "rand.Intn"
    ],
    "TestSampleRingAtFloatHistogram": [
      "require.Equal",
      "it.Next",
      "int64",
      "h1.ToFloat",
      "tsdbutil.GenerateTestFloatHistogram",
      "tsdbutil.GenerateTestHistogram",
      "r.iterator",
      "r.addFH",
      "r.reset",
      "r.addH",
      "h2.ToFloat",
      "newSampleRing",
      "it.AtFloatHistogram",
      "require.Empty",
      "it.AtHistogram"
    ],
    "TestSampleRingMixed": [
      "it.Next",
      "it.At",
      "it.AtHistogram",
      "r.reset",
      "tsdbutil.GenerateTestHistogram",
      "r.addF",
      "r.addH",
      "require.Equal",
      "newSampleRing",
      "require.Empty",
      "r.iterator",
      "int64"
    ],
    "TestSampledReadEndpoint": [
      "labels.FromStrings",
      "labels.NewMatcher",
      "http.NewRequest",
      "bytes.NewBuffer",
      "httptest.NewRecorder",
      "proto.Marshal",
      "prompb.FromFloatHistogram",
      "tsdbutil.GenerateTestFloatHistogram",
      "io.ReadAll",
      "snappy.Decode",
      "promqltest.LoadedStorage",
      "store.Close",
      "addNativeHistogramsToTestSuite",
      "ToQuery",
      "snappy.Encode",
      "recorder.Result",
      "require.Len",
      "NewReadHandler",
      "require.NoError",
      "h.ServeHTTP",
      "require.Equal",
      "?.Header.Get",
      "proto.Unmarshal"
    ],
    "TestSanitizeFullLabelName": [
      "SanitizeFullLabelName",
      "require.Equal"
    ],
    "TestSanitizeLabelName": [
      "SanitizeLabelName",
      "require.Equal"
    ],
    "TestScalewayInstanceAuthToken": [
      "httptest.NewServer",
      "http.HandlerFunc",
      "fmt.Sprintf",
      "yaml.UnmarshalStrict",
      "newRefresher",
      "require.Len",
      "mock.Close",
      "require.NoError",
      "context.Background",
      "d.refresh"
    ],
    "TestScalewayInstanceRefresh": [
      "fmt.Sprintf",
      "require.NoError",
      "yaml.UnmarshalStrict",
      "newRefresher",
      "context.Background",
      "d.refresh",
      "httptest.NewServer",
      "http.HandlerFunc",
      "require.Equal",
      "require.NotNil",
      "t.Run",
      "mock.Close",
      "require.Len"
    ],
    "TestScrapeAddFast": [
      "slApp.Commit",
      "sl.getCache",
      "?.Add",
      "context.WithCancel",
      "context.Background",
      "newBasicScrapeLoop",
      "sl.appender",
      "require.NoError",
      "teststorage.New",
      "s.Close",
      "cancel",
      "sl.append"
    ],
    "TestScrapeAppendMetadataUpdate": [
      "context.Background",
      "testutil.RequireEqualWithOptions",
      "labels.FromStrings",
      "now.Add",
      "newBasicScrapeLoop",
      "time.Now",
      "sl.appender",
      "sl.append",
      "require.NoError",
      "slApp.Commit",
      "cmp.Comparer"
    ],
    "TestScrapeAppendWithParseError": [
      "timestamp.FromTime",
      "requireEqual",
      "newBasicScrapeLoop",
      "context.Background",
      "time.Now",
      "sl.append",
      "require.NoError",
      "now.Add",
      "newScrapeCache",
      "require.Error",
      "require.Empty",
      "capp.Commit",
      "labels.FromStrings"
    ],
    "TestScrapeConfigDisableCompression": [
      "yaml.Marshal",
      "yaml.UnmarshalStrict",
      "require.False",
      "LoadFile",
      "promslog.NewNopLogger",
      "require.NoError"
    ],
    "TestScrapeConfigNameEscapingSettings": [
      "yaml.UnmarshalStrict",
      "require.Equal",
      "t.Run",
      "LoadFile",
      "fmt.Sprintf",
      "promslog.NewNopLogger",
      "require.NoError",
      "yaml.Marshal"
    ],
    "TestScrapeConfigNameValidationSettings": [
      "fmt.Sprintf",
      "promslog.NewNopLogger",
      "require.NoError",
      "yaml.Marshal",
      "yaml.UnmarshalStrict",
      "require.Equal",
      "t.Run",
      "LoadFile"
    ],
    "TestScrapeFailureLogFile": [
      "require.Equal",
      "t.TempDir",
      "testutil.RandomUnprivilegedPort",
      "countLinesInFile",
      "require.Greater",
      "testing.Short",
      "os.ReadFile",
      "require.Contains",
      "exec.Command",
      "prometheusProcess.Process.Kill",
      "require.Eventually",
      "t.Skip",
      "filepath.Join",
      "fmt.Sprintf",
      "prometheusProcess.Start",
      "requestCount.Load",
      "string",
      "reloadPrometheusConfig",
      "startGarbageServer",
      "os.WriteFile",
      "require.NoError"
    ],
    "TestScrapeIntervalLarger": [
      "require.NoError",
      "require.Len",
      "require.GreaterOrEqual",
      "LoadFile",
      "promslog.NewNopLogger"
    ],
    "TestScrapeLoopAppend": [
      "labels.FromStrings",
      "newBasicScrapeLoop",
      "t.Logf",
      "time.Now",
      "sl.appender",
      "sl.append",
      "requireEqual",
      "math.Float64frombits",
      "context.Background",
      "mutateSampleLabels",
      "timestamp.FromTime",
      "mutateReportSampleLabels",
      "require.NoError",
      "slApp.Commit"
    ],
    "TestScrapeLoopAppendCacheEntryButErrNotFound": [
      "require.Equal",
      "newBasicScrapeLoop",
      "sl.appender",
      "slApp.Commit",
      "timestamp.FromTime",
      "textparse.New",
      "p.Next",
      "require.NotNil",
      "require.NoError",
      "p.Labels",
      "lset.Hash",
      "sl.cache.addRef",
      "time.Now",
      "context.Background",
      "float64",
      "sl.append",
      "storage.SeriesRef",
      "labels.NewSymbolTable"
    ],
    "TestScrapeLoopAppendEmptyWithNoContentType": [
      "sl.append",
      "require.NoError",
      "slApp.Commit",
      "newBasicScrapeLoopWithFallback",
      "context.Background",
      "time.Now",
      "sl.appender"
    ],
    "TestScrapeLoopAppendExemplar": [
      "requireEqual",
      "context.Background",
      "buf.WriteString",
      "textToProto",
      "sl.append",
      "t.Run",
      "mutateSampleLabels",
      "require.NoError",
      "mutateReportSampleLabels",
      "time.Now",
      "timestamp.FromTime",
      "buf.Bytes",
      "app.Commit",
      "labels.FromStrings",
      "newBasicScrapeLoop"
    ],
    "TestScrapeLoopAppendExemplarSeries": [
      "time.Duration",
      "timestamp.FromTime",
      "sl.append",
      "require.NoError",
      "newBasicScrapeLoop",
      "mutateSampleLabels",
      "timestamp.Time",
      "app.Commit",
      "context.Background",
      "mutateReportSampleLabels",
      "time.Now",
      "now.Add",
      "requireEqual",
      "labels.FromStrings"
    ],
    "TestScrapeLoopAppendFailsWithNoContentType": [
      "newBasicScrapeLoopWithFallback",
      "context.Background",
      "time.Now",
      "sl.appender",
      "sl.append",
      "require.ErrorContains"
    ],
    "TestScrapeLoopAppendForConflictingPrefixedLabels": [
      "t.Run",
      "sl.appender",
      "requireEqual",
      "require.NoError",
      "slApp.Commit",
      "newBasicScrapeLoop",
      "context.Background",
      "mutateSampleLabels",
      "labels.FromStrings",
      "sl.append",
      "time.Date",
      "timestamp.FromTime"
    ],
    "TestScrapeLoopAppendGracefullyIfAmendOrOutOfOrderOrOutOfBounds": [
      "context.Background",
      "time.Unix",
      "sl.append",
      "require.NoError",
      "timestamp.FromTime",
      "requireEqual",
      "newBasicScrapeLoop",
      "sl.appender",
      "slApp.Commit",
      "labels.FromStrings",
      "require.Equal"
    ],
    "TestScrapeLoopAppendNoStalenessIfTimestamp": [
      "sl.append",
      "require.NoError",
      "now.Add",
      "require.Equal",
      "newBasicScrapeLoop",
      "context.Background",
      "time.Now",
      "sl.appender",
      "slApp.Commit",
      "labels.FromStrings"
    ],
    "TestScrapeLoopAppendSampleLimit": [
      "slApp.Rollback",
      "l.Has",
      "require.NoError",
      "sl.appender",
      "sl.append",
      "require.Equal",
      "metric.GetCounter",
      "sl.metrics.targetScrapeSampleLimit.Write",
      "?.GetValue",
      "beforeMetric.GetCounter",
      "time.Now",
      "newBasicScrapeLoop",
      "require.ErrorIs",
      "requireEqual",
      "context.Background",
      "labels.EmptyLabels",
      "labels.FromStrings",
      "timestamp.FromTime"
    ],
    "TestScrapeLoopAppendStaleness": [
      "newBasicScrapeLoop",
      "sl.append",
      "labels.FromStrings",
      "timestamp.FromTime",
      "math.Float64frombits",
      "requireEqual",
      "context.Background",
      "time.Now",
      "sl.appender",
      "require.NoError",
      "slApp.Commit",
      "now.Add"
    ],
    "TestScrapeLoopAppendStalenessIfTrackTimestampStaleness": [
      "context.Background",
      "time.Now",
      "sl.appender",
      "sl.append",
      "require.NoError",
      "slApp.Commit",
      "now.Add",
      "newBasicScrapeLoop",
      "timestamp.FromTime",
      "requireEqual",
      "labels.FromStrings",
      "math.Float64frombits"
    ],
    "TestScrapeLoopCache": [
      "errors.New",
      "sl.run",
      "require.Len",
      "make",
      "context.Background",
      "require.False",
      "cancel",
      "teststorage.New",
      "newBasicScrapeLoopWithFallback",
      "require.FailNow",
      "s.Appender",
      "context.WithCancel",
      "w.Write",
      "time.After",
      "s.Close",
      "require.True"
    ],
    "TestScrapeLoopCacheMemoryExhaustionProtection": [
      "teststorage.New",
      "s.Close",
      "newBasicScrapeLoop",
      "fmt.Sprintf",
      "sl.run",
      "len",
      "context.Background",
      "cancel",
      "context.WithCancel",
      "w.Write",
      "time.After",
      "require.FailNow",
      "require.LessOrEqual",
      "s.Appender",
      "make"
    ],
    "TestScrapeLoopCompression": [
      "t.Run",
      "fmt.Sprintf",
      "make",
      "httptest.NewServer",
      "http.HandlerFunc",
      "require.Equal",
      "r.Header.Get",
      "simpleStorage.Close",
      "require.NoError",
      "url.Parse",
      "sp.Sync",
      "t.Fatalf",
      "model.Duration",
      "ts.Close",
      "sp.stop",
      "time.After",
      "makeTestGauges",
      "fmt.Fprint",
      "string",
      "close",
      "newScrapePool",
      "model.LabelValue",
      "teststorage.New",
      "require.Len",
      "sp.ActiveTargets",
      "newTestScrapeMetrics"
    ],
    "TestScrapeLoopDiscardDuplicateLabels": [
      "context.WithCancel",
      "context.Background",
      "sl.append",
      "require.Error",
      "?.UnixNano",
      "require.False",
      "newBasicScrapeLoop",
      "sl.appender",
      "slApp.Rollback",
      "labels.MustNewMatcher",
      "series.Next",
      "series.Err",
      "teststorage.New",
      "s.Close",
      "sl.cache.iterDone",
      "s.Querier",
      "q.Select",
      "slApp.Commit",
      "require.True",
      "cancel",
      "require.NoError"
    ],
    "TestScrapeLoopDiscardUnnamedMetrics": [
      "newBasicScrapeLoop",
      "cancel",
      "require.False",
      "series.Err",
      "s.Close",
      "s.Appender",
      "context.Background",
      "l.Has",
      "sl.append",
      "require.NoError",
      "s.Querier",
      "?.UnixNano",
      "context.WithCancel",
      "labels.FromStrings",
      "slApp.Rollback",
      "q.Select",
      "labels.MustNewMatcher",
      "teststorage.New",
      "sl.appender",
      "require.Error",
      "require.Equal",
      "series.Next"
    ],
    "TestScrapeLoopFailLegacyUnderUTF8": [
      "context.Background",
      "sl.appender",
      "require.NoError",
      "slApp.Rollback",
      "require.Equal",
      "context.WithCancel",
      "s.Close",
      "cancel",
      "newBasicScrapeLoop",
      "sl.append",
      "require.ErrorContains",
      "teststorage.New"
    ],
    "TestScrapeLoopFailWithInvalidLabelsAfterRelabel": [
      "context.Background",
      "labels.FromStrings",
      "sl.appender",
      "s.Close",
      "context.WithCancel",
      "relabel.MustNewRegexp",
      "newBasicScrapeLoop",
      "teststorage.New",
      "cancel",
      "sl.append",
      "require.Equal",
      "mutateSampleLabels",
      "require.ErrorContains",
      "require.NoError",
      "slApp.Rollback"
    ],
    "TestScrapeLoopForcedErr": [
      "errors.New",
      "sl.run",
      "cancel",
      "context.WithCancel",
      "newBasicScrapeLoop",
      "sl.setForcedError",
      "require.FailNow",
      "require.ErrorIs",
      "time.After",
      "make",
      "context.Background"
    ],
    "TestScrapeLoopLabelLimit": [
      "require.NoError",
      "slApp.Commit",
      "labels.FromStrings",
      "newBasicScrapeLoop",
      "context.Background",
      "sl.append",
      "time.Now",
      "require.Error",
      "mutateSampleLabels",
      "mutateReportSampleLabels",
      "sl.appender",
      "t.Logf"
    ],
    "TestScrapeLoopMetadata": [
      "make",
      "newTestScrapeMetrics",
      "cancel",
      "sl.appender",
      "sl.append",
      "newScrapeLoop",
      "require.Equal",
      "context.Background",
      "time.Now",
      "slApp.Commit",
      "cache.GetMetadata",
      "require.Empty",
      "newScrapeCache",
      "close",
      "context.WithCancel",
      "labels.NewSymbolTable",
      "require.NoError",
      "require.True"
    ],
    "TestScrapeLoopOutOfBoundsTimeError": [
      "slApp.Commit",
      "require.Equal",
      "newBasicScrapeLoop",
      "timestamp.FromTime",
      "time.Now",
      "sl.appender",
      "require.NoError",
      "context.Background",
      "?.Add",
      "sl.append"
    ],
    "TestScrapeLoopRun": [
      "require.FailNow",
      "ctx.Err",
      "context.WithCancel",
      "newScrapeLoop",
      "make",
      "newBasicScrapeLoop",
      "close",
      "newTestScrapeMetrics",
      "sl.run",
      "cancel",
      "time.After",
      "ctx.Done",
      "require.ErrorIs",
      "context.Background",
      "time.Sleep"
    ],
    "TestScrapeLoopRunCreatesStaleMarkersOnFailedScrape": [
      "newBasicScrapeLoopWithFallback",
      "cancel",
      "require.FailNow",
      "require.Len",
      "value.IsStaleNaN",
      "make",
      "context.WithCancel",
      "time.After",
      "require.Equal",
      "require.True",
      "sl.run",
      "w.Write",
      "errors.New",
      "math.Float64bits",
      "context.Background"
    ],
    "TestScrapeLoopRunCreatesStaleMarkersOnFailedScrapeForTimestampedMetrics": [
      "t.Fatalf",
      "require.Len",
      "fmt.Fprintf",
      "errors.New",
      "time.After",
      "context.WithCancel",
      "math.Float64bits",
      "int64",
      "cancel",
      "sl.run",
      "require.True",
      "context.Background",
      "newBasicScrapeLoopWithFallback",
      "?.UnixNano",
      "value.IsStaleNaN",
      "make",
      "time.Now",
      "require.Equal"
    ],
    "TestScrapeLoopRunCreatesStaleMarkersOnParseFailure": [
      "make",
      "context.Background",
      "w.Write",
      "require.True",
      "newBasicScrapeLoopWithFallback",
      "cancel",
      "errors.New",
      "require.Equal",
      "sl.run",
      "time.After",
      "require.FailNow",
      "value.IsStaleNaN",
      "math.Float64bits",
      "context.WithCancel",
      "require.Len"
    ],
    "TestScrapeLoopRunReportsTargetDownOnInvalidUTF8": [
      "context.WithCancel",
      "context.Background",
      "newBasicScrapeLoop",
      "cancel",
      "w.Write",
      "sl.run",
      "require.Equal"
    ],
    "TestScrapeLoopRunReportsTargetDownOnScrapeError": [
      "cancel",
      "errors.New",
      "sl.run",
      "require.Equal",
      "context.WithCancel",
      "context.Background",
      "newBasicScrapeLoop"
    ],
    "TestScrapeLoopSeriesAdded": [
      "sl.append",
      "require.NoError",
      "slApp.Commit",
      "require.Equal",
      "simpleTestScrapeLoop",
      "sl.appender"
    ],
    "TestScrapeLoopSeriesAddedDuplicates": [
      "sl.append",
      "require.NoError",
      "slApp.Commit",
      "require.Equal",
      "prom_testutil.ToFloat64",
      "simpleTestScrapeLoop",
      "sl.appender"
    ],
    "TestScrapeLoopStop": [
      "context.Background",
      "require.FailNow",
      "require.GreaterOrEqual",
      "t.Fatalf",
      "newBasicScrapeLoopWithFallback",
      "sl.ctx.Done",
      "w.Write",
      "len",
      "require.Zero",
      "require.True",
      "math.Float64bits",
      "make",
      "ctx.Err",
      "sl.run",
      "time.After",
      "value.IsStaleNaN",
      "sl.stop"
    ],
    "TestScrapeLoopStopBeforeRun": [
      "sl.run",
      "newBasicScrapeLoop",
      "context.Background",
      "make",
      "sl.stop",
      "close",
      "require.FailNow",
      "time.After"
    ],
    "TestScrapeLoop_ChangingMetricString": [
      "s.Close",
      "newBasicScrapeLoop",
      "context.Background",
      "timestamp.FromTime",
      "require.Equal",
      "now.Add",
      "labels.FromStrings",
      "teststorage.New",
      "time.Now",
      "sl.appender",
      "sl.append",
      "require.NoError",
      "slApp.Commit"
    ],
    "TestScrapeLoop_DiscardTimestamps": [
      "labels.FromStrings",
      "timestamp.FromTime",
      "teststorage.New",
      "s.Close",
      "s.Appender",
      "time.Now",
      "sl.appender",
      "require.NoError",
      "context.Background",
      "newBasicScrapeLoop",
      "sl.append",
      "slApp.Commit",
      "require.Equal"
    ],
    "TestScrapeLoop_HistogramBucketLimit": [
      "errors.Is",
      "labels.EmptyLabels",
      "require.NoError",
      "?.GetValue",
      "prometheus.NewHistogramVec",
      "prometheus.NewRegistry",
      "require.NotEmpty",
      "app.Rollback",
      "context.Background",
      "l.Has",
      "sl.metrics.targetScrapeNativeHistogramBucketLimit.Write",
      "?.Observe",
      "nativeHistogram.WithLabelValues",
      "t.Fatalf",
      "registry.Register",
      "registry.Gather",
      "time.Now",
      "require.Equal",
      "newBasicScrapeLoop",
      "metric.GetCounter",
      "MetricFamilyToProtobuf",
      "sl.append"
    ],
    "TestScrapeLoop_RespectTimestamps": [
      "newBasicScrapeLoop",
      "time.Now",
      "sl.appender",
      "sl.append",
      "slApp.Commit",
      "teststorage.New",
      "s.Close",
      "context.Background",
      "labels.FromStrings",
      "s.Appender",
      "require.NoError",
      "require.Equal"
    ],
    "TestScrapePoolAppender": [
      "newScrapePool",
      "newTestScrapeMetrics",
      "sp.newLoop",
      "require.True",
      "appender",
      "appl.appender",
      "context.Background"
    ],
    "TestScrapePoolRaces": [
      "model.ParseDuration",
      "newScrapePool",
      "newConfig",
      "newTestScrapeMetrics",
      "sp.Sync",
      "sp.ActiveTargets",
      "sp.DroppedTargets",
      "len",
      "require.Len",
      "time.Sleep",
      "sp.reload",
      "sp.stop"
    ],
    "TestScrapePoolReload": [
      "require.True",
      "newTestRegistryAndScrapeMetrics",
      "sp.reload",
      "require.NoError",
      "require.Equal",
      "labels.NewSymbolTable",
      "labels.FromStrings",
      "fmt.Sprintf",
      "time.Sleep",
      "make",
      "require.FailNow",
      "time.Since",
      "model.Duration",
      "require.Len",
      "gatherLabels",
      "close",
      "mtx.Lock",
      "targetScraper.hash",
      "mtx.Unlock",
      "t.hash",
      "time.Now",
      "time.After",
      "require.GreaterOrEqual",
      "time.Duration",
      "prom_testutil.ToFloat64"
    ],
    "TestScrapePoolReloadPreserveRelabeledIntervalTimeout": [
      "newTestRegistryAndScrapeMetrics",
      "labels.FromStrings",
      "noopLoop",
      "t.Fatalf",
      "gatherLabels",
      "model.Duration",
      "labels.NewSymbolTable",
      "sp.reload",
      "require.NoError",
      "require.Equal"
    ],
    "TestScrapePoolScrapeAfterReload": [
      "httptest.NewServer",
      "require.NoError",
      "strings.TrimPrefix",
      "p.reload",
      "p.Sync",
      "http.HandlerFunc",
      "w.Write",
      "t.Cleanup",
      "model.Duration",
      "model.LabelValue",
      "newScrapePool",
      "newTestScrapeMetrics",
      "time.After"
    ],
    "TestScrapePoolScrapeLoopsStarted": [
      "wg.Add",
      "labels.NewSymbolTable",
      "model.LabelValue",
      "require.NoError",
      "sp.reload",
      "model.Duration",
      "sp.Sync",
      "require.Len",
      "wg.Done",
      "newTestScrapeMetrics",
      "wg.Wait",
      "require.True"
    ],
    "TestScrapePoolStop": [
      "fmt.Sprintf",
      "time.Sleep",
      "mtx.Lock",
      "time.After",
      "require.Len",
      "labels.FromStrings",
      "sp.stop",
      "require.Fail",
      "require.GreaterOrEqual",
      "time.Since",
      "require.Empty",
      "make",
      "t.hash",
      "time.Duration",
      "mtx.Unlock",
      "time.Now",
      "close",
      "len",
      "newTestScrapeMetrics"
    ],
    "TestScrapePoolTargetLimit": [
      "sp.Sync",
      "loadTargets",
      "validateIsRunning",
      "validateErrorMessage",
      "promslog.NewNopLogger",
      "model.LabelValue",
      "require.NoError",
      "model.Duration",
      "?.getForcedError",
      "require.Error",
      "require.EqualError",
      "reloadWithLimit",
      "newTestScrapeMetrics",
      "labels.NewSymbolTable",
      "append",
      "fmt.Sprintf",
      "require.True",
      "wg.Add",
      "wg.Done",
      "sp.reload",
      "wg.Wait"
    ],
    "TestScrapeProtocolHeader": [
      "ScrapeProtocol",
      "t.Run",
      "tc.proto.HeaderMediaType",
      "require.Equal"
    ],
    "TestScrapeReportLimit": [
      "sp.Sync",
      "time.After",
      "t.Fatalf",
      "time.Now",
      "teststorage.New",
      "require.NoError",
      "sp.stop",
      "url.Parse",
      "s.Querier",
      "q.Select",
      "series.At",
      "require.Equal",
      "context.Background",
      "q.Close",
      "labels.MustNewMatcher",
      "s.Close",
      "model.Duration",
      "newTestScrapeMetrics",
      "model.LabelValue",
      "i.At",
      "ts.Close",
      "context.WithCancel",
      "cancel",
      "series.Next",
      "require.True",
      "newScrapePool",
      "newScrapableServer",
      "?.UnixNano",
      "?.Iterator",
      "i.Next"
    ],
    "TestScrapeReportMetadataUpdate": [
      "sl.report",
      "labels.FromStrings",
      "cmp.Comparer",
      "newBasicScrapeLoop",
      "context.Background",
      "time.Now",
      "sl.appender",
      "require.NoError",
      "slApp.Commit",
      "testutil.RequireEqualWithOptions"
    ],
    "TestScrapeReportSingleAppender": [
      "newBasicScrapeLoopWithFallback",
      "w.Write",
      "?.UnixNano",
      "require.NoError",
      "?.Iterator",
      "errors.New",
      "time.Since",
      "series.Next",
      "series.At",
      "i.Next",
      "cancel",
      "teststorage.New",
      "make",
      "context.WithCancel",
      "sl.run",
      "time.Now",
      "s.Querier",
      "require.Equal",
      "q.Close",
      "time.After",
      "s.Close",
      "context.Background",
      "q.Select",
      "labels.MustNewMatcher",
      "require.FailNow"
    ],
    "TestScrapeUTF8": [
      "series.Next",
      "teststorage.New",
      "require.NoError",
      "time.Now",
      "q.Select",
      "require.True",
      "?.UnixNano",
      "labels.MustNewMatcher",
      "model.Duration",
      "newScrapePool",
      "newTestScrapeMetrics",
      "sp.Sync",
      "model.LabelValue",
      "url.Parse",
      "t.Fatalf",
      "context.WithCancel",
      "cancel",
      "context.Background",
      "s.Querier",
      "q.Close",
      "s.Close",
      "newScrapableServer",
      "ts.Close",
      "sp.stop",
      "time.After"
    ],
    "TestScratchBuilder": [
      "NewScratchBuilder",
      "len",
      "require.True",
      "Equal",
      "b.Labels",
      "t.Run",
      "strconv.Itoa",
      "b.Add",
      "b.Sort",
      "b.Assign",
      "EmptyLabels",
      "FromStrings"
    ],
    "TestSegmentMetric": [
      "make",
      "w.Close",
      "t.TempDir",
      "client_testutil.ToFloat64",
      "rand.Read",
      "w.Log",
      "require.Equal",
      "NewSize",
      "require.NoError"
    ],
    "TestSelectExemplar": [
      "NewCircularExemplarStorage",
      "require.NoError",
      "require.Len",
      "labels.FromStrings",
      "es.AddExemplar",
      "require.True",
      "reflect.DeepEqual",
      "labels.NewMatcher",
      "es.Select"
    ],
    "TestSelectExemplar_DuplicateSeries": [
      "NewCircularExemplarStorage",
      "labels.FromStrings",
      "labels.MustNewMatcher",
      "require.True",
      "reflect.DeepEqual",
      "require.NoError",
      "es.AddExemplar",
      "es.Select",
      "require.Len"
    ],
    "TestSelectExemplar_MultiSeries": [
      "es.AddExemplar",
      "labels.NewMatcher",
      "require.Len",
      "len",
      "int64",
      "labels.FromStrings",
      "float64",
      "es.Select",
      "NewCircularExemplarStorage",
      "require.NoError"
    ],
    "TestSelectExemplar_TimeRange": [
      "l.Bytes",
      "labels.NewMatcher",
      "NewCircularExemplarStorage",
      "require.NoError",
      "int64",
      "require.Equal",
      "string",
      "es.Select",
      "require.Len",
      "len",
      "labels.FromStrings",
      "es.AddExemplar",
      "strconv.Itoa"
    ],
    "TestSelectHintsSetCorrectly": [
      "query.Exec",
      "t.Run",
      "context.Background",
      "engine.NewInstantQuery",
      "require.NoError",
      "promqltest.NewTestEngineWithOpts",
      "timestamp.Time",
      "engine.NewRangeQuery",
      "require.Equal"
    ],
    "TestSendAlerts": [
      "labels.FromStrings",
      "senderFunc",
      "context.TODO",
      "require.NotEmpty",
      "require.Equal",
      "rules.SendAlerts",
      "time.Unix",
      "t.Run",
      "strconv.Itoa"
    ],
    "TestSendAlertsDontAffectActiveAlerts": [
      "require.NoError",
      "require.Equal",
      "labels.FromStrings",
      "relabel.MustNewRegexp",
      "notifier.NewManager",
      "require.Len",
      "labels.EmptyLabels",
      "time.Now",
      "parser.ParseExpr",
      "nm.Stop",
      "testutil.RequireEqual",
      "NewAlertingRule",
      "lbls.Hash",
      "promslog.NewNopLogger",
      "SendAlerts",
      "f",
      "rule.sendAlerts",
      "context.Background"
    ],
    "TestSendSamplesWithBackoffWithSampleAgeLimit": [
      "append",
      "t.Log",
      "createTimeseriesWithRandomLabelCount",
      "m.StoreSeries",
      "m.Append",
      "require.True",
      "getSeriesIDFromRef",
      "m.Stop",
      "t.Errorf",
      "model.Duration",
      "newTestQueueManager",
      "m.Start",
      "strconv.Itoa",
      "appendData",
      "cmp.Diff",
      "NewTestWriteClient",
      "c.SetReturnError",
      "time.Sleep"
    ],
    "TestSeriesReset": [
      "append",
      "chunks.HeadSeriesRef",
      "labels.FromStrings",
      "m.StoreSeries",
      "require.Len",
      "m.SeriesReset",
      "NewTestBlockedWriteClient",
      "newTestQueueManager"
    ],
    "TestSeriesSetFilter": [
      "require.NoError",
      "require.Empty",
      "require.Equal",
      "prompb.FromLabels",
      "labels.FromStrings",
      "newSeriesSetFilter",
      "FromQueryResult",
      "ToQueryResult"
    ],
    "TestServerSDRefresh": [
      "pem.EncodeToMemory",
      "suite.Mock.ShutdownServer",
      "require.NoError",
      "x509.MarshalPKCS1PrivateKey",
      "suite.SetupTest",
      "newServerDiscovery",
      "t.Run",
      "suite.Mock.Endpoint",
      "d.refresh",
      "require.Len",
      "require.NotNil",
      "model.LabelValue",
      "rsa.GenerateKey",
      "string",
      "promslog.NewNopLogger",
      "context.Background",
      "require.Equal"
    ],
    "TestServiceDiscoveryAdd": [
      "makeLoadBalancerService",
      "makeDiscovery",
      "makeService",
      "?.Services",
      "context.Background",
      "makeExternalService",
      "t.Parallel",
      "?.Run",
      "?.Create",
      "c.CoreV1"
    ],
    "TestServiceDiscoveryAllNamespaces": [
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "makeDiscovery",
      "?.Run",
      "makeService",
      "?.Create",
      "?.Services"
    ],
    "TestServiceDiscoveryDelete": [
      "makeService",
      "?.Run",
      "?.Delete",
      "?.Services",
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "makeDiscovery"
    ],
    "TestServiceDiscoveryNamespaces": [
      "context.Background",
      "t.Parallel",
      "makeDiscovery",
      "?.Run",
      "makeService",
      "?.Create",
      "?.Services",
      "c.CoreV1"
    ],
    "TestServiceDiscoveryOwnNamespace": [
      "c.CoreV1",
      "context.Background",
      "t.Parallel",
      "makeDiscovery",
      "?.Run",
      "makeService",
      "?.Create",
      "?.Services"
    ],
    "TestServiceDiscoveryUpdate": [
      "context.Background",
      "?.Update",
      "c.CoreV1",
      "makeService",
      "?.Run",
      "makeMultiPortService",
      "?.Services",
      "t.Parallel",
      "makeDiscovery"
    ],
    "TestSetCompactionFailed": [
      "createBlock",
      "genSeries",
      "require.False",
      "b.Close",
      "t.TempDir",
      "OpenBlock",
      "require.NoError",
      "b.setCompactionFailed",
      "require.True"
    ],
    "TestSetOffsetSeed": [
      "scrapeManager.setOffsetSeed",
      "require.NotZero",
      "require.NotEqual",
      "yaml.UnmarshalStrict",
      "require.NoError",
      "prometheus.NewRegistry",
      "NewManager",
      "getConfig"
    ],
    "TestSetOptionsHandlingStaleness": [
      "sl.run",
      "time.Sleep",
      "time.After",
      "newBasicScrapeLoop",
      "append",
      "value.IsStaleNaN",
      "teststorage.New",
      "s.Appender",
      "series.At",
      "require.Equal",
      "time.Now",
      "q.Select",
      "s.Close",
      "context.WithCancel",
      "action",
      "?.UnixNano",
      "?.Iterator",
      "series.Err",
      "context.Background",
      "cancel",
      "fmt.Fprintf",
      "s.Querier",
      "require.NoError",
      "it.At",
      "make",
      "q.Close",
      "it.Next",
      "?.Labels",
      "runScrapeLoop",
      "sl.stop",
      "t.Fatalf",
      "labels.MustNewMatcher",
      "series.Next",
      "it.Err"
    ],
    "TestSharedLimitListenerClose": [
      "conn.Close",
      "NewSharedSemaphore",
      "net.Listen",
      "require.NoError",
      "SharedLimitListener",
      "limitedListener.Close",
      "limitedListener.Accept",
      "require.Error"
    ],
    "TestSharedLimitListenerConcurrency": [
      "mu.Unlock",
      "listener.Addr",
      "io.WriteString",
      "require.Empty",
      "t.Run",
      "require.NoError",
      "mu.Lock",
      "net.Listen",
      "wg.Done",
      "int64",
      "wg.Wait",
      "NewSharedSemaphore",
      "require.LessOrEqual",
      "wg.Add",
      "limitedListener.Accept",
      "conn.Close",
      "time.Sleep",
      "net.Dial",
      "?.String",
      "listener.Close",
      "SharedLimitListener"
    ],
    "TestShouldReshard": [
      "m.shouldReshard",
      "int64",
      "newTestClientAndQueueManager",
      "m.dataOut.incr",
      "m.lastSendTimestamp.Store",
      "m.Stop",
      "require.Equal",
      "time.Now",
      "time.Duration",
      "model.Duration",
      "m.dataIn.incr",
      "m.calculateDesiredShards",
      "?.Unix",
      "m.Start"
    ],
    "TestShutdown": [
      "time.Now",
      "time.Since",
      "t.Errorf",
      "createTimeseries",
      "time.Sleep",
      "m.StoreSeries",
      "m.Start",
      "m.Append",
      "m.Stop",
      "NewTestBlockedWriteClient",
      "newTestQueueManager"
    ],
    "TestShutdownWithStaleConnection": [
      "New",
      "net.Dial",
      "require.NoError",
      "fmt.Sprintf",
      "testutil.RandomUnprivilegedPort",
      "make",
      "webHandler.Run",
      "close",
      "time.Sleep",
      "cancel",
      "t.TempDir",
      "tsdb.Open",
      "time.After",
      "context.WithCancel",
      "context.Background",
      "t.Cleanup",
      "db.Close",
      "c.Close",
      "require.FailNow",
      "webHandler.Listeners",
      "panic"
    ],
    "TestSizeOfLabels": [
      "?.Range",
      "SizeOfLabels",
      "require.Equal",
      "require.Len",
      "len"
    ],
    "TestSizeRetention": [
      "it.Next",
      "db.Blocks",
      "?.wal.Size",
      "?.Size",
      "createBlock",
      "require.LessOrEqual",
      "?.chunkDiskMapper.Truncate",
      "db.Head",
      "it.At",
      "?.chunkDiskMapper.IsQueueEmpty",
      "int64",
      "prom_testutil.ToFloat64",
      "float64",
      "?.wbl.Size",
      "require.NoError",
      "s.Iterator",
      "it.Err",
      "require.Len",
      "require.NotZero",
      "wlog.Segments",
      "wlog.Checkpoint",
      "db.Close",
      "headApp.Append",
      "?.mmapHeadChunks",
      "fileutil.DirSize",
      "int",
      "genSeries",
      "s.Labels",
      "headApp.Commit",
      "?.chunkDiskMapper.Size",
      "promslog.NewNopLogger",
      "openTestDB",
      "db.Dir",
      "context.Background",
      "require.Eventually",
      "len",
      "DefaultOptions",
      "db.reloadBlocks",
      "require.Equal",
      "?.wal.Dir",
      "?.Appender"
    ],
    "TestSizeRetentionMetric": [
      "openTestDB",
      "require.NoError",
      "db.Close",
      "int64",
      "prom_testutil.ToFloat64",
      "require.Equal"
    ],
    "TestSkippingInvalidValuesInSameTxn": [
      "openTestDB",
      "db.Close",
      "context.Background",
      "db.Appender",
      "app.Append",
      "query",
      "labels.MustNewMatcher",
      "require.Equal",
      "labels.New",
      "require.NoError",
      "labels.FromStrings",
      "app.Commit",
      "db.Querier",
      "?.String"
    ],
    "TestSnapshotAheadOfWALError": [
      "app.Append",
      "labels.FromStrings",
      "os.RemoveAll",
      "head.Init",
      "w.LastSegmentAndOffset",
      "head.Appender",
      "require.NoError",
      "app.Commit",
      "NewHead",
      "require.Equal",
      "wlog.NewSize",
      "LastChunkSnapshot",
      "head.wal.Dir",
      "newTestHead",
      "context.Background",
      "head.wal.NextSegment",
      "head.Close"
    ],
    "TestSnapshotError": [
      "head.series.getByHash",
      "lbls.Hash",
      "uint64",
      "int64",
      "labels.FromStrings",
      "os.OpenFile",
      "head.NumSeries",
      "c.created.Load",
      "app.Commit",
      "head.Appender",
      "app.AppendHistogram",
      "path.Join",
      "require.Empty",
      "require.NoError",
      "os.ReadDir",
      "require.Equal",
      "head.wal.Dir",
      "tsdbutil.GenerateTestGaugeFloatHistograms",
      "head.tombstones.AddInterval",
      "require.NotNil",
      "f.WriteAt",
      "prometheus.NewRegistry",
      "prom_testutil.ToFloat64",
      "tsdbutil.GenerateTestGaugeHistograms",
      "head.Close",
      "context.Background",
      "app.Append",
      "io.ReadAll",
      "f.Close",
      "head.Init",
      "newTestHead",
      "os.RemoveAll",
      "wlog.NewSize",
      "NewHead",
      "require.Nil",
      "c.deleted.Load",
      "head.tombstones.Get",
      "LastChunkSnapshot",
      "?.Name",
      "require.NotEmpty"
    ],
    "TestSortMetaByMinTimeAndMinRef": [
      "t.Run",
      "fmt.Sprintf",
      "slices.SortFunc",
      "require.Equal"
    ],
    "TestSourceDisappeared": [
      "?.Set",
      "w.Header",
      "t.Cleanup",
      "urlSource",
      "discovery.NewRefreshMetrics",
      "metrics.Register",
      "metrics.Unregister",
      "context.Background",
      "httptest.NewServer",
      "model.LabelName",
      "cfg.NewDiscovererMetrics",
      "require.NoError",
      "NewDiscovery",
      "d.Refresh",
      "http.HandlerFunc",
      "fmt.Fprintln",
      "model.LabelValue",
      "model.Duration",
      "prometheus.NewRegistry",
      "refreshMetrics.Unregister",
      "promslog.NewNopLogger",
      "require.Equal"
    ],
    "TestSpansFromBidirectionalCompareSpans": [
      "copy",
      "expandSpansBothWays",
      "require.Equal",
      "make",
      "len"
    ],
    "TestSparseHistogramSpaceSavings": [
      "float64",
      "?.String",
      "len",
      "chunkenc.NewPool",
      "ah.baseLabels.Get",
      "oldHead.MinTime",
      "oldHead.MaxTime",
      "oldHead.Appender",
      "?.Labels",
      "generateCustomHistograms",
      "sparseApp.Commit",
      "labels.NewBuilder",
      "t.Skip",
      "t.Cleanup",
      "labels.FromStrings",
      "sparseHead.Appender",
      "it.Next",
      "?.Set",
      "wg.Wait",
      "filepath.Join",
      "t.Run",
      "fmt.Sprintf",
      "fileutil.DirSize",
      "sparseApp.AppendHistogram",
      "NewLeveledCompactor",
      "compactor.Write",
      "make",
      "fmt.Printf",
      "append",
      "wg.Done",
      "require.NoError",
      "oldHead.Close",
      "sparseHead.Close",
      "sparseHead.MaxTime",
      "oldApp.Commit",
      "int64",
      "newTestHead",
      "it.At",
      "wg.Add",
      "require.Len",
      "h.CumulativeBucketIterator",
      "oldApp.Append",
      "context.Background",
      "sparseHead.MinTime"
    ],
    "TestSplitByRange": [
      "append",
      "require.Equal",
      "splitByRange",
      "make",
      "len"
    ],
    "TestStableHash": [
      "EmptyLabels",
      "FromStrings",
      "require.Equal",
      "StableHash"
    ],
    "TestStaleness": [
      "promslog.NewNopLogger",
      "labels.FromStrings",
      "querier.Close",
      "querier.Select",
      "time.Unix",
      "math.Float64frombits",
      "?.Add",
      "parser.ParseExpr",
      "st.Appender",
      "app.Append",
      "require.Equal",
      "promqltest.NewTestEngineWithOpts",
      "group.Eval",
      "?.String",
      "value.IsStaleNaN",
      "app.Commit",
      "st.Querier",
      "labels.NewMatcher",
      "readSeriesSet",
      "NewGroup",
      "st.Close",
      "require.NoError",
      "NewRecordingRule",
      "math.Float64bits",
      "teststorage.New",
      "EngineQueryFunc",
      "context.Background",
      "require.True"
    ],
    "TestStartupInterrupt": [
      "require.EqualError",
      "make",
      "http.Get",
      "require.Error",
      "prom.Process.Kill",
      "t.Parallel",
      "fmt.Sprintf",
      "prom.Wait",
      "require.NoError",
      "prom.Process.Signal",
      "time.After",
      "time.Sleep",
      "testing.Short",
      "t.Skip",
      "t.TempDir",
      "require.True",
      "testutil.RandomUnprivilegedPort",
      "exec.Command",
      "prom.Start"
    ],
    "TestStats": [
      "float64",
      "t.Run",
      "tc.expected",
      "testEngine",
      "require.NotNil",
      "http.NewRequest",
      "require.Greater",
      "require.NoError",
      "q.Encode",
      "qd.Stats.Builtin",
      "json.Marshal",
      "require.JSONEq",
      "string",
      "t.Cleanup",
      "storage.Close",
      "request",
      "assertAPIError",
      "u.String",
      "r.Header.Set",
      "api.query",
      "api.queryRange",
      "time.Unix",
      "u.Query",
      "context.Background",
      "req.WithContext",
      "teststorage.New",
      "require.IsType",
      "require.Nil",
      "url.Parse",
      "q.Add"
    ],
    "TestStepInvariantExpr": [
      "ParseExpr",
      "require.NoError",
      "require.Equal",
      "Prettify"
    ],
    "TestStmt.Pretty": [
      "t.String"
    ],
    "TestStop_DrainingDisabled": [
      "make",
      "int64",
      "time.Sleep",
      "m.Send",
      "m.Stop",
      "require.Equal",
      "require.NoError",
      "json.Unmarshal",
      "server.Close",
      "model.Duration",
      "m.Run",
      "labels.FromStrings",
      "time.After",
      "require.FailNow",
      "httptest.NewServer",
      "http.HandlerFunc",
      "alertsReceived.Add",
      "len",
      "close",
      "atomic.NewInt64",
      "io.ReadAll",
      "w.WriteHeader",
      "NewManager",
      "alertsReceived.Load"
    ],
    "TestStop_DrainingEnabled": [
      "len",
      "m.Run",
      "labels.FromStrings",
      "httptest.NewServer",
      "json.Unmarshal",
      "time.After",
      "require.FailNow",
      "m.Stop",
      "io.ReadAll",
      "http.HandlerFunc",
      "require.NoError",
      "model.Duration",
      "close",
      "alertsReceived.Load",
      "make",
      "alertsReceived.Add",
      "int64",
      "w.WriteHeader",
      "server.Close",
      "NewManager",
      "m.Send",
      "require.Equal",
      "atomic.NewInt64"
    ],
    "TestStorage.AppendExemplar": [
      "s.exemplarStorage.AddExemplar"
    ],
    "TestStorage.Close": [
      "s.DB.Close",
      "os.RemoveAll"
    ],
    "TestStorageHandlesOutOfOrderTimestamps": [
      "t.Run",
      "teststorage.New",
      "t.Cleanup",
      "s.Close",
      "runScrapeLoopTest"
    ],
    "TestStorageLifecycle": [
      "NewStorage",
      "baseRemoteWriteConfig",
      "baseRemoteReadConfig",
      "require.NoError",
      "s.ApplyConfig",
      "require.Len",
      "s.Close",
      "t.TempDir"
    ],
    "TestStorageOverflow": [
      "labels.FromStrings",
      "len",
      "float64",
      "append",
      "require.True",
      "es.Select",
      "require.Len",
      "NewCircularExemplarStorage",
      "require.NoError",
      "int64",
      "es.AddExemplar",
      "labels.NewMatcher",
      "reflect.DeepEqual"
    ],
    "TestStorage_DuplicateExemplarsIgnored": [
      "createTestAgentDB",
      "labels.EmptyLabels",
      "DefaultOptions",
      "s.Appender",
      "context.Background",
      "app.Append",
      "labels.FromStrings",
      "require.NoError",
      "wlog.NewSegmentsReader",
      "record.NewDecoder",
      "labels.NewSymbolTable",
      "r.Next",
      "r.Record",
      "dec.Type",
      "app.Commit",
      "sr.Close",
      "wlog.NewReader",
      "dec.Exemplars",
      "len",
      "require.Equal",
      "s.Close",
      "app.AppendExemplar",
      "s.wal.Dir"
    ],
    "TestStoreHTTPErrorHandling": [
      "require.EqualError",
      "errors.New",
      "http.Error",
      "require.NoError",
      "httptest.NewServer",
      "toHash",
      "server.Close",
      "context.Background",
      "test.err.Error",
      "http.HandlerFunc",
      "model.Duration",
      "NewWriteClient",
      "url.Parse",
      "c.Store"
    ],
    "TestStreamReadEndpoint": [
      "httptest.NewRecorder",
      "recorder.Result",
      "require.Empty",
      "errors.Is",
      "promqltest.LoadedStorage",
      "addNativeHistogramsToTestSuite",
      "require.NoError",
      "http.NewRequest",
      "?.Header.Get",
      "require.Len",
      "store.Close",
      "NewReadHandler",
      "labels.NewMatcher",
      "proto.Marshal",
      "labels.FromStrings",
      "snappy.Encode",
      "require.Equal",
      "NewChunkedReader",
      "append",
      "ToQuery",
      "bytes.NewBuffer",
      "api.ServeHTTP",
      "stream.NextProto"
    ],
    "TestStreamResponse": [
      "chunk.Size",
      "lb.Size",
      "require.NoError",
      "prompb.FromLabels",
      "labels.FromStrings",
      "make",
      "newMockChunkSeriesSet",
      "StreamChunkedReadResponses",
      "require.Nil",
      "require.Equal"
    ],
    "TestString": [
      "group2.String",
      "require.Equal",
      "group1.String"
    ],
    "TestStringMatcherFromRegexp": [
      "syntax.Parse",
      "require.NoError",
      "stringMatcherFromRegexp",
      "require.Equal",
      "orStringMatcher",
      "t.Run",
      "t.Parallel"
    ],
    "TestStringMatcherFromRegexp_LiteralPrefix": [
      "require.NotNil",
      "require.Truef",
      "matcher.Matches",
      "re.MatchString",
      "t.Run",
      "syntax.Parse",
      "require.NoError",
      "require.Equal",
      "require.Falsef",
      "stringMatcherFromRegexp",
      "regexp.MustCompile",
      "visitStringMatcher"
    ],
    "TestStringMatcherFromRegexp_LiteralSuffix": [
      "require.NotNil",
      "require.Truef",
      "re.MatchString",
      "matcher.Matches",
      "t.Run",
      "syntax.Parse",
      "require.NoError",
      "stringMatcherFromRegexp",
      "regexp.MustCompile",
      "visitStringMatcher",
      "require.Equal",
      "require.Falsef"
    ],
    "TestStringMatcherFromRegexp_Quest": [
      "visitStringMatcher",
      "matcher.Matches",
      "require.Falsef",
      "t.Run",
      "syntax.Parse",
      "require.NoError",
      "regexp.MustCompile",
      "re.MatchString",
      "stringMatcherFromRegexp",
      "require.NotNil",
      "require.Equal",
      "require.Truef"
    ],
    "TestStripeSeries_Get": [
      "stripeSeriesWithCollidingSeries",
      "ms1.lset.Hash",
      "s.GetByHash",
      "require.Same"
    ],
    "TestStripeSeries_gc": [
      "stripeSeriesWithCollidingSeries",
      "ms1.lset.Hash",
      "s.GC",
      "s.GetByHash",
      "require.Nil",
      "stripeSeriesWithCollidingSeries",
      "ms1.lset.Hash",
      "s.gc",
      "s.getByHash",
      "require.Nil"
    ],
    "TestStripeSeries_getOrSet": [
      "ms1.lset.Hash",
      "s.getByHash",
      "require.Same",
      "stripeSeriesWithCollidingSeries"
    ],
    "TestSubquerySelector": [
      "require.NoError",
      "t.Run",
      "t.Cleanup",
      "qry.Exec",
      "testutil.RequireEqual",
      "labels.FromStrings",
      "labels.EmptyLabels",
      "storage.Close",
      "engine.NewInstantQuery",
      "context.Background",
      "sort.Sort",
      "time.Unix",
      "promqltest.LoadedStorage",
      "require.Equal",
      "newTestEngine"
    ],
    "TestSubscriberReceivesNotifications": [
      "require.True",
      "require.Equal",
      "append",
      "notifs.DeleteNotification",
      "time.Sleep",
      "unsubscribe",
      "wg.Wait",
      "wg.Add",
      "make",
      "wg.Done",
      "require.Len",
      "NewNotifications",
      "notifs.Sub",
      "notifs.AddNotification"
    ],
    "TestSuite.Abort": [
      "ts.lastCase",
      "e.Error"
    ],
    "TestSuite.Case": [
      "append"
    ],
    "TestSuite.Fail": [
      "ts.lastCase",
      "append"
    ],
    "TestSuite.lastCase": [
      "len",
      "ts.Case"
    ],
    "TestSymbols": [
      "require.NoError",
      "require.Equal",
      "require.Error",
      "buf.PutUvarintStr",
      "buf.Len",
      "rune",
      "buf.PutBE32",
      "s.Size",
      "iter.At",
      "iter.Err",
      "string",
      "crc32.Checksum",
      "buf.Get",
      "NewSymbols",
      "realByteSlice",
      "uint32",
      "s.ReverseLookup",
      "iter.Next",
      "buf.PutBE32int",
      "s.Lookup",
      "s.Iter"
    ],
    "TestSymbolsTable": [
      "labels.FromStrings",
      "s.SymbolizeLabels",
      "labels.NewScratchBuilder",
      "s.Symbolize",
      "require.Equal",
      "s.Symbols",
      "uint32",
      "s.Reset",
      "len",
      "desymbolizeLabels",
      "NewSymbolTable"
    ],
    "TestTSDBDump": [
      "sortLines",
      "t.Cleanup",
      "t.TempDir",
      "t.Run",
      "normalizeNewLine",
      "string",
      "promqltest.LoadedStorage",
      "int64",
      "os.ReadFile",
      "require.NoError",
      "storage.Close",
      "getDumpedSamples",
      "storage.Dir",
      "require.Equal"
    ],
    "TestTSDBDumpCommand": [
      "promqltest.LoadedStorage",
      "storage.Close",
      "t.Run",
      "storage.Dir",
      "exec.Command",
      "testing.Short",
      "t.Skip",
      "t.TempDir",
      "require.NoError",
      "cmd.Run",
      "t.Parallel",
      "t.Cleanup"
    ],
    "TestTSDBDumpOpenMetrics": [
      "normalizeNewLine",
      "getDumpedSamples",
      "storage.Dir",
      "storage.Close",
      "t.TempDir",
      "os.ReadFile",
      "require.NoError",
      "sortLines",
      "string",
      "promqltest.LoadedStorage",
      "t.Cleanup",
      "t.Run",
      "require.Equal"
    ],
    "TestTSDBDumpOpenMetricsRoundTrip": [
      "os.ReadFile",
      "require.NoError",
      "normalizeNewLine",
      "tsdb.Open",
      "tsdb.DefaultOptions",
      "require.Equal",
      "string",
      "t.TempDir",
      "backfill",
      "t.Cleanup",
      "db.Close",
      "getDumpedSamples"
    ],
    "TestTSDBDumpOpenMetricsRoundTripPipe": [
      "normalizeNewLine",
      "os.OpenFile",
      "io.Copy",
      "require.Equal",
      "tsdb.Open",
      "db.Close",
      "require.NoError",
      "path.Join",
      "bytes.NewReader",
      "backfillOpenMetrics",
      "os.ReadFile",
      "t.Cleanup",
      "getDumpedSamples",
      "t.TempDir",
      "syscall.Mkfifo",
      "in.Close",
      "tsdb.DefaultOptions",
      "string"
    ],
    "TestTSDBStatus": [
      "t.Run",
      "strconv.Itoa",
      "http.NewRequest",
      "tc.values.Encode",
      "assertAPIError",
      "tc.endpoint",
      "fmt.Sprintf",
      "require.NoError",
      "endpoint"
    ],
    "TestTagValueMarshaling": [
      "require.Equal",
      "json.Marshal",
      "require.NoError"
    ],
    "TestTagValueUnMarshaling": [
      "json.Unmarshal",
      "require.NoError",
      "require.Equal"
    ],
    "TestTagsFromMetric": [
      "TagValue",
      "tagsFromMetric",
      "require.Equal"
    ],
    "TestTailSamples": [
      "fmt.Sprintf",
      "require.NoError",
      "watcher.SetStartTime",
      "watcher.SetMetrics",
      "NewLiveReader",
      "time.Now",
      "t.TempDir",
      "NewSize",
      "now.UnixNano",
      "SegmentName",
      "w.Close",
      "labels.FromStrings",
      "enc.CustomBucketsHistogramSamples",
      "w.Dir",
      "require.Equal",
      "compression.Types",
      "t.Run",
      "float64",
      "rand.Intn",
      "enc.HistogramSamples",
      "hist.ToFloat",
      "NewLiveReaderMetrics",
      "segment.Close",
      "wt.checkNumSeries",
      "chunks.HeadSeriesRef",
      "enc.Exemplars",
      "int64",
      "NewWatcher",
      "OpenReadSegment",
      "newWriteToMock",
      "watcher.readSegment",
      "os.Mkdir",
      "enc.Samples",
      "enc.FloatHistogramSamples",
      "enc.CustomBucketsFloatHistogramSamples",
      "customBucketHist.ToFloat",
      "path.Join",
      "enc.Series",
      "w.Log",
      "Segments",
      "retry"
    ],
    "TestTargetDisappearsAfterProviderRemoved": [
      "writeIntoFile",
      "runManagers",
      "requireTargets",
      "cancel",
      "fmt.Sprintf",
      "scrapeManager.Stop",
      "applyConfig",
      "sDFile.Name",
      "context.WithCancel",
      "context.Background"
    ],
    "TestTargetGroupJSONMarshal": [
      "test.group.MarshalJSON",
      "require.Equal",
      "require.JSONEq",
      "string"
    ],
    "TestTargetGroupStrictJSONUnmarshal": [
      "errors.New",
      "tg.UnmarshalJSON",
      "require.Equal"
    ],
    "TestTargetGroupYamlMarshal": [
      "marshal",
      "yaml.Marshal",
      "panic",
      "test.group.MarshalYAML",
      "require.Equal",
      "string"
    ],
    "TestTargetGroupYamlUnmarshal": [
      "tg.UnmarshalYAML",
      "unmarshal",
      "require.Equal",
      "yaml.Unmarshal"
    ],
    "TestTargetLabelLegacyValidity": [
      "require.Equal",
      "relabelTargetLegacy.Match"
    ],
    "TestTargetLabels": [
      "target.Labels",
      "require.Equal",
      "target.LabelsRange",
      "newTestTarget",
      "labels.FromStrings",
      "labels.NewBuilder",
      "labels.EmptyLabels"
    ],
    "TestTargetOffset": [
      "target.offset",
      "time.Duration",
      "require.LessOrEqual",
      "uint64",
      "newTestTarget",
      "strconv.Itoa",
      "require.InDelta",
      "float64",
      "t.Log",
      "len",
      "make",
      "labels.FromStrings"
    ],
    "TestTargetScrapeConfigWithLabels": [
      "?.Get",
      "?.Set",
      "w.Write",
      "t.Cleanup",
      "http.HandlerFunc",
      "require.Equal",
      "r.Header.Get",
      "createTestServer",
      "newTestScrapeMetrics",
      "model.Duration",
      "httptest.NewServer",
      "close",
      "make",
      "time.After",
      "r.URL.Query",
      "require.NoError",
      "model.LabelValue",
      "sp.Sync",
      "t.Run",
      "run",
      "t.Fatal",
      "w.Header",
      "url.Parse",
      "newScrapePool"
    ],
    "TestTargetScrapeIntervalAndTimeoutRelabel": [
      "model.ParseDuration",
      "relabel.MustNewRegexp",
      "newScrapePool",
      "newTestScrapeMetrics",
      "sp.Sync",
      "sp.stop",
      "require.Equal",
      "?.labels.Get",
      "sp.ActiveTargets"
    ],
    "TestTargetScrapeScrapeCancel": [
      "server.Close",
      "close",
      "url.Parse",
      "context.WithCancel",
      "context.Background",
      "cancel",
      "errors.Is",
      "time.After",
      "httptest.NewServer",
      "panic",
      "labels.FromStrings",
      "ts.scrape",
      "errors.New",
      "require.NoError",
      "make",
      "http.HandlerFunc",
      "acceptHeader",
      "time.Sleep",
      "ctx.Err",
      "fmt.Errorf",
      "require.FailNow"
    ],
    "TestTargetScrapeScrapeNotFound": [
      "url.Parse",
      "require.NoError",
      "ts.readResponse",
      "httptest.NewServer",
      "http.HandlerFunc",
      "w.WriteHeader",
      "acceptHeader",
      "ts.scrape",
      "context.Background",
      "require.ErrorContains",
      "server.Close",
      "panic",
      "labels.FromStrings"
    ],
    "TestTargetScraperBodySizeLimit": [
      "http.HandlerFunc",
      "gzip.NewWriter",
      "gw.Close",
      "gw.Write",
      "require.ErrorIs",
      "httptest.NewServer",
      "w.Header",
      "acceptHeader",
      "require.Equal",
      "?.Set",
      "server.Close",
      "panic",
      "newTestScrapeMetrics",
      "ts.scrape",
      "context.Background",
      "ts.readResponse",
      "buf.Len",
      "buf.Reset",
      "require.Len",
      "w.Write",
      "url.Parse",
      "labels.FromStrings",
      "require.NoError"
    ],
    "TestTargetScraperScrapeOK": [
      "require.GreaterOrEqual",
      "require.Equal",
      "httptest.NewServer",
      "require.Containsf",
      "require.NoError",
      "context.Background",
      "t.Run",
      "require.NotContainsf",
      "float64",
      "fmt.Sprintf",
      "?.Set",
      "labels.FromStrings",
      "ts.readResponse",
      "acceptHeader",
      "require.Len",
      "strconv.ParseFloat",
      "len",
      "require.LessOrEqual",
      "r.Header.Get",
      "strings.HasPrefix",
      "qValuePattern.FindStringSubmatch",
      "strings.Split",
      "url.Parse",
      "runTest",
      "buf.String",
      "regexp.MustCompile",
      "http.HandlerFunc",
      "w.Header",
      "panic",
      "ts.scrape",
      "require.True",
      "w.Write",
      "server.Close"
    ],
    "TestTargetSetRecreatesEmptyStaticConfigs": [
      "context.Background",
      "NewManager",
      "promslog.NewNopLogger",
      "staticConfig",
      "discoveryManager.ApplyConfig",
      "pk",
      "discoveryManager.Run",
      "require.Empty",
      "context.WithCancel",
      "cancel",
      "prometheus.NewRegistry",
      "NewTestMetrics",
      "verifyPresence",
      "verifySyncedPresence",
      "require.True",
      "require.NotNil",
      "discoveryManager.SyncCh",
      "require.Len"
    ],
    "TestTargetSetRecreatesTargetGroupsOnConfigChange": [
      "context.Background",
      "discoveryManager.ApplyConfig",
      "discoveryManager.SyncCh",
      "context.WithCancel",
      "cancel",
      "prometheus.NewRegistry",
      "verifyPresence",
      "require.NotNil",
      "discoveryManager.Run",
      "staticConfig",
      "verifySyncedPresence",
      "NewTestMetrics",
      "NewManager",
      "promslog.NewNopLogger",
      "pk",
      "require.Len"
    ],
    "TestTargetSetTargetGroupsPresentOnConfigChange": [
      "require.Empty",
      "verifyPresence",
      "prometheus.NewRegistry",
      "NewTestMetrics",
      "staticConfig",
      "require.Len",
      "verifySyncedPresence",
      "mu.Lock",
      "mu.Unlock",
      "context.WithCancel",
      "require.NotNil",
      "discoveryManager.ApplyConfig",
      "discoveryManager.SyncCh",
      "pk",
      "delete",
      "context.Background",
      "cancel",
      "NewManager",
      "promslog.NewNopLogger",
      "discoveryManager.Run"
    ],
    "TestTargetSetTargetGroupsPresentOnConfigDuplicateAndDeleteOriginal": [
      "NewManager",
      "discoveryManager.SyncCh",
      "delete",
      "cancel",
      "NewTestMetrics",
      "staticConfig",
      "verifyPresence",
      "discoveryManager.ApplyConfig",
      "pk",
      "context.WithCancel",
      "prometheus.NewRegistry",
      "promslog.NewNopLogger",
      "require.NotNil",
      "context.Background",
      "discoveryManager.Run",
      "require.Len",
      "verifySyncedPresence"
    ],
    "TestTargetSetTargetGroupsPresentOnConfigReload": [
      "verifyPresence",
      "require.NotNil",
      "discoveryManager.ApplyConfig",
      "verifySyncedPresence",
      "discoveryManager.SyncCh",
      "require.Len",
      "prometheus.NewRegistry",
      "NewManager",
      "staticConfig",
      "discoveryManager.Run",
      "context.WithCancel",
      "cancel",
      "NewTestMetrics",
      "context.Background",
      "promslog.NewNopLogger",
      "pk"
    ],
    "TestTargetSetTargetGroupsPresentOnConfigRename": [
      "require.NotNil",
      "cancel",
      "context.Background",
      "promslog.NewNopLogger",
      "discoveryManager.Run",
      "staticConfig",
      "discoveryManager.SyncCh",
      "pk",
      "delete",
      "context.WithCancel",
      "NewTestMetrics",
      "NewManager",
      "discoveryManager.ApplyConfig",
      "require.Len",
      "verifySyncedPresence",
      "prometheus.NewRegistry",
      "verifyPresence"
    ],
    "TestTargetSetTargetGroupsUpdateDuringApplyConfig": [
      "discoveryManager.ApplyConfig",
      "td.update",
      "model.LabelValue",
      "close",
      "cancel",
      "require.NotNil",
      "discoveryManager.Run",
      "newTestDiscoverer",
      "prometheus.NewRegistry",
      "NewManager",
      "fmt.Sprintf",
      "make",
      "context.WithCancel",
      "context.Background",
      "NewTestMetrics",
      "promslog.NewNopLogger",
      "wg.Add",
      "wg.Done",
      "wg.Wait"
    ],
    "TestTargetURL": [
      "expectedParams.Encode",
      "require.Equal",
      "target.URL",
      "labels.FromMap",
      "NewTarget"
    ],
    "TestTargetUpdatesOrder": [
      "?.Run",
      "NewTestMetrics",
      "len",
      "t.Fatalf",
      "discoveryManager.updateGroup",
      "discoveryManager.allGroups",
      "t.Run",
      "context.WithTimeout",
      "context.Background",
      "assertEqualGroups",
      "prometheus.NewRegistry",
      "promslog.NewNopLogger",
      "make",
      "newMockDiscoveryProvider",
      "ctx.Done",
      "strconv.Itoa",
      "cancel",
      "NewManager",
      "require.NotNil"
    ],
    "TestTargetsFromGroup": [
      "model.Duration",
      "labels.NewBuilder",
      "labels.EmptyLabels",
      "TargetsFromGroup",
      "require.Len",
      "require.EqualError"
    ],
    "TestTargetsFromGroupWithLabelKeepDrop": [
      "labels.NewBuilder",
      "labels.EmptyLabels",
      "TargetsFromGroup",
      "require.Len",
      "require.EqualError",
      "require.Empty",
      "t.Run",
      "loadConfiguration"
    ],
    "TestTemplateExpansion": [
      "?.String",
      "labels.FromStrings",
      "make",
      "math.Inf",
      "math.NaN",
      "testTemplateExpansion"
    ],
    "TestTemplateExpansionAMD64": [
      "uint",
      "testTemplateExpansion"
    ],
    "TestTemplateParsing": [
      "Parse",
      "require.NotNil",
      "len",
      "require.True"
    ],
    "TestTemporality": [
      "createOtelEmptyType",
      "rm.ScopeMetrics",
      "c.FromMetrics",
      "createOtelSum",
      "createPromFloatSeries",
      "context.Background",
      "c.TimeSeries",
      "testutil.RequireEqual",
      "createPromSummarySeries",
      "t.Run",
      "pmetric.NewMetrics",
      "require.EqualError",
      "sortTimeSeries",
      "time.Unix",
      "append",
      "NewPrometheusConverter",
      "require.NoError",
      "createPromNativeHistogramSeries",
      "createOtelSummary",
      "sm.Metrics",
      "metrics.ResourceMetrics",
      "createOtelExponentialHistogram",
      "createPromNHCBSeries",
      "?.AppendEmpty",
      "s.CopyTo",
      "createOtelExplicitHistogram",
      "createPromClassicHistogramSeries",
      "createOtelGauge"
    ],
    "TestTimeMetrics": [
      "labels.FromStrings",
      "app.Commit",
      "prometheus.NewRegistry",
      "openDBWithMetrics",
      "promslog.NewNopLogger",
      "t.TempDir",
      "float64",
      "db.Appender",
      "require.NoError",
      "db.Close",
      "app.Append",
      "require.Equal",
      "getCurrentGaugeValuesFor",
      "context.Background"
    ],
    "TestTimeRetention": [
      "db.Dir",
      "require.NoError",
      "db.Close",
      "createBlock",
      "db.Blocks",
      "len",
      "openTestDB",
      "db.reloadBlocks",
      "prom_testutil.ToFloat64",
      "t.Run",
      "genSeries",
      "require.Len",
      "require.Equal",
      "int"
    ],
    "TestTimerGroup": [
      "NewTimerGroup",
      "require.Equal",
      "?.String",
      "tg.GetTimer",
      "tg.String"
    ],
    "TestTimerGroupNewTimer": [
      "timer.ElapsedTime",
      "require.GreaterOrEqual",
      "NewTimerGroup",
      "require.Equal",
      "timer.Stop",
      "require.Greater",
      "tg.GetTimer",
      "timer.Duration",
      "timer.Start",
      "time.Sleep"
    ],
    "TestToHistogram_Empty": [
      "?.ToIntHistogram",
      "?.ToFloatHistogram",
      "t.Run",
      "require.NotNil"
    ],
    "TestToLabels": [
      "labels.FromStrings",
      "t.Run",
      "labels.NewScratchBuilder",
      "require.Equal",
      "ts.ToLabels",
      "prompb.FromLabels"
    ],
    "TestToMetadata": [
      "ts.ToMetadata",
      "sym.Symbols",
      "writev2.NewSymbolTable",
      "sym.Symbolize",
      "t.Run",
      "require.Equal"
    ],
    "TestToNormalisedLower": [
      "require.Equal",
      "toNormalisedLower"
    ],
    "TestTokenProvider": [
      "suite.Run",
      "new"
    ],
    "TestTombstoneClean": [
      "openTestDB",
      "db.Appender",
      "t.TempDir",
      "db.Close",
      "require.False",
      "res.Next",
      "rand.Float64",
      "require.NoError",
      "append",
      "res.Warnings",
      "db.Blocks",
      "db.Delete",
      "len",
      "sres.Labels",
      "sexp.Iterator",
      "require.Empty",
      "int64",
      "app.Commit",
      "db.Snapshot",
      "labels.MustNewMatcher",
      "q.Select",
      "storage.ExpandSamples",
      "tombstones.NewMemTombstones",
      "sres.Iterator",
      "db.Querier",
      "q.Close",
      "newMockSeriesSet",
      "expss.Next",
      "expss.At",
      "res.At",
      "Open",
      "storage.NewListSeries",
      "sexp.Labels",
      "context.Background",
      "make",
      "app.Append",
      "labels.FromStrings",
      "db.CleanTombstones",
      "require.Equal"
    ],
    "TestTombstoneCleanFail": [
      "db.Close",
      "db.CleanTombstones",
      "len",
      "intersection",
      "openTestDB",
      "int64",
      "tombstones.NewMemTombstones",
      "tomb.AddInterval",
      "append",
      "db.Dir",
      "genSeries",
      "createBlock",
      "OpenBlock",
      "require.Error",
      "blockDirs",
      "require.Len",
      "require.NoError"
    ],
    "TestTombstoneCleanResultEmptyBlock": [
      "db.Delete",
      "labels.MustNewMatcher",
      "context.Background",
      "app.Append",
      "Open",
      "app.Commit",
      "t.TempDir",
      "db.Close",
      "db.CleanTombstones",
      "blockDirs",
      "openTestDB",
      "labels.FromStrings",
      "require.NoError",
      "int64",
      "make",
      "db.Snapshot",
      "db.Appender",
      "rand.Float64",
      "require.Empty"
    ],
    "TestTombstonesGetWithCopy": [
      "require.NoError",
      "require.Equal",
      "intervals0.Add",
      "NewMemTombstones",
      "stones.AddInterval",
      "stones.Get"
    ],
    "TestTracerProviderShutdown": [
      "NewManager",
      "promslog.NewNopLogger",
      "require.NoError",
      "m.ApplyConfig",
      "m.Stop",
      "require.False"
    ],
    "TestTranslatorMetricFromOtelMetric": [
      "createOTelSummaryForTranslator",
      "createOTelExponentialHistogramForTranslator",
      "createOTelEmptyMetricForTranslator",
      "t.Run",
      "TranslatorMetricFromOtelMetric",
      "require.Equal",
      "createOTelGaugeForTranslator",
      "createOTelSumForTranslator",
      "createOTelHistogramForTranslator"
    ],
    "TestTritonSDNew": [
      "require.NoError",
      "require.NotNil",
      "require.NotZero",
      "require.Equal",
      "m.Unregister",
      "newTritonDiscovery"
    ],
    "TestTritonSDNewBadConfig": [
      "newTritonDiscovery",
      "require.Error",
      "require.Nil"
    ],
    "TestTritonSDNewCNConfig": [
      "newTritonDiscovery",
      "require.NoError",
      "require.NotNil",
      "require.NotZero",
      "require.Equal",
      "m.Unregister"
    ],
    "TestTritonSDNewGroupsConfig": [
      "newTritonDiscovery",
      "require.NoError",
      "require.NotNil",
      "require.NotZero",
      "require.Equal",
      "m.Unregister"
    ],
    "TestTritonSDRefreshCNsUUIDOnly": [
      "testTritonSDRefresh",
      "require.NotNil",
      "require.Len"
    ],
    "TestTritonSDRefreshCNsWithHostname": [
      "testTritonSDRefresh",
      "require.NotNil",
      "require.Len"
    ],
    "TestTritonSDRefreshCancelled": [
      "require.ErrorContains",
      "context.Canceled.Error",
      "m.Unregister",
      "newTritonDiscovery",
      "context.WithCancel",
      "context.Background",
      "cancel",
      "td.refresh"
    ],
    "TestTritonSDRefreshMultipleTargets": [
      "testTritonSDRefresh",
      "require.NotNil",
      "require.Len"
    ],
    "TestTritonSDRefreshNoServer": [
      "context.Background",
      "require.ErrorContains",
      "m.Unregister",
      "newTritonDiscovery",
      "td.refresh"
    ],
    "TestTritonSDRefreshNoTargets": [
      "testTritonSDRefresh",
      "require.Nil"
    ],
    "TestTruncateBefore": [
      "NewMemTombstones",
      "stones.AddInterval",
      "stones.TruncateBefore",
      "stones.Get",
      "require.NoError",
      "require.Equal",
      "storage.SeriesRef"
    ],
    "TestTypeUnitReLabel": [
      "time.Now",
      "q.Select",
      "newScrapableServer",
      "newScrapePool",
      "cancel",
      "sp.ActiveTargets",
      "url.Parse",
      "sp.Sync",
      "model.LabelValue",
      "sp.stop",
      "require.Len",
      "q.Close",
      "?.Get",
      "teststorage.New",
      "simpleStorage.Close",
      "require.NoError",
      "series.At",
      "relabel.MustNewRegexp",
      "context.WithCancel",
      "?.UnixNano",
      "ts.Close",
      "newTestScrapeMetrics",
      "time.After",
      "simpleStorage.Querier",
      "series.Next",
      "model.Duration",
      "context.Background",
      "labels.MustNewMatcher",
      "t.Fatalf",
      "require.Equal",
      "s.Labels"
    ],
    "TestUTF8PromParse": [
      "testParse",
      "requireEntries",
      "labels.FromStrings",
      "NewPromParser",
      "labels.NewSymbolTable"
    ],
    "TestUnaryPretty": [
      "t.Run",
      "ParseExpr",
      "require.NoError",
      "require.Equal",
      "Prettify"
    ],
    "TestUncommittedSamplesNotLostOnTruncate": [
      "app.Append",
      "h.series.getByHash",
      "lset.Hash",
      "context.Background",
      "labels.MustNewMatcher",
      "require.Empty",
      "labels.FromStrings",
      "require.NotNil",
      "NewBlockQuerier",
      "q.Select",
      "ss.Warnings",
      "q.Close",
      "require.True",
      "newTestHead",
      "require.NoError",
      "h.Close",
      "h.initTime",
      "h.appender",
      "h.Truncate",
      "app.Commit",
      "ss.Next",
      "ss.Err"
    ],
    "TestUninstallingTracerProvider": [
      "m.ApplyConfig",
      "require.NotEqual",
      "noop.NewTracerProvider",
      "otel.GetTracerProvider",
      "require.Equal",
      "NewManager",
      "promslog.NewNopLogger",
      "require.NoError"
    ],
    "TestUniqueErrorNodes": [
      "Parse",
      "require.Len",
      "require.ErrorAs",
      "require.NotEqual"
    ],
    "TestUnmarshalConfig": [
      "require.EqualError",
      "require.Empty",
      "require.Equal",
      "yaml.Unmarshal",
      "t.Run",
      "config.UnmarshalYAML",
      "unmarshal"
    ],
    "TestUnquote": [
      "Unquote",
      "require.Equal",
      "require.NoError",
      "require.Empty",
      "require.EqualError",
      "ErrSyntax.Error"
    ],
    "TestUnregisterMetrics": [
      "context.WithCancel",
      "NewTestMetrics",
      "NewManager",
      "promslog.NewNopLogger",
      "require.NotNil",
      "discoveryManager.UnregisterMetrics",
      "cancel",
      "prometheus.NewRegistry",
      "context.Background",
      "sdMetric.Unregister",
      "refreshMetrics.Unregister",
      "require.NoError",
      "manager.UnregisterMetrics",
      "prometheus.NewRegistry",
      "NewManager",
      "require.NotNil",
      "require.NoError",
      "wl.Close",
      "prometheus.NewRegistry",
      "New",
      "promslog.NewNopLogger",
      "t.TempDir"
    ],
    "TestUnsubscribe": [
      "notifs.Sub",
      "require.True",
      "wg.Wait",
      "require.Equal",
      "NewNotifications",
      "make",
      "wg.Done",
      "append",
      "notifs.AddNotification",
      "time.Sleep",
      "unsubscribe",
      "require.Len",
      "wg.Add"
    ],
    "TestUnsupportedFunctions": [
      "createTestAgentDB",
      "DefaultOptions",
      "s.Close",
      "s.Querier",
      "t.Run",
      "require.Equal",
      "s.ChunkQuerier",
      "s.ExemplarQuerier",
      "context.TODO"
    ],
    "TestUpdate": [
      "teststorage.New",
      "st.Close",
      "promslog.NewNopLogger",
      "ruleManager.Stop",
      "tmpFile.Close",
      "labels.FromStrings",
      "promqltest.NewTestEngineWithOpts",
      "EngineQueryFunc",
      "require.NoError",
      "os.CreateTemp",
      "tmpFile.Name",
      "model.Duration",
      "reloadAndValidate",
      "NewManager",
      "context.Background",
      "ruleManager.start",
      "ruleManager.Update",
      "require.NotEmpty",
      "require.Empty",
      "fmt.Sprintf",
      "labels.EmptyLabels",
      "require.Equal",
      "rulefmt.ParseFile",
      "os.Remove"
    ],
    "TestUpdateFileWithPartialWrites": [
      "runner.writeString",
      "t.Skip",
      "t.Parallel",
      "runner.run",
      "validTg",
      "runner.lastReceive",
      "?.After",
      "runner.targets",
      "newTestRunner",
      "runner.stop",
      "runner.requireUpdate",
      "runner.requireTargetGroups",
      "model.LabelValue",
      "fileSource",
      "runner.copyFile",
      "time.Sleep",
      "runner.appendString"
    ],
    "TestUpdateRemoteReadConfigs": [
      "NewStorage",
      "require.NoError",
      "s.ApplyConfig",
      "require.Empty",
      "baseRemoteReadConfig",
      "require.Len",
      "s.Close",
      "t.TempDir"
    ],
    "TestUpdateWhenStopped": [
      "ruleManager.Update",
      "require.NoError",
      "require.NotEmpty",
      "NewManager",
      "context.Background",
      "promslog.NewNopLogger",
      "ruleManager.start",
      "labels.EmptyLabels",
      "ruleManager.Stop"
    ],
    "TestUyuniSDHandleError": [
      "io.WriteString",
      "testUpdateServices",
      "require.EqualError",
      "require.Empty",
      "w.WriteHeader",
      "?.Set",
      "w.Header"
    ],
    "TestUyuniSDLogin": [
      "w.WriteHeader",
      "io.WriteString",
      "testUpdateServices",
      "require.EqualError",
      "require.Empty",
      "?.Set",
      "w.Header"
    ],
    "TestUyuniSDSkipLogin": [
      "require.EqualError",
      "require.Empty",
      "w.Header",
      "conf.NewDiscovererMetrics",
      "t.Error",
      "?.Add",
      "context.Background",
      "w.WriteHeader",
      "?.Set",
      "io.WriteString",
      "require.NoError",
      "httptest.NewServer",
      "prometheus.NewRegistry",
      "refreshMetrics.Unregister",
      "metrics.Unregister",
      "NewDiscovery",
      "time.Now",
      "md.refresh",
      "http.HandlerFunc",
      "ts.Close",
      "discovery.NewRefreshMetrics",
      "metrics.Register"
    ],
    "TestVMToLabelSet": [
      "cache.New",
      "lru.WithCapacity",
      "d.vmToLabelSet",
      "require.NoError",
      "armcompute.VirtualMachineSizeTypes",
      "to.Ptr",
      "mapFromVM",
      "require.Equal",
      "promslog.NewNopLogger",
      "createMockAzureClient",
      "context.Background",
      "require.Len"
    ],
    "TestValidateExemplar": [
      "strings.Repeat",
      "NewCircularExemplarStorage",
      "require.NoError",
      "labels.FromStrings",
      "es.ValidateExemplar",
      "es.AddExemplar",
      "require.Equal"
    ],
    "TestValidateLabelsAndMetricName": [
      "string",
      "t.Run",
      "validateLabelsAndMetricName",
      "require.EqualError",
      "require.NoError"
    ],
    "TestVarbitInt": [
      "require.Equal",
      "putVarbitInt",
      "newBReader",
      "bs.bytes",
      "readVarbitInt",
      "require.NoError"
    ],
    "TestVarbitUint": [
      "putVarbitUint",
      "newBReader",
      "bs.bytes",
      "readVarbitUint",
      "require.NoError",
      "require.Equal"
    ],
    "TestVarint": [
      "len",
      "require.Equal",
      "decodeVarint",
      "string",
      "require.Panics",
      "encodeVarint"
    ],
    "TestVectorSelector_String": [
      "t.Run",
      "require.Equal",
      "tc.vs.String",
      "labels.MustNewMatcher"
    ],
    "TestVector_ContainsSameLabelset": [
      "labels.FromStrings",
      "t.Run",
      "require.Equal",
      "tc.vector.ContainsSameLabelset"
    ],
    "TestVultrSDRefresh": [
      "require.NoError",
      "NewDiscovery",
      "url.Parse",
      "require.NotNil",
      "model.LabelValue",
      "require.Equal",
      "sdMock.SetupTest",
      "discovery.NewRefreshMetrics",
      "refreshMetrics.Unregister",
      "require.Len",
      "prometheus.NewRegistry",
      "metrics.Unregister",
      "promslog.NewNopLogger",
      "sdMock.Mock.Endpoint",
      "context.Background",
      "d.refresh",
      "t.Run",
      "metrics.Register",
      "cfg.NewDiscovererMetrics",
      "fmt.Sprintf",
      "t.Cleanup"
    ],
    "TestWALFlushedOnDBClose": [
      "require.Equal",
      "labels.FromStrings",
      "db.Appender",
      "require.Empty",
      "db.Close",
      "db.Querier",
      "require.NoError",
      "app.Commit",
      "openTestDB",
      "context.Background",
      "app.Append",
      "db.Dir",
      "Open",
      "q.LabelValues"
    ],
    "TestWALMetadataDelivery": [
      "baseRemoteWriteConfig",
      "createTimeseries",
      "createSeriesMetadata",
      "s.ApplyConfig",
      "toHash",
      "qm.StoreSeries",
      "s.Close",
      "qm.SetClient",
      "NewTestWriteClient",
      "NewStorage",
      "model.Duration",
      "require.NoError",
      "qm.StoreMetadata",
      "require.Len",
      "c.waitForExpectedData",
      "t.TempDir"
    ],
    "TestWALRepair_ReadingError": [
      "require.Equal",
      "r.Record",
      "t.Run",
      "t.TempDir",
      "sr.Close",
      "NewSegmentBufReader",
      "NewSegmentsReader",
      "OpenReadSegment",
      "bytes.Equal",
      "f.Seek",
      "SegmentName",
      "require.True",
      "fi.Size",
      "NewSize",
      "require.Len",
      "byte",
      "make",
      "append",
      "w.Dir",
      "r.Err",
      "w.Repair",
      "require.NoError",
      "f.Write",
      "r.Next",
      "int64",
      "os.OpenFile",
      "test.corrFunc",
      "NewReader",
      "os.Stat",
      "w.Close",
      "f.Close",
      "s.Close",
      "w.Log",
      "Segments"
    ],
    "TestWALReplay": [
      "prometheus.NewRegistry",
      "gatherFamily",
      "tsdbutil.GenerateTestCustomBucketsHistograms",
      "tsdbutil.GenerateTestHistograms",
      "tsdbutil.GenerateTestFloatHistograms",
      "s.Close",
      "Open",
      "int64",
      "context.TODO",
      "s.wal.Dir",
      "float64",
      "createTestAgentDB",
      "app.Append",
      "tsdbutil.GenerateTestCustomBucketsFloatHistograms",
      "labelsForTest",
      "s.Appender",
      "app.Commit",
      "filepath.Dir",
      "?.Gauge.GetValue",
      "DefaultOptions",
      "app.AppendHistogram",
      "t.Fatalf",
      "t.Name",
      "require.NoError",
      "len",
      "labels.New",
      "require.Equal",
      "replayStorage.Close"
    ],
    "TestWALReplayRaceOnSamplesLoggedBeforeSeries": [
      "t.Run",
      "fmt.Sprintf",
      "testWALReplayRaceOnSamplesLoggedBeforeSeries"
    ],
    "TestWALSampleAndExemplarOrder": [
      "labels.FromStrings",
      "app.Append",
      "tsdbutil.GenerateTestFloatHistogram",
      "t.Run",
      "context.Background",
      "app.AppendHistogram",
      "tsdbutil.GenerateTestHistogram",
      "h.Close",
      "app.AppendExemplar",
      "readTestWAL",
      "w.Dir",
      "require.NoError",
      "h.Appender",
      "app.Commit",
      "require.True",
      "require.Equal",
      "reflect.TypeOf",
      "newTestHead",
      "tc.appendF",
      "require.Len"
    ],
    "TestWALSegmentSizeBounds": [
      "testing.Short",
      "t.Run",
      "exec.Command",
      "require.NoError",
      "prom.Start",
      "time.After",
      "require.Error",
      "t.Skip",
      "t.Parallel",
      "filepath.Join",
      "t.TempDir",
      "wg.Add",
      "io.ReadAll",
      "t.Fatalf",
      "prom.Process.Kill",
      "require.ErrorAs",
      "require.Equal",
      "prom.StderrPipe",
      "wg.Wait",
      "wg.Done",
      "t.Log",
      "string",
      "make",
      "prom.Wait",
      "exitError.Sys",
      "status.ExitStatus"
    ],
    "TestWALSegmentSizeOptions": [
      "int64",
      "require.Greater",
      "mmappedChunksDir",
      "openTestDB",
      "labels.FromStrings",
      "strconv.Itoa",
      "labels.EmptyLabels",
      "f.IsDir",
      "f.Info",
      "db.Close",
      "app.Append",
      "app.Commit",
      "os.ReadDir",
      "require.NoError",
      "rand.Float64",
      "lastFile.Name",
      "require.NotEmpty",
      "fmt.Sprintf",
      "testFunc",
      "len",
      "DefaultOptions",
      "f.Name",
      "int",
      "require.Equal",
      "f.Size",
      "os.Stat",
      "t.Run",
      "db.Appender",
      "context.Background",
      "filepath.Join",
      "append",
      "db.Dir",
      "lastFile.Size",
      "require.Error"
    ],
    "TestWBLAndMmapReplay": [
      "t.Run",
      "testWBLAndMmapReplay"
    ],
    "TestWBLCorruption": [
      "series1.String",
      "prom_testutil.ToFloat64",
      "t.TempDir",
      "db.Close",
      "context.Background",
      "float64",
      "db.head.wbl.Dir",
      "byte",
      "int64",
      "?.T",
      "DefaultOptions",
      "Open",
      "require.NoError",
      "require.Len",
      "?.Name",
      "db.head.wbl.Log",
      "db.Querier",
      "require.Equal",
      "f2.Size",
      "verifySamples",
      "os.RemoveAll",
      "require.Less",
      "labels.FromStrings",
      "db.head.wbl.Sync",
      "os.ReadDir",
      "sort.Slice",
      "len",
      "os.ReadFile",
      "app.Append",
      "app.Commit",
      "f1.Size",
      "require.Greater",
      "f0.Size",
      "mmappedChunksDir",
      "labels.MustNewMatcher",
      "int",
      "time.Minute.Milliseconds",
      "t.Cleanup",
      "db.Appender",
      "addSamples",
      "db.head.wbl.NextSegment",
      "?.Info",
      "db.DisableCompactions",
      "append",
      "path.Join",
      "query"
    ],
    "TestWBLReplay": [
      "t.Run",
      "testWBLReplay"
    ],
    "TestWaitForPendingReadersInTimeRange": [
      "newTestDB",
      "db.DisableCompactions",
      "context.Background",
      "sampleTs",
      "require.NoError",
      "t.Run",
      "waitOver.Store",
      "require.True",
      "db.ChunkQuerier",
      "db.Appender",
      "db.head.WaitForPendingReadersInTimeRange",
      "db.Querier",
      "checkWaiting",
      "labels.FromStrings",
      "fmt.Sprintf",
      "require.Equal",
      "waitOver.Load",
      "cl.Close",
      "storage.SeriesRef",
      "int64",
      "app.Append",
      "float64",
      "app.Commit",
      "time.After"
    ],
    "TestWalRepair_DecodingError": [
      "sr.Close",
      "wlog.NewSegmentsReader",
      "filepath.Join",
      "DefaultHeadOptions",
      "db.Close",
      "wlog.NewReader",
      "t.TempDir",
      "test.corrFunc",
      "w.Dir",
      "DefaultOptions",
      "w.Log",
      "r.Next",
      "t.Run",
      "require.Equal",
      "h.Close",
      "Open",
      "r.Err",
      "enc.Tombstones",
      "NewHead",
      "prom_testutil.ToFloat64",
      "h.Init",
      "require.ErrorAs",
      "require.NoError",
      "labels.FromStrings",
      "enc.Samples",
      "fmt.Sprintf",
      "wlog.New",
      "enc.Series"
    ],
    "TestWatchScrapeManager_NotReady": [
      "require.Equal",
      "newMetadataWriteToMock",
      "NewMetadataWatcher",
      "require.False",
      "mw.ready",
      "mw.collect"
    ],
    "TestWatchScrapeManager_ReadyForCollection": [
      "targetWithDup.SetMetadataStore",
      "NewMetadataWatcher",
      "mw.collect",
      "require.Equal",
      "newMetadataWriteToMock",
      "target.SetMetadataStore"
    ],
    "TestWblRepair_DecodingError": [
      "t.TempDir",
      "require.NoError",
      "opts.OutOfOrderCapMax.Store",
      "wlog.NewReader",
      "r.Next",
      "r.Err",
      "DefaultOptions",
      "filepath.Join",
      "wal.Dir",
      "time.Minute.Milliseconds",
      "require.Equal",
      "prom_testutil.ToFloat64",
      "h.Close",
      "wlog.NewSegmentsReader",
      "sr.Close",
      "corrFunc",
      "DefaultHeadOptions",
      "NewHead",
      "h.Init",
      "require.ErrorAs",
      "db.Close",
      "enc.Samples",
      "wlog.New",
      "wbl.Log",
      "opts.OutOfOrderTimeWindow.Store",
      "Open"
    ],
    "TestWblReplayAfterOOODisableAndRestart": [
      "t.Run",
      "testWblReplayAfterOOODisableAndRestart"
    ],
    "TestWithoutPostings": [
      "t.Run",
      "require.NotNil",
      "require.NoError",
      "require.Equal",
      "newListPostings",
      "ExpandPostings",
      "Without",
      "require.NotEqual",
      "EmptyPostings"
    ],
    "TestWrappedError": [
      "errors.New",
      "t.Run",
      "require.EqualError"
    ],
    "TestWriteAndReadbackTombstones": [
      "promslog.NewNopLogger",
      "require.NoError",
      "rand.Int31n",
      "rand.Intn",
      "rand.Int63n",
      "?.UnixNano",
      "time.Now",
      "storage.SeriesRef",
      "ReadTombstones",
      "uint64",
      "dranges.Add",
      "stones.AddInterval",
      "require.Equal",
      "NewMemTombstones",
      "t.TempDir",
      "make",
      "WriteFile"
    ],
    "TestWriteClient.SetReturnError": [
      "c.mtx.Lock",
      "c.mtx.Unlock"
    ],
    "TestWriteClient.SetStoreWait": [
      "c.mtx.Lock",
      "c.mtx.Unlock"
    ],
    "TestWriteClient.Store": [
      "proto.Unmarshal",
      "v2RequestToWriteRequest",
      "labels.NewScratchBuilder",
      "ts.ToLabels",
      "labels.String",
      "append",
      "h.IsFloatHistogram",
      "c.mtx.Unlock",
      "time.Sleep",
      "compression.Decode",
      "len",
      "c.mtx.Lock"
    ],
    "TestWriteClient.expectExemplars": [
      "prompb.FromLabels",
      "append",
      "c.mtx.Lock",
      "c.mtx.Unlock",
      "getSeriesIDFromRef"
    ],
    "TestWriteClient.expectFloatHistograms": [
      "c.mtx.Lock",
      "c.mtx.Unlock",
      "getSeriesIDFromRef",
      "append",
      "prompb.FromFloatHistogram"
    ],
    "TestWriteClient.expectHistograms": [
      "c.mtx.Lock",
      "c.mtx.Unlock",
      "getSeriesIDFromRef",
      "append",
      "prompb.FromIntHistogram"
    ],
    "TestWriteClient.expectSamples": [
      "c.mtx.Lock",
      "c.mtx.Unlock",
      "getSeriesIDFromRef",
      "append"
    ],
    "TestWriteClient.waitForExpectedData": [
      "deepLen",
      "c.mtx.Unlock",
      "fmt.Errorf",
      "tb.Error",
      "context.WithTimeout",
      "cancel",
      "runutil.Retry",
      "ctx.Done",
      "c.mtx.Lock",
      "require.Equal",
      "tb.Helper",
      "context.Background"
    ],
    "TestWriteOutput": [
      "tmpfile.Close",
      "discovery.NewRefreshMetrics",
      "discovery.RegisterSDMetrics",
      "adapter.writeOutput",
      "os.CreateTemp",
      "require.NoError",
      "tmpfile.Name",
      "prometheus.NewRegistry",
      "NewAdapter",
      "context.Background",
      "os.Remove"
    ],
    "TestWriteReadHistogramChunkLayout": [
      "newBReader",
      "bs.bytes",
      "readHistogramChunkLayout",
      "require.NoError",
      "require.Equal",
      "math.Ldexp",
      "writeHistogramChunkLayout"
    ],
    "TestWriteStorageApplyConfig_Idempotent": [
      "require.Len",
      "t.TempDir",
      "toHash",
      "require.NoError",
      "s.ApplyConfig",
      "require.True",
      "s.Close",
      "NewWriteStorage",
      "baseRemoteWriteConfig"
    ],
    "TestWriteStorageApplyConfig_Lifecycle": [
      "NewWriteStorage",
      "baseRemoteWriteConfig",
      "require.NoError",
      "s.ApplyConfig",
      "require.Len",
      "s.Close",
      "t.TempDir"
    ],
    "TestWriteStorageApplyConfig_NoDuplicateWriteConfigs": [
      "s.Close",
      "t.TempDir",
      "errors.New",
      "t.Run",
      "s.ApplyConfig",
      "require.NoError",
      "require.Error",
      "require.Equal",
      "NewWriteStorage"
    ],
    "TestWriteStorageApplyConfig_PartialUpdate": [
      "t.TempDir",
      "s.ApplyConfig",
      "require.True",
      "require.Equal",
      "require.NotEqual",
      "q.client",
      "model.Duration",
      "relabel.MustNewRegexp",
      "storeHashes",
      "require.False",
      "?.client",
      "s.Close",
      "require.Len",
      "make",
      "NewWriteStorage",
      "require.NoError",
      "len",
      "toHash"
    ],
    "TestWriteStorageApplyConfig_RestartOnNameChange": [
      "toHash",
      "s.ApplyConfig",
      "require.Equal",
      "s.Close",
      "t.TempDir",
      "testRemoteWriteConfig",
      "require.NoError",
      "NewWriteStorage",
      "?.Name",
      "?.client"
    ],
    "TestWriteStorageApplyConfig_UpdateExternalLabels": [
      "s.ApplyConfig",
      "require.Len",
      "require.Empty",
      "s.Close",
      "testRemoteWriteConfig",
      "toHash",
      "prometheus.NewRegistry",
      "labels.FromStrings",
      "require.NoError",
      "require.Equal",
      "t.TempDir",
      "NewWriteStorage"
    ],
    "TestWriteStorageApplyConfig_UpdateWithRegisterer": [
      "t.TempDir",
      "NewWriteStorage",
      "prometheus.NewRegistry",
      "require.NoError",
      "s.ApplyConfig",
      "require.Equal",
      "s.Close"
    ],
    "TestWriteStorageApplyConfigsDuringCommit": [
      "t.TempDir",
      "fmt.Sprintf",
      "require.NoError",
      "s.ApplyConfig",
      "s.Notify",
      "wg.Wait",
      "NewStorage",
      "wg.Add",
      "make",
      "baseRemoteWriteConfig",
      "wg.Done",
      "close"
    ],
    "TestWriteV2RequestFixture": [
      "writev2.NewSymbolTable",
      "labels.NewScratchBuilder",
      "writev2.FromIntHistogram",
      "writev2.FromFloatHistogram",
      "testHistogram.ToFloat",
      "st.SymbolizeLabels",
      "?.ToLabels",
      "?.ToExemplar",
      "st.Symbolize",
      "testHistogramCustomBuckets.ToFloat",
      "st.Symbols",
      "require.Equal"
    ],
    "TestWriterWithDefaultSegmentSize": [
      "ChunkFromSamples",
      "t.TempDir",
      "os.ReadDir",
      "require.Len",
      "require.NoError",
      "tsdbutil.GenerateTestHistogram",
      "NewWriter",
      "w.WriteChunks",
      "w.Close"
    ],
    "TestWriter_ShouldReturnErrorOnSeriesWithDuplicatedLabelNames": [
      "NewWriter",
      "context.Background",
      "t.TempDir",
      "labels.FromStrings",
      "require.ErrorContains",
      "filepath.Join",
      "require.NoError",
      "w.AddSymbol",
      "w.AddSeries",
      "w.Close",
      "require.Error"
    ],
    "TestYAMLNotLongerSupportedAMApi": [
      "LoadFile",
      "promslog.NewNopLogger",
      "require.Error"
    ],
    "TestYAMLRoundtrip": [
      "require.Equal",
      "LoadFile",
      "promslog.NewNopLogger",
      "require.NoError",
      "yaml.Marshal",
      "Load",
      "string"
    ],
    "TestZeroOrOneCharacterStringMatcher": [
      "t.Run",
      "matcher.Matches",
      "utf8.RuneCountInString",
      "re.MatchString",
      "requireMatches",
      "require.True",
      "require.False",
      "require.Equal",
      "regexp.MustCompile",
      "t.Helper"
    ],
    "Test_ExistingWAL_NextRef": [
      "uint64",
      "db.nextRef.Load",
      "t.TempDir",
      "DefaultOptions",
      "app.Commit",
      "db.truncate",
      "require.Equal",
      "require.NoError",
      "context.Background",
      "app.Append",
      "app.AppendHistogram",
      "db.Close",
      "promslog.NewNopLogger",
      "labels.FromStrings",
      "fmt.Sprintf",
      "tsdbutil.GenerateTestHistograms",
      "remote.NewStorage",
      "rs.Close",
      "Open",
      "db.Appender"
    ],
    "Test_convertTimeStamp": [
      "pcommon.Timestamp",
      "?.UnixNano",
      "time.Unix",
      "t.Run",
      "convertTimeStamp",
      "require.Equal"
    ],
    "Test_floatToTime": [
      "time.Date",
      "t.Run",
      "floatToTime",
      "t.Errorf",
      "reflect.DeepEqual"
    ],
    "Test_validateOptions": [
      "require.Equal",
      "DefaultOptions",
      "int64",
      "t.Run",
      "validateOptions"
    ],
    "TestfuzzParseMetricWithContentTypePanicOnInvalid": [
      "recover",
      "t.Error",
      "require.True",
      "require.ErrorContains",
      "fuzzParseMetricWithContentType"
    ],
    "Time": [
      "time.Unix",
      "int64",
      "?.UTC"
    ],
    "TimeSeries.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "TimeSeries.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer",
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "TimeSeries.MarshalToSizedBuffer": [
      "copy",
      "encodeVarintTypes",
      "uint64",
      "m.Metadata.MarshalToSizedBuffer",
      "?.MarshalToSizedBuffer",
      "make",
      "uint8",
      "len",
      "len",
      "copy",
      "?.MarshalToSizedBuffer",
      "encodeVarintTypes",
      "uint64"
    ],
    "TimeSeries.OptimizedMarshalToSizedBuffer": [
      "encodeVarintTypes",
      "uint64",
      "m.Metadata.MarshalToSizedBuffer",
      "?.MarshalToSizedBuffer",
      "uint8",
      "slices.Reverse",
      "len",
      "copy"
    ],
    "TimeSeries.Size": [
      "sovTypes",
      "uint64",
      "e.Size",
      "m.Metadata.Size",
      "len",
      "len",
      "e.Size",
      "sovTypes",
      "uint64"
    ],
    "TimeSeries.String": [
      "proto.CompactTextString",
      "proto.CompactTextString"
    ],
    "TimeSeries.ToLabels": [
      "labelProtosToLabels",
      "m.GetLabels",
      "desymbolizeLabels",
      "m.GetLabelsRefs"
    ],
    "TimeSeries.Unmarshal": [
      "int",
      "uint32",
      "skipTypes",
      "append",
      "make",
      "?.Unmarshal",
      "len",
      "uint",
      "uint64",
      "int32",
      "fmt.Errorf",
      "m.Metadata.Unmarshal",
      "int64",
      "uint",
      "fmt.Errorf",
      "append",
      "skipTypes",
      "len",
      "uint64",
      "int32",
      "int",
      "?.Unmarshal"
    ],
    "TimeSeries.XXX_DiscardUnknown": [
      "xxx_messageInfo_TimeSeries.DiscardUnknown",
      "xxx_messageInfo_TimeSeries.DiscardUnknown"
    ],
    "TimeSeries.XXX_Marshal": [
      "cap",
      "m.MarshalToSizedBuffer",
      "xxx_messageInfo_TimeSeries.Marshal",
      "xxx_messageInfo_TimeSeries.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "TimeSeries.XXX_Merge": [
      "xxx_messageInfo_TimeSeries.Merge",
      "xxx_messageInfo_TimeSeries.Merge"
    ],
    "TimeSeries.XXX_Size": [
      "m.Size",
      "m.Size"
    ],
    "TimeSeries.XXX_Unmarshal": [
      "m.Unmarshal",
      "m.Unmarshal"
    ],
    "Timer.Duration": [
      "t.duration.Seconds"
    ],
    "Timer.ElapsedTime": [
      "time.Since"
    ],
    "Timer.Start": [
      "time.Now"
    ],
    "Timer.Stop": [
      "time.Since"
    ],
    "Timer.String": [
      "fmt.Sprintf"
    ],
    "TimerGroup.GetTimer": [
      "len"
    ],
    "TimerGroup.String": [
      "make",
      "len",
      "append",
      "slices.SortFunc",
      "fmt.Fprintf",
      "result.String"
    ],
    "TimestampCollector.Collect": [
      "t.lock.RLock",
      "fileSD.lock.RLock",
      "fileSD.lock.RUnlock",
      "t.lock.RUnlock",
      "prometheus.MustNewConstMetric",
      "make"
    ],
    "TimestampCollector.addDiscoverer": [
      "t.lock.Lock",
      "t.lock.Unlock"
    ],
    "TimestampCollector.removeDiscoverer": [
      "t.lock.Lock",
      "delete",
      "t.lock.Unlock"
    ],
    "ToEscapingScheme": [
      "model.ToEscapingScheme",
      "fmt.Errorf",
      "panic"
    ],
    "ToLabelMatchers": [
      "make",
      "len",
      "errors.New",
      "append"
    ],
    "ToMetricType": [
      "uint8"
    ],
    "ToQuery": [
      "ToLabelMatchers"
    ],
    "ToQueryResult": [
      "ss.At",
      "prompb.FromFloatHistogram",
      "series.Iterator",
      "fmt.Sprintf",
      "iter.AtFloatHistogram",
      "ss.Err",
      "iter.AtHistogram",
      "iter.Err",
      "prompb.FromIntHistogram",
      "fmt.Errorf",
      "prompb.FromLabels",
      "ss.Next",
      "iter.Next",
      "ss.Warnings",
      "iter.At",
      "append",
      "series.Labels"
    ],
    "TokenProviderTestSuite.BeforeTest": [
      "new"
    ],
    "TokenProviderTestSuite.TestNewTokenProvider": [
      "s.Nil",
      "s.mockCredential.On",
      "s.NotNil",
      "s.T",
      "s.NotEqual",
      "newTokenProvider",
      "s.Require",
      "?.Return",
      "time.Sleep",
      "?.Error",
      "testTokenExpiry",
      "?.On",
      "?.NoError",
      "actualTokenProvider.getAccessToken",
      "?.ErrorContains",
      "?.Once",
      "getToken",
      "context.Background",
      "s.mockCredential.AssertNumberOfCalls"
    ],
    "TolerantVerifyLeak": [
      "goleak.VerifyTestMain",
      "goleak.IgnoreTopFunction"
    ],
    "TracingClientType.UnmarshalYAML": [
      "TracingClientType",
      "unmarshal",
      "fmt.Errorf"
    ],
    "TracingConfig.SetDirectory": [
      "t.TLSConfig.SetDirectory"
    ],
    "TracingConfig.UnmarshalYAML": [
      "unmarshal",
      "validateHeadersForTracing",
      "errors.New",
      "fmt.Errorf"
    ],
    "TranslatorMetricFromOtelMetric": [
      "metric.Name",
      "metric.Unit",
      "metric.Type",
      "?.IsMonotonic",
      "metric.Sum"
    ],
    "Tree": [
      "tree"
    ],
    "Uname": [
      "unix.Uname",
      "panic",
      "err.Error",
      "unix.ByteSliceToString"
    ],
    "UnaryExpr.PositionRange": [
      "e.Expr.PositionRange"
    ],
    "UnaryExpr.Pretty": [
      "e.Expr.Pretty",
      "strings.TrimSpace",
      "fmt.Sprintf",
      "indent"
    ],
    "UnaryExpr.ShortString": [
      "node.Op.String"
    ],
    "UnaryExpr.String": [
      "fmt.Sprintf"
    ],
    "UnaryExpr.Type": [
      "e.Expr.Type"
    ],
    "UnmarshalYAMLWithInlineConfigs": [
      "cfgTyp.Field",
      "cfgPtr.Interface",
      "outVal.Kind",
      "reflect.New",
      "outVal.NumField",
      "?.Interface",
      "?.Addr",
      "cfgVal.Field",
      "unmarshal",
      "fmt.Errorf",
      "outVal.Type",
      "outTyp.Field",
      "outVal.Elem",
      "outVal.Field",
      "?.Set",
      "replaceYAMLTypeError",
      "readConfigs",
      "reflect.ValueOf",
      "getConfigType",
      "cfgPtr.Elem"
    ],
    "Unquote": [
      "len",
      "contains",
      "make",
      "unquoteChar",
      "append",
      "byte",
      "utf8.EncodeRune",
      "string"
    ],
    "Untyped.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "Untyped.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "Untyped.MarshalToSizedBuffer": [
      "len",
      "copy",
      "encoding_binary.LittleEndian.PutUint64",
      "uint64",
      "math.Float64bits",
      "float64"
    ],
    "Untyped.Size": [
      "len"
    ],
    "Untyped.String": [
      "proto.CompactTextString"
    ],
    "Untyped.Unmarshal": [
      "uint",
      "uint64",
      "int",
      "float64",
      "skipMetrics",
      "append",
      "len",
      "fmt.Errorf",
      "encoding_binary.LittleEndian.Uint64",
      "math.Float64frombits",
      "int32"
    ],
    "Untyped.XXX_DiscardUnknown": [
      "xxx_messageInfo_Untyped.DiscardUnknown"
    ],
    "Untyped.XXX_Marshal": [
      "xxx_messageInfo_Untyped.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "Untyped.XXX_Merge": [
      "xxx_messageInfo_Untyped.Merge"
    ],
    "Untyped.XXX_Size": [
      "m.Size"
    ],
    "Untyped.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "Updatert": [
      "m.mtx.Unlock",
      "m.mtx.Lock"
    ],
    "VMLimits": [
      "getLimits",
      "getLimits"
    ],
    "ValueType.NewChunk": [
      "NewXORChunk",
      "NewHistogramChunk",
      "NewFloatHistogramChunk",
      "fmt.Errorf"
    ],
    "Vector.ContainsSameLabelset": [
      "len",
      "?.Metric.Hash",
      "make",
      "ss.Metric.Hash"
    ],
    "Vector.String": [
      "strings.Join",
      "make",
      "len",
      "s.String"
    ],
    "Vector.TotalSamples": [
      "sample.H.Size"
    ],
    "VectorMatchCardinality.String": [
      "panic"
    ],
    "VectorSelector.Pretty": [
      "getCommonPrefixIndent"
    ],
    "VectorSelector.String": [
      "make",
      "fmt.Sprintf",
      "time.Duration",
      "model.Duration",
      "strings.Join",
      "len",
      "append",
      "matcher.String",
      "float64",
      "sort.Strings"
    ],
    "VultrSDTestSuite.SetupTest": [
      "s.Mock.HandleInstanceList",
      "NewSDMock",
      "s.Mock.Setup"
    ],
    "VultrSDTestSuite.TearDownSuite": [
      "s.Mock.ShutdownServer"
    ],
    "WALReplayStatus.GetWALReplayStatus": [
      "s.RLock",
      "s.RUnlock"
    ],
    "WL.Close": [
      "errors.New",
      "w.flushPage",
      "make",
      "w.segment.Close",
      "w.metrics.Unregister",
      "w.mtx.Lock",
      "w.mtx.Unlock",
      "w.fsync",
      "w.logger.Error"
    ],
    "WL.LastSegmentAndOffset": [
      "w.mtx.Lock",
      "w.mtx.Unlock",
      "Segments",
      "w.Dir"
    ],
    "WL.Log": [
      "w.mtx.Lock",
      "w.mtx.Unlock",
      "w.log",
      "len",
      "w.metrics.writesFailed.Inc"
    ],
    "WL.NextSegment": [
      "w.mtx.Unlock",
      "w.nextSegment",
      "w.mtx.Lock"
    ],
    "WL.NextSegmentSync": [
      "w.mtx.Lock",
      "w.mtx.Unlock",
      "w.nextSegment"
    ],
    "WL.Repair": [
      "os.Remove",
      "os.Open",
      "f.Close",
      "NewReader",
      "r.Offset",
      "errors.As",
      "fmt.Errorf",
      "w.segment.Close",
      "w.flushPage",
      "w.setSegment",
      "r.Record",
      "SegmentName",
      "CreateSegment",
      "bufio.NewReader",
      "s.Close",
      "w.logger.Warn",
      "listSegments",
      "w.Dir",
      "r.Next",
      "w.Log",
      "errors.New",
      "filepath.Join",
      "fileutil.Rename"
    ],
    "WL.Size": [
      "fileutil.DirSize",
      "w.Dir"
    ],
    "WL.Sync": [
      "w.fsync"
    ],
    "WL.Truncate": [
      "w.Dir",
      "os.Remove",
      "filepath.Join",
      "w.metrics.truncateTotal.Inc",
      "w.metrics.truncateFail.Inc",
      "listSegments"
    ],
    "WL.flushPage": [
      "p.reset",
      "w.metrics.pageCompletions.Inc",
      "w.metrics.pageFlushes.Inc",
      "p.full",
      "w.segment.Write"
    ],
    "WL.fsync": [
      "f.Sync",
      "w.metrics.fsyncDuration.Observe",
      "?.Seconds",
      "time.Since",
      "time.Now"
    ],
    "WL.log": [
      "binary.BigEndian.PutUint32",
      "w.metrics.recordBytesSaved.WithLabelValues",
      "crc32.Checksum",
      "binary.BigEndian.PutUint16",
      "len",
      "w.pagesPerSegment",
      "copy",
      "w.nextSegment",
      "min",
      "uint16",
      "w.metrics.recordPartBytes.Add",
      "w.flushPage",
      "?.Add",
      "float64",
      "fmt.Errorf",
      "byte",
      "w.metrics.recordPartWrites.Inc",
      "w.page.full",
      "compression.Encode",
      "w.page.remaining"
    ],
    "WL.nextSegment": [
      "f",
      "w.flushPage",
      "CreateSegment",
      "w.setSegment",
      "prev.Close",
      "w.fsync",
      "w.logger.Error",
      "next.Index",
      "errors.New",
      "w.Dir",
      "w.segment.Index",
      "fmt.Errorf"
    ],
    "WL.run": [
      "f",
      "close"
    ],
    "WL.setSegment": [
      "segment.Stat",
      "int",
      "stat.Size",
      "w.metrics.currentSegment.Set",
      "float64",
      "segment.Index"
    ],
    "Walk": [
      "Children",
      "Walk",
      "v.Visit",
      "append"
    ],
    "Watcher.Notify": [
      "w.notificationsSkipped.Inc"
    ],
    "Watcher.Run": [
      "w.readCheckpoint",
      "w.findSegmentForIndex",
      "w.logger.Debug",
      "w.currentSegmentMetric.Set",
      "Segments",
      "fmt.Errorf",
      "LastCheckpoint",
      "errors.Is",
      "float64",
      "w.logger.Info",
      "isClosed",
      "w.watch"
    ],
    "Watcher.SetMetrics": [
      "w.metrics.currentSegment.WithLabelValues",
      "w.metrics.notificationsSkipped.WithLabelValues",
      "w.metrics.recordsRead.MustCurryWith",
      "w.metrics.recordDecodeFails.WithLabelValues",
      "w.metrics.samplesSentPreTailing.WithLabelValues"
    ],
    "Watcher.SetStartTime": [
      "timestamp.FromTime"
    ],
    "Watcher.Start": [
      "w.SetMetrics",
      "w.logger.Info",
      "w.loop"
    ],
    "Watcher.Stop": [
      "close",
      "w.metrics.recordsRead.DeleteLabelValues",
      "w.metrics.recordDecodeFails.DeleteLabelValues",
      "w.metrics.samplesSentPreTailing.DeleteLabelValues",
      "w.metrics.currentSegment.DeleteLabelValues",
      "w.logger.Info"
    ],
    "Watcher.findSegmentForIndex": [
      "listSegments",
      "errors.New"
    ],
    "Watcher.garbageCollectSeries": [
      "errors.Is",
      "fmt.Errorf",
      "checkpointNum",
      "w.logger.Debug",
      "fmt.Sprintf",
      "w.readCheckpoint",
      "w.writer.SeriesReset",
      "LastCheckpoint"
    ],
    "Watcher.loop": [
      "w.logger.Error",
      "time.After",
      "close",
      "isClosed",
      "w.SetStartTime",
      "time.Now",
      "w.Run"
    ],
    "Watcher.readAndHandleError": [
      "w.readSegment",
      "errors.Is",
      "w.logger.Warn",
      "r.Offset"
    ],
    "Watcher.readCheckpoint": [
      "checkpointNum",
      "fmt.Errorf",
      "readFn",
      "errors.Is",
      "r.Offset",
      "w.logger.Debug",
      "listSegments",
      "getSegmentSize",
      "OpenReadSegment",
      "SegmentName",
      "NewLiveReader",
      "sr.Close"
    ],
    "Watcher.readSegment": [
      "record.NewDecoder",
      "?.String",
      "dec.Type",
      "append",
      "dec.HistogramSamples",
      "dec.Exemplars",
      "dec.Samples",
      "dec.Series",
      "len",
      "w.writer.AppendFloatHistograms",
      "w.writer.StoreMetadata",
      "labels.NewSymbolTable",
      "w.writer.StoreSeries",
      "w.writer.AppendHistograms",
      "time.Since",
      "r.Next",
      "isClosed",
      "r.Record",
      "?.Inc",
      "w.recordsReadMetric.WithLabelValues",
      "dec.FloatHistogramSamples",
      "w.writer.Append",
      "dec.Metadata",
      "r.Err",
      "fmt.Errorf",
      "w.recordDecodeFailsMetric.Inc",
      "w.logger.Info",
      "w.writer.AppendExemplars"
    ],
    "Watcher.readSegmentForGC": [
      "fmt.Errorf",
      "labels.NewSymbolTable",
      "r.Record",
      "?.Inc",
      "w.writer.UpdateSeriesSegment",
      "dec.Type",
      "dec.Series",
      "w.recordDecodeFailsMetric.Inc",
      "r.Err",
      "record.NewDecoder",
      "r.Next",
      "isClosed",
      "w.recordsReadMetric.WithLabelValues",
      "?.String"
    ],
    "Watcher.watch": [
      "w.logger.Warn",
      "Segments",
      "OpenReadSegment",
      "SegmentName",
      "segment.Close",
      "NewLiveReader",
      "segmentTicker.Stop",
      "make",
      "w.logger.Debug",
      "int64",
      "time.NewTicker",
      "checkpointTicker.Stop",
      "readTicker.Reset",
      "getSegmentSize",
      "fmt.Errorf",
      "w.readAndHandleError",
      "readTicker.Stop",
      "w.garbageCollectSeries"
    ],
    "Without": [
      "EmptyPostings",
      "newRemovedPostings"
    ],
    "WrappedError.Error": [
      "fmt.Sprintf",
      "we.err.Error"
    ],
    "WriteFile": [
      "filepath.Join",
      "os.Create",
      "f.Close",
      "buf.Reset",
      "hash.Write",
      "?.Err",
      "tsdb_errors.NewMulti",
      "int64",
      "newCRC32",
      "logger.Error",
      "Encode",
      "fmt.Errorf",
      "f.Sync",
      "fileutil.Replace",
      "err.Error",
      "f.Write",
      "os.RemoveAll",
      "make",
      "buf.PutBE32",
      "buf.Get",
      "hash.Sum"
    ],
    "WriteRequest.Marshal": [
      "m.Size",
      "make",
      "m.MarshalToSizedBuffer"
    ],
    "WriteRequest.MarshalTo": [
      "m.Size",
      "m.MarshalToSizedBuffer"
    ],
    "WriteRequest.MarshalToSizedBuffer": [
      "len",
      "copy",
      "?.MarshalToSizedBuffer",
      "encodeVarintRemote",
      "uint64"
    ],
    "WriteRequest.Size": [
      "len",
      "e.Size",
      "sovRemote",
      "uint64"
    ],
    "WriteRequest.String": [
      "proto.CompactTextString"
    ],
    "WriteRequest.Unmarshal": [
      "int32",
      "append",
      "?.Unmarshal",
      "len",
      "uint",
      "uint64",
      "int",
      "fmt.Errorf",
      "skipRemote"
    ],
    "WriteRequest.XXX_DiscardUnknown": [
      "xxx_messageInfo_WriteRequest.DiscardUnknown"
    ],
    "WriteRequest.XXX_Marshal": [
      "xxx_messageInfo_WriteRequest.Marshal",
      "cap",
      "m.MarshalToSizedBuffer"
    ],
    "WriteRequest.XXX_Merge": [
      "xxx_messageInfo_WriteRequest.Merge"
    ],
    "WriteRequest.XXX_Size": [
      "m.Size"
    ],
    "WriteRequest.XXX_Unmarshal": [
      "m.Unmarshal"
    ],
    "WriteResponseStats.SetHeaders": [
      "strconv.Itoa",
      "w.Header",
      "h.Set"
    ],
    "WriteStorage.ApplyConfig": [
      "rws.mtx.Unlock",
      "fmt.Errorf",
      "rwConf.URL.Redacted",
      "rws.mtx.Lock",
      "NewWriteClient",
      "delete",
      "toHash",
      "newQueueManagerMetrics",
      "?.Start",
      "labels.Equal",
      "make",
      "queue.SetClient",
      "NewQueueManager",
      "append",
      "q.Stop"
    ],
    "WriteStorage.Close": [
      "close",
      "rws.mtx.Lock",
      "rws.mtx.Unlock",
      "q.Stop"
    ],
    "WriteStorage.LowestSentTimestamp": [
      "rws.mtx.Unlock",
      "int64",
      "q.metrics.highestSentTimestamp.Get",
      "len",
      "rws.mtx.Lock"
    ],
    "WriteStorage.Notify": [
      "rws.mtx.Lock",
      "rws.mtx.Unlock",
      "q.watcher.Notify"
    ],
    "WriteStorage.run": [
      "time.NewTicker",
      "ticker.Stop",
      "rws.samplesIn.tick"
    ],
    "Writer.AddSeries": [
      "labels.Compare",
      "fmt.Errorf",
      "w.buf2.Reset",
      "len",
      "w.buf2.PutHash",
      "lset.Validate",
      "w.buf1.Reset",
      "w.ensureStage",
      "w.lastSeries.IsEmpty",
      "w.buf2.PutUvarint",
      "w.buf2.PutUvarint32",
      "uint64",
      "w.buf2.Len",
      "w.buf2.Get",
      "w.lastSeries.CopyFrom",
      "int64",
      "w.addPadding",
      "lset.Len",
      "w.buf2.PutVarint64",
      "w.buf2.PutUvarint64",
      "w.buf1.PutUvarint",
      "w.write",
      "w.buf1.Get"
    ],
    "Writer.AddSymbol": [
      "fmt.Errorf",
      "uint32",
      "w.buf1.Reset",
      "w.buf1.PutUvarintStr",
      "w.write",
      "w.buf1.Get",
      "w.ensureStage"
    ],
    "Writer.Close": [
      "w.finalizeTail",
      "w.dirFile.Close",
      "w.f.Close",
      "w.ensureStage",
      "w.symbolFile.Close",
      "w.fP.Close",
      "w.fPO.Close"
    ],
    "Writer.WriteChunks": [
      "w.writeChunks",
      "int64",
      "make",
      "len",
      "chk.Chunk.Bytes",
      "append",
      "w.cut"
    ],
    "Writer.addPadding": [
      "w.f.AddPadding"
    ],
    "Writer.cut": [
      "w.wbuf.Reset",
      "fileutil.NewDirectIOWriter",
      "fileutil.NewBufioWriterWithSeek",
      "w.finalizeTail",
      "cutSegmentFile",
      "int64",
      "append"
    ],
    "Writer.ensureStage": [
      "w.writePostingsToTmpFiles",
      "w.writeLabelIndices",
      "w.writeLabelIndexesOffsetTable",
      "w.writePostingsOffsetTable",
      "w.ctx.Done",
      "fmt.Errorf",
      "w.startSymbols",
      "w.finishSymbols",
      "w.writeTOC",
      "w.ctx.Err",
      "w.ensureStage",
      "w.writePostings"
    ],
    "Writer.finalizeTail": [
      "tf.Sync",
      "tf.Seek",
      "tf.Truncate",
      "tf.Close",
      "w.tail",
      "w.wbuf.Flush"
    ],
    "Writer.finishSymbols": [
      "uint32",
      "int",
      "fileutil.OpenMmapFile",
      "w.buf1.PutBE32",
      "fmt.Errorf",
      "w.buf1.Reset",
      "w.buf1.PutBE32int",
      "w.f.Flush",
      "crc32.Checksum",
      "w.writeAt",
      "w.buf1.Get",
      "w.write",
      "w.symbolFile.Bytes",
      "NewSymbols",
      "realByteSlice"
    ],
    "Writer.seq": [
      "len"
    ],
    "Writer.startSymbols": [
      "w.write"
    ],
    "Writer.tail": [
      "len"
    ],
    "Writer.write": [
      "w.wbuf.Write",
      "int64",
      "w.f.Write"
    ],
    "Writer.writeAt": [
      "w.f.WriteAt"
    ],
    "Writer.writeChunks": [
      "ChunkRef",
      "NewBlockChunkRef",
      "chk.Chunk.Bytes",
      "w.write",
      "chk.writeHash",
      "len",
      "uint64",
      "w.seq",
      "binary.PutUvarint",
      "byte",
      "chk.Chunk.Encoding",
      "w.crc32.Reset",
      "w.crc32.Sum"
    ],
    "Writer.writeLabelIndex": [
      "w.buf1.PutBE32int",
      "w.buf1.PutHashSum",
      "append",
      "w.write",
      "w.buf1.Reset",
      "fmt.Errorf",
      "int",
      "w.writeAt",
      "len",
      "w.buf1.Get",
      "w.buf1.PutBE32",
      "w.addPadding",
      "w.crc32.Reset",
      "w.buf1.WriteToHash"
    ],
    "Writer.writeLabelIndexesOffsetTable": [
      "w.buf1.PutUvarintStr",
      "w.buf1.PutUvarint64",
      "w.writeLengthAndHash",
      "fmt.Errorf",
      "w.crc32.Reset",
      "w.buf1.WriteToHash",
      "w.buf1.Get",
      "w.buf1.PutUvarint",
      "w.write",
      "w.buf1.Reset",
      "w.buf1.PutBE32int",
      "len"
    ],
    "Writer.writeLabelIndices": [
      "fileutil.OpenMmapFile",
      "w.writeLabelIndex",
      "w.fPO.Flush",
      "f.Bytes",
      "d.Uvarint",
      "len",
      "bytes.Equal",
      "f.Close",
      "encoding.NewDecbufRaw",
      "realByteSlice",
      "d.UvarintBytes",
      "fmt.Errorf",
      "append",
      "int",
      "d.Err",
      "d.Uvarint64",
      "string"
    ],
    "Writer.writeLengthAndHash": [
      "w.write",
      "w.buf1.Reset",
      "fmt.Errorf",
      "w.buf1.PutBE32int",
      "int",
      "w.writeAt",
      "w.buf1.Get",
      "w.buf1.PutHashSum"
    ],
    "Writer.writeMeta": [
      "w.buf1.Reset",
      "w.buf1.PutBE32",
      "w.buf1.PutByte",
      "w.write",
      "w.buf1.Get"
    ],
    "Writer.writePosting": [
      "w.buf1.PutUvarint64",
      "w.postingsEncoder",
      "w.fP.Write",
      "w.buf1.PutUvarint",
      "w.buf1.Get",
      "w.buf1.Len",
      "fmt.Errorf",
      "w.fP.AddPadding",
      "w.buf1.Reset",
      "w.fPO.Write",
      "w.buf2.PutBE32int",
      "w.buf1.PutHash",
      "w.buf1.PutUvarintStr",
      "w.buf2.Reset",
      "uint",
      "w.buf2.Get"
    ],
    "Writer.writePostings": [
      "fmt.Errorf",
      "w.fP.Close",
      "w.fP.Remove",
      "w.fP.Flush",
      "w.fP.f.Seek",
      "io.CopyBuffer",
      "w.f.AddPadding",
      "make",
      "uint64"
    ],
    "Writer.writePostingsOffsetTable": [
      "d.Uvarint",
      "d.UvarintBytes",
      "w.buf1.PutUvarint64",
      "w.writeLengthAndHash",
      "int",
      "w.buf1.WriteToHash",
      "f.Close",
      "encoding.NewDecbufRaw",
      "d.Uvarint64",
      "w.fPO.Close",
      "w.buf1.Reset",
      "w.buf1.Get",
      "f.Bytes",
      "d.Err",
      "w.buf1.PutUvarintStr",
      "fmt.Errorf",
      "w.buf1.PutUvarint",
      "yoloString",
      "w.fPO.Flush",
      "w.write",
      "w.crc32.Reset",
      "w.buf1.PutBE32int",
      "fileutil.OpenMmapFile",
      "realByteSlice",
      "w.fPO.Remove"
    ],
    "Writer.writePostingsToTmpFiles": [
      "uint32",
      "make",
      "len",
      "slices.Sort",
      "fileutil.OpenMmapFile",
      "d.ConsumePadding",
      "fmt.Errorf",
      "w.symbols.Lookup",
      "w.ctx.Done",
      "w.ctx.Err",
      "uint64",
      "d.Uvarint",
      "w.writePosting",
      "f.Close",
      "encoding.NewDecbufRaw",
      "realByteSlice",
      "d.Skip",
      "d.Len",
      "append",
      "w.f.Flush",
      "f.Bytes",
      "int",
      "d.Err"
    ],
    "Writer.writeTOC": [
      "w.buf1.PutHash",
      "w.write",
      "w.buf1.Get",
      "w.buf1.Reset",
      "w.buf1.PutBE64"
    ],
    "XORChunk.Appender": [
      "c.iterator",
      "it.Next",
      "it.Err"
    ],
    "XORChunk.Bytes": [
      "c.b.bytes"
    ],
    "XORChunk.Compact": [
      "len",
      "cap",
      "make",
      "copy"
    ],
    "XORChunk.Iterator": [
      "c.iterator"
    ],
    "XORChunk.NumSamples": [
      "int",
      "binary.BigEndian.Uint16",
      "c.Bytes"
    ],
    "XORChunk.Reset": [
      "c.b.Reset"
    ],
    "XORChunk.iterator": [
      "xorIter.Reset",
      "c.b.bytes",
      "newBReader",
      "binary.BigEndian.Uint16"
    ],
    "ZookeeperLogger.Printf": [
      "zl.logger.Info"
    ],
    "ZookeeperTreeCache.Stop": [
      "close",
      "tc.wg.Wait"
    ],
    "ZookeeperTreeCache.loop": [
      "tc.logger.Debug",
      "tc.logger.Info",
      "strings.Split",
      "tc.wg.Done",
      "time.AfterFunc",
      "tc.recursiveNodeUpdate",
      "failure",
      "strings.TrimPrefix",
      "tc.resyncState",
      "tc.recursiveStop",
      "make",
      "failureCounter.Inc",
      "tc.logger.Error"
    ],
    "ZookeeperTreeCache.recursiveDelete": [
      "tc.recursiveDelete"
    ],
    "ZookeeperTreeCache.recursiveNodeUpdate": [
      "errors.Is",
      "tc.recursiveDelete",
      "fmt.Errorf",
      "bytes.Equal",
      "tc.wg.Done",
      "tc.conn.GetW",
      "tc.conn.ChildrenW",
      "make",
      "tc.recursiveNodeUpdate",
      "delete",
      "tc.wg.Add",
      "numWatchers.Inc",
      "numWatchers.Dec"
    ],
    "ZookeeperTreeCache.recursiveStop": [
      "tc.recursiveStop"
    ],
    "ZookeeperTreeCache.resyncState": [
      "tc.resyncState",
      "tc.recursiveDelete"
    ],
    "_newJSONEntry": [
      "json.Marshal",
      "logger.Error"
    ],
    "acceptHeader": [
      "len",
      "scheme.String",
      "fmt.Sprintf",
      "append",
      "strings.Join"
    ],
    "acceptRemainingDuration": [
      "l.accept",
      "isAlphaNumeric",
      "l.next"
    ],
    "addBuckets": [
      "len",
      "append",
      "copy",
      "int32",
      "int",
      "IsExponentialSchema",
      "getBoundExponential"
    ],
    "addF": [
      "copy",
      "s.T",
      "?.T",
      "len",
      "make"
    ],
    "addFH": [
      "s.T",
      "?.T",
      "len",
      "make",
      "copy",
      "s.fh.Copy",
      "s.fh.CopyTo"
    ],
    "addH": [
      "make",
      "copy",
      "s.h.Copy",
      "s.h.CopyTo",
      "s.T",
      "?.T",
      "len"
    ],
    "addNativeHistogramsToTestSuite": [
      "require.NoError",
      "app.Commit",
      "labels.FromStrings",
      "storage.Appender",
      "context.TODO",
      "tsdbutil.GenerateTestFloatHistograms",
      "app.AppendHistogram",
      "int64"
    ],
    "addNodeLabels": [
      "addObjectMetaLabels",
      "tg.Merge",
      "?.GetByKey",
      "nodeInf.GetStore",
      "logger.Error",
      "make"
    ],
    "addObjectMetaLabels": [
      "model.LabelName",
      "string",
      "lv",
      "strutil.SanitizeLabelName"
    ],
    "addResourceTargetInfo": [
      "len",
      "timestamp.Before",
      "timestamp.Add",
      "timestamp.UnixMilli",
      "float64",
      "latestTimestamp.UnixMilli",
      "resource.Attributes",
      "attributes.Len",
      "attributes.Get",
      "createAttributes",
      "converter.getOrCreateTimeSeries",
      "append"
    ],
    "addSample": [
      "s.Copy",
      "s.T",
      "?.T",
      "len",
      "make",
      "copy"
    ],
    "addToSeries": [
      "getFPointSlice",
      "append",
      "getHPointSlice"
    ],
    "adjustForInserts": [
      "it.Next",
      "addBucket",
      "consumeInsert",
      "len",
      "newBucketIterator",
      "append",
      "int32"
    ],
    "agentOnlyFlag": [
      "fmt.Sprintf",
      "append",
      "?.PreAction",
      "app.Flag"
    ],
    "agentOptions.ToAgentOptions": [
      "int",
      "time.Duration",
      "durationToInt64Millis"
    ],
    "aggrHistOverTime": [
      "aggrFn",
      "append"
    ],
    "aggrOverTime": [
      "append",
      "aggrFn"
    ],
    "aggregationTemporality": [
      "metric.Type",
      "?.AggregationTemporality",
      "metric.Sum",
      "metric.Histogram",
      "metric.ExponentialHistogram",
      "fmt.Errorf",
      "metric.Name"
    ],
    "alertmanagerLabels.url": [
      "a.Get"
    ],
    "alertmanagerMock.url": [
      "url.Parse",
      "a.urlf",
      "panic"
    ],
    "alertmanagerSet.configHash": [
      "hex.EncodeToString",
      "yaml.Marshal",
      "md5.Sum"
    ],
    "alertmanagerSet.sync": [
      "s.logger.Error",
      "s.mtx.Unlock",
      "am.url",
      "s.metrics.sent.WithLabelValues",
      "s.metrics.errors.WithLabelValues",
      "s.metrics.latency.DeleteLabelValues",
      "s.metrics.sent.DeleteLabelValues",
      "AlertmanagerFromGroup",
      "append",
      "s.mtx.Lock",
      "?.String",
      "s.metrics.errors.DeleteLabelValues"
    ],
    "alertsEqual": [
      "fmt.Errorf",
      "labels.Equal",
      "len"
    ],
    "alertsToOpenAPIAlerts": [
      "append",
      "labelsToOpenAPILabelSet",
      "strfmt.URI",
      "strfmt.DateTime"
    ],
    "alignedBlock": [
      "panic",
      "fmt.Errorf",
      "make",
      "alignmentOffset",
      "isAligned"
    ],
    "alignmentOffset": [
      "computeAlignmentOffset"
    ],
    "allFloatBucketIterator.Next": [
      "i.leftIter.At",
      "i.Next",
      "i.h.ZeroBucket",
      "i.rightIter.Next",
      "i.rightIter.At",
      "i.leftIter.Next"
    ],
    "allSegments": [
      "filepath.Join",
      "append",
      "io.MultiReader",
      "listSegments",
      "os.Open"
    ],
    "analyzeBlock": [
      "index.ExpandPostings",
      "p.Err",
      "append",
      "ir.Series",
      "p.At",
      "float64",
      "len",
      "openBlock",
      "tsdb_errors.NewMulti",
      "block.Meta",
      "postings.Next",
      "?.String",
      "p.Next",
      "?.Range",
      "printInfo",
      "db.Close",
      "builder.Labels",
      "index.Intersect",
      "fmt.Printf",
      "block.Index",
      "slices.SortFunc",
      "analyzeCompaction",
      "parser.ParseMetricSelector",
      "?.Err",
      "ir.LabelNames",
      "postings.Err",
      "ir.Postings",
      "ir.SortedLabelValues",
      "time.Duration",
      "ir.Close",
      "tsdb.PostingsForMatchers",
      "index.NewListPostings",
      "uint64"
    ],
    "analyzeCompaction": [
      "index.AllPostingsKey",
      "make",
      "postingsr.At",
      "errors.New",
      "displayHistogram",
      "len",
      "indexr.Postings",
      "?.Err",
      "append",
      "chk.NumSamples",
      "it.Next",
      "it.AtFloatHistogram",
      "fmt.Println",
      "block.Chunks",
      "tsdb_errors.NewMulti",
      "chunkr.Close",
      "indexr.Series",
      "chunkr.ChunkOrIterable",
      "chk.Encoding",
      "chk.Bytes",
      "fhchk.Iterator",
      "tsdb.PostingsForMatchers",
      "postingsr.Next",
      "hchk.Iterator",
      "it.AtHistogram",
      "fmt.Printf"
    ],
    "annoErr.Error": [
      "e.PositionRange.StartPosInput",
      "e.Err.Error",
      "fmt.Sprintf"
    ],
    "anyNonEmptyStringMatcher.Matches": [
      "len",
      "strings.IndexByte"
    ],
    "anyStringWithoutNewlineMatcher.Matches": [
      "strings.IndexByte"
    ],
    "apiError.Error": [
      "fmt.Sprintf"
    ],
    "app.isContainerNet": [
      "len"
    ],
    "appendChunk": [
      "append"
    ],
    "appendLabelTo": [
      "encodeVarint",
      "sizeVarint",
      "uint64",
      "len",
      "cap",
      "make",
      "copy",
      "cap",
      "make",
      "copy",
      "marshalLabelToSizedBuffer",
      "labelSize",
      "len"
    ],
    "appendSample": [
      "a.AppendHistogram",
      "a.Append"
    ],
    "appendSeries": [
      "labels.FromStrings",
      "app.Commit",
      "time.Sleep",
      "wg.Done",
      "h.Appender",
      "context.Background",
      "app.Append",
      "strconv.Itoa",
      "require.NoError",
      "ctx.Err"
    ],
    "appendSeriesChunks": [
      "append",
      "chunks.NewHeadChunkRef",
      "s.headChunks.len",
      "s.headChunks.atOffset",
      "chk.OverlapsClosedInterval",
      "c.OverlapsClosedInterval",
      "s.headChunkID",
      "len",
      "chunks.ChunkRef"
    ],
    "appendWithExponentialGrowth": [
      "cap",
      "len",
      "make",
      "copy",
      "append"
    ],
    "appender": [
      "timestamp.FromTime",
      "?.Add",
      "time.Now"
    ],
    "appender.Append": [
      "chunks.HeadSeriesRef",
      "l.WithoutEmpty",
      "series.Lock",
      "series.Unlock",
      "a.minValidTime",
      "a.getOrCreate",
      "a.metrics.numActiveSeries.Inc",
      "a.metrics.totalOutOfOrderSamples.Inc",
      "a.metrics.totalAppendedSamples.WithLabelValues",
      "a.series.GetByID",
      "l.IsEmpty",
      "fmt.Errorf",
      "l.HasDuplicateLabelNames",
      "append",
      "?.Inc",
      "storage.SeriesRef"
    ],
    "appender.AppendCTZeroSample": [
      "?.Inc",
      "storage.SeriesRef",
      "chunks.HeadSeriesRef",
      "fmt.Errorf",
      "a.getOrCreate",
      "append",
      "series.Unlock",
      "a.series.GetByID",
      "l.WithoutEmpty",
      "series.Lock",
      "l.IsEmpty",
      "l.HasDuplicateLabelNames",
      "a.metrics.numActiveSeries.Inc",
      "a.minValidTime",
      "a.metrics.totalOutOfOrderSamples.Inc",
      "a.metrics.totalAppendedSamples.WithLabelValues"
    ],
    "appender.AppendExemplar": [
      "append",
      "a.metrics.totalAppendedExemplars.Inc",
      "storage.SeriesRef",
      "chunks.HeadSeriesRef",
      "a.series.GetByID",
      "e.Labels.HasDuplicateLabelNames",
      "prevExemplar.Equals",
      "a.series.SetLatestExemplar",
      "fmt.Errorf",
      "e.Labels.WithoutEmpty",
      "e.Labels.Validate",
      "utf8.RuneCountInString",
      "a.series.GetLatestExemplar"
    ],
    "appender.AppendHistogram": [
      "chunks.HeadSeriesRef",
      "a.series.GetByID",
      "l.HasDuplicateLabelNames",
      "series.Unlock",
      "?.Inc",
      "l.WithoutEmpty",
      "l.IsEmpty",
      "append",
      "a.minValidTime",
      "a.metrics.totalOutOfOrderSamples.Inc",
      "a.metrics.totalAppendedSamples.WithLabelValues",
      "h.Validate",
      "fh.Validate",
      "a.getOrCreate",
      "storage.SeriesRef",
      "fmt.Errorf",
      "a.metrics.numActiveSeries.Inc",
      "series.Lock"
    ],
    "appender.AppendHistogramCTZeroSample": [
      "h.Validate",
      "l.WithoutEmpty",
      "fmt.Errorf",
      "a.metrics.numActiveSeries.Inc",
      "series.Unlock",
      "a.metrics.totalAppendedSamples.WithLabelValues",
      "fh.Validate",
      "a.series.GetByID",
      "l.IsEmpty",
      "append",
      "series.Lock",
      "a.minValidTime",
      "?.Inc",
      "chunks.HeadSeriesRef",
      "l.HasDuplicateLabelNames",
      "a.getOrCreate",
      "storage.SeriesRef"
    ],
    "appender.Commit": [
      "a.log",
      "a.clearData",
      "a.appenderPool.Put",
      "a.writeNotified.Notify"
    ],
    "appender.Rollback": [
      "a.clearData",
      "a.appenderPool.Put",
      "a.logSeries"
    ],
    "appender.getOrCreate": [
      "l.Hash",
      "a.series.GetByHash",
      "chunks.HeadSeriesRef",
      "a.nextRef.Inc",
      "a.series.Set"
    ],
    "appender.log": [
      "a.mtx.RUnlock",
      "a.bufPool.Get",
      "a.wal.Log",
      "encoder.Exemplars",
      "a.metrics.totalOutOfOrderSamples.Inc",
      "a.mtx.RLock",
      "a.bufPool.Put",
      "len",
      "encoder.Samples",
      "encoder.HistogramSamples",
      "encoder.CustomBucketsHistogramSamples",
      "encoder.FloatHistogramSamples",
      "encoder.Series",
      "encoder.CustomBucketsFloatHistogramSamples",
      "series.updateTimestamp"
    ],
    "appender.logSeries": [
      "a.mtx.RUnlock",
      "len",
      "a.bufPool.Get",
      "a.bufPool.Put",
      "encoder.Series",
      "a.wal.Log",
      "a.mtx.RLock"
    ],
    "appenderCommitContext.collectOOORecords": [
      "acc.enc.CustomBucketsFloatHistogramSamples",
      "append",
      "acc.enc.MmapMarkers",
      "acc.enc.FloatHistogramSamples",
      "acc.enc.Samples",
      "acc.enc.HistogramSamples",
      "acc.enc.CustomBucketsHistogramSamples",
      "make",
      "a.head.getBytesBuffer",
      "len"
    ],
    "applyConfig": [
      "make",
      "cfg.GetScrapeConfigs",
      "discoveryManager.ApplyConfig",
      "t.Helper",
      "loadConfiguration",
      "require.NoError",
      "scrapeManager.ApplyConfig"
    ],
    "appsToTargetGroups": [
      "createTargetGroup"
    ],
    "askServerForName": [
      "errors.New",
      "askServerForName",
      "msg.SetQuestion",
      "dns.Fqdn",
      "msg.SetEdns0",
      "client.Exchange"
    ],
    "assertAPIError": [
      "t.Helper",
      "require.Nil",
      "require.NotNil",
      "require.Equal"
    ],
    "assertAPIResponse": [
      "t.Helper",
      "testutil.RequireEqual"
    ],
    "assertAPIResponseLength": [
      "t.Helper",
      "?.Len",
      "reflect.ValueOf",
      "require.Equal"
    ],
    "assertAPIResponseMetadataLen": [
      "require.Equal",
      "t.Helper",
      "len"
    ],
    "assertDeepCopyFHSpans": [
      "expandSpans",
      "len",
      "require.Equal"
    ],
    "assertDeepCopyHSpans": [
      "expandSpans",
      "len",
      "require.Equal"
    ],
    "assertEqualGroups": [
      "sort.Sort",
      "byGroupSource",
      "require.Equal",
      "t.Helper"
    ],
    "assertFirstFloatHistogramSampleHint": [
      "chunk.Iterator",
      "require.Equal",
      "it.Next",
      "it.AtFloatHistogram"
    ],
    "assertFirstIntHistogramSampleHint": [
      "chunk.Iterator",
      "require.Equal",
      "it.Next",
      "it.AtHistogram"
    ],
    "assertMatrixSorted": [
      "len",
      "labels.Compare",
      "fmt.Errorf"
    ],
    "assertMigration": [
      "readTestFile",
      "require.Equal",
      "t.TempDir",
      "writeTestFile",
      "MigrateTestData",
      "require.NoError"
    ],
    "assertNewFloatHistogramChunkOnAppend": [
      "oldChunk.Bytes",
      "hApp.AppendFloatHistogram",
      "require.NoError",
      "require.NotNil",
      "?.GetCounterResetHeader",
      "assertSampleCount",
      "require.Equal",
      "require.False",
      "require.NotEqual",
      "assertFirstFloatHistogramSampleHint"
    ],
    "assertNewHistogramChunkOnAppend": [
      "assertSampleCount",
      "oldChunk.Bytes",
      "require.NoError",
      "require.NotNil",
      "require.False",
      "?.GetCounterResetHeader",
      "hApp.AppendHistogram",
      "require.Equal",
      "require.NotEqual",
      "assertFirstIntHistogramSampleHint"
    ],
    "assertNoNewFloatHistogramChunkOnAppend": [
      "require.Equal",
      "?.GetCounterResetHeader",
      "require.Greater",
      "len",
      "require.NoError",
      "require.Nil",
      "require.False",
      "require.NotNil",
      "assertSampleCount",
      "oldChunk.Bytes",
      "hApp.AppendFloatHistogram"
    ],
    "assertNoNewHistogramChunkOnAppend": [
      "require.Nil",
      "?.GetCounterResetHeader",
      "currChunk.Bytes",
      "require.Greater",
      "len",
      "require.NoError",
      "require.False",
      "require.Equal",
      "require.NotNil",
      "assertSampleCount",
      "hApp.AppendHistogram"
    ],
    "assertRecodedFloatHistogramChunkOnAppend": [
      "require.NotEqual",
      "assertSampleCount",
      "hApp.AppendFloatHistogram",
      "require.Equal",
      "require.NotNil",
      "require.True",
      "prevChunk.Bytes",
      "require.NoError",
      "?.GetCounterResetHeader"
    ],
    "assertRecodedHistogramChunkOnAppend": [
      "assertSampleCount",
      "prevChunk.Bytes",
      "require.NotEqual",
      "?.GetCounterResetHeader",
      "require.NotNil",
      "require.True",
      "hApp.AppendHistogram",
      "require.Equal",
      "require.NoError"
    ],
    "assertSampleCount": [
      "int64",
      "c.Iterator",
      "require.NoError",
      "it.Err",
      "it.Next",
      "require.Equal"
    ],
    "assureChunkFromSamples": [
      "chunks.ChunkFromSamples",
      "require.NoError"
    ],
    "atModifierTestCases": [
      "timestamp.FromTime",
      "parser.ParseExpr",
      "hasAtModifier",
      "makeInt64Pointer",
      "expr.String",
      "make",
      "len",
      "append",
      "timestamp.Time",
      "parser.Inspect"
    ],
    "authTokenFileRoundTripper.RoundTrip": [
      "os.ReadFile",
      "fmt.Errorf",
      "strings.TrimSpace",
      "string",
      "request.Header.Set",
      "rt.rt.RoundTrip",
      "fmt.Errorf",
      "strings.TrimSpace",
      "string",
      "request.Header.Set",
      "rt.rt.RoundTrip",
      "os.ReadFile"
    ],
    "authTokenRoundTripper.RoundTrip": [
      "rt.rt.RoundTrip",
      "request.Header.Set",
      "string"
    ],
    "azureADRoundTripper.RoundTrip": [
      "req.Header.Set",
      "rt.next.RoundTrip",
      "rt.tokenProvider.getAccessToken",
      "req.Context"
    ],
    "azureClient.getScaleSetVMs": [
      "pager.More",
      "pager.NextPage",
      "append",
      "mapFromVMScaleSetVM",
      "newAzureResourceFromID",
      "fmt.Errorf",
      "client.vmssvm.NewListPager"
    ],
    "azureClient.getScaleSets": [
      "append",
      "client.vmss.NewListPager",
      "len",
      "client.vmss.NewListAllPager",
      "pager.More",
      "pager.NextPage",
      "fmt.Errorf"
    ],
    "azureClient.getVMNetworkInterfaceByID": [
      "newAzureResourceFromID",
      "fmt.Errorf",
      "client.nic.Get",
      "to.Ptr",
      "errors.As"
    ],
    "azureClient.getVMScaleSetVMNetworkInterfaceByID": [
      "newAzureResourceFromID",
      "fmt.Errorf",
      "client.nic.GetVirtualMachineScaleSetNetworkInterface",
      "to.Ptr",
      "errors.As"
    ],
    "azureClient.getVMs": [
      "client.vm.NewListPager",
      "len",
      "client.vm.NewListAllPager",
      "pager.More",
      "pager.NextPage",
      "fmt.Errorf",
      "append",
      "mapFromVM"
    ],
    "azureMetrics.Register": [
      "m.metricRegisterer.RegisterMetrics"
    ],
    "azureMetrics.Unregister": [
      "m.metricRegisterer.UnregisterMetrics"
    ],
    "backfill": [
      "createBlocks",
      "int64",
      "textparse.NewOpenMetricsParser",
      "getMinAndMaxTimestamps",
      "fmt.Errorf"
    ],
    "backfillOpenMetrics": [
      "backfill",
      "os.Stat",
      "inputFile.Bytes",
      "fmt.Errorf",
      "fileutil.OpenMmapFile",
      "inputFile.Close",
      "os.MkdirAll",
      "checkErr",
      "info.Mode",
      "os.ReadFile"
    ],
    "baremetalDiscovery.refresh": [
      "baremetal.NewAPI",
      "scw.StringPtr",
      "strings.Join",
      "ip.Version.String",
      "ip.Address.String",
      "scw.WithAllPages",
      "scw.WithContext",
      "net.JoinHostPort",
      "append",
      "api.ListServers",
      "api.ListOffers",
      "model.LabelValue",
      "server.Zone.String",
      "strconv.FormatUint",
      "fmt.Errorf",
      "api.ListOS",
      "len",
      "uint64"
    ],
    "benchExpFmt": [
      "expfmt.NewDecoder",
      "b.SetBytes",
      "b.ReportAllocs",
      "b.ResetTimer",
      "make",
      "bytes.NewReader",
      "expfmt.NewFormat",
      "model.TimeFromUnixNano",
      "sdec.Decode",
      "b.Fatal",
      "int64",
      "len",
      "errors.Is"
    ],
    "benchParse": [
      "labels.NewSymbolTable",
      "errors.Is",
      "p.Series",
      "p.Labels",
      "b.Fatal",
      "int64",
      "b.ReportAllocs",
      "b.ResetTimer",
      "p.Unit",
      "p.CreatedTimestamp",
      "NewPromParser",
      "NewProtobufParser",
      "WithOMParserCTSeriesSkipped",
      "b.SetBytes",
      "p.Next",
      "p.Type",
      "p.Help",
      "NewOpenMetricsParser",
      "NewNHCBParser",
      "len",
      "newParserFn",
      "p.Histogram",
      "p.Exemplar"
    ],
    "benchQuery": [
      "ss.Warnings",
      "q.Select",
      "ss.Next",
      "s.Labels",
      "ss.Err",
      "b.ResetTimer",
      "b.ReportAllocs",
      "it.At",
      "require.Equal",
      "ss.At",
      "s.Iterator",
      "it.Next",
      "require.NoError",
      "context.Background",
      "require.Empty"
    ],
    "benchmarkAppender": [
      "b.ReportAllocs",
      "b.ResetTimer",
      "b.Fatalf",
      "c.Appender",
      "a.Append",
      "int64",
      "deltas",
      "append",
      "newChunk"
    ],
    "benchmarkDrain": [
      "iter.At",
      "require.NoError",
      "makeSeriesSet",
      "iter.Next",
      "seriesSet.At",
      "iter.Err",
      "require.NotEqual",
      "seriesSet.Next",
      "?.Iterator"
    ],
    "benchmarkIterator": [
      "b.ReportAllocs",
      "errors.Is",
      "require.NoError",
      "int64",
      "float64",
      "b.Fatalf",
      "b.ResetTimer",
      "append",
      "chunk.Iterator",
      "it.At",
      "newChunk",
      "chunk.Appender",
      "a.Append",
      "it.Next",
      "it.Err"
    ],
    "benchmarkLabelValuesWithMatchers": [
      "labels.MustNewMatcher",
      "context.Background",
      "b.Run",
      "labelValuesWithMatchers",
      "require.NoError"
    ],
    "benchmarkPostingsForMatchers": [
      "b.Run",
      "b.ReportAllocs",
      "b.ResetTimer",
      "PostingsForMatchers",
      "require.NoError",
      "context.Background",
      "labels.MustNewMatcher"
    ],
    "benchmarkSelect": [
      "labels.MustNewMatcher",
      "b.Run",
      "context.Background",
      "ss.Next",
      "ss.Err",
      "b.ResetTimer",
      "fmt.Sprintf",
      "queryable.Querier",
      "int64",
      "require.NoError",
      "q.Select",
      "q.Close"
    ],
    "benchmarkWrite": [
      "b.storage.Close",
      "b.stopProfiling",
      "os.MkdirTemp",
      "os.Open",
      "b.ingestScrapes",
      "dur.Seconds",
      "measureTime",
      "promslog.New",
      "filepath.Join",
      "tsdb.Open",
      "st.DisableCompactions",
      "os.MkdirAll",
      "tsdb.NewDBStats",
      "f.Close",
      "fmt.Println",
      "float64",
      "os.RemoveAll",
      "int64",
      "readPrometheusLabels",
      "b.startProfiling"
    ],
    "bigEndianPostings.At": [
      "storage.SeriesRef"
    ],
    "bigEndianPostings.Next": [
      "len",
      "binary.BigEndian.Uint32"
    ],
    "bigEndianPostings.Seek": [
      "binary.BigEndian.Uint32",
      "uint32",
      "storage.SeriesRef",
      "len",
      "sort.Search"
    ],
    "bitRangeUint": [
      "bits.LeadingZeros64"
    ],
    "blockBaseQuerier.Close": [
      "q.tombstones.Close",
      "errs.Err",
      "errors.New",
      "tsdb_errors.NewMulti",
      "q.index.Close",
      "q.chunks.Close"
    ],
    "blockBaseQuerier.LabelNames": [
      "q.index.LabelNames"
    ],
    "blockBaseQuerier.LabelValues": [
      "q.index.SortedLabelValues"
    ],
    "blockBaseSeriesSet.Err": [
      "b.p.Err"
    ],
    "blockBaseSeriesSet.Next": [
      "len",
      "make",
      "append",
      "b.builder.Labels",
      "b.p.Next",
      "errors.Is",
      "fmt.Errorf",
      "?.IsSubrange",
      "intervals.Add",
      "b.index.Series",
      "b.p.At",
      "b.tombstones.Get"
    ],
    "blockChunkQuerier.Select": [
      "selectChunkSeriesSet"
    ],
    "blockChunkReader.Close": [
      "r.b.pendingReaders.Done"
    ],
    "blockDirs": [
      "os.ReadDir",
      "isBlockDir",
      "append",
      "filepath.Join",
      "f.Name"
    ],
    "blockIndexReader.Close": [
      "r.b.pendingReaders.Done"
    ],
    "blockIndexReader.LabelNames": [
      "len",
      "r.b.LabelNames",
      "labelNamesWithMatchers"
    ],
    "blockIndexReader.LabelNamesFor": [
      "r.ir.LabelNamesFor"
    ],
    "blockIndexReader.LabelValueFor": [
      "r.ir.LabelValueFor"
    ],
    "blockIndexReader.LabelValues": [
      "labelValuesWithMatchers",
      "len",
      "r.ir.LabelValues",
      "fmt.Errorf",
      "r.b.Meta"
    ],
    "blockIndexReader.Postings": [
      "r.b.Meta",
      "r.ir.Postings",
      "fmt.Errorf"
    ],
    "blockIndexReader.PostingsForAllLabelValues": [
      "r.ir.PostingsForAllLabelValues"
    ],
    "blockIndexReader.PostingsForLabelMatching": [
      "r.ir.PostingsForLabelMatching"
    ],
    "blockIndexReader.Series": [
      "r.b.Meta",
      "r.ir.Series",
      "fmt.Errorf"
    ],
    "blockIndexReader.ShardedPostings": [
      "r.ir.ShardedPostings"
    ],
    "blockIndexReader.SortedLabelValues": [
      "fmt.Errorf",
      "r.b.Meta",
      "len",
      "r.ir.SortedLabelValues",
      "r.LabelValues",
      "slices.Sort"
    ],
    "blockIndexReader.SortedPostings": [
      "r.ir.SortedPostings"
    ],
    "blockIndexReader.Symbols": [
      "r.ir.Symbols"
    ],
    "blockQuerier.Select": [
      "selectSeriesSet"
    ],
    "blockSeriesEntry.Iterator": [
      "pi.reset"
    ],
    "blockTombstoneReader.Close": [
      "r.b.pendingReaders.Done"
    ],
    "blockedResponseRecorder.Flush": [
      "br.r.Flush"
    ],
    "blockedResponseRecorder.Header": [
      "br.r.Header"
    ],
    "blockedResponseRecorder.Write": [
      "close",
      "br.r.Write"
    ],
    "blockedResponseRecorder.WriteHeader": [
      "br.r.WriteHeader"
    ],
    "boundedSamples": [
      "len",
      "?.T",
      "s.T"
    ],
    "bstream.writeBit": [
      "append",
      "len"
    ],
    "bstream.writeBits": [
      "uint",
      "byte",
      "b.writeByte",
      "b.writeBit"
    ],
    "bstream.writeByte": [
      "append",
      "len"
    ],
    "bstreamReader.ReadByte": [
      "b.readBits",
      "byte"
    ],
    "bstreamReader.loadNextBuffer": [
      "len",
      "binary.BigEndian.Uint64",
      "int",
      "uint64",
      "uint",
      "uint8"
    ],
    "bstreamReader.readBit": [
      "b.loadNextBuffer",
      "b.readBitFast"
    ],
    "bstreamReader.readBitFast": [
      "uint64"
    ],
    "bstreamReader.readBits": [
      "b.loadNextBuffer",
      "b.readBitsFast",
      "uint64"
    ],
    "bstreamReader.readBitsFast": [
      "uint64"
    ],
    "bucketIterator.Next": [
      "len",
      "int"
    ],
    "bucketLimitAppender.AppendHistogram": [
      "fh.ReduceResolution",
      "app.Appender.AppendHistogram",
      "len",
      "histogram.IsExponentialSchema",
      "h.ReduceResolution"
    ],
    "buildClients": [
      "url.Parse",
      "logger.Error",
      "influxdb.NewClient",
      "graphite.NewClient",
      "append",
      "os.Exit",
      "url.String",
      "prometheus.MustRegister",
      "logger.Info",
      "logger.With",
      "opentsdb.NewClient"
    ],
    "buildDependencyMap": [
      "labels.MustNewMatcher",
      "nameMatcher.Matches",
      "other.Name",
      "append",
      "make",
      "len",
      "parser.Inspect",
      "rule.Query"
    ],
    "buildTestChunks": [
      "require.NoError",
      "a.Append",
      "int64",
      "make",
      "c.Appender",
      "c.Bytes",
      "chunkenc.NewXORChunk",
      "float64",
      "append"
    ],
    "buildTimeSeries": [
      "filter",
      "len"
    ],
    "buildTracerProvider": [
      "resource.WithTelemetrySDK",
      "tracesdk.NewTracerProvider",
      "cancel",
      "resource.WithSchemaURL",
      "resource.WithAttributes",
      "semconv.ServiceVersionKey.String",
      "resource.WithProcessRuntimeDescription",
      "tracesdk.WithResource",
      "resource.New",
      "tracesdk.WithBatcher",
      "tracesdk.WithSampler",
      "tracesdk.ParentBased",
      "tracesdk.TraceIDRatioBased",
      "context.Background",
      "tp.Shutdown",
      "getClient",
      "semconv.ServiceNameKey.String",
      "context.WithTimeout",
      "otlptrace.New"
    ],
    "buildV2TimeSeries": [
      "filter",
      "len"
    ],
    "buildV2WriteRequest": [
      "buildV2TimeSeries",
      "logger.Debug",
      "req.OptimizedMarshal",
      "compression.Encode"
    ],
    "buildWriteRequest": [
      "compression.Encode",
      "pBuf.Bytes",
      "buildTimeSeries",
      "logger.Debug",
      "proto.NewBuffer",
      "pBuf.Reset",
      "pBuf.Marshal"
    ],
    "byBucketBoundsData.Len": [
      "len"
    ],
    "byGroupSource.Len": [
      "len"
    ],
    "byLabels.Len": [
      "len"
    ],
    "byLabels.Less": [
      "labels.Compare"
    ],
    "calcClassicBucketStatistics": [
      "sortMatrix",
      "getBucketCountsAtTime",
      "float64",
      "len"
    ],
    "calcNativeBucketStatistics": [
      "make",
      "len",
      "makeBucketBounds",
      "float64"
    ],
    "calculateChecksum": [
      "require.NotEmpty",
      "GenerateChecksum",
      "require.NoError"
    ],
    "callbackCloser.Close": [
      "c.fn"
    ],
    "captureLogsToTLog": [
      "t.Log",
      "scanner.Text",
      "scanner.Err",
      "t.Logf",
      "bufio.NewScanner",
      "scanner.Scan"
    ],
    "chainSampleIterator.At": [
      "panic",
      "c.curr.At"
    ],
    "chainSampleIterator.AtFloatHistogram": [
      "panic",
      "c.curr.AtFloatHistogram"
    ],
    "chainSampleIterator.AtHistogram": [
      "panic",
      "c.curr.AtHistogram"
    ],
    "chainSampleIterator.AtT": [
      "panic",
      "c.curr.AtT"
    ],
    "chainSampleIterator.Err": [
      "iter.Err",
      "errs.Err",
      "tsdb_errors.NewMulti",
      "errs.Add"
    ],
    "chainSampleIterator.Next": [
      "len",
      "c.curr.Seek",
      "iter.Next",
      "iter.Err",
      "heap.Push",
      "c.curr.Next",
      "c.curr.Err",
      "c.curr.AtT",
      "?.AtT",
      "heap.Pop"
    ],
    "chainSampleIterator.Seek": [
      "iter.Seek",
      "iter.Err",
      "heap.Push",
      "len",
      "heap.Pop",
      "c.curr.AtT",
      "c.curr.Seek"
    ],
    "checkAndExpandSeriesSet": [
      "trace.WithAttributes",
      "attribute.String",
      "expandSeriesSet",
      "newHistogramStatsSeries",
      "attribute.Int",
      "len",
      "checkAndExpandSeriesSet",
      "trace.SpanFromContext",
      "span.AddEvent",
      "e.String"
    ],
    "checkCRC32": [
      "fmt.Errorf",
      "crc32.Checksum",
      "uint32"
    ],
    "checkConfig": [
      "filepath.Glob",
      "append",
      "cfg.GetScrapeConfigs",
      "checkSDFile",
      "checkTargetGroupsForAlertmanager",
      "strings.Contains",
      "checkFileExists",
      "len",
      "checkTLSConfig",
      "checkTargetGroupsForScrapeConfig",
      "fmt.Println",
      "config.LoadFile",
      "fmt.Printf",
      "promslog.NewNopLogger",
      "fmt.Errorf"
    ],
    "checkCurrVal": [
      "it.AtHistogram",
      "tsdbutil.GenerateTestHistogram",
      "it.AtFloatHistogram",
      "tsdbutil.GenerateTestFloatHistogram",
      "it.At",
      "int64",
      "float64",
      "panic",
      "require.Equal"
    ],
    "checkDuplicates": [
      "compare",
      "append",
      "ruleMetric",
      "rules.FromMaps",
      "len",
      "sort.Sort"
    ],
    "checkErr": [
      "fmt.Fprintln"
    ],
    "checkExperimental": [
      "fmt.Fprintln",
      "os.Exit"
    ],
    "checkFileExists": [
      "os.Stat"
    ],
    "checkHistogramBuckets": [
      "fmt.Errorf",
      "BC",
      "len"
    ],
    "checkHistogramCustomBounds": [
      "math.Inf",
      "fmt.Errorf",
      "int",
      "len"
    ],
    "checkHistogramSpans": [
      "fmt.Errorf",
      "int"
    ],
    "checkInitialUnalignedOffset": [
      "currentFileOffset",
      "enableDirectIO",
      "f.Fd"
    ],
    "checkMetricsExtended": [
      "mf.GetName",
      "sort.SliceStable",
      "p.TextToMetricFamilies",
      "fmt.Errorf",
      "mf.GetType",
      "float64",
      "make",
      "len",
      "append"
    ],
    "checkOneTarget": [
      "require.Len",
      "require.Equal",
      "string",
      "require.NotEmpty"
    ],
    "checkRuleGroups": [
      "len",
      "lintSettings.lintDuplicateRules",
      "checkDuplicates",
      "fmt.Sprintf",
      "n.label.Range",
      "fmt.Errorf"
    ],
    "checkRules": [
      "fmt.Fprintln",
      "e.Error",
      "errors.Is",
      "checkRuleGroups",
      "fmt.Printf",
      "fmt.Println",
      "rulefmt.ParseFile"
    ],
    "checkRulesFromStdin": [
      "errors.Is",
      "checkRuleGroups",
      "fmt.Printf",
      "fmt.Println",
      "io.ReadAll",
      "fmt.Fprintln",
      "rulefmt.Parse",
      "e.Error"
    ],
    "checkSDFile": [
      "fmt.Errorf",
      "os.Open",
      "fd.Close",
      "io.ReadAll",
      "filepath.Ext",
      "strings.ToLower",
      "json.Unmarshal",
      "yaml.UnmarshalStrict"
    ],
    "checkStaticTargets": [
      "CheckTargetAddress"
    ],
    "checkTLSConfig": [
      "fmt.Errorf",
      "checkFileExists",
      "len"
    ],
    "checkTargetGroupsForAlertmanager": [
      "notifier.AlertmanagerFromGroup"
    ],
    "checkTargetGroupsForScrapeConfig": [
      "labels.EmptyLabels",
      "scrape.TargetsFromGroup",
      "len",
      "labels.NewBuilder"
    ],
    "checkpointDir": [
      "filepath.Join",
      "fmt.Sprintf"
    ],
    "checkpointNum": [
      "len",
      "fmt.Errorf",
      "strconv.Atoi",
      "strings.Split",
      "filepath.Base"
    ],
    "chunkBuffer.clear": [
      "?.Lock",
      "make",
      "?.Unlock"
    ],
    "chunkBuffer.get": [
      "?.RLock",
      "?.RUnlock"
    ],
    "chunkBuffer.put": [
      "?.Lock",
      "?.Unlock"
    ],
    "chunkDir": [
      "filepath.Join"
    ],
    "chunkIteratorHeap.Len": [
      "len"
    ],
    "chunkIteratorHeap.Less": [
      "?.At"
    ],
    "chunkIteratorHeap.Pop": [
      "len"
    ],
    "chunkIteratorHeap.Push": [
      "append"
    ],
    "chunkPos.bytesToWriteForChunk": [
      "uint64",
      "varint.UvarintSize"
    ],
    "chunkPos.getNextChunkRef": [
      "newChunkDiskMapperRef",
      "uint64",
      "len",
      "chk.Bytes",
      "f.bytesToWriteForChunk",
      "f.shouldCutNewFile",
      "f.toNewFile"
    ],
    "chunkQuerier.Select": [
      "storage.NewSeriesSetToChunkSet",
      "q.querier.Select"
    ],
    "chunkQuerierAdapter.Select": [
      "q.genericQuerier.Select"
    ],
    "chunkSeriesByLabel.Len": [
      "len"
    ],
    "chunkSeriesByLabel.Less": [
      "labels.Compare",
      "?.Labels"
    ],
    "chunkSeriesEntry.Iterator": [
      "pi.reset"
    ],
    "chunkSeriesMergerAdapter.Merge": [
      "make",
      "len",
      "append",
      "a.VerticalChunkSeriesMergeFunc"
    ],
    "chunkSeriesSetAdapter.At": [
      "a.genericSeriesSet.At"
    ],
    "chunkSetToSeriesSet.At": [
      "ChainedSeriesMerge"
    ],
    "chunkSetToSeriesSet.Err": [
      "c.ChunkSeriesSet.Err"
    ],
    "chunkSetToSeriesSet.Next": [
      "append",
      "?.Labels",
      "c.iter.At",
      "c.Err",
      "c.ChunkSeriesSet.Next",
      "c.ChunkSeriesSet.At",
      "c.iter.Err",
      "?.Iterator",
      "c.iter.Next",
      "newChunkToSeriesDecoder"
    ],
    "chunkSnapshotDir": [
      "fmt.Sprintf"
    ],
    "chunkWriteQueue.addJob": [
      "errors.New",
      "delete",
      "c.jobs.push",
      "c.adds.Inc",
      "c.isRunningMtx.Lock",
      "c.isRunningMtx.Unlock",
      "c.chunkRefMapMtx.Lock",
      "len",
      "c.chunkRefMapMtx.Unlock"
    ],
    "chunkWriteQueue.get": [
      "c.chunkRefMapMtx.RLock",
      "c.chunkRefMapMtx.RUnlock",
      "c.gets.Inc"
    ],
    "chunkWriteQueue.processJob": [
      "c.chunkRefMapMtx.Lock",
      "c.chunkRefMapMtx.Unlock",
      "delete",
      "c.completed.Inc",
      "c.shrinkChunkRefMap",
      "c.writeChunk",
      "job.callback"
    ],
    "chunkWriteQueue.queueIsEmpty": [
      "c.queueSize"
    ],
    "chunkWriteQueue.queueIsFull": [
      "c.queueSize"
    ],
    "chunkWriteQueue.queueSize": [
      "c.chunkRefMapMtx.Lock",
      "c.chunkRefMapMtx.Unlock",
      "len"
    ],
    "chunkWriteQueue.shrinkChunkRefMap": [
      "len",
      "time.Now",
      "now.Sub",
      "make",
      "c.shrink.Inc"
    ],
    "chunkWriteQueue.start": [
      "c.isRunningMtx.Lock",
      "c.isRunningMtx.Unlock",
      "c.workerWg.Add",
      "c.workerWg.Done",
      "c.jobs.pop",
      "c.processJob"
    ],
    "chunkWriteQueue.stop": [
      "c.isRunningMtx.Lock",
      "c.isRunningMtx.Unlock",
      "c.jobs.close",
      "c.workerWg.Wait"
    ],
    "chunkedSeries.Iterator": [
      "newChunkedSeriesIterator",
      "csIt.reset"
    ],
    "chunkedSeries.Labels": [
      "labels.NewScratchBuilder",
      "s.ToLabels"
    ],
    "chunkedSeriesIterator.At": [
      "it.cur.At"
    ],
    "chunkedSeriesIterator.AtFloatHistogram": [
      "it.cur.AtFloatHistogram"
    ],
    "chunkedSeriesIterator.AtHistogram": [
      "it.cur.AtHistogram"
    ],
    "chunkedSeriesIterator.AtT": [
      "it.cur.AtT"
    ],
    "chunkedSeriesIterator.Next": [
      "len",
      "it.cur.Next",
      "it.AtT",
      "it.resetIterator",
      "it.Next"
    ],
    "chunkedSeriesIterator.Seek": [
      "it.cur.Next",
      "len",
      "sort.Search",
      "it.resetIterator",
      "it.cur.AtT"
    ],
    "chunkedSeriesIterator.reset": [
      "len",
      "it.resetIterator"
    ],
    "chunkedSeriesIterator.resetIterator": [
      "len",
      "chunkenc.FromData",
      "chunkenc.Encoding",
      "decodedChunk.Iterator",
      "chunkenc.NewNopIterator"
    ],
    "chunkedSeriesSet.Next": [
      "errors.Is",
      "io.Copy",
      "s.respBody.Close",
      "s.cancel",
      "s.chunkedReader.NextProto"
    ],
    "clamp": [
      "append",
      "math.Max",
      "math.Min",
      "el.Metric.DropReserved"
    ],
    "cleanupSnapshot": [
      "io.ReadAll",
      "require.NoError",
      "json.Unmarshal",
      "require.NotEmpty",
      "os.Remove",
      "filepath.Join"
    ],
    "cleanupTestResponse": [
      "resp.Body.Close",
      "io.Copy",
      "require.NoError"
    ],
    "clearBeginEndText": [
      "len"
    ],
    "clientGoRequestMetricAdapter.Increment": [
      "?.Inc",
      "clientGoRequestResultMetricVec.WithLabelValues"
    ],
    "clientGoRequestMetricAdapter.Observe": [
      "?.Observe",
      "clientGoRequestLatencyMetricVec.WithLabelValues",
      "u.EscapedPath",
      "latency.Seconds"
    ],
    "clientGoRequestMetricAdapter.RegisterWithK8sGoClient": [
      "metrics.Register"
    ],
    "clientGoWorkqueueMetricsProvider.NewAddsMetric": [
      "clientGoWorkqueueAddsMetricVec.WithLabelValues"
    ],
    "clientGoWorkqueueMetricsProvider.NewDepthMetric": [
      "clientGoWorkqueueDepthMetricVec.WithLabelValues"
    ],
    "clientGoWorkqueueMetricsProvider.NewLatencyMetric": [
      "clientGoWorkqueueLatencyMetricVec.WithLabelValues"
    ],
    "clientGoWorkqueueMetricsProvider.NewLongestRunningProcessorSecondsMetric": [
      "clientGoWorkqueueLongestRunningProcessorMetricVec.WithLabelValues"
    ],
    "clientGoWorkqueueMetricsProvider.NewUnfinishedWorkSecondsMetric": [
      "clientGoWorkqueueUnfinishedWorkSecondsMetricVec.WithLabelValues"
    ],
    "clientGoWorkqueueMetricsProvider.NewWorkDurationMetric": [
      "clientGoWorkqueueWorkDurationMetricVec.WithLabelValues"
    ],
    "clientGoWorkqueueMetricsProvider.RegisterWithK8sGoClient": [
      "workqueue.SetProvider"
    ],
    "closeAllFromMap": [
      "tsdb_errors.NewMulti",
      "errs.Add",
      "c.Close",
      "errs.Err"
    ],
    "collectResultAppender.Append": [
      "append",
      "storage.SeriesRef",
      "rand.Uint64",
      "a.next.Append",
      "a.mtx.Lock",
      "a.mtx.Unlock"
    ],
    "collectResultAppender.AppendCTZeroSample": [
      "a.Append"
    ],
    "collectResultAppender.AppendExemplar": [
      "a.mtx.Lock",
      "a.mtx.Unlock",
      "append",
      "a.next.AppendExemplar"
    ],
    "collectResultAppender.AppendHistogram": [
      "a.mtx.Unlock",
      "append",
      "a.next.AppendHistogram",
      "a.mtx.Lock"
    ],
    "collectResultAppender.AppendHistogramCTZeroSample": [
      "a.AppendHistogram"
    ],
    "collectResultAppender.Commit": [
      "append",
      "a.next.Commit",
      "a.mtx.Lock",
      "a.mtx.Unlock"
    ],
    "collectResultAppender.Rollback": [
      "a.mtx.Lock",
      "a.mtx.Unlock",
      "a.next.Rollback"
    ],
    "collectResultAppender.String": [
      "sb.WriteString",
      "fmt.Sprintf",
      "sb.String"
    ],
    "collectResultAppender.UpdateMetadata": [
      "a.mtx.Lock",
      "a.mtx.Unlock",
      "append",
      "storage.SeriesRef",
      "rand.Uint64",
      "a.next.UpdateMetadata"
    ],
    "compactBuckets": [
      "int",
      "uint32",
      "len",
      "emptyBucketsHere",
      "append",
      "int32",
      "copy",
      "make"
    ],
    "compactChunkIterator.Err": [
      "tsdb_errors.NewMulti",
      "errs.Add",
      "iter.Err",
      "errs.Err"
    ],
    "compactChunkIterator.Next": [
      "?.At",
      "next.Chunk.Bytes",
      "NewSeriesToChunkEncoder",
      "c.mergeFunc",
      "heap.Pop",
      "prev.Chunk.Bytes",
      "append",
      "?.Iterator",
      "iter.Next",
      "len",
      "iter.At",
      "heap.Push",
      "newChunkToSeriesDecoder",
      "labels.EmptyLabels",
      "iter.Err",
      "panic",
      "bytes.Equal"
    ],
    "compare": [
      "strings.Compare",
      "labels.Compare"
    ],
    "compareNativeHistogram": [
      "almost.Equal",
      "exp.UsesCustomBuckets",
      "histogram.FloatBucketsMatch",
      "spansMatch",
      "floatBucketsMatch"
    ],
    "compareOverTime": [
      "samples.Metric.Get",
      "annos.Add",
      "annotations.NewHistogramIgnoredInMixedRangeInfo",
      "?.PositionRange",
      "aggrOverTime",
      "compareFn",
      "float64",
      "len"
    ],
    "compareRuleTypes.Len": [
      "len"
    ],
    "compareRuleTypes.Less": [
      "compare"
    ],
    "compareSeries": [
      "aS.H",
      "eH.Copy",
      "eS.Type",
      "eS.H",
      "aS.Type",
      "eS.F",
      "eFH.Copy",
      "len",
      "eS.FH",
      "aS.T",
      "aS.F",
      "aS.FH",
      "require.Equal",
      "eS.T"
    ],
    "compileCORSRegexString": [
      "relabel.NewRegexp"
    ],
    "compressedResponseWriter.Close": [
      "zlibWriter.Flush",
      "gzipWriter.Flush",
      "closer.Close"
    ],
    "compressedResponseWriter.Write": [
      "c.writer.Write"
    ],
    "computeAlignmentOffset": [
      "len",
      "panic",
      "int",
      "uintptr",
      "unsafe.Pointer"
    ],
    "computeChunkEndTime": [
      "float64",
      "int64",
      "math.Floor"
    ],
    "computeExternalURL": [
      "startsOrEndsWithQuote",
      "errors.New",
      "url.Parse",
      "strings.TrimRight",
      "strings.HasPrefix",
      "os.Hostname",
      "net.SplitHostPort",
      "fmt.Sprintf"
    ],
    "concatLabels": [
      "make",
      "len",
      "append",
      "fmt.Sprintf",
      "strings.Join"
    ],
    "concatenatingChunkIterator.Err": [
      "tsdb_errors.NewMulti",
      "errs.Add",
      "iter.Err",
      "errs.Err"
    ],
    "concatenatingChunkIterator.Next": [
      "len",
      "?.Next",
      "?.At",
      "?.Err",
      "c.Next"
    ],
    "concreteSeries.Iterator": [
      "csi.reset",
      "newConcreteSeriesIterator"
    ],
    "concreteSeries.Labels": [
      "c.labels.Copy"
    ],
    "concreteSeriesIterator.At": [
      "panic"
    ],
    "concreteSeriesIterator.AtFloatHistogram": [
      "fh.ToFloatHistogram",
      "panic"
    ],
    "concreteSeriesIterator.AtHistogram": [
      "h.ToIntHistogram",
      "panic"
    ],
    "concreteSeriesIterator.Next": [
      "len"
    ],
    "concreteSeriesIterator.Seek": [
      "len",
      "sort.Search",
      "getHistogramValType"
    ],
    "concreteSeriesSet.Next": [
      "len"
    ],
    "concurrentDBuffer.zstdDecBuf": [
      "b.onceZstd.Do",
      "zstd.NewReader"
    ],
    "concurrentEBuffer.zstdEncBuf": [
      "b.onceZstd.Do",
      "zstd.NewWriter"
    ],
    "concurrentRuleEvalController.Allow": [
      "c.sema.TryAcquire"
    ],
    "concurrentRuleEvalController.Done": [
      "c.sema.Release"
    ],
    "concurrentRuleEvalController.SplitGroupIntoBatches": [
      "append",
      "r.NoDependentRules",
      "len",
      "r.NoDependencyRules"
    ],
    "consulMetrics.Register": [
      "m.metricRegisterer.RegisterMetrics"
    ],
    "consulMetrics.Unregister": [
      "m.metricRegisterer.UnregisterMetrics"
    ],
    "consulService.watch": [
      "strings.Join",
      "opts.WithContext",
      "time.Sleep",
      "model.LabelValue",
      "time.Since",
      "make",
      "model.LabelName",
      "health.ServiceMultipleTags",
      "srv.serviceRPCDuration.Observe",
      "elapsed.Seconds",
      "ctx.Done",
      "len",
      "net.JoinHostPort",
      "srv.logger.Debug",
      "time.Now",
      "srv.logger.Error",
      "srv.rpcFailuresCount.Inc",
      "strconv.Itoa",
      "serviceNode.Checks.AggregatedStatus",
      "strutil.SanitizeLabelName",
      "append"
    ],
    "consumePostings": [
      "p.Next",
      "p.At",
      "p.Err"
    ],
    "contains": [
      "len"
    ],
    "containsInOrder": [
      "len",
      "strings.Contains",
      "containsInOrderMulti"
    ],
    "containsInOrderMulti": [
      "strings.Index",
      "len"
    ],
    "containsStringMatcher.Matches": [
      "strings.Index",
      "m.left.Matches",
      "m.right.Matches",
      "len",
      "strings.HasSuffix",
      "strings.HasPrefix"
    ],
    "contextDone": [
      "contextErr",
      "ctx.Err",
      "ctx.Err",
      "errors.Is",
      "promql.ErrQueryCanceled",
      "promql.ErrQueryTimeout"
    ],
    "contextErr": [
      "ErrQueryTimeout",
      "errors.Is",
      "ErrQueryCanceled"
    ],
    "convertBucketsLayout": [
      "len",
      "append",
      "int32",
      "int64",
      "appendDelta"
    ],
    "convertKumaUserLabels": [
      "strutil.SanitizeLabelName",
      "model.LabelName",
      "model.LabelValue"
    ],
    "convertKumaV1MonitoringAssignment": [
      "convertKumaUserLabels",
      "model.LabelValue",
      "?.Merge",
      "append"
    ],
    "convertTimeStamp": [
      "int64"
    ],
    "convertToEndpoints": [
      "fmt.Errorf"
    ],
    "convertToNode": [
      "fmt.Errorf"
    ],
    "convertToPod": [
      "fmt.Errorf"
    ],
    "convertToService": [
      "fmt.Errorf"
    ],
    "copyChunk": [
      "c.Bytes",
      "make",
      "len",
      "copy",
      "chunkenc.FromData",
      "c.Encoding"
    ],
    "copyFile": [
      "os.ReadFile",
      "os.WriteFile"
    ],
    "copyWithCounterReset": [
      "s.fh.Copy",
      "s.h.Copy"
    ],
    "countLinesInFile": [
      "os.ReadFile",
      "bytes.Count"
    ],
    "countOpenReads": [
      "iso.TraverseOpenReads"
    ],
    "countSeriesLifecycleCallback.PostCreation": [
      "c.created.Inc"
    ],
    "countSeriesLifecycleCallback.PostDeletion": [
      "c.deleted.Add",
      "int64",
      "len"
    ],
    "countSpans": [
      "int"
    ],
    "countStaleNaN": [
      "require.True",
      "st.Querier",
      "time.Now",
      "require.NoError",
      "querier.Close",
      "labels.NewMatcher",
      "readSeriesSet",
      "?.Unix",
      "querier.Select",
      "context.Background",
      "?.String",
      "labels.FromStrings",
      "value.IsStaleNaN"
    ],
    "counterAddNonZero": [
      "?.Add",
      "v.WithLabelValues"
    ],
    "counterResetAsString": [
      "panic"
    ],
    "createArgRow": [
      "len",
      "fmt.Sprintf"
    ],
    "createAttributes": [
      "settings.PromoteResourceAttributes.promotedAttributes",
      "len",
      "attributes.Range",
      "sort.Stable",
      "value.AsString",
      "labelNamer.Build",
      "resource.Attributes",
      "resourceAttrs.Get",
      "scope.attributes.Len",
      "attributes.Len",
      "make",
      "append",
      "v.AsString",
      "fmt.Sprintf",
      "serviceNamespace.AsString",
      "instance.AsString",
      "log.Println",
      "slices.Contains",
      "ByLabelName",
      "scope.attributes.Range",
      "serviceName.AsString"
    ],
    "createBlock": [
      "require.NoError",
      "CreateBlock",
      "promslog.NewNopLogger"
    ],
    "createBlockFromHead": [
      "require.NoError",
      "compactor.Write",
      "head.MaxTime",
      "?.String",
      "NewLeveledCompactor",
      "context.Background",
      "promslog.NewNopLogger",
      "filepath.Join",
      "os.MkdirAll",
      "head.MinTime",
      "require.Len"
    ],
    "createBlockFromOOOHead": [
      "NewLeveledCompactor",
      "require.NoError",
      "os.MkdirAll",
      "compactor.Write",
      "head.MinTime",
      "head.MaxTime",
      "?.String",
      "context.Background",
      "promslog.NewNopLogger",
      "require.Len",
      "filepath.Join"
    ],
    "createBlocks": [
      "?.Err",
      "fmt.Errorf",
      "context.Background",
      "p.Labels",
      "lb.Reset",
      "w.Close",
      "w.Appender",
      "lb.Labels",
      "printBlocks",
      "getCompatibleBlockDuration",
      "tsdb.OpenDBReadOnly",
      "promslog.NewNopLogger",
      "p.Series",
      "db.Close",
      "labels.NewBuilder",
      "textparse.NewOpenMetricsParser",
      "w.Flush",
      "tsdb_errors.NewMulti",
      "labels.NewSymbolTable",
      "db.Blocks",
      "tsdb.NewBlockWriter",
      "p.Next",
      "errors.Is",
      "lb.Set",
      "app.Append",
      "b.Meta",
      "labels.EmptyLabels",
      "app.Commit",
      "block.Compare"
    ],
    "createChunk": [
      "rand.Int63",
      "int64",
      "make",
      "require.NoError",
      "close",
      "HeadSeriesRef",
      "rand.Intn",
      "hrw.WriteChunk",
      "randomChunk"
    ],
    "createChunkDiskMapper": [
      "require.False",
      "hrw.IterateAllChunks",
      "require.True",
      "t.TempDir",
      "NewChunkDiskMapper",
      "chunkenc.NewPool",
      "require.NoError"
    ],
    "createClient": [
      "ovh.NewClient",
      "string"
    ],
    "createDummyTimeSeries": [
      "b.Labels",
      "r.Float64",
      "rand.New",
      "b.Set",
      "strconv.Itoa",
      "lbls.Range",
      "labels.FromStrings",
      "rand.NewSource",
      "labels.NewBuilder",
      "append"
    ],
    "createExemplars": [
      "fmt.Sprintf",
      "chunks.HeadSeriesRef",
      "int64",
      "float64",
      "labels.FromStrings",
      "append",
      "make"
    ],
    "createExportRequest": [
      "?.Attributes",
      "h.ExplicitBounds",
      "h.Exemplars",
      "m.Sum",
      "m.SetEmptyGauge",
      "?.AppendEmpty",
      "request.Metrics",
      "h.SetSum",
      "pmetricotlp.NewExportRequest",
      "m.Histogram",
      "h.BucketCounts",
      "m.SetEmptySum",
      "point.SetTimestamp",
      "m.Gauge",
      "rm.Resource",
      "time.Now",
      "m.SetUnit",
      "?.DataPoints",
      "?.SetIsMonotonic",
      "metrics.AppendEmpty",
      "m.SetDescription",
      "h.SetTimestamp",
      "point.SetDoubleValue",
      "generateAttributes",
      "?.Metrics",
      "m.SetName",
      "?.SetAggregationTemporality",
      "?.FromRaw",
      "point.Exemplars",
      "?.ResourceMetrics",
      "m.SetEmptyHistogram",
      "generateExemplars",
      "append",
      "point.Attributes",
      "fmt.Sprintf",
      "h.Attributes",
      "pcommon.NewTimestampFromTime",
      "h.SetCount",
      "?.PutStr",
      "rm.ScopeMetrics"
    ],
    "createFakeReaderAndIterables": [
      "make",
      "len",
      "chunks.ChunkRef",
      "?.T",
      "append"
    ],
    "createFakeReaderAndNotPopulatedChunks": [
      "len",
      "chunks.ChunkFromSamples",
      "chunks.ChunkRef",
      "append",
      "make"
    ],
    "createFileReader": [
      "require.NoError",
      "s.labels.Range",
      "iw.AddSeries",
      "ir.Close",
      "tb.TempDir",
      "NewWriter",
      "storage.SeriesRef",
      "slices.Sort",
      "tb.Helper",
      "filepath.Join",
      "append",
      "iw.AddSymbol",
      "iw.Close",
      "NewFileReader",
      "tb.Cleanup"
    ],
    "createFlagRow": [
      "valueType.Elem",
      "valueType.FieldByName",
      "strings.ReplaceAll",
      "len",
      "fmt.Sprintf",
      "reflect.TypeOf",
      "valueType.Kind"
    ],
    "createHead": [
      "NewHead",
      "context.Background",
      "head.Appender",
      "s.Iterator",
      "app.Commit",
      "it.AtHistogram",
      "DefaultHeadOptions",
      "storage.SeriesRef",
      "it.At",
      "it.AtFloatHistogram",
      "it.Err",
      "require.NoError",
      "it.Next",
      "app.Append",
      "s.Labels",
      "fmt.Errorf",
      "typ.String",
      "app.AppendHistogram"
    ],
    "createHeadForBenchmarkSelect": [
      "db.Close",
      "db.Head",
      "context.Background",
      "addSeries",
      "DefaultOptions",
      "Open",
      "require.NoError",
      "b.Cleanup",
      "app.Commit",
      "b.TempDir",
      "h.Appender"
    ],
    "createHeadWithOOOSamples": [
      "prom_testutil.ToFloat64",
      "require.LessOrEqual",
      "DefaultHeadOptions",
      "context.Background",
      "it.Err",
      "float64",
      "append",
      "require.GreaterOrEqual",
      "head.Appender",
      "storage.SeriesRef",
      "it.Next",
      "it.At",
      "sample.T",
      "sample.F",
      "opts.OutOfOrderTimeWindow.Store",
      "len",
      "s.Iterator",
      "app.Commit",
      "app.Append",
      "require.Equal",
      "NewHead",
      "require.NoError",
      "make",
      "s.Labels"
    ],
    "createHistograms": [
      "make",
      "fmt.Sprintf",
      "int64",
      "chunks.HeadSeriesRef",
      "hist.ToFloat",
      "append",
      "labels.FromStrings"
    ],
    "createIdxChkReaders": [
      "app.AppendHistogram",
      "chunkenc.NewXORChunk",
      "app.Append",
      "postings.Add",
      "mi.WritePostings",
      "sort.Slice",
      "append",
      "require.NotNil",
      "mi.AddSeries",
      "storage.SeriesRef",
      "labels.Compare",
      "len",
      "chunk.Appender",
      "require.Nil",
      "postings.Iter",
      "labels.FromMap",
      "index.NewMemPostings",
      "make",
      "chunkenc.NewFloatHistogramChunk",
      "app.AppendFloatHistogram",
      "require.NoError",
      "chunkenc.NewHistogramChunk",
      "ls.Range",
      "mockChunkReader",
      "newMockIndex",
      "int64"
    ],
    "createLabels": [
      "make",
      "copy",
      "append",
      "len"
    ],
    "createLabelsForAbsentFunction": [
      "make",
      "len",
      "b.Set",
      "b.Del",
      "b.Labels",
      "labels.NewBuilder",
      "labels.EmptyLabels"
    ],
    "createMockAzureClient": [
      "armcompute.NewVirtualMachineScaleSetVMsClient",
      "fake.NewVirtualMachinesServerTransport",
      "armcompute.NewVirtualMachineScaleSetsClient",
      "require.NoError",
      "fake.NewVirtualMachineScaleSetVMsServerTransport",
      "defaultMockVMSSServer",
      "defaultMockInterfaceServer",
      "fake.NewVirtualMachineScaleSetsServerTransport",
      "armnetwork.NewInterfacesClient",
      "fakenetwork.NewInterfacesServerTransport",
      "t.Helper",
      "defaultMockVMServer",
      "defaultMockVMSSVMServer",
      "armcompute.NewVirtualMachinesClient"
    ],
    "createMultiRuleTestFiles": [
      "os.WriteFile"
    ],
    "createOTelEmptyMetricForTranslator": [
      "pmetric.NewMetric",
      "m.SetName"
    ],
    "createOTelExponentialHistogramForTranslator": [
      "m.SetEmptyExponentialHistogram",
      "createOTelMetricForTranslator"
    ],
    "createOTelGaugeForTranslator": [
      "createOTelMetricForTranslator",
      "m.SetEmptyGauge"
    ],
    "createOTelHistogramForTranslator": [
      "createOTelMetricForTranslator",
      "m.SetEmptyHistogram"
    ],
    "createOTelMetricForTranslator": [
      "pmetric.NewMetric",
      "m.SetName",
      "m.SetUnit",
      "m.SetDescription"
    ],
    "createOTelSumForTranslator": [
      "createOTelMetricForTranslator",
      "m.SetEmptySum",
      "sum.SetIsMonotonic"
    ],
    "createOTelSummaryForTranslator": [
      "createOTelMetricForTranslator",
      "m.SetEmptySummary"
    ],
    "createOtelEmptyType": [
      "pmetric.NewMetricSlice",
      "metrics.AppendEmpty",
      "m.SetName"
    ],
    "createOtelExplicitHistogram": [
      "metrics.AppendEmpty",
      "dp.ExplicitBounds",
      "hist.DataPoints",
      "dp.SetCount",
      "dp.BucketCounts",
      "hist.SetAggregationTemporality",
      "?.AppendEmpty",
      "?.FromRaw",
      "?.PutStr",
      "dp.Attributes",
      "m.SetEmptyHistogram",
      "dp.SetSum",
      "dp.SetTimestamp",
      "pcommon.NewTimestampFromTime",
      "pmetric.NewMetricSlice",
      "m.SetName"
    ],
    "createOtelExponentialHistogram": [
      "?.PutStr",
      "metrics.AppendEmpty",
      "m.SetName",
      "m.SetEmptyExponentialHistogram",
      "dp.SetCount",
      "pcommon.NewTimestampFromTime",
      "dp.SetTimestamp",
      "dp.Attributes",
      "pmetric.NewMetricSlice",
      "hist.SetAggregationTemporality",
      "?.AppendEmpty",
      "hist.DataPoints",
      "dp.SetSum"
    ],
    "createOtelGauge": [
      "?.PutStr",
      "pmetric.NewMetricSlice",
      "m.SetName",
      "?.AppendEmpty",
      "dp.SetTimestamp",
      "pcommon.NewTimestampFromTime",
      "metrics.AppendEmpty",
      "m.SetEmptyGauge",
      "gauge.DataPoints",
      "dp.SetDoubleValue",
      "dp.Attributes"
    ],
    "createOtelSum": [
      "sum.SetAggregationTemporality",
      "pcommon.NewTimestampFromTime",
      "pmetric.NewMetricSlice",
      "metrics.AppendEmpty",
      "m.SetName",
      "m.SetEmptySum",
      "?.AppendEmpty",
      "sum.DataPoints",
      "dp.SetDoubleValue",
      "dp.SetTimestamp",
      "?.PutStr",
      "dp.Attributes"
    ],
    "createOtelSummary": [
      "m.SetEmptySummary",
      "?.PutStr",
      "m.SetName",
      "dp.SetCount",
      "qv.SetQuantile",
      "dp.SetTimestamp",
      "pcommon.NewTimestampFromTime",
      "pmetric.NewMetricSlice",
      "metrics.AppendEmpty",
      "dp.QuantileValues",
      "qv.SetValue",
      "?.AppendEmpty",
      "summary.DataPoints",
      "dp.SetSum",
      "dp.Attributes"
    ],
    "createPromClassicHistogramSeries": [
      "ts.UnixMilli"
    ],
    "createPromFloatSeries": [
      "ts.UnixMilli"
    ],
    "createPromNHCBSeries": [
      "ts.UnixMilli"
    ],
    "createPromNativeHistogramSeries": [
      "ts.UnixMilli"
    ],
    "createPromSummarySeries": [
      "ts.UnixMilli"
    ],
    "createPrometheusAPI": [
      "regexp.MustCompile",
      "?.WithPrefix",
      "promqltest.NewTestEngineWithOpts",
      "NewAPI",
      "errors.New",
      "route.New",
      "api.Register",
      "t.Helper",
      "promslog.NewNopLogger"
    ],
    "createProtoTimeseriesWithOld": [
      "fmt.Sprintf",
      "float64",
      "r.Intn",
      "make",
      "rand.New",
      "rand.NewSource",
      "int64"
    ],
    "createRandomFloatHistogram": [
      "createRandomSpans"
    ],
    "createRandomSpans": [
      "make",
      "int",
      "rng.Int31n",
      "uint32",
      "append",
      "float64"
    ],
    "createSeriesMetadata": [
      "len",
      "append",
      "uint8",
      "make"
    ],
    "createSingleRuleTestFiles": [
      "os.WriteFile"
    ],
    "createTargetGroup": [
      "model.LabelValue",
      "strutil.SanitizeLabelName",
      "model.LabelName",
      "targetsForApp"
    ],
    "createTestAgentDB": [
      "t.TempDir",
      "remote.NewStorage",
      "promslog.NewNopLogger",
      "t.Cleanup",
      "require.NoError",
      "rs.Close",
      "Open",
      "t.Helper"
    ],
    "createTestHTTPResourceClient": [
      "createTestHTTPServer",
      "require.Equal",
      "responder",
      "NewHTTPResourceClient",
      "require.NoError"
    ],
    "createTestHTTPServer": [
      "httptest.NewTLSServer",
      "require.NotEmpty",
      "protoJSONUnmarshalOptions.Unmarshal",
      "http.HandlerFunc",
      "require.Equal",
      "r.Header.Get",
      "responder",
      "w.Write",
      "w.WriteHeader",
      "protoJSONMarshalOptions.Marshal",
      "io.ReadAll",
      "io.Copy",
      "r.Body.Close",
      "require.NoError"
    ],
    "createTestProtoBuf": [
      "make",
      "proto.Marshal",
      "binary.PutUvarint",
      "uint64",
      "len",
      "t.Helper",
      "require.NoError",
      "proto.UnmarshalText",
      "buf.Write"
    ],
    "createTestProtoBufHistogram": [
      "binary.PutUvarint",
      "uint64",
      "len",
      "buf.Write",
      "make",
      "require.NoError",
      "proto.UnmarshalText",
      "proto.Marshal"
    ],
    "createTimeseries": [
      "append",
      "chunks.HeadSeriesRef",
      "int64",
      "float64",
      "lb.Add",
      "lb.Sort",
      "labels.NewScratchBuilder",
      "len",
      "lb.Labels",
      "lb.Reset",
      "rand.Shuffle",
      "make",
      "fmt.Sprintf"
    ],
    "createTimeseriesWithOldSamples": [
      "make",
      "len",
      "fmt.Sprintf",
      "time.Now",
      "int64",
      "lb.Labels",
      "labels.NewScratchBuilder",
      "?.UnixMilli",
      "lb.Reset",
      "lb.Add",
      "timestamp.FromTime",
      "?.Add",
      "append",
      "chunks.HeadSeriesRef",
      "float64",
      "lb.Sort"
    ],
    "createTimeseriesWithRandomLabelCount": [
      "rand.New",
      "chunks.HeadSeriesRef",
      "?.UnixMilli",
      "?.Add",
      "time.Now",
      "r.Float64",
      "lb.Add",
      "lb.Labels",
      "rand.NewSource",
      "append",
      "r.Intn",
      "labels.NewScratchBuilder",
      "strconv.Itoa"
    ],
    "cumulativeBucketIterator.At": [
      "math.Inf"
    ],
    "cumulativeBucketIterator.Next": [
      "c.Next",
      "int64",
      "uint64",
      "len",
      "getBound"
    ],
    "currentFileOffset": [
      "f.Seek",
      "fmt.Errorf",
      "int"
    ],
    "cutSegmentFile": [
      "f.Seek",
      "dirFile.Sync",
      "f.Close",
      "errs.Err",
      "make",
      "nextSequenceFile",
      "tsdb_errors.NewMulti",
      "errs.Add",
      "fileutil.Preallocate",
      "binary.BigEndian.PutUint32",
      "dirFile.Name",
      "os.OpenFile",
      "os.RemoveAll",
      "f.Write",
      "fileutil.Rename",
      "int64",
      "fmt.Errorf"
    ],
    "dateWrapper": [
      "?.UTC",
      "time.Unix",
      "int64",
      "el.Metric.DropReserved",
      "len",
      "append",
      "f"
    ],
    "dbAdapter.Stats": [
      "?.Stats",
      "a.Head"
    ],
    "dbAppender.Commit": [
      "a.db.head.compactable",
      "a.Appender.Commit"
    ],
    "dbAppender.GetRef": [
      "g.GetRef",
      "labels.EmptyLabels"
    ],
    "dbMetrics.Unregister": [
      "m.r.Unregister"
    ],
    "debugAll": [
      "debugWrite",
      "fmt.Fprintln"
    ],
    "debugMetrics": [
      "debugWrite",
      "fmt.Fprintln"
    ],
    "debugPprof": [
      "debugWrite",
      "fmt.Fprintln"
    ],
    "debugWrite": [
      "endPointGroup.postProcess",
      "archiver.write",
      "fmt.Printf",
      "fmt.Errorf",
      "fmt.Println",
      "http.Get",
      "io.ReadAll",
      "newTarGzFileWriter",
      "res.Body.Close",
      "archiver.close"
    ],
    "decodeSeriesFromChunkSnapshot": [
      "dec.Err",
      "dec.Uvarint",
      "chunkenc.Encoding",
      "dec.UvarintBytes",
      "chunkenc.FromData",
      "dec.Be64Float64",
      "chunks.HeadSeriesRef",
      "dec.Be64",
      "d.DecodeLabels",
      "record.DecodeHistogram",
      "record.DecodeFloatHistogram",
      "fmt.Errorf",
      "dec.Be64int64",
      "make",
      "dec.Byte",
      "len",
      "copy"
    ],
    "decodeSize": [
      "int"
    ],
    "decodeString": [
      "int",
      "decodeVarintRest",
      "t.ToName",
      "decodeSize"
    ],
    "decodeTombstonesSnapshotRecord": [
      "dec.Byte",
      "fmt.Errorf",
      "tombstones.Decode",
      "dec.UvarintBytes"
    ],
    "decodeVarint": [
      "int",
      "decodeVarintRest"
    ],
    "decodeVarintRest": [
      "int"
    ],
    "dedicatedServerDiscovery.getSource": [
      "fmt.Sprintf",
      "d.config.Name",
      "d.getService"
    ],
    "dedicatedServerDiscovery.refresh": [
      "err.Error",
      "ip.String",
      "strconv.Itoa",
      "ip.Is4",
      "ip.Is6",
      "model.LabelValue",
      "strconv.FormatBool",
      "strconv.FormatInt",
      "getDedicatedServerList",
      "getDedicatedServerDetails",
      "d.logger.Warn",
      "createClient",
      "fmt.Sprintf",
      "d.getSource",
      "append"
    ],
    "deepLen": [
      "len"
    ],
    "defaultMockInterfaceServer": [
      "resp.SetResponse"
    ],
    "defaultMockVMSSServer": [
      "resp.AddPage"
    ],
    "defaultMockVMSSVMServer": [
      "resp.AddPage"
    ],
    "defaultMockVMServer": [
      "resp.AddPage"
    ],
    "defaultVMSSVMWithIDAndName": [
      "to.Ptr",
      "new",
      "armcompute.VirtualMachineSizeTypes"
    ],
    "defaultVMWithIDAndName": [
      "armcompute.VirtualMachineSizeTypes",
      "to.Ptr",
      "new"
    ],
    "delayedResponseHTTPHandler": [
      "w.Write",
      "snappy.Encode",
      "time.Sleep",
      "?.Set",
      "w.Header",
      "proto.Marshal",
      "require.NoError"
    ],
    "deletableBlocks": [
      "make",
      "slices.SortFunc",
      "b.Meta",
      "a.Meta",
      "block.Meta",
      "BeyondTimeRetention",
      "BeyondSizeRetention"
    ],
    "deleteNonBlocks": [
      "filepath.Join",
      "dir.Name",
      "fmt.Errorf",
      "os.ReadDir",
      "isBlockDir",
      "os.RemoveAll"
    ],
    "deletedSamples": [
      "append",
      "make",
      "len",
      "r.InBounds",
      "s.T"
    ],
    "deltasToCounts": [
      "make",
      "len",
      "float64",
      "float64",
      "make",
      "len"
    ],
    "dependencyMap.dependencies": [
      "len",
      "slices.Contains",
      "append"
    ],
    "dependencyMap.isIndependent": [
      "m.dependencies",
      "len",
      "m.dependents"
    ],
    "describeAPIFunc": [
      "?.Pointer",
      "reflect.ValueOf",
      "strings.Split",
      "strings.LastIndex",
      "?.Name",
      "runtime.FuncForPC"
    ],
    "desymbolizeLabels": [
      "b.Reset",
      "len",
      "b.Add",
      "b.Sort",
      "b.Labels"
    ],
    "detectHistogramStatsDecoding": [
      "parser.Inspect",
      "len",
      "errors.New"
    ],
    "detectReset": [
      "prevIt.strippedAt",
      "currIt.Next",
      "currIt.strippedAt",
      "prevIt.Next"
    ],
    "determineColumnsToRender": [
      "len",
      "append"
    ],
    "dialContextWithRoundRobinDNS.dialContextFn": [
      "len",
      "net.JoinHostPort",
      "dc.rand.Intn",
      "net.SplitHostPort",
      "dc.dialContext",
      "dc.resolver.LookupHost"
    ],
    "digitVal": [
      "int"
    ],
    "directIORqmtsForTest": [
      "os.OpenFile",
      "path.Join",
      "tb.TempDir",
      "require.NoError",
      "fileDirectIORqmts"
    ],
    "directIOWriter.Available": [
      "len"
    ],
    "directIOWriter.Flush": [
      "b.flush",
      "b.fillInitialOffsetGap"
    ],
    "directIOWriter.Reset": [
      "fileDirectIORqmts",
      "alignedBlock",
      "checkInitialUnalignedOffset"
    ],
    "directIOWriter.Write": [
      "b.fillInitialOffsetGap",
      "b.flush",
      "b.Available",
      "b.Buffered",
      "b.canDirectIOWrite",
      "errors.Join",
      "len",
      "b.directIOWrite",
      "copy"
    ],
    "directIOWriter.canDirectIOWrite": [
      "isAligned"
    ],
    "directIOWriter.directIOWrite": [
      "len",
      "b.f.Write",
      "int64",
      "b.f.Seek",
      "errors.Join",
      "fmt.Errorf"
    ],
    "directIOWriter.fillInitialOffsetGap": [
      "b.f.Write",
      "copy",
      "errors.Join",
      "enableDirectIO",
      "b.f.Fd",
      "min"
    ],
    "directIOWriter.flush": [
      "copy",
      "errors.Join",
      "b.directIOWrite"
    ],
    "discovery.Run": [
      "time.Tick",
      "io.ReadAll",
      "io.Copy",
      "resp.Body.Close",
      "time.Duration",
      "fmt.Sprintf",
      "json.Unmarshal",
      "make",
      "append",
      "http.Get",
      "d.logger.Error",
      "time.Sleep",
      "d.parseServiceNodes",
      "ctx.Done"
    ],
    "discovery.parseServiceNodes": [
      "io.Copy",
      "io.ReadAll",
      "json.Unmarshal",
      "strconv.Itoa",
      "model.LabelName",
      "strutil.SanitizeLabelName",
      "append",
      "make",
      "len",
      "strings.Join",
      "net.JoinHostPort",
      "model.LabelValue",
      "resp.Body.Close"
    ],
    "displayHistogram": [
      "make",
      "strconv.Itoa",
      "strings.Repeat",
      "fmt.Println",
      "len",
      "fmt.Printf",
      "slices.Sort",
      "generateBucket"
    ],
    "distribution.String": [
      "fmt.Sprintf"
    ],
    "distribution.update": [
      "float64"
    ],
    "dnsMetrics.Register": [
      "m.metricRegisterer.RegisterMetrics"
    ],
    "dnsMetrics.Unregister": [
      "m.metricRegisterer.UnregisterMetrics"
    ],
    "do": [
      "client.Do",
      "req.WithContext"
    ],
    "dumpSamples": [
      "len",
      "ss.Warnings",
      "ws.AsErrors",
      "append",
      "formatter",
      "q.Close",
      "q.Select",
      "storage.NewMergeSeriesSet",
      "ss.Err",
      "tsdb.OpenDBReadOnly",
      "?.Err",
      "tsdb_errors.NewMulti",
      "db.Close",
      "db.Querier",
      "parser.ParseMetricSelectors"
    ],
    "durationMilliseconds": [
      "int64",
      "int64"
    ],
    "durationToInt64Millis": [
      "int64"
    ],
    "durationVisitor.Visit": [
      "v.calculateDuration"
    ],
    "durationVisitor.calculateDuration": [
      "v.evaluateDurationExpr",
      "fmt.Errorf",
      "expr.PositionRange",
      "time.Duration"
    ],
    "durationVisitor.evaluateDurationExpr": [
      "expr.PositionRange",
      "math.Pow",
      "v.evaluateDurationExpr",
      "v.step.Seconds",
      "fmt.Errorf",
      "math.Mod",
      "float64",
      "math.Min",
      "math.Max"
    ],
    "emptyStringMatcher.Matches": [
      "len"
    ],
    "enableDirectIO": [
      "fileStatusFlags",
      "unix.FcntlInt",
      "fmt.Errorf"
    ],
    "encodeSize": [
      "uint8",
      "byte"
    ],
    "encodeTombstonesToSnapshotRecord": [
      "buf.PutByte",
      "tombstones.Encode",
      "fmt.Errorf",
      "buf.PutUvarintBytes",
      "buf.Get"
    ],
    "encodeVarint": [
      "uint8",
      "encodeVarintSlow",
      "uint64"
    ],
    "encodeVarintMetrics": [
      "sovMetrics",
      "uint8"
    ],
    "encodeVarintRemote": [
      "sovRemote",
      "uint8"
    ],
    "encodeVarintSlow": [
      "sizeVarint",
      "uint8"
    ],
    "encodeVarintTypes": [
      "sovTypes",
      "uint8",
      "sovTypes",
      "uint8"
    ],
    "encodedRecord": [
      "make",
      "byte",
      "binary.BigEndian.PutUint16",
      "uint16",
      "len",
      "binary.BigEndian.PutUint32",
      "crc32.Checksum",
      "append"
    ],
    "endpointSliceSource": [
      "endpointSliceSourceFromNamespaceAndName"
    ],
    "endpointsSource": [
      "endpointsSourceFromNamespaceAndName"
    ],
    "ensureMonotonicAndIgnoreSmallDeltas": [
      "len",
      "almost.Equal"
    ],
    "entry.String": [
      "fmt.Sprintf"
    ],
    "equalFloatSamples": [
      "labels.Equal",
      "math.Float64bits"
    ],
    "equalMultiStringMapMatcher.Matches": [
      "len",
      "toNormalisedLower",
      "matcher.Matches"
    ],
    "equalMultiStringMapMatcher.add": [
      "toNormalisedLower"
    ],
    "equalMultiStringMapMatcher.addPrefix": [
      "panic",
      "len",
      "strings.ToLower",
      "append"
    ],
    "equalMultiStringMapMatcher.setMatches": [
      "len",
      "make",
      "append"
    ],
    "equalMultiStringSliceMatcher.Matches": [
      "slices.Contains",
      "strings.EqualFold"
    ],
    "equalMultiStringSliceMatcher.add": [
      "append"
    ],
    "equalMultiStringSliceMatcher.addPrefix": [
      "panic"
    ],
    "equalStringMatcher.Matches": [
      "strings.EqualFold"
    ],
    "errChunkQuerier.Select": [
      "storage.ErrChunkSeriesSet"
    ],
    "errDuplicateSampleForTimestamp.Error": [
      "fmt.Sprintf"
    ],
    "errLoadWbl.Error": [
      "e.err.Error"
    ],
    "errQuerier.LabelNames": [
      "errors.New"
    ],
    "errQuerier.LabelValues": [
      "errors.New"
    ],
    "errQuerier.Select": [
      "storage.ErrSeriesSet"
    ],
    "errWithWarnings.Error": [
      "e.err.Error"
    ],
    "erringBReader.Chunks": [
      "errors.New"
    ],
    "erringBReader.Index": [
      "errors.New"
    ],
    "erringBReader.Tombstones": [
      "errors.New"
    ],
    "errorAppender.Append": [
      "lset.Get",
      "app.collectResultAppender.Append"
    ],
    "errorTestQuerier.Select": [
      "storage.ErrSeriesSet"
    ],
    "escape": [
      "len",
      "make",
      "result.WriteString",
      "string",
      "result.WriteByte",
      "bytes.NewBuffer",
      "fmt.Fprintf",
      "strings.IndexByte",
      "result.String"
    ],
    "escapeSingleQuotes": [
      "strings.ReplaceAll"
    ],
    "escapeSlashes": [
      "strings.ReplaceAll"
    ],
    "evalCmd.checkAnnotations": [
      "annos.CountWarningsAndInfo",
      "fmt.Errorf",
      "errors.Is",
      "append",
      "err.Error",
      "validateExpectedAnnotationsOfType",
      "len",
      "annos.AsErrors"
    ],
    "evalCmd.checkExpectedFailure": [
      "ev.expectedFailRegexp.MatchString",
      "ev.expectedFailRegexp.String",
      "len",
      "?.CheckMatch",
      "?.String",
      "actual.Error",
      "fmt.Errorf"
    ],
    "evalCmd.compareResult": [
      "v.Metric.Hash",
      "v.H.Compact",
      "panic",
      "s.Metric.Hash",
      "formatSeriesResult",
      "len",
      "almost.Equal",
      "expected.H.TestExpression",
      "HistogramTestExpression",
      "fmt.Errorf",
      "val.String",
      "assertMatrixSorted",
      "ev.start.Add",
      "ts.After",
      "exp0.Histogram.TestExpression",
      "time.Duration",
      "append",
      "compareNativeHistogram",
      "actual.H.Compact",
      "expH.Compact",
      "actual.H.TestExpression",
      "ev.isOrdered",
      "errors.New",
      "ts.UnixNano",
      "int64",
      "expected.H.Compact"
    ],
    "evalCmd.expectMetric": [
      "m.Hash"
    ],
    "evalCmd.isFail": [
      "len"
    ],
    "evalCmd.isOrdered": [
      "len"
    ],
    "evaluator.Eval": [
      "ev.recover",
      "ev.eval",
      "ev.cleanupMetricLabels"
    ],
    "evaluator.VectorAnd": [
      "panic",
      "len",
      "append"
    ],
    "evaluator.VectorBinop": [
      "metric.Hash",
      "append",
      "panic",
      "make",
      "rs.Metric.MatchLabels",
      "ev.errorf",
      "duplSample.Metric.String",
      "len",
      "resultMetric",
      "metric.DropReserved",
      "delete",
      "matchedLabels.String",
      "rs.Metric.String",
      "vectorElemBinop"
    ],
    "evaluator.VectorOr": [
      "panic",
      "len",
      "append"
    ],
    "evaluator.VectorUnless": [
      "panic",
      "len",
      "append"
    ],
    "evaluator.VectorscalarBinop": [
      "lhsSample.Metric.DropReserved",
      "append",
      "vectorElemBinop",
      "op.IsComparisonOperator",
      "changesMetricSchema"
    ],
    "evaluator.aggregation": [
      "?.Div",
      "quantile",
      "h.Copy",
      "annos.Add",
      "math.NaN",
      "make",
      "?.Metric.Get",
      "fmt.Errorf",
      "aggr.histogramValue.Compact",
      "math.Sqrt",
      "ev.nextValues",
      "group.histogramValue.Add",
      "handleAggregationError",
      "append",
      "panic",
      "group.histogramValue.Copy",
      "left.Sub",
      "int",
      "annotations.NewHistogramIgnoredInAggregationInfo",
      "e.Expr.PositionRange",
      "math.IsNaN",
      "math.IsInf",
      "kahanSumInc",
      "annotations.NewMixedFloatsHistogramsAggWarning",
      "addToSeries"
    ],
    "evaluator.aggregationCountValues": [
      "enh.resetBuilder",
      "enh.lb.Set",
      "enh.lb.Labels",
      "float64",
      "strconv.FormatFloat",
      "s.H.String",
      "generateGroupingKey",
      "generateGroupingLabels",
      "append"
    ],
    "evaluator.aggregationK": [
      "advanceRemainingSeries",
      "make",
      "annotations.NewHistogramIgnoredInAggregationInfo",
      "math.IsNaN",
      "panic",
      "append",
      "lbls.Hash",
      "int64",
      "annos.Add",
      "heap.Fix",
      "addToSeries",
      "sort.Sort",
      "heap.Push",
      "fmt.Errorf",
      "int",
      "sort.Reverse",
      "len",
      "ratiosampler.AddRatioSample",
      "add",
      "ev.nextValues"
    ],
    "evaluator.cleanupMetricLabels": [
      "v.Type",
      "?.Metric.DropReserved",
      "mat.ContainsSameLabelset",
      "ev.errorf",
      "vec.ContainsSameLabelset"
    ],
    "evaluator.combineWithInfoSeries": [
      "make",
      "lset.MatchLabels",
      "len",
      "append",
      "ev.error",
      "putHPointSlice",
      "labels.NewScratchBuilder",
      "lb.Add",
      "lb.Sort",
      "int",
      "string",
      "lb.Labels",
      "max",
      "result.TotalSamples",
      "addToSeries",
      "lb.Reset",
      "is.Metric.Map",
      "totalHPointSize",
      "sigFunction",
      "copy",
      "contextDone",
      "sample.Metric.Hash",
      "?.Range",
      "ErrTooManySamples",
      "putFPointSlice",
      "s.Metric.Map",
      "ev.samplesStats.UpdatePeak",
      "ev.errorf",
      "?.Bytes",
      "ev.gatherVector",
      "ev.combineWithInfoVector"
    ],
    "evaluator.combineWithInfoVector": [
      "len",
      "make",
      "ev.errorf",
      "enh.lb.Get",
      "enh.lb.Labels",
      "clear",
      "enh.resetBuilder",
      "fmt.Errorf",
      "enh.lb.Set",
      "infoLbls.Len",
      "m.Matches",
      "int64",
      "append",
      "is.Metric.Validate",
      "ev.error",
      "errors.New",
      "s.Metric.Map",
      "bs.Metric.Map",
      "infoLbls.Range"
    ],
    "evaluator.error": [
      "panic"
    ],
    "evaluator.errorf": [
      "ev.error",
      "fmt.Errorf"
    ],
    "evaluator.eval": [
      "ev.rangeEval",
      "reuseOrGetFPointSlices",
      "reuseOrGetHPointSlices",
      "mat.ContainsSameLabelset",
      "ev.VectorUnless",
      "ev.samplesStats.UpdatePeakFromSubquery",
      "model.LabelName",
      "checkAndExpandSeriesSet",
      "?.Labels",
      "ev.samplesStats.IncrementSamplesAtStep",
      "int64",
      "?.Metric.DropReserved",
      "ev.rangeEvalAgg",
      "ev.eval",
      "ev.evalSubquery",
      "storage.NewBuffer",
      "?.Mul",
      "?.String",
      "ev.samplesStats.UpdatePeak",
      "it.ReduceDelta",
      "errors.New",
      "?.Start",
      "?.IsValid",
      "ev.aggregationCountValues",
      "durationMilliseconds",
      "putFPointSlice",
      "scalarBinop",
      "handleVectorBinopError",
      "attribute.String",
      "len",
      "strings.HasSuffix",
      "otel.Tracer",
      "ss.ShortString",
      "slices.Sort",
      "result.TotalSamples",
      "call",
      "make",
      "?.PositionRange",
      "?.H.Copy",
      "stats.InnerEvalTime.SpanOperation",
      "sigf",
      "ev.evalInfo",
      "warnings.Add",
      "putMatrixSelectorHPointSlice",
      "signatureFunc",
      "ev.evalLabelReplace",
      "newFParams",
      "fmt.Errorf",
      "annotations.NewPossibleNonCounterLabelInfo",
      "e.LHS.Type",
      "e.RHS.Type",
      "ev.VectorscalarBinop",
      "newEv.eval",
      "int",
      "ev.error",
      "unwrapParenExpr",
      "ev.rangeEvalTimestampFunctionOverVectorSelector",
      "string",
      "ev.VectorBinop",
      "e.PositionRange",
      "contextDone",
      "ev.VectorOr",
      "point.size",
      "reflect.TypeOf",
      "annotations.NewPossibleNonCounterInfo",
      "panic",
      "ev.noStepSubqueryIntervalFn",
      "metric.DropReserved",
      "ev.errorf",
      "append",
      "createLabelsForAbsentFunction",
      "attribute.Float64",
      "ev.evalSeries",
      "unwrapStepInvariantExpr",
      "?.Metric.Get",
      "ev.samplesStats.NewChild",
      "span.End",
      "totalHPointSize",
      "ev.matrixIterSlice",
      "ErrTooManySamples",
      "ev.VectorAnd",
      "labels.EmptyLabels",
      "setOffsetForAtModifier",
      "ev.samplesStats.IncrementSamplesAtTimestamp",
      "ev.evalLabelJoin",
      "warnings.Merge",
      "s.Iterator",
      "it.Reset",
      "ev.matrixSelector",
      "span.SetAttributes"
    ],
    "evaluator.evalInfo": [
      "s.Metric.Get",
      "m.Matches",
      "ev.infoSelectHints",
      "labels.MustNewMatcher",
      "ev.fetchInfoSeries",
      "ev.error",
      "annots.Merge",
      "ev.combineWithInfoSeries",
      "ev.eval",
      "len",
      "append"
    ],
    "evaluator.evalLabelJoin": [
      "lb.Set",
      "stringFromArg",
      "make",
      "model.LabelName",
      "labels.NewBuilder",
      "len",
      "ev.eval",
      "strings.Join",
      "matrix.ContainsSameLabelset",
      "ev.errorf",
      "?.IsValid",
      "fmt.Errorf",
      "lb.Reset",
      "lb.Labels",
      "panic",
      "labels.EmptyLabels",
      "el.Metric.Get"
    ],
    "evaluator.evalLabelReplace": [
      "fmt.Errorf",
      "el.Metric.Get",
      "labels.EmptyLabels",
      "lb.Reset",
      "regexp.Compile",
      "?.IsValid",
      "model.LabelName",
      "ev.eval",
      "regex.ExpandString",
      "lb.Set",
      "string",
      "lb.Labels",
      "stringFromArg",
      "panic",
      "labels.NewBuilder",
      "regex.FindStringSubmatchIndex",
      "matrix.ContainsSameLabelset",
      "ev.errorf"
    ],
    "evaluator.evalSeries": [
      "int",
      "it.Reset",
      "ErrTooManySamples",
      "reuseOrGetFPointSlices",
      "float64",
      "s.Labels",
      "point.size",
      "reuseOrGetHPointSlices",
      "make",
      "len",
      "storage.NewMemoizedEmptyIterator",
      "durationMilliseconds",
      "s.Iterator",
      "ev.samplesStats.UpdatePeak",
      "int64",
      "fmt.Errorf",
      "contextDone",
      "ev.error",
      "ev.vectorSelectorSingle",
      "ev.samplesStats.IncrementSamplesAtStep",
      "append"
    ],
    "evaluator.evalSubquery": [
      "mat.TotalSamples",
      "ev.samplesStats.NewChild",
      "ev.eval",
      "len",
      "append",
      "NewStorageSeries",
      "samplesStats.UpdatePeakFromSubquery",
      "make",
      "time.Duration"
    ],
    "evaluator.fetchInfoSeries": [
      "append",
      "len",
      "sb.Reset",
      "regexp.QuoteMeta",
      "ev.querier.Select",
      "s.Metric.Get",
      "sb.String",
      "labels.MustNewMatcher",
      "delete",
      "ev.evalSeries",
      "sb.WriteRune",
      "sb.WriteString",
      "slices.Delete",
      "expandSeriesSet",
      "make"
    ],
    "evaluator.gatherVector": [
      "len",
      "append",
      "ev.error",
      "ErrTooManySamples",
      "ev.samplesStats.UpdatePeak"
    ],
    "evaluator.infoSelectHints": [
      "durationMilliseconds",
      "errors.New",
      "parser.Inspect"
    ],
    "evaluator.matrixIterSlice": [
      "getMatrixSelectorHPoints",
      "cap",
      "buf.AtFloatHistogram",
      "?.size",
      "it.At",
      "len",
      "copy",
      "buf.AtT",
      "ev.samplesStats.UpdatePeak",
      "it.Buffer",
      "value.IsStaleNaN",
      "ErrTooManySamples",
      "buf.At",
      "getFPointSlice",
      "make",
      "it.Seek",
      "ev.error",
      "append",
      "it.AtT",
      "it.AtFloatHistogram",
      "totalHPointSize",
      "it.Err",
      "buf.Next"
    ],
    "evaluator.matrixSelector": [
      "checkAndExpandSeriesSet",
      "it.Reset",
      "ev.matrixIterSlice",
      "putFPointSlice",
      "durationMilliseconds",
      "len",
      "append",
      "putHPointSlice",
      "ev.samplesStats.IncrementSamplesAtTimestamp",
      "make",
      "storage.NewBuffer",
      "s.Iterator",
      "?.Labels",
      "int64",
      "ev.error",
      "fmt.Errorf",
      "contextDone",
      "totalHPointSize"
    ],
    "evaluator.nextValues": [
      "len"
    ],
    "evaluator.rangeEval": [
      "prepSeries",
      "ev.samplesStats.UpdatePeak",
      "ErrTooManySamples",
      "ev.errorf",
      "sample.Metric.Hash",
      "addToSeries",
      "make",
      "len",
      "putHPointSlice",
      "mat.TotalSamples",
      "append",
      "ev.error",
      "ev.gatherVector",
      "warnings.Merge",
      "contextDone",
      "funcCall",
      "result.TotalSamples",
      "putFPointSlice",
      "int",
      "e.Type",
      "result.ContainsSameLabelset",
      "ev.eval",
      "copy"
    ],
    "evaluator.rangeEvalAgg": [
      "annos.Merge",
      "slices.Clone",
      "generateGroupingKey",
      "ev.errorf",
      "aggExpr.Param.PositionRange",
      "contextDone",
      "ErrTooManySamples",
      "putFPointSlice",
      "len",
      "generateGroupingLabels",
      "append",
      "annos.Add",
      "ev.aggregationK",
      "ev.aggregation",
      "params.Max",
      "params.Min",
      "annotations.NewInvalidQuantileWarning",
      "math.NaN",
      "params.Next",
      "putHPointSlice",
      "make",
      "params.HasAnyNaN",
      "annotations.NewInvalidRatioWarning",
      "ev.error"
    ],
    "evaluator.rangeEvalTimestampFunctionOverVectorSelector": [
      "call",
      "ws.Merge",
      "fmt.Errorf",
      "ev.samplesStats.UpdatePeak",
      "ev.vectorSelectorSingle",
      "s.Labels",
      "len",
      "ev.rangeEval",
      "storage.NewMemoizedIterator",
      "durationMilliseconds",
      "append",
      "ev.samplesStats.IncrementSamplesAtTimestamp",
      "ErrTooManySamples",
      "ev.error",
      "make",
      "time.Duration",
      "checkAndExpandSeriesSet",
      "s.Iterator"
    ],
    "evaluator.recover": [
      "expr.String",
      "string",
      "fmt.Errorf",
      "ws.Merge",
      "recover",
      "make",
      "runtime.Stack",
      "ev.logger.Error"
    ],
    "evaluator.vectorSelectorSingle": [
      "fmt.Errorf",
      "it.PeekPrev",
      "value.IsStaleNaN",
      "it.Seek",
      "ev.error",
      "it.At",
      "it.AtFloatHistogram",
      "panic",
      "durationMilliseconds",
      "it.Err"
    ],
    "everyNTimes.checkContext": [
      "ctx.Err"
    ],
    "ewmaRate.incr": [
      "r.newEvents.Add"
    ],
    "ewmaRate.rate": [
      "r.mutex.Lock",
      "r.mutex.Unlock"
    ],
    "ewmaRate.tick": [
      "r.newEvents.Swap",
      "float64",
      "r.interval.Seconds",
      "r.mutex.Lock",
      "r.mutex.Unlock"
    ],
    "exemplarsForEncoding": [
      "make",
      "len",
      "append",
      "chunks.HeadSeriesRef"
    ],
    "expandFloatSpansAndBuckets": [
      "newBucketIterator",
      "ai.Next",
      "bi.Next",
      "append"
    ],
    "expandIntSpansAndBuckets": [
      "newBucketIterator",
      "ai.Next",
      "bi.Next",
      "append"
    ],
    "expandSeriesSet": [
      "it.Err",
      "it.Next",
      "ctx.Done",
      "ctx.Err",
      "append",
      "it.At",
      "it.Warnings",
      "append",
      "?.String",
      "ss.Warnings",
      "ss.Err",
      "ss.At",
      "series.Iterator",
      "it.At",
      "series.Labels",
      "ss.Next",
      "it.Next"
    ],
    "expandSpans": [
      "len",
      "cap",
      "append"
    ],
    "expandSpansBothWays": [
      "append",
      "int32",
      "ai.Next",
      "bi.Next",
      "addBucket",
      "newBucketIterator",
      "len"
    ],
    "expandSpansForward": [
      "newBucketIterator",
      "ai.Next",
      "bi.Next",
      "append"
    ],
    "expectCmd.CheckMatch": [
      "e.regex.MatchString"
    ],
    "expectCmd.String": [
      "e.regex.String"
    ],
    "expectHeaderValue": [
      "require.Equal",
      "t.Helper",
      "require.NotEmpty",
      "strconv.Atoi",
      "require.NoError"
    ],
    "expectedPodTargetGroups": [
      "fmt.Sprintf",
      "lv"
    ],
    "expectedPodTargetGroupsWithNodeMeta": [
      "expectedPodTargetGroups",
      "lv",
      "model.LabelName"
    ],
    "expectedTargetGroups": [
      "fmt.Sprintf",
      "lv"
    ],
    "explicitHistogramToCustomBucketsHistogram": [
      "?.AsRaw",
      "p.HasSum",
      "p.BucketCounts",
      "convertBucketsLayout",
      "int32",
      "p.Timestamp",
      "p.Flags",
      "p.Sum",
      "p.ExplicitBounds",
      "convertTimeStamp",
      "p.Count",
      "getBucketOffset",
      "?.NoRecordedValue",
      "math.Float64frombits",
      "annots.Add",
      "fmt.Errorf"
    ],
    "exponentialToNativeHistogram": [
      "p.HasSum",
      "annots.Add",
      "p.Scale",
      "fmt.Errorf",
      "convertBucketsLayout",
      "p.Positive",
      "p.Negative",
      "p.Flags",
      "?.BucketCounts",
      "?.Offset",
      "p.ZeroCount",
      "convertTimeStamp",
      "p.Sum",
      "p.Count",
      "?.AsRaw",
      "p.Timestamp",
      "?.NoRecordedValue",
      "math.Float64frombits"
    ],
    "extractFuncFromPath": [
      "len",
      "n.Op.String",
      "extractFuncFromPath"
    ],
    "extractGroupsFromPath": [
      "len"
    ],
    "extractMediaType": [
      "errors.New",
      "fmt.Errorf",
      "mime.ParseMediaType",
      "errors.Join"
    ],
    "extractPortMapping": [
      "len",
      "make"
    ],
    "extractQueryOpts": [
      "promql.NewPrometheusQueryOpts",
      "r.FormValue",
      "parseDuration",
      "fmt.Errorf"
    ],
    "extrapolatedRate": [
      "resultHistogram.Mul",
      "samples.Metric.Get",
      "?.PositionRange",
      "histogramRate",
      "float64",
      "ms.Range.Seconds",
      "append",
      "durationMilliseconds",
      "len",
      "annos.Add",
      "annotations.NewMixedFloatsHistogramsWarning",
      "annos.Merge"
    ],
    "fParams.Next": [
      "len"
    ],
    "fSample.FH": [
      "panic"
    ],
    "fSample.H": [
      "panic"
    ],
    "failingSeriesLifecycleCallback.PreCreation": [
      "errors.New"
    ],
    "fakeChunk.Reset": [
      "c.t.Fatal"
    ],
    "fakeChunksReader.ChunkOrIterable": [
      "fmt.Errorf"
    ],
    "fakeDB.Stats": [
      "tsdb.NewHead",
      "h.Stats",
      "os.MkdirTemp",
      "os.RemoveAll",
      "tsdb.DefaultHeadOptions"
    ],
    "fakeQuery.Exec": [
      "append"
    ],
    "fanout.Appender": [
      "f.primary.Appender",
      "make",
      "len",
      "append",
      "storage.Appender"
    ],
    "fanout.ChunkQuerier": [
      "q.Close",
      "errs.Err",
      "make",
      "len",
      "storage.ChunkQuerier",
      "tsdb_errors.NewMulti",
      "primary.Close",
      "errs.Add",
      "NewCompactingChunkSeriesMerger",
      "f.primary.ChunkQuerier",
      "append",
      "NewMergeChunkQuerier"
    ],
    "fanout.Close": [
      "f.primary.Close",
      "errs.Add",
      "s.Close",
      "errs.Err",
      "tsdb_errors.NewMulti"
    ],
    "fanout.Querier": [
      "make",
      "len",
      "storage.Querier",
      "errs.Err",
      "NewMergeQuerier",
      "f.primary.Querier",
      "tsdb_errors.NewMulti",
      "primary.Close",
      "errs.Add",
      "q.Close",
      "append"
    ],
    "fanout.StartTime": [
      "f.primary.StartTime",
      "int64",
      "s.StartTime"
    ],
    "fanoutAppender.Append": [
      "f.primary.Append",
      "appender.Append"
    ],
    "fanoutAppender.AppendCTZeroSample": [
      "f.primary.AppendCTZeroSample",
      "appender.AppendCTZeroSample"
    ],
    "fanoutAppender.AppendExemplar": [
      "f.primary.AppendExemplar",
      "appender.AppendExemplar"
    ],
    "fanoutAppender.AppendHistogram": [
      "f.primary.AppendHistogram",
      "appender.AppendHistogram"
    ],
    "fanoutAppender.AppendHistogramCTZeroSample": [
      "f.primary.AppendHistogramCTZeroSample",
      "appender.AppendHistogramCTZeroSample"
    ],
    "fanoutAppender.Commit": [
      "f.primary.Commit",
      "appender.Commit",
      "appender.Rollback",
      "f.logger.Error"
    ],
    "fanoutAppender.Rollback": [
      "f.logger.Error",
      "f.primary.Rollback",
      "appender.Rollback"
    ],
    "fanoutAppender.SetOptions": [
      "f.primary.SetOptions",
      "appender.SetOptions"
    ],
    "fanoutAppender.UpdateMetadata": [
      "f.primary.UpdateMetadata",
      "appender.UpdateMetadata"
    ],
    "faultySegmentFile.Write": [
      "len",
      "f.SegmentFile.Write"
    ],
    "fetchApps": [
      "resp.Body.Close",
      "fmt.Errorf",
      "?.Decode",
      "fmt.Sprintf",
      "request.WithContext",
      "request.Header.Add",
      "client.Do",
      "io.Copy",
      "http.NewRequest",
      "xml.NewDecoder",
      "http.NewRequest",
      "request.WithContext",
      "client.Do",
      "io.Copy",
      "resp.Body.Close",
      "fmt.Errorf",
      "io.ReadAll",
      "json.Unmarshal"
    ],
    "fetchDirectIORqmtsFromStatx": [
      "unix.Statx",
      "int",
      "fmt.Errorf",
      "uint32"
    ],
    "fetchDiscovery.Run": [
      "d.poll",
      "d.client.Close",
      "time.NewTicker",
      "ctx.Done",
      "ticker.Stop"
    ],
    "fetchDiscovery.poll": [
      "time.Now",
      "ctx.Done",
      "d.metrics.fetchFailuresCount.Inc",
      "d.logger.Debug",
      "len",
      "d.client.Fetch",
      "time.Since",
      "d.metrics.fetchDuration.Observe",
      "elapsed.Seconds",
      "d.logger.Error",
      "d.metrics.fetchSkipUpdateCount.Inc",
      "d.parseResources"
    ],
    "fhSample.Copy": [
      "s.fh.Copy"
    ],
    "fhSample.F": [
      "panic"
    ],
    "fhSample.H": [
      "panic"
    ],
    "fileDirectIORqmts": [
      "fetchDirectIORqmtsFromStatx",
      "f.Fd",
      "errors.Is",
      "defaultDirectIORqmts",
      "fmt.Errorf"
    ],
    "fileErr": [
      "fmt.Errorf",
      "filePath"
    ],
    "fileMetrics.Register": [
      "fm.metricRegisterer.RegisterMetrics"
    ],
    "fileMetrics.Unregister": [
      "fm.metricRegisterer.UnregisterMetrics"
    ],
    "fileMetrics.init": [
      "fm.fileSDTimeStamp.addDiscoverer"
    ],
    "filePath": [
      "filepath.Abs"
    ],
    "fileSource": [
      "fmt.Sprintf"
    ],
    "fileStatusFlags": [
      "unix.FcntlInt",
      "fmt.Errorf"
    ],
    "file_observability_v1_mads_proto_init": [
      "?.Build",
      "?.PkgPath",
      "reflect.TypeOf"
    ],
    "file_observability_v1_mads_proto_rawDescGZIP": [
      "protoimpl.X.CompressGZIP",
      "file_observability_v1_mads_proto_rawDescOnce.Do"
    ],
    "filterChunkQueriers": [
      "make",
      "len",
      "append"
    ],
    "filterExtLabelsFromMatchers": [
      "len",
      "labels.NewMatcher",
      "append",
      "FromLabelMatchers",
      "make"
    ],
    "filterFloats": [
      "append"
    ],
    "filterOutBuiltInLabels": [
      "delete"
    ],
    "filterQueriers": [
      "make",
      "len",
      "append"
    ],
    "findEqualOrPrefixStringMatchers": [
      "findEqualOrPrefixStringMatchers",
      "equalMatcherCallback",
      "prefixMatcherCallback"
    ],
    "findMinAndMaxTimestamps": [
      "metric.Gauge",
      "max",
      "metric.ExponentialHistogram",
      "min",
      "metric.Sum",
      "metric.Histogram",
      "metric.Type",
      "?.DataPoints",
      "dataPoints.Len",
      "?.Timestamp",
      "dataPoints.At",
      "metric.Summary"
    ],
    "findSamplesForMetric": [
      "f.metric.Get",
      "append"
    ],
    "findSetMatches": [
      "clearBeginEndText",
      "findSetMatchesInternal"
    ],
    "findSetMatchesFromAlternate": [
      "findSetMatchesInternal",
      "tooManyMatches",
      "append"
    ],
    "findSetMatchesFromConcat": [
      "len",
      "clearCapture",
      "findSetMatchesInternal",
      "tooManyMatches",
      "append"
    ],
    "findSetMatchesInternal": [
      "findSetMatchesInternal",
      "findSetMatchesFromConcat",
      "isCaseSensitive",
      "findSetMatchesFromAlternate",
      "clearCapture",
      "len",
      "int",
      "append",
      "string"
    ],
    "fingerprint": [
      "?.Fingerprint",
      "targets.Fingerprint",
      "group.Labels.Fingerprint"
    ],
    "flagConfig.setFeatureListOptions": [
      "model.ParseDuration",
      "fmt.Sprintf",
      "logger.Warn",
      "errors.New",
      "strings.Split",
      "logger.Info",
      "?.Seconds",
      "time.Duration"
    ],
    "floatBucketIterator.At": [
      "i.at"
    ],
    "floatBucketIterator.Next": [
      "IsExponentialSchema",
      "getBoundExponential",
      "i.Next",
      "len",
      "targetIdx"
    ],
    "floatBucketsMatch": [
      "len",
      "almost.Equal"
    ],
    "floatHistogramIterator.At": [
      "panic"
    ],
    "floatHistogramIterator.AtFloatHistogram": [
      "value.IsStaleNaN",
      "counterResetHint",
      "resize",
      "len",
      "copy"
    ],
    "floatHistogramIterator.AtHistogram": [
      "panic"
    ],
    "floatHistogramIterator.Next": [
      "readHistogramChunkLayout",
      "countSpans",
      "readVarbitInt",
      "append",
      "make",
      "it.br.readBits",
      "math.Float64frombits",
      "len",
      "copy",
      "it.readXor",
      "value.IsStaleNaN"
    ],
    "floatHistogramIterator.Reset": [
      "binary.BigEndian.Uint16",
      "CounterResetHeader",
      "newBReader"
    ],
    "floatHistogramIterator.Seek": [
      "it.Next"
    ],
    "floatHistogramIterator.readXor": [
      "xorRead"
    ],
    "floatHistogramSample": [
      "tsdbutil.GenerateTestFloatHistogram"
    ],
    "floatToTime": [
      "fmt.Errorf",
      "?.UTC",
      "?.Time",
      "model.TimeFromUnixNano",
      "int64",
      "math.IsNaN",
      "math.IsInf"
    ],
    "forceEMWA": [
      "r.newEvents.Store"
    ],
    "formatDate": [
      "t.UTC",
      "?.Format"
    ],
    "formatHyphenatedWords": [
      "hyphenRegex.ReplaceAllStringFunc",
      "regexp.MustCompile",
      "fmt.Sprintf"
    ],
    "formatOpenMetricsFloat": [
      "bytes.ContainsAny",
      "string",
      "append",
      "math.IsNaN",
      "math.IsInf",
      "floatFormatBufPool.Get",
      "floatFormatBufPool.Put",
      "strconv.AppendFloat"
    ],
    "formatPromQL": [
      "expr.Pretty",
      "parser.ParseExpr",
      "fmt.Println"
    ],
    "formatRules": [
      "append"
    ],
    "formatSeriesName": [
      "lbs.String",
      "builder.String",
      "builder.WriteString"
    ],
    "formatSeriesResult": [
      "len",
      "make",
      "append",
      "fmt.Sprintf",
      "p.H.TestExpression"
    ],
    "formatSeriesSet": [
      "h.String",
      "ss.Err",
      "ss.At",
      "series.Labels",
      "it.Next",
      "it.At",
      "it.AtFloatHistogram",
      "it.Err",
      "ss.Next",
      "series.Iterator",
      "fmt.Printf",
      "fh.String",
      "it.AtHistogram"
    ],
    "formatSeriesSetOpenMetrics": [
      "ss.Next",
      "CondensedString",
      "it.Err",
      "it.At",
      "ss.Err",
      "fmt.Println",
      "lbs.Get",
      "lbs.DropMetricName",
      "fmt.Printf",
      "ss.At",
      "series.Labels",
      "series.Iterator",
      "it.Next",
      "float64"
    ],
    "formatValueType": [
      "string"
    ],
    "formatValueTypes": [
      "make",
      "len",
      "append",
      "formatValueType",
      "strings.Join"
    ],
    "funcAbs": [
      "simpleFloatFunc"
    ],
    "funcAbsent": [
      "len",
      "append",
      "createLabelsForAbsentFunction"
    ],
    "funcAbsentOverTime": [
      "append"
    ],
    "funcAcos": [
      "simpleFloatFunc"
    ],
    "funcAcosh": [
      "simpleFloatFunc"
    ],
    "funcAsin": [
      "simpleFloatFunc"
    ],
    "funcAsinh": [
      "simpleFloatFunc"
    ],
    "funcAtan": [
      "simpleFloatFunc"
    ],
    "funcAtanh": [
      "simpleFloatFunc"
    ],
    "funcAvgOverTime": [
      "aggrOverTime",
      "len",
      "annotations.NewMixedFloatsHistogramsWarning",
      "?.PositionRange",
      "aggrHistOverTime",
      "?.Div",
      "h.H.Copy",
      "mean.Add",
      "?.H.Copy",
      "float64",
      "math.IsInf",
      "firstSeries.Metric.Get",
      "?.Add",
      "annotations.New",
      "left.Sub",
      "errors.Is",
      "annotations.NewMixedExponentialCustomHistogramsWarning",
      "annotations.NewIncompatibleCustomBucketsHistogramsWarning",
      "mean.Copy",
      "kahanSumInc"
    ],
    "funcCeil": [
      "simpleFloatFunc"
    ],
    "funcChanges": [
      "curSample.H.Equals",
      "append",
      "float64",
      "len",
      "math.IsNaN"
    ],
    "funcClamp": [
      "clamp"
    ],
    "funcClampMax": [
      "math.Inf",
      "clamp"
    ],
    "funcClampMin": [
      "clamp",
      "math.Inf"
    ],
    "funcCos": [
      "simpleFloatFunc"
    ],
    "funcCosh": [
      "simpleFloatFunc"
    ],
    "funcCountOverTime": [
      "aggrOverTime",
      "float64",
      "len"
    ],
    "funcDayOfMonth": [
      "dateWrapper",
      "float64",
      "t.Day"
    ],
    "funcDayOfWeek": [
      "dateWrapper",
      "float64",
      "t.Weekday"
    ],
    "funcDayOfYear": [
      "dateWrapper",
      "float64",
      "t.YearDay"
    ],
    "funcDaysInMonth": [
      "dateWrapper",
      "float64",
      "?.Day",
      "time.Date",
      "t.Year",
      "t.Month"
    ],
    "funcDeg": [
      "simpleFloatFunc"
    ],
    "funcDelta": [
      "extrapolatedRate"
    ],
    "funcDeriv": [
      "annotations.NewHistogramIgnoredInMixedRangeInfo",
      "?.PositionRange",
      "linearRegression",
      "append",
      "samples.Metric.Get",
      "len",
      "?.Add",
      "annotations.New"
    ],
    "funcDoubleExponentialSmoothing": [
      "samples.Metric.Get",
      "?.Add",
      "annotations.NewHistogramIgnoredInMixedRangeInfo",
      "calcTrendValue",
      "panic",
      "fmt.Errorf",
      "len",
      "annotations.New",
      "?.PositionRange",
      "append"
    ],
    "funcExp": [
      "simpleFloatFunc"
    ],
    "funcFloor": [
      "simpleFloatFunc"
    ],
    "funcHistogramAvg": [
      "simpleHistogramFunc"
    ],
    "funcHistogramCount": [
      "simpleHistogramFunc"
    ],
    "funcHistogramFraction": [
      "annos.Merge",
      "BucketFraction",
      "sample.Metric.DropReserved",
      "HistogramFraction",
      "?.PositionRange",
      "len",
      "mb.metric.DropReserved",
      "enh.resetHistograms",
      "sample.Metric.Get",
      "append"
    ],
    "funcHistogramQuantile": [
      "annotations.NewInvalidQuantileWarning",
      "annos.Merge",
      "sample.Metric.DropReserved",
      "HistogramQuantile",
      "mb.metric.DropReserved",
      "annos.Add",
      "len",
      "?.PositionRange",
      "enh.resetHistograms",
      "sample.Metric.Get",
      "BucketQuantile",
      "mb.metric.Get",
      "math.IsNaN",
      "annotations.NewHistogramQuantileForcedMonotonicityInfo",
      "append"
    ],
    "funcHistogramStdDev": [
      "histogramVariance"
    ],
    "funcHistogramStdVar": [
      "histogramVariance"
    ],
    "funcHistogramSum": [
      "simpleHistogramFunc"
    ],
    "funcHour": [
      "dateWrapper",
      "float64",
      "t.Hour"
    ],
    "funcIdelta": [
      "instantValue"
    ],
    "funcIncrease": [
      "extrapolatedRate"
    ],
    "funcIrate": [
      "instantValue"
    ],
    "funcLastOverTime": [
      "h.H.Copy",
      "len",
      "append"
    ],
    "funcLn": [
      "simpleFloatFunc"
    ],
    "funcLog10": [
      "simpleFloatFunc"
    ],
    "funcLog2": [
      "simpleFloatFunc"
    ],
    "funcMadOverTime": [
      "quantile",
      "samples.Metric.Get",
      "make",
      "append",
      "?.PositionRange",
      "aggrOverTime",
      "math.Abs",
      "len",
      "annos.Add",
      "annotations.NewHistogramIgnoredInMixedRangeInfo"
    ],
    "funcMaxOverTime": [
      "compareOverTime",
      "math.IsNaN"
    ],
    "funcMinOverTime": [
      "compareOverTime",
      "math.IsNaN"
    ],
    "funcMinute": [
      "dateWrapper",
      "float64",
      "t.Minute"
    ],
    "funcMonth": [
      "dateWrapper",
      "float64",
      "t.Month"
    ],
    "funcPredictLinear": [
      "?.PositionRange",
      "linearRegression",
      "append",
      "samples.Metric.Get",
      "len",
      "?.Add",
      "annotations.New",
      "annotations.NewHistogramIgnoredInMixedRangeInfo"
    ],
    "funcPresentOverTime": [
      "aggrOverTime"
    ],
    "funcQuantileOverTime": [
      "len",
      "math.IsNaN",
      "?.PositionRange",
      "append",
      "annos.Add",
      "annotations.NewInvalidQuantileWarning",
      "el.Metric.Get",
      "annotations.NewHistogramIgnoredInMixedRangeInfo",
      "make",
      "quantile"
    ],
    "funcRad": [
      "simpleFloatFunc"
    ],
    "funcRate": [
      "extrapolatedRate"
    ],
    "funcResets": [
      "len",
      "curSample.H.DetectReset",
      "append",
      "float64"
    ],
    "funcRound": [
      "math.Floor",
      "float64",
      "len",
      "simpleFloatFunc"
    ],
    "funcScalar": [
      "append",
      "math.NaN"
    ],
    "funcSgn": [
      "simpleFloatFunc"
    ],
    "funcSin": [
      "simpleFloatFunc"
    ],
    "funcSinh": [
      "simpleFloatFunc"
    ],
    "funcSort": [
      "sort.Reverse",
      "Vector",
      "vectorByReverseValueHeap",
      "filterFloats",
      "sort.Sort"
    ],
    "funcSortByLabel": [
      "a.Metric.Get",
      "b.Metric.Get",
      "natsort.Compare",
      "labels.Compare",
      "stringSliceFromArgs",
      "slices.SortFunc"
    ],
    "funcSortByLabelDesc": [
      "natsort.Compare",
      "labels.Compare",
      "stringSliceFromArgs",
      "slices.SortFunc",
      "a.Metric.Get",
      "b.Metric.Get"
    ],
    "funcSortDesc": [
      "vectorByValueHeap",
      "filterFloats",
      "sort.Sort",
      "sort.Reverse",
      "Vector"
    ],
    "funcSqrt": [
      "simpleFloatFunc"
    ],
    "funcStddevOverTime": [
      "varianceOverTime"
    ],
    "funcStdvarOverTime": [
      "varianceOverTime"
    ],
    "funcSumOverTime": [
      "len",
      "firstSeries.Metric.Get",
      "annotations.NewIncompatibleCustomBucketsHistogramsWarning",
      "math.IsInf",
      "annotations.New",
      "?.PositionRange",
      "aggrHistOverTime",
      "errors.Is",
      "annotations.NewMixedExponentialCustomHistogramsWarning",
      "kahanSumInc",
      "?.Add",
      "annotations.NewMixedFloatsHistogramsWarning",
      "?.H.Copy",
      "sum.Add",
      "aggrOverTime"
    ],
    "funcTan": [
      "simpleFloatFunc"
    ],
    "funcTanh": [
      "simpleFloatFunc"
    ],
    "funcTime": [
      "float64"
    ],
    "funcTimestamp": [
      "el.Metric.DropReserved",
      "append",
      "float64"
    ],
    "funcTsOfLastOverTime": [
      "max",
      "len",
      "append",
      "float64"
    ],
    "funcTsOfMaxOverTime": [
      "compareOverTime",
      "math.IsNaN"
    ],
    "funcTsOfMinOverTime": [
      "compareOverTime",
      "math.IsNaN"
    ],
    "funcVector": [
      "append"
    ],
    "funcYear": [
      "dateWrapper",
      "float64",
      "t.Year"
    ],
    "fuzzParseMetricWithContentType": [
      "textparse.New",
      "panic",
      "p.Next",
      "errors.Is"
    ],
    "gatherFamily": [
      "f.GetName",
      "t.Fatalf",
      "t.Helper",
      "reg.Gather",
      "require.NoError"
    ],
    "gatherLabels": [
      "f.GetName",
      "f.GetMetric",
      "append",
      "m.GetLabel",
      "g.Gather",
      "make"
    ],
    "genHistogramAndFloatSeries": [
      "genSeriesFromSampleGenerator",
      "rand.Float64",
      "uint64",
      "h.ToFloat"
    ],
    "genHistogramSeries": [
      "genSeriesFromSampleGenerator",
      "uint64",
      "rand.Float64",
      "h.ToFloat"
    ],
    "genSeries": [
      "genSeriesFromSampleGenerator",
      "rand.Float64"
    ],
    "genSeriesFromSampleGenerator": [
      "generator",
      "storage.NewListSeries",
      "labels.FromMap",
      "make",
      "strconv.Itoa",
      "len",
      "append"
    ],
    "genSeriesWithSample": [
      "fmt.Sprintf",
      "float64",
      "append"
    ],
    "generateAttributes": [
      "m.PutStr",
      "fmt.Sprintf"
    ],
    "generateCustomHistograms": [
      "rand.Intn",
      "uint32",
      "append",
      "int64",
      "rand.Int",
      "len",
      "uint64",
      "int32",
      "float64",
      "h.Copy",
      "rand.Float64"
    ],
    "generateExemplars": [
      "exemplars.AppendEmpty",
      "e.SetTimestamp",
      "e.SetDoubleValue",
      "e.SetSpanID",
      "e.SetTraceID"
    ],
    "generateGroupingKey": [
      "metric.HashWithoutLabels",
      "len",
      "metric.HashForLabels"
    ],
    "generateGroupingLabels": [
      "labels.EmptyLabels",
      "enh.resetBuilder",
      "enh.lb.Del",
      "enh.lb.Labels",
      "len",
      "enh.lb.Keep"
    ],
    "generateInfoFunctionTestSeries": [
      "a.Commit",
      "labels.FromStrings",
      "strconv.Itoa",
      "int64",
      "a.Append",
      "append",
      "require.NoError",
      "stor.ForceHeadMMap",
      "stor.Compact",
      "tb.Helper",
      "context.Background",
      "len",
      "stor.Appender",
      "make",
      "float64"
    ],
    "generateNativeHistogramCustomBucketsSeries": [
      "tsdbutil.GenerateTestCustomBucketsHistograms",
      "?.UnixMilli",
      "time.Unix",
      "int64",
      "make",
      "append",
      "strconv.Itoa",
      "app.AppendHistogram",
      "labels.FromStrings"
    ],
    "generateNativeHistogramSeries": [
      "time.Unix",
      "int64",
      "app.AppendHistogram",
      "tsdbutil.GenerateTestHistograms",
      "labels.FromStrings",
      "append",
      "strconv.Itoa",
      "make",
      "?.UnixMilli"
    ],
    "generateOTLPWriteRequest": [
      "counterMetric.SetDescription",
      "counterMetric.Sum",
      "histogramDataPoint.ExplicitBounds",
      "exponentialHistogramMetric.ExponentialHistogram",
      "counterExemplar.SetSpanID",
      "gaugeMetric.SetDescription",
      "gaugeDataPoint.SetTimestamp",
      "exponentialHistogramDataPoint.SetCount",
      "gaugeDataPoint.SetDoubleValue",
      "exponentialHistogramMetric.SetName",
      "exponentialHistogramDataPoint.Attributes",
      "?.Attributes",
      "histogramMetric.SetDescription",
      "?.BucketCounts",
      "scopeMetric.Metrics",
      "counterDataPoint.SetDoubleValue",
      "counterDataPoint.Exemplars",
      "?.AppendEmpty",
      "pcommon.NewTimestampFromTime",
      "counterExemplar.SetTimestamp",
      "exponentialHistogramDataPoint.SetTimestamp",
      "resourceMetric.Resource",
      "counterDataPoint.SetTimestamp",
      "histogramDataPoint.BucketCounts",
      "histogramDataPoint.SetTimestamp",
      "exponentialHistogramDataPoint.Positive",
      "pmetric.NewMetrics",
      "histogramMetric.SetEmptyHistogram",
      "resourceMetric.ScopeMetrics",
      "counterMetric.SetName",
      "?.DataPoints",
      "counterExemplar.SetDoubleValue",
      "gaugeMetric.SetEmptyGauge",
      "gaugeDataPoint.Attributes",
      "histogramDataPoint.Attributes",
      "exponentialHistogramMetric.SetDescription",
      "exponentialHistogramDataPoint.SetScale",
      "pmetricotlp.NewExportRequestFromMetrics",
      "?.PutStr",
      "counterDataPoint.Attributes",
      "?.FromRaw",
      "histogramDataPoint.SetCount",
      "histogramMetric.SetName",
      "counterMetric.SetEmptySum",
      "?.SetIsMonotonic",
      "counterExemplar.SetTraceID",
      "gaugeMetric.Gauge",
      "d.ResourceMetrics",
      "gaugeMetric.SetName",
      "histogramDataPoint.SetSum",
      "exponentialHistogramDataPoint.SetZeroCount",
      "exponentialHistogramDataPoint.SetSum",
      "?.SetAggregationTemporality",
      "histogramMetric.Histogram",
      "exponentialHistogramMetric.SetEmptyExponentialHistogram"
    ],
    "generateRandomEntries": [
      "big.NewInt",
      "rand.Read",
      "int",
      "w.Log",
      "rand.Int",
      "make",
      "n.Int64",
      "append",
      "int64"
    ],
    "generateRandomValues": [
      "rand.New",
      "rand.NewSource",
      "append",
      "randStrings",
      "randString"
    ],
    "generateSamples": [
      "make",
      "append",
      "gen"
    ],
    "generateTargetGroups": [
      "sort.Strings",
      "fingerprint",
      "fmt.Sprintf",
      "groupFingerprint.String",
      "make",
      "append",
      "string"
    ],
    "generateTestHistogram": [
      "len",
      "proto.Uint32",
      "tsdbutil.GenerateTestHistogram",
      "int64",
      "proto.Uint64",
      "proto.Float64",
      "proto.Int32",
      "make"
    ],
    "generateWALRecords": [
      "labels.FromStrings",
      "rand.Intn",
      "enc.Samples",
      "float64",
      "enc.Series",
      "chunks.HeadSeriesRef",
      "fmt.Sprintf",
      "w.Log",
      "int64"
    ],
    "genericChunkSeriesSetAdapter.At": [
      "a.ChunkSeriesSet.At"
    ],
    "genericMergeSeriesSet.At": [
      "seriesSet.At",
      "c.mergeFunc",
      "len",
      "?.At",
      "make",
      "append"
    ],
    "genericMergeSeriesSet.Err": [
      "set.Err"
    ],
    "genericMergeSeriesSet.Next": [
      "?.Labels",
      "?.At",
      "labels.Equal",
      "heap.Pop",
      "append",
      "set.Next",
      "heap.Push",
      "len"
    ],
    "genericMergeSeriesSet.Warnings": [
      "ws.Merge",
      "set.Warnings"
    ],
    "genericQuerierAdapter.Select": [
      "q.q.Select",
      "q.cq.Select"
    ],
    "genericReduceDelta": [
      "len",
      "?.T"
    ],
    "genericSeriesSetAdapter.At": [
      "a.SeriesSet.At"
    ],
    "genericSeriesSetHeap.Len": [
      "len"
    ],
    "genericSeriesSetHeap.Less": [
      "?.At",
      "labels.Compare",
      "?.Labels"
    ],
    "genericSeriesSetHeap.Pop": [
      "len"
    ],
    "genericSeriesSetHeap.Push": [
      "append"
    ],
    "getAudience": [
      "strings.ToLower",
      "errors.New"
    ],
    "getBlock": [
      "b.Meta"
    ],
    "getBound": [
      "int32",
      "len",
      "panic",
      "fmt.Errorf",
      "math.Inf",
      "getBoundExponential",
      "IsCustomBucketsSchema"
    ],
    "getBoundExponential": [
      "int",
      "math.Ldexp"
    ],
    "getBucketCountsAtTime": [
      "make",
      "len",
      "int",
      "errors.New"
    ],
    "getBucketOffset": [
      "len"
    ],
    "getCORSHandlerFunc": [
      "regexp.MustCompile",
      "SetCORS",
      "w.WriteHeader",
      "http.HandlerFunc"
    ],
    "getChainSampleIterator": [
      "make",
      "cap"
    ],
    "getClient": [
      "otlptracegrpc.NewClient",
      "otlptracehttp.WithTLSClientConfig",
      "config_util.NewTLSConfig",
      "credentials.NewTLS",
      "len",
      "otlptracegrpc.WithHeaders",
      "otlptracehttp.WithCompression",
      "append",
      "otlptracegrpc.WithInsecure",
      "time.Duration",
      "otlptracehttp.WithEndpoint",
      "otlptracehttp.WithTimeout",
      "otlptracegrpc.WithEndpoint",
      "otlptracegrpc.WithTLSCredentials",
      "otlptracegrpc.WithTimeout",
      "otlptracehttp.WithInsecure",
      "otlptracegrpc.WithCompressor",
      "otlptracehttp.WithHeaders",
      "otlptracehttp.NewClient"
    ],
    "getCloudConfiguration": [
      "strings.ToLower",
      "errors.New"
    ],
    "getCommonPrefixIndent": [
      "indent",
      "current.String",
      "fmt.Sprintf"
    ],
    "getCompatibleBlockDuration": [
      "tsdb.ExponentialBlockRanges",
      "len"
    ],
    "getCompressionHandlerFunc": [
      "w.WriteHeader",
      "w.Write",
      "http.HandlerFunc"
    ],
    "getConfigType": [
      "append",
      "out.PkgPath",
      "reflect.StructOf",
      "configTypesMu.Lock",
      "configTypesMu.Unlock",
      "out.NumField",
      "out.Field"
    ],
    "getCounterResetHint": [
      "chk.GetCounterResetHeader"
    ],
    "getCurrentGaugeValuesFor": [
      "g.GetName",
      "require.Len",
      "g.GetMetric",
      "?.GetGauge",
      "reg.Gather",
      "require.NoError",
      "require.False",
      "make",
      "len"
    ],
    "getDedicatedServerDetails": [
      "client.Get",
      "path.Join",
      "url.QueryEscape",
      "parseIPList"
    ],
    "getDedicatedServerList": [
      "client.Get"
    ],
    "getDumpedSamples": [
      "os.Pipe",
      "dumpSamples",
      "context.Background",
      "require.NoError",
      "w.Close",
      "io.Copy",
      "buf.String",
      "t.Helper"
    ],
    "getEndpointInfoForSystems": [
      "rpcclient.Call"
    ],
    "getFPointSlice": [
      "fPointPool.Get",
      "make"
    ],
    "getFailureCount": [
      "metric.Write",
      "make",
      "failuresCount.Collect",
      "close"
    ],
    "getFormattedBytes": [
      "strconv.FormatInt",
      "?.String",
      "units.Base2Bytes"
    ],
    "getFormattedTime": [
      "?.UTC",
      "time.Unix",
      "strconv.FormatInt",
      "?.String"
    ],
    "getGlobalURL": [
      "sanitizeSplitHostPort",
      "net.SplitHostPort",
      "net.JoinHostPort"
    ],
    "getGoGC": [
      "os.Getenv",
      "strings.ToLower",
      "strconv.Atoi"
    ],
    "getHPointSlice": [
      "hPointPool.Get",
      "make"
    ],
    "getHistogramValType": [
      "h.IsFloatHistogram"
    ],
    "getIntGaugeMetric": [
      "pcommon.Timestamp",
      "strings.HasPrefix",
      "dp.SetIntValue",
      "attributes.CopyTo",
      "?.DataPoints",
      "metric.SetEmptyGauge",
      "dp.SetFlags",
      "dp.SetStartTimestamp",
      "metric.SetName",
      "?.AppendEmpty",
      "dp.Attributes",
      "dp.SetTimestamp",
      "pmetric.NewMetric",
      "pmetric.DefaultDataPointFlags.WithNoRecordedValue"
    ],
    "getIntSumMetric": [
      "attributes.CopyTo",
      "dp.Attributes",
      "dp.SetStartTimestamp",
      "pcommon.Timestamp",
      "metric.SetName",
      "dp.SetIntValue",
      "metric.Sum",
      "dp.SetFlags",
      "pmetric.DefaultDataPointFlags.WithNoRecordedValue",
      "dp.SetTimestamp",
      "?.SetAggregationTemporality",
      "?.DataPoints",
      "pmetric.NewMetric",
      "metric.SetEmptySum",
      "?.AppendEmpty",
      "strings.HasPrefix"
    ],
    "getKumaMadsV1DiscoveryResponse": [
      "len",
      "proto.Marshal",
      "make"
    ],
    "getLe": [
      "model.LabelSet",
      "strconv.ParseFloat",
      "string"
    ],
    "getLimits": [
      "err.Error",
      "fmt.Sprintf",
      "limitToString",
      "uint64",
      "syscall.Getrlimit",
      "panic"
    ],
    "getLines": [
      "strings.Split",
      "strings.TrimSpace",
      "strings.HasPrefix"
    ],
    "getLogLines": [
      "append",
      "os.ReadFile",
      "require.NoError",
      "strings.Split",
      "string",
      "len",
      "os.ReadFile",
      "require.NoError",
      "strings.Split",
      "string",
      "len",
      "append"
    ],
    "getMMappedFile": [
      "os.OpenFile",
      "filepath.Abs",
      "logger.Error",
      "file.Truncate",
      "int64",
      "file.Close",
      "mmap.Map"
    ],
    "getMatrixSelectorHPoints": [
      "matrixSelectorHPool.Get",
      "make"
    ],
    "getMetricValue": [
      "t.Helper",
      "p.TextToMetricFamilies",
      "len",
      "errors.New",
      "metricFamily.GetMetric",
      "?.GetValue",
      "?.GetGauge",
      "?.GetCounter",
      "t.Fatalf"
    ],
    "getMinAndMaxTimestamps": [
      "fmt.Errorf",
      "p.Series",
      "errors.New",
      "p.Next",
      "errors.Is"
    ],
    "getMockConf": [
      "fmt.Sprintf",
      "getMockConfFromString"
    ],
    "getMockConfFromString": [
      "yaml.UnmarshalStrict"
    ],
    "getNetworkInformationForSystems": [
      "rpcclient.Call",
      "make"
    ],
    "getNetworksLabels": [
      "len",
      "strconv.FormatBool",
      "strutil.SanitizeLabelName",
      "client.NetworkList",
      "make"
    ],
    "getOOOSeriesChunks": [
      "s.oooHeadChunkID",
      "handleChunkWriteError",
      "slices.SortFunc",
      "make",
      "chunks.ChunkRef",
      "c.ref.GreaterThan",
      "appendSeriesChunks",
      "append",
      "c.OverlapsClosedInterval",
      "s.ooo.oooHeadChunk.chunk.ToEncodedChunks",
      "len",
      "chunks.NewHeadChunkRef",
      "addChunk",
      "maxMmapRef.GreaterThanOrEqualTo"
    ],
    "getPort": [
      "net.Listen",
      "listener.Close",
      "listener.Addr"
    ],
    "getPromExemplars": [
      "?.AsTime",
      "exemplar.ValueType",
      "hex.EncodeToString",
      "utf8.RuneCountInString",
      "attrs.Len",
      "attrs.Range",
      "value.AsString",
      "?.Len",
      "?.At",
      "timestamp.FromTime",
      "exemplar.DoubleValue",
      "traceID.IsEmpty",
      "append",
      "exemplar.SpanID",
      "make",
      "everyN.checkContext",
      "float64",
      "exemplar.IntValue",
      "fmt.Errorf",
      "spanID.IsEmpty",
      "exemplar.FilteredAttributes",
      "pt.Exemplars",
      "exemplar.Timestamp",
      "exemplar.TraceID"
    ],
    "getRuleGroupNextToken": [
      "h.Write",
      "hex.EncodeToString",
      "h.Sum",
      "sha1.New"
    ],
    "getSDCheckResult": [
      "cmp.Equal",
      "append",
      "lb.Reset",
      "lb.Set",
      "string",
      "lb.Labels",
      "scrape.PopulateLabels",
      "cmp.Comparer",
      "labels.NewBuilder",
      "labels.EmptyLabels",
      "scrape.PopulateDiscoveredLabels"
    ],
    "getSegmentSize": [
      "int64",
      "os.Stat",
      "SegmentName",
      "fi.Size"
    ],
    "getSeriesIDFromRef": [
      "r.Labels.String"
    ],
    "getStartOrEnd": [
      "startOrEnd.String"
    ],
    "getSystemGroupNames": [
      "make",
      "len",
      "append"
    ],
    "getSystemGroupsInfoOfMonitoredClients": [
      "rpcclient.Call",
      "make"
    ],
    "getTestNameFromRegexp": [
      "len"
    ],
    "getTimeRangesForSelector": [
      "timestamp.FromTime",
      "subqueryTimes",
      "durationMilliseconds"
    ],
    "getToken": [
      "?.String",
      "uuid.New",
      "?.Add",
      "time.Now"
    ],
    "getVpsDetails": [
      "parseIPList",
      "path.Join",
      "url.QueryEscape",
      "client.Get"
    ],
    "getVpsList": [
      "client.Get"
    ],
    "hSample.Copy": [
      "s.h.Copy"
    ],
    "hSample.F": [
      "panic"
    ],
    "hSample.FH": [
      "s.h.ToFloat"
    ],
    "handleAPIError": [
      "errors.As",
      "fmt.Fprintf",
      "strings.TrimSpace",
      "fmt.Fprintln"
    ],
    "handleAggregationError": [
      "errors.Is",
      "annos.Add",
      "annotations.NewMixedExponentialCustomHistogramsWarning",
      "annotations.NewIncompatibleCustomBucketsHistogramsWarning",
      "e.Expr.PositionRange"
    ],
    "handleAppendableError": [
      "errors.Is"
    ],
    "handleChunkWriteError": [
      "errors.Is",
      "panic"
    ],
    "handleOTLP": [
      "http.NewRequest",
      "bytes.NewReader",
      "req.Header.Set",
      "httptest.NewRecorder",
      "handler.ServeHTTP",
      "require.Equal",
      "exportRequest.MarshalProto",
      "require.NoError",
      "NewOTLPWriteHandler",
      "recorder.Result"
    ],
    "handleVectorBinopError": [
      "e.PositionRange",
      "errors.Is",
      "?.Add",
      "annotations.New",
      "annotations.NewIncompatibleBucketLayoutInBinOpWarning"
    ],
    "hasDelta": [
      "md.ResourceMetrics",
      "?.At",
      "sms.Len",
      "?.Metrics",
      "m.ExponentialHistogram",
      "?.Len",
      "ms.At",
      "?.AggregationTemporality",
      "ms.Len",
      "?.Type",
      "m.Sum",
      "?.ScopeMetrics",
      "sms.At",
      "m.Histogram"
    ],
    "hasPrefixCaseInsensitive": [
      "len",
      "strings.EqualFold"
    ],
    "hasSuffixCaseInsensitive": [
      "len",
      "strings.EqualFold"
    ],
    "hcloudDiscovery.refresh": [
      "net.JoinHostPort",
      "strutil.SanitizeLabelName",
      "make",
      "strconv.FormatUint",
      "uint64",
      "privateNet.IP.String",
      "d.client.Server.AllWithOpts",
      "len",
      "model.LabelValue",
      "server.PublicNet.IPv6.Network.String",
      "strconv.Itoa",
      "int",
      "d.client.Network.All",
      "strconv.FormatInt",
      "server.PublicNet.IPv4.IP.String",
      "model.LabelName"
    ],
    "hcloudSDTestSuite.SetupTest": [
      "NewSDMock",
      "s.Mock.Setup",
      "s.Mock.HandleHcloudServers",
      "s.Mock.HandleHcloudNetworks"
    ],
    "headAppender.Append": [
      "a.AppendHistogram",
      "s.appendable",
      "a.head.metrics.outOfOrderSamples.WithLabelValues",
      "?.Inc",
      "a.head.series.getByID",
      "a.getOrCreate",
      "s.Unlock",
      "a.head.metrics.oooHistogram.Observe",
      "append",
      "s.Lock",
      "value.IsStaleNaN",
      "errors.Is",
      "storage.SeriesRef",
      "a.head.metrics.outOfBoundSamples.WithLabelValues",
      "chunks.HeadSeriesRef",
      "float64",
      "a.head.metrics.tooOldSamples.WithLabelValues"
    ],
    "headAppender.AppendCTZeroSample": [
      "a.head.series.getByID",
      "chunks.HeadSeriesRef",
      "a.getOrCreate",
      "s.Lock",
      "s.appendable",
      "s.Unlock",
      "storage.SeriesRef",
      "append"
    ],
    "headAppender.AppendExemplar": [
      "append",
      "chunks.HeadSeriesRef",
      "a.head.series.getByHash",
      "storage.SeriesRef",
      "fmt.Errorf",
      "e.Labels.WithoutEmpty",
      "a.head.exemplars.ValidateExemplar",
      "errors.Is",
      "a.head.opts.MaxExemplars.Load",
      "a.head.series.getByID",
      "lset.Hash",
      "s.labels"
    ],
    "headAppender.AppendHistogram": [
      "a.head.metrics.oooHistogram.Observe",
      "errors.Is",
      "s.appendableFloatHistogram",
      "chunks.HeadSeriesRef",
      "a.getOrCreate",
      "float64",
      "a.head.metrics.outOfOrderSamples.WithLabelValues",
      "a.head.opts.EnableNativeHistograms.Load",
      "?.Inc",
      "a.head.series.getByID",
      "s.appendableHistogram",
      "s.Unlock",
      "append",
      "storage.SeriesRef",
      "h.Validate",
      "fh.Validate",
      "a.head.metrics.tooOldSamples.WithLabelValues",
      "a.head.metrics.outOfBoundSamples.WithLabelValues",
      "s.Lock"
    ],
    "headAppender.AppendHistogramCTZeroSample": [
      "a.head.opts.EnableNativeHistograms.Load",
      "a.getOrCreate",
      "s.Lock",
      "s.appendableHistogram",
      "s.appendableFloatHistogram",
      "a.head.series.getByID",
      "chunks.HeadSeriesRef",
      "s.Unlock",
      "errors.Is",
      "append",
      "storage.SeriesRef"
    ],
    "headAppender.Commit": [
      "a.head.metrics.outOfOrderSamples.WithLabelValues",
      "a.head.metrics.outOfBoundSamples.WithLabelValues",
      "a.head.updateMinMaxTime",
      "a.log",
      "fmt.Errorf",
      "a.head.putMetadataBuffer",
      "len",
      "float64",
      "a.head.updateMinOOOMaxOOOTime",
      "a.commitExemplars",
      "a.head.putHistogramBuffer",
      "a.head.opts.OutOfOrderCapMax.Load",
      "a.commitFloatHistograms",
      "?.Add",
      "a.head.metrics.samplesAppended.WithLabelValues",
      "a.Rollback",
      "a.head.putSeriesBuffer",
      "a.head.putExemplarBuffer",
      "a.head.chunkRange.Load",
      "a.commitSamples",
      "a.head.metrics.tooOldSamples.WithLabelValues",
      "a.head.metrics.outOfOrderSamplesAppended.WithLabelValues",
      "a.head.writeNotified.Notify",
      "a.head.putAppendBuffer",
      "a.head.iso.closeAppend",
      "a.head.putBytesBuffer",
      "acc.collectOOORecords",
      "a.head.wbl.Log",
      "a.head.metrics.activeAppenders.Dec",
      "a.head.putFloatHistogramBuffer",
      "a.commitMetadata",
      "a.unmarkCreatedSeriesAsPendingCommit",
      "a.commitHistograms",
      "a.head.logger.Error"
    ],
    "headAppender.GetRef": [
      "a.head.series.getByHash",
      "labels.EmptyLabels",
      "storage.SeriesRef",
      "s.labels"
    ],
    "headAppender.Rollback": [
      "a.head.metrics.activeAppenders.Dec",
      "a.unmarkCreatedSeriesAsPendingCommit",
      "series.Lock",
      "a.head.putExemplarBuffer",
      "a.log",
      "a.head.putMetadataBuffer",
      "a.head.iso.closeAppend",
      "a.head.putSeriesBuffer",
      "series.cleanupAppendIDsBelow",
      "series.Unlock",
      "a.head.putAppendBuffer",
      "a.head.putHistogramBuffer",
      "a.head.putFloatHistogramBuffer"
    ],
    "headAppender.UpdateMetadata": [
      "chunks.HeadSeriesRef",
      "a.head.series.getByHash",
      "fmt.Errorf",
      "s.Unlock",
      "record.GetMetricType",
      "a.head.series.getByID",
      "lset.Hash",
      "storage.SeriesRef",
      "s.Lock",
      "append"
    ],
    "headAppender.commitExemplars": [
      "a.head.exemplars.AddExemplar",
      "s.labels",
      "errors.Is",
      "a.head.logger.Debug",
      "a.head.series.getByID",
      "chunks.HeadSeriesRef"
    ],
    "headAppender.commitFloatHistograms": [
      "acc.collectOOORecords",
      "a.head.metrics.chunksCreated.Inc",
      "series.Unlock",
      "series.insert",
      "make",
      "len",
      "append",
      "series.appendFloatHistogram",
      "series.Lock",
      "series.appendableFloatHistogram",
      "handleAppendableError",
      "a.head.metrics.chunks.Inc",
      "series.cleanupAppendIDsBelow"
    ],
    "headAppender.commitHistograms": [
      "series.appendableHistogram",
      "handleAppendableError",
      "make",
      "series.appendHistogram",
      "a.head.metrics.chunks.Inc",
      "series.cleanupAppendIDsBelow",
      "series.Lock",
      "series.insert",
      "acc.collectOOORecords",
      "len",
      "append",
      "a.head.metrics.chunksCreated.Inc",
      "series.Unlock"
    ],
    "headAppender.commitMetadata": [
      "series.Lock",
      "record.ToMetricType",
      "series.Unlock"
    ],
    "headAppender.commitSamples": [
      "series.Lock",
      "series.insert",
      "len",
      "a.head.metrics.chunks.Inc",
      "series.cleanupAppendIDsBelow",
      "series.Unlock",
      "a.head.metrics.chunksCreated.Inc",
      "series.appendable",
      "handleAppendableError",
      "acc.collectOOORecords",
      "make",
      "append",
      "series.append"
    ],
    "headAppender.getOrCreate": [
      "lset.HasDuplicateLabelNames",
      "a.head.getOrCreate",
      "lset.Hash",
      "append",
      "lset.WithoutEmpty",
      "lset.IsEmpty",
      "fmt.Errorf"
    ],
    "headAppender.log": [
      "enc.HistogramSamples",
      "len",
      "enc.Metadata",
      "enc.CustomBucketsHistogramSamples",
      "enc.Exemplars",
      "a.head.getBytesBuffer",
      "a.head.wal.Log",
      "enc.FloatHistogramSamples",
      "exemplarsForEncoding",
      "enc.Series",
      "fmt.Errorf",
      "enc.Samples",
      "enc.CustomBucketsFloatHistogramSamples",
      "a.head.putBytesBuffer"
    ],
    "headAppender.unmarkCreatedSeriesAsPendingCommit": [
      "s.Lock",
      "s.Unlock"
    ],
    "headChunkReader.ChunkOrIterable": [
      "h.chunk"
    ],
    "headChunkReader.ChunkOrIterableWithCopy": [
      "h.chunk"
    ],
    "headChunkReader.Close": [
      "h.isoState.Close"
    ],
    "headChunkReader.chunk": [
      "unpackHeadChunkRef",
      "h.head.series.getByID",
      "s.Lock",
      "s.Unlock",
      "h.head.chunkFromSeries"
    ],
    "headIndexReader.LabelNames": [
      "h.head.MaxTime",
      "len",
      "h.head.postings.LabelNames",
      "slices.Sort",
      "labelNamesWithMatchers",
      "h.head.MinTime"
    ],
    "headIndexReader.LabelNamesFor": [
      "chunks.HeadSeriesRef",
      "series.Err",
      "len",
      "append",
      "ctx.Err",
      "series.Next",
      "h.head.series.getByID",
      "series.At",
      "?.Range",
      "memSeries.labels",
      "slices.Sort",
      "make"
    ],
    "headIndexReader.LabelValueFor": [
      "h.head.series.getByID",
      "chunks.HeadSeriesRef",
      "?.Get",
      "memSeries.labels"
    ],
    "headIndexReader.LabelValues": [
      "len",
      "h.head.postings.LabelValues",
      "labelValuesWithMatchers",
      "h.head.MinTime",
      "h.head.MaxTime"
    ],
    "headIndexReader.Postings": [
      "h.head.postings.Postings"
    ],
    "headIndexReader.PostingsForAllLabelValues": [
      "h.head.postings.PostingsForAllLabelValues"
    ],
    "headIndexReader.PostingsForLabelMatching": [
      "h.head.postings.PostingsForLabelMatching"
    ],
    "headIndexReader.Series": [
      "h.head.metrics.seriesNotFound.Inc",
      "builder.Assign",
      "s.labels",
      "s.Lock",
      "s.Unlock",
      "appendSeriesChunks",
      "h.head.series.getByID",
      "chunks.HeadSeriesRef"
    ],
    "headIndexReader.ShardedPostings": [
      "p.At",
      "storage.SeriesRef",
      "h.head.logger.Debug",
      "index.ErrPostings",
      "errors.New",
      "make",
      "append",
      "index.NewListPostings",
      "p.Next",
      "h.head.series.getByID",
      "chunks.HeadSeriesRef"
    ],
    "headIndexReader.SortedLabelValues": [
      "h.LabelValues",
      "slices.Sort"
    ],
    "headIndexReader.SortedPostings": [
      "h.head.logger.Debug",
      "slices.SortFunc",
      "a.labels",
      "h.head.series.getByID",
      "append",
      "index.ErrPostings",
      "labels.Compare",
      "make",
      "chunks.HeadSeriesRef",
      "p.At",
      "p.Err",
      "fmt.Errorf",
      "len",
      "storage.SeriesRef",
      "p.Next",
      "b.labels",
      "index.NewListPostings"
    ],
    "headIndexReader.Symbols": [
      "h.head.postings.Symbols"
    ],
    "header": [
      "fmt.Sprintf"
    ],
    "hintRecordingQuerier.Select": [
      "append",
      "h.Querier.Select"
    ],
    "histogramIterator.At": [
      "panic",
      "panic"
    ],
    "histogramIterator.AtFloatHistogram": [
      "?.ToFloat",
      "len",
      "copy",
      "value.IsStaleNaN",
      "counterResetHint",
      "float64",
      "resize"
    ],
    "histogramIterator.AtHistogram": [
      "value.IsStaleNaN",
      "counterResetHint",
      "resize",
      "len",
      "copy"
    ],
    "histogramIterator.Next": [
      "len",
      "readVarbitInt",
      "readVarbitUint",
      "copy",
      "int64",
      "value.IsStaleNaN",
      "float64",
      "uint64",
      "countSpans",
      "append",
      "make",
      "it.readSum",
      "readHistogramChunkLayout",
      "it.br.readBits",
      "math.Float64frombits",
      "len"
    ],
    "histogramIterator.Reset": [
      "newBReader",
      "binary.BigEndian.Uint16",
      "CounterResetHeader"
    ],
    "histogramIterator.Seek": [
      "panic",
      "it.Next"
    ],
    "histogramIterator.readSum": [
      "xorRead"
    ],
    "histogramRate": [
      "annotations.NewNativeHistogramNotGaugeWarning",
      "h.Compact",
      "prev.UsesCustomBuckets",
      "annos.Add",
      "annotations.NewMixedExponentialCustomHistogramsWarning",
      "last.UsesCustomBuckets",
      "annotations.New",
      "curr.UsesCustomBuckets",
      "errors.Is",
      "annotations.NewIncompatibleCustomBucketsHistogramsWarning",
      "len",
      "annotations.NewMixedFloatsHistogramsWarning",
      "annotations.NewNativeHistogramNotCounterWarning",
      "second.DetectReset",
      "?.Add",
      "h.Sub",
      "h.Add",
      "second.UsesCustomBuckets",
      "last.CopyToSchema",
      "curr.DetectReset"
    ],
    "histogramSample": [
      "tsdbutil.GenerateTestHistogram"
    ],
    "histogramSeries.Labels": [
      "labels.EmptyLabels"
    ],
    "histogramStatsSeries.Iterator": [
      "statsIterator.Reset",
      "s.Series.Iterator",
      "NewHistogramStatsIterator"
    ],
    "histogramVariance": [
      "simpleHistogramFunc",
      "h.AllBucketIterator",
      "it.Next",
      "it.At",
      "h.UsesCustomBuckets",
      "math.Sqrt",
      "kahanSumInc",
      "varianceToResult"
    ],
    "httpMetrics.Register": [
      "m.metricRegisterer.RegisterMetrics"
    ],
    "httpMetrics.Unregister": [
      "m.metricRegisterer.UnregisterMetrics"
    ],
    "iaasDiscovery.refresh": [
      "res.Body.Close",
      "json.NewDecoder",
      "i.logger.Debug",
      "strconv.FormatUint",
      "uint64",
      "net.JoinHostPort",
      "url.Parse",
      "url.JoinPath",
      "apiURL.Query",
      "apiURL.String",
      "len",
      "strutil.SanitizeLabelName",
      "?.Decode",
      "make",
      "q.Set",
      "q.Encode",
      "http.NewRequestWithContext",
      "i.httpClient.Do",
      "io.ReadAll",
      "string",
      "model.LabelValue",
      "model.LabelName",
      "append",
      "fmt.Errorf",
      "req.Header.Set",
      "slog.String"
    ],
    "importRules": [
      "?.Add",
      "?.UTC",
      "errors.New",
      "promslog.New",
      "newRuleImporter",
      "time.Now",
      "stime.Before",
      "newAPI",
      "context.Background",
      "parseTime",
      "fmt.Errorf",
      "ruleImporter.loadGroups",
      "ruleImporter.importAll",
      "fmt.Fprintln",
      "len"
    ],
    "indent": [
      "strings.Repeat"
    ],
    "indentLines": [
      "strings.Split",
      "sb.WriteString",
      "len",
      "sb.WriteRune",
      "sb.String"
    ],
    "indexWriterSeriesSlice.Len": [
      "len"
    ],
    "indexWriterSeriesSlice.Less": [
      "labels.Compare"
    ],
    "ingressLabels": [
      "make",
      "lv",
      "addObjectMetaLabels"
    ],
    "ingressSource": [
      "ingressSourceFromNamespaceAndName"
    ],
    "init": [
      "prometheus.MustRegister",
      "versioncollector.NewCollector",
      "strings.ReplaceAll",
      "model.ParseDuration",
      "panic",
      "sortMatrix",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "reflect.TypeOf",
      "registerConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "discovery.RegisterConfig",
      "file_observability_v1_mads_proto_init",
      "?.Type",
      "?.ProtoReflect",
      "discovery.RegisterConfig",
      "mustRegisterMessage",
      "discovery.RegisterConfig",
      "prometheus.MustRegister",
      "proto.RegisterEnum",
      "proto.RegisterType",
      "proto.RegisterFile",
      "proto.RegisterType",
      "proto.RegisterEnum",
      "proto.RegisterFile",
      "proto.RegisterEnum",
      "proto.RegisterType",
      "proto.RegisterFile",
      "proto.RegisterType",
      "proto.RegisterEnum",
      "proto.RegisterFile",
      "crc32.MakeTable",
      "prometheus.MustRegister",
      "prometheus.MustRegister",
      "crc32.MakeTable",
      "crc32.MakeTable",
      "crc32.MakeTable",
      "prometheus.MustRegister",
      "jsoniter.RegisterTypeEncoderFunc"
    ],
    "initAppender.Append": [
      "a.app.Append",
      "a.head.initTime",
      "a.head.appender"
    ],
    "initAppender.AppendCTZeroSample": [
      "a.app.AppendCTZeroSample",
      "a.head.initTime",
      "a.head.appender"
    ],
    "initAppender.AppendExemplar": [
      "a.head.opts.MaxExemplars.Load",
      "a.app.AppendExemplar",
      "a.head.initTime",
      "a.head.appender"
    ],
    "initAppender.AppendHistogram": [
      "a.app.AppendHistogram",
      "a.head.initTime",
      "a.head.appender"
    ],
    "initAppender.AppendHistogramCTZeroSample": [
      "a.head.initTime",
      "a.head.appender",
      "a.app.AppendHistogramCTZeroSample"
    ],
    "initAppender.Commit": [
      "a.head.metrics.activeAppenders.Dec",
      "a.app.Commit"
    ],
    "initAppender.GetRef": [
      "g.GetRef",
      "labels.EmptyLabels"
    ],
    "initAppender.Rollback": [
      "a.app.Rollback",
      "a.head.metrics.activeAppenders.Dec"
    ],
    "initAppender.SetOptions": [
      "a.app.SetOptions"
    ],
    "initAppender.UpdateMetadata": [
      "a.app.UpdateMetadata",
      "a.head.appender"
    ],
    "injectHeadersRoundTripper.RoundTrip": [
      "req.Header.Set",
      "t.RoundTripper.RoundTrip"
    ],
    "insert": [
      "len",
      "panic"
    ],
    "inspector.Visit": [
      "f"
    ],
    "instanceDiscovery.refresh": [
      "scw.WithContext",
      "server.Zone.Region",
      "scw.StringPtr",
      "api.ListServers",
      "ip.Address.String",
      "server.IPv6.Address.String",
      "net.JoinHostPort",
      "instance.NewAPI",
      "server.Zone.String",
      "append",
      "server.PublicIP.Address.String",
      "region.String",
      "len",
      "strings.Join",
      "strconv.FormatUint",
      "uint64",
      "scw.WithAllPages",
      "model.LabelValue"
    ],
    "instantValue": [
      "annos.Add",
      "annotations.NewNativeHistogramNotGaugeWarning",
      "annotations.NewIncompatibleCustomBucketsHistogramsWarning",
      "annotations.NewMixedFloatsHistogramsWarning",
      "samples.Metric.Get",
      "max",
      "?.H.Copy",
      "?.H.DetectReset",
      "resultSample.H.Sub",
      "errors.Is",
      "annotations.NewMixedExponentialCustomHistogramsWarning",
      "float64",
      "make",
      "len",
      "annotations.NewNativeHistogramNotCounterWarning",
      "resultSample.H.Div",
      "append",
      "args.PositionRange",
      "resultSample.H.Compact"
    ],
    "instrumentedChunkWriter.WriteChunks": [
      "c.Chunk.NumSamples",
      "w.trange.Observe",
      "w.ChunkWriter.WriteChunks",
      "w.size.Observe",
      "float64",
      "len",
      "c.Chunk.Bytes",
      "w.samples.Observe"
    ],
    "intersectPostings.Err": [
      "p.Err"
    ],
    "intersectPostings.Next": [
      "p.Next",
      "p.At",
      "it.doNext"
    ],
    "intersectPostings.Seek": [
      "it.doNext"
    ],
    "intersectPostings.doNext": [
      "p.Seek",
      "p.At"
    ],
    "intersection": [
      "make",
      "append"
    ],
    "invalidParamError": [
      "fmt.Errorf"
    ],
    "inversePostingsForMatcher": [
      "ix.Postings",
      "ix.PostingsForAllLabelValues",
      "it.Err",
      "ix.PostingsForLabelMatching",
      "m.Matches",
      "m.SetMatches",
      "len"
    ],
    "isAligned": [
      "alignmentOffset",
      "len"
    ],
    "isAlphaNumeric": [
      "isAlpha",
      "isDigit"
    ],
    "isBlockDir": [
      "fi.IsDir",
      "ulid.ParseStrict",
      "fi.Name"
    ],
    "isCaseSensitive": [
      "isCaseInsensitive"
    ],
    "isNativeHistogram": [
      "len",
      "h.GetPositiveSpan",
      "h.GetNegativeSpan",
      "h.GetZeroThreshold",
      "h.GetZeroCount"
    ],
    "isSameMetric": [
      "len"
    ],
    "isSampleOld": [
      "baseTime.Add",
      "timestamp.Time",
      "sampleTs.Before"
    ],
    "isSeriesPartOfFamily": [
      "yoloString",
      "strings.HasPrefix",
      "strings.CutSuffix"
    ],
    "isTimeSeriesOldFilter": [
      "metrics.droppedExemplarsTotal.WithLabelValues",
      "len",
      "isSampleOld",
      "?.Inc",
      "metrics.droppedSamplesTotal.WithLabelValues",
      "metrics.droppedHistogramsTotal.WithLabelValues"
    ],
    "isTmpDir": [
      "ulid.ParseStrict",
      "len",
      "fi.IsDir",
      "fi.Name",
      "filepath.Ext",
      "strings.HasPrefix"
    ],
    "isV2TimeSeriesOldFilter": [
      "metrics.droppedSamplesTotal.WithLabelValues",
      "metrics.droppedHistogramsTotal.WithLabelValues",
      "metrics.droppedExemplarsTotal.WithLabelValues",
      "len",
      "isSampleOld",
      "?.Inc"
    ],
    "isWholeWhenMultiplied": [
      "float64",
      "uint",
      "math.Round"
    ],
    "isolation.State": [
      "i.appendMtx.RLock",
      "i.appendMtx.RUnlock",
      "make",
      "len",
      "i.readMtx.Lock",
      "i.readMtx.Unlock"
    ],
    "isolation.TraverseOpenReads": [
      "f",
      "i.readMtx.RLock",
      "i.readMtx.RUnlock"
    ],
    "isolation.closeAppend": [
      "i.appendersPool.Put",
      "i.appendMtx.Lock",
      "i.appendMtx.Unlock",
      "delete"
    ],
    "isolation.lastAppendID": [
      "i.appendMtx.RUnlock",
      "i.appendMtx.RLock"
    ],
    "isolation.lowWatermark": [
      "i.appendMtx.RLock",
      "i.appendMtx.RUnlock",
      "i.lowWatermarkLocked"
    ],
    "isolation.lowWatermarkLocked": [
      "i.readMtx.RUnlock",
      "i.readMtx.RLock"
    ],
    "isolation.lowestAppendTime": [
      "i.appendMtx.RUnlock",
      "i.appendMtx.RLock"
    ],
    "isolation.newAppendID": [
      "i.appendMtx.Unlock",
      "i.appendersPool.Get",
      "i.lowWatermarkLocked",
      "i.appendMtx.Lock"
    ],
    "isolationState.Close": [
      "i.isolation.readMtx.Lock",
      "i.isolation.readMtx.Unlock"
    ],
    "join": [
      "strings.Join"
    ],
    "joinLabels": [
      "bytes.NewBuffer",
      "model.IsValidLegacyMetricName",
      "string",
      "model.LabelValue",
      "b.Write",
      "b.AvailableBuffer",
      "b.String",
      "b.WriteString",
      "strconv.AppendQuote"
    ],
    "jsonPrinter.printLabelValues": [
      "?.Encode",
      "json.NewEncoder"
    ],
    "jsonPrinter.printSeries": [
      "?.Encode",
      "json.NewEncoder"
    ],
    "jsonPrinter.printValue": [
      "?.Encode",
      "json.NewEncoder"
    ],
    "k8sDiscoveryTest.Run": [
      "dis.RUnlock",
      "readResultWithTimeout",
      "require.True",
      "d.beforeRun",
      "dis.RLock",
      "d.afterStart",
      "requireTargetGroups",
      "make",
      "context.Background",
      "cancel",
      "time.Sleep",
      "cache.WaitForCacheSync",
      "context.WithTimeout",
      "d.discovery.Run",
      "len",
      "ctx.Done",
      "t.Helper"
    ],
    "kahanSumInc": [
      "math.IsInf",
      "math.Abs"
    ],
    "klogv1Writer.Write": [
      "klogv2.ErrorDepth",
      "klogv2.FatalDepth",
      "len",
      "klogv2.InfoDepth",
      "string",
      "klogv2.WarningDepth"
    ],
    "kubernetesMetrics.Register": [
      "m.metricRegisterer.RegisterMetrics"
    ],
    "kubernetesMetrics.Unregister": [
      "m.metricRegisterer.UnregisterMetrics"
    ],
    "kubernetesSDHostURL": [
      "url.Parse"
    ],
    "kumaMadsV1ResourceParser": [
      "append",
      "convertKumaV1MonitoringAssignment",
      "fmt.Errorf",
      "anypb.UnmarshalTo"
    ],
    "labelAndAnnotation.String": [
      "la.Labels.String",
      "la.Annotations.String"
    ],
    "labelGenericQueriers.Len": [
      "len"
    ],
    "labelGenericQueriers.SplitByHalf": [
      "len"
    ],
    "labelNamesWithMatchers": [
      "PostingsForMatchers",
      "r.LabelNamesFor"
    ],
    "labelProtosToLabels": [
      "b.Add",
      "b.Sort",
      "b.Labels",
      "b.Reset"
    ],
    "labelSize": [
      "sizeWhenEncoded",
      "uint64",
      "len"
    ],
    "labelValuesWithMatchers": [
      "r.LabelValues",
      "fmt.Errorf",
      "append",
      "r.Postings",
      "ctx.Err",
      "m.Matches",
      "len",
      "PostingsForMatchers",
      "make",
      "index.FindIntersectingPostings"
    ],
    "labelsAndAnnotations.Len": [
      "len"
    ],
    "labelsAndAnnotations.Less": [
      "labels.Compare"
    ],
    "labelsAndAnnotations.String": [
      "len",
      "indentLines",
      "?.String",
      "strconv.Itoa",
      "l.String"
    ],
    "labelsDeletePromQL": [
      "fmt.Println",
      "expr.Pretty",
      "parser.ParseExpr",
      "parser.Inspect",
      "append"
    ],
    "labelsForTest": [
      "strconv.Itoa",
      "append"
    ],
    "labelsIsEmpty": [
      "labelsPtr.IsEmpty"
    ],
    "labelsSetPromQL": [
      "append",
      "fmt.Println",
      "expr.Pretty",
      "parser.ParseExpr",
      "?.String",
      "parser.ItemType",
      "fmt.Errorf",
      "parser.Inspect"
    ],
    "labelsSize": [
      "labelSize"
    ],
    "labelsToEqualityMatchers": [
      "string",
      "make",
      "len",
      "append"
    ],
    "labelsToOpenAPILabelSet": [
      "modelLabelSet.Range"
    ],
    "labelsWithHashCollision": [
      "ls1.Hash",
      "ls2.Hash",
      "panic",
      "labels.FromStrings",
      "labels.FromStrings",
      "ls1.Hash",
      "ls2.Hash",
      "panic"
    ],
    "lazyGenericSeriesSet.At": [
      "c.set.At"
    ],
    "lazyGenericSeriesSet.Err": [
      "c.set.Err"
    ],
    "lazyGenericSeriesSet.Next": [
      "c.set.Next",
      "c.init"
    ],
    "lazyGenericSeriesSet.Warnings": [
      "c.set.Warnings"
    ],
    "lexBuckets": [
      "isDigit",
      "l.backup",
      "isAlpha",
      "strings.ToLower",
      "l.errorf",
      "l.next",
      "isSpace",
      "l.emit"
    ],
    "lexDurationExpr": [
      "l.scanDurationKeyword",
      "l.peek",
      "l.backup",
      "l.next",
      "l.errorf",
      "l.emit",
      "isSpace",
      "skipSpaces",
      "isDigit"
    ],
    "lexEscape": [
      "l.errorf",
      "uint32",
      "digitVal",
      "l.next"
    ],
    "lexHistogram": [
      "isAlpha",
      "l.backup",
      "isDigit",
      "l.peek",
      "l.errorf",
      "l.next",
      "l.emit",
      "isSpace"
    ],
    "lexHistogramDescriptor": [
      "l.backup",
      "strings.ToLower",
      "l.peek",
      "l.emit",
      "l.errorf",
      "l.next",
      "isAlpha"
    ],
    "lexIdentifier": [
      "l.next",
      "l.backup",
      "l.emit",
      "isAlphaNumeric"
    ],
    "lexInsideBraces": [
      "isSpace",
      "isAlpha",
      "l.backup",
      "l.emit",
      "strings.HasPrefix",
      "l.next",
      "l.errorf"
    ],
    "lexKeywordOrIdentifier": [
      "l.peek",
      "l.next",
      "isAlphaNumeric",
      "l.backup",
      "strings.ToLower",
      "l.emit",
      "strings.Contains"
    ],
    "lexLineComment": [
      "posrange.Pos",
      "len",
      "l.next",
      "isEndOfLine",
      "l.backup",
      "l.emit"
    ],
    "lexNumber": [
      "l.scanNumber",
      "l.errorf",
      "l.emit"
    ],
    "lexNumberOrDuration": [
      "l.scanNumber",
      "l.emit",
      "acceptRemainingDuration",
      "l.backup",
      "l.errorf"
    ],
    "lexRawString": [
      "l.next",
      "l.errorf",
      "l.emit"
    ],
    "lexSpace": [
      "isSpace",
      "l.peek",
      "l.next",
      "l.ignore"
    ],
    "lexStatements": [
      "l.scanDurationKeyword",
      "strings.HasPrefix",
      "l.next",
      "l.emit",
      "isDigit",
      "l.backup",
      "isAlpha",
      "skipSpaces",
      "l.errorf",
      "isSpace",
      "l.peek"
    ],
    "lexString": [
      "l.next",
      "l.errorf",
      "l.emit"
    ],
    "lexValueSequence": [
      "l.errorf",
      "l.emit",
      "lexSpace",
      "isDigit",
      "l.backup",
      "l.next",
      "l.peek",
      "isSpace",
      "lexNumber",
      "isAlpha"
    ],
    "limitAppender.Append": [
      "value.IsStaleNaN",
      "app.Appender.Append"
    ],
    "limitToString": [
      "fmt.Sprintf"
    ],
    "linearRegression": [
      "float64",
      "kahanSumInc",
      "math.IsInf",
      "math.NaN"
    ],
    "linodeMetrics.Register": [
      "m.metricRegisterer.RegisterMetrics"
    ],
    "linodeMetrics.Unregister": [
      "m.metricRegisterer.UnregisterMetrics"
    ],
    "lintScrapeConfigs": [
      "fmt.Fprintf"
    ],
    "listBlocks": [
      "db.Close",
      "db.Blocks",
      "printBlocks",
      "tsdb.OpenDBReadOnly",
      "?.Err",
      "tsdb_errors.NewMulti"
    ],
    "listCheckpoints": [
      "len",
      "slices.SortFunc",
      "os.ReadDir",
      "strings.HasPrefix",
      "fi.Name",
      "fi.IsDir",
      "fmt.Errorf",
      "strconv.Atoi",
      "append"
    ],
    "listChunkFiles": [
      "strconv.ParseUint",
      "fi.Name",
      "int",
      "filepath.Join",
      "os.ReadDir"
    ],
    "listChunkSeriesIterator.Next": [
      "len"
    ],
    "listSegments": [
      "os.ReadDir",
      "f.Name",
      "strconv.Atoi",
      "append",
      "slices.SortFunc",
      "len",
      "errors.New"
    ],
    "listSeriesIterator.At": [
      "it.samples.Get",
      "s.T",
      "s.F"
    ],
    "listSeriesIterator.AtFloatHistogram": [
      "it.samples.Get",
      "s.T",
      "s.FH"
    ],
    "listSeriesIterator.AtHistogram": [
      "it.samples.Get",
      "s.T",
      "s.H"
    ],
    "listSeriesIterator.AtT": [
      "it.samples.Get",
      "s.T"
    ],
    "listSeriesIterator.Next": [
      "?.Type",
      "it.samples.Get",
      "it.samples.Len"
    ],
    "listSeriesIterator.Seek": [
      "s.Type",
      "sort.Search",
      "?.Type",
      "it.samples.Len",
      "it.samples.Get",
      "s.T"
    ],
    "listSeriesIteratorWithCopy.AtFloatHistogram": [
      "it.listSeriesIterator.AtFloatHistogram",
      "ih.CopyTo"
    ],
    "listSeriesIteratorWithCopy.AtHistogram": [
      "it.listSeriesIterator.AtHistogram",
      "ih.CopyTo"
    ],
    "literalPrefixInsensitiveStringMatcher.Matches": [
      "hasPrefixCaseInsensitive",
      "m.right.Matches",
      "len"
    ],
    "literalPrefixSensitiveStringMatcher.Matches": [
      "strings.HasPrefix",
      "m.right.Matches",
      "len"
    ],
    "literalSuffixStringMatcher.Matches": [
      "len",
      "strings.HasSuffix",
      "hasSuffixCaseInsensitive",
      "m.left.Matches"
    ],
    "loadAzureAdConfig": [
      "os.ReadFile",
      "yaml.UnmarshalStrict"
    ],
    "loadCmd.append": [
      "appendSample",
      "cmd.appendCustomHistogram"
    ],
    "loadCmd.appendCustomHistogram": [
      "m.Get",
      "processClassicHistogramSeries",
      "len",
      "appendSample",
      "h.Validate",
      "append",
      "m.Has",
      "panic",
      "math.IsNaN",
      "histogram.SetSum",
      "fmt.Sprintf",
      "histogram.SetBucketCount",
      "fh.Validate",
      "histogram.Convert",
      "h.ToFloat",
      "sort.Slice",
      "convertnhcb.GetHistogramMetricBaseName",
      "strconv.ParseFloat",
      "histogram.SetCount",
      "make"
    ],
    "loadCmd.set": [
      "ts.UnixNano",
      "int64",
      "ts.Add",
      "m.Hash",
      "make",
      "len",
      "append"
    ],
    "loadConfiguration": [
      "t.Helper",
      "config.Load",
      "promslog.NewNopLogger",
      "require.NoError"
    ],
    "loadProfile": [
      "scw.StringPtr",
      "sdConfig.secretKeyForConfig",
      "scw.BoolPtr"
    ],
    "lockStaticDiscoverer.Run": [
      "close",
      "s.mu.Lock",
      "s.mu.Unlock",
      "ctx.Done"
    ],
    "logUnfinishedQueries": [
      "fd.Close",
      "make",
      "fd.Read",
      "parseBrokenJSON",
      "logger.Info",
      "os.Stat",
      "os.Open",
      "logger.Error"
    ],
    "login": [
      "rpcclient.Call"
    ],
    "lookupFromAnyServer": [
      "net.JoinHostPort",
      "askServerForName",
      "logger.Warn",
      "fmt.Errorf"
    ],
    "lookupWithSearchPath": [
      "dns.ClientConfigFromFile",
      "fmt.Errorf",
      "conf.NameList",
      "lookupFromAnyServer"
    ],
    "lv": [
      "model.LabelValue",
      "model.LabelValue"
    ],
    "main": [
      "remote.NewStorage",
      "conntrack.DialWithTracing",
      "db.SetWriteNotified",
      "fmt.Fprintf",
      "version.BuildContext",
      "g.Add",
      "tracingManager.Run",
      "?.IntVar",
      "discoveryManagerScrape.ApplyConfig",
      "a.Usage",
      "cancelNotify",
      "os.Getenv",
      "version.Print",
      "klogv2.SetSlogLogger",
      "prom_runtime.FdLimits",
      "int64",
      "webHandler.Run",
      "collectors.NewGoCollector",
      "a.Parse",
      "?.EnumVar",
      "agentOnlyFlag",
      "logger.Error",
      "prom_runtime.VMLimits",
      "web.New",
      "logging.NewJSONFileLogger",
      "runtime.SetBlockProfileRate",
      "supportedRemoteWriteProtoMsgs.Strings",
      "discoveryManagerScrape.SyncCh",
      "notifierManager.Stop",
      "strings.Trim",
      "context.Background",
      "ruleManager.Update",
      "notifs.DeleteNotification",
      "config.LoadFile",
      "rules.ParseFiles",
      "cfg.AlertingConfig.AlertmanagerConfigs.ToMap",
      "errors.New",
      "?.Seconds",
      "y.String",
      "rules.NewManager",
      "append",
      "webHandler.Listeners",
      "prom_runtime.Statfs",
      "?.Bool",
      "?.Version",
      "documentcli.GenerateMarkdown",
      "promslog.New",
      "notifs.AddNotification",
      "logger.Warn",
      "storage.NewFanout",
      "tracing.NewManager",
      "prometheus.MustRegister",
      "collectors.WithGoCollectorRuntimeMetrics",
      "boilerplateFlags.GetFlag",
      "ruleManager.Stop",
      "promql.NewActiveQueryTracker",
      "filepath.Glob",
      "reloadConfig",
      "goregexp.MustCompile",
      "cfg.setFeatureListOptions",
      "sig.String",
      "reloadReady.Close",
      "notifications.NewNotifications",
      "model.ParseDuration",
      "len",
      "?.String",
      "serverOnlyFlag",
      "?.BoolVar",
      "promslogflag.AddFlags",
      "logger.With",
      "promql.NewEngine",
      "webHandler.Quit",
      "runtime.SetMutexProfileFraction",
      "?.StringsVar",
      "close",
      "localStorage.Set",
      "g.Run",
      "a.Version",
      "?.SetValue",
      "memlimit.SetGoMemLimitWithOpts",
      "queryEngine.SetQueryLogger",
      "cfg.GetScrapeConfigs",
      "?.FloatVar",
      "fmt.Errorf",
      "discovery.Name",
      "webHandler.SetReady",
      "scrapeManager.Run",
      "openDBWithMetrics",
      "computeExternalURL",
      "fmt.Fprintln",
      "logger.Info",
      "maxprocs.Logger",
      "parseCompressionType",
      "discovery.RegisterK8sClientMetricsWithPrometheus",
      "?.Int64Var",
      "a.Model",
      "configSuccessTime.SetToCurrentTime",
      "time.Duration",
      "noStepSubqueryInterval.Set",
      "prom_runtime.Uname",
      "reloadReady.once.Do",
      "?.BytesVar",
      "?.DurationVar",
      "strings.TrimPrefix",
      "configSuccess.Set",
      "context.WithCancel",
      "kingpin.New",
      "fmt.Sprintf",
      "promslog.NewNopLogger",
      "rules.EngineQueryFunc",
      "scraper.Set",
      "ruleManager.Run",
      "webHandler.Reload",
      "discoveryManagerNotify.SyncCh",
      "filepath.Base",
      "compileCORSRegexString",
      "os.Exit",
      "version.Info",
      "slog.SetDefault",
      "maxprocs.Set",
      "discovery.NewManager",
      "notifierManager.Run",
      "a.Flag",
      "rwProtoMsgFlagValue",
      "memlimit.WithRatio",
      "klog.SetOutputBySeverity",
      "make",
      "cfg.tsdb.ToTSDBOptions",
      "?.Default",
      "filepath.Abs",
      "f.Value.String",
      "fanoutStorage.Close",
      "cfg.agent.ToAgentOptions",
      "agent.Open",
      "?.StringVar",
      "strconv.Itoa",
      "?.PlaceHolder",
      "cfgFile.GetScrapeConfigs",
      "memlimit.WithProvider",
      "conntrack.NewDialContextFunc",
      "toolkit_web.Validate",
      "signal.Notify",
      "prometheus.Unregister",
      "?.UsageWriter",
      "config.GenerateChecksum",
      "panic",
      "notifier.NewManager",
      "scrape.NewManager",
      "time.Tick",
      "updateGoGC",
      "memlimit.ApplyFallback",
      "cfg.web.ExternalURL.String",
      "discoveryManagerNotify.ApplyConfig",
      "discoveryManagerScrape.Run",
      "?.Hidden",
      "tsdb.NewDBStats",
      "scrapeManager.Stop",
      "localStorage.getStats",
      "a.HelpFlag.Short",
      "cancelScrape",
      "discoveryManagerNotify.Run",
      "supportedRemoteWriteProtoMsgs.String",
      "?.Action",
      "rules.SendAlerts",
      "tracingManager.Stop",
      "logger.Debug",
      "cancelWeb",
      "memlimit.WithLogger",
      "discovery.CreateAndRegisterSDMetrics",
      "CheckConfig",
      "checkRulesCmd.FullCommand",
      "backfillOpenMetrics",
      "?.PlaceHolder",
      "queryInstantCmd.Flag",
      "promconfig.LoadHTTPConfigFile",
      "RulesUnitTestResult",
      "version.Print",
      "?.String",
      "queryInstantCmd.FullCommand",
      "kingpin.New",
      "?.Default",
      "queryCmd.Flag",
      "testRulesCmd.Arg",
      "tsdbCmd.Command",
      "app.Parse",
      "fmt.Printf",
      "debugPprof",
      "checkExperimental",
      "QueryInstant",
      "documentcli.GenerateMarkdown",
      "labelsDeletePromQL",
      "debugAllCmd.Arg",
      "?.DurationVar",
      "formatPromQL",
      "app.Version",
      "pushMetricsCmd.FullCommand",
      "debugAllCmd.FullCommand",
      "promQLLabelsDeleteCmd.FullCommand",
      "?.ExistingFiles",
      "tsdbDumpCmd.Arg",
      "kingpin.Fatalf",
      "model.Duration",
      "newRulesLintConfig",
      "querySeriesCmd.FullCommand",
      "listBlocks",
      "?.StringMap",
      "queryLabelsCmd.Flag",
      "pushCmd.Flag",
      "tsdbBenchWriteCmd.Arg",
      "?.Int64",
      "?.Enum",
      "?.Short",
      "queryInstantCmd.Arg",
      "sdCheckCmd.Arg",
      "testRulesCmd.Flag",
      "importRulesCmd.Flag",
      "tsdbAnalyzeCmd.FullCommand",
      "sdCheckCmd.Flag",
      "checkWebConfigCmd.Arg",
      "pushCmd.Command",
      "?.Hidden",
      "checkConfigCmd.FullCommand",
      "checkServerReadyCmd.FullCommand",
      "documentationCmd.FullCommand",
      "checkRulesCmd.Flag",
      "tsdbListCmd.Flag",
      "os.Exit",
      "tsdbListCmd.FullCommand",
      "promQLLabelsSetCmd.FullCommand",
      "app.HelpFlag.Short",
      "tsdbAnalyzeCmd.Flag",
      "kingpin.MustParse",
      "checkErr",
      "tsdbBenchWriteCmd.FullCommand",
      "labelsSetPromQL",
      "testCmd.Flag",
      "openMetricsImportCmd.Flag",
      "openMetricsImportCmd.Arg",
      "checkConfigCmd.Flag",
      "strings.Join",
      "querySeriesCmd.Flag",
      "promQLLabelsSetCmd.Arg",
      "version.ComponentUserAgent",
      "promQLFormatCmd.FullCommand",
      "checkCmd.Flag",
      "app.Flag",
      "checkServerReadyCmd.Flag",
      "filepath.Join",
      "serverURL.User.Username",
      "querySeriesCmd.Arg",
      "queryLabelsCmd.Arg",
      "sdCheckCmd.FullCommand",
      "newConfigLintConfig",
      "?.ExistingFile",
      "debugPprofCmd.Arg",
      "importCmd.Command",
      "PushMetrics",
      "queryRangeCmd.FullCommand",
      "analyzeBlock",
      "openMetricsImportCmd.FullCommand",
      "context.Background",
      "checkRulesCmd.Arg",
      "checkServerHealthCmd.Flag",
      "queryRangeCmd.Flag",
      "strconv.FormatInt",
      "debugPprofCmd.FullCommand",
      "queryLabelsCmd.FullCommand",
      "checkCmd.Command",
      "queryAnalyzeCmd.Flag",
      "?.StringVar",
      "promQLLabelsCmd.Command",
      "QueryRange",
      "debugMetricsCmd.FullCommand",
      "tsdbDumpOpenMetricsCmd.FullCommand",
      "dumpSamples",
      "?.Bool",
      "?.Required",
      "queryCmd.Command",
      "tsdbAnalyzeCmd.Arg",
      "promconfig.NewRoundTripperFromConfig",
      "strings.Split",
      "debugMetrics",
      "CheckServerStatus",
      "checkConfigCmd.Arg",
      "?.StringsVar",
      "?.Int",
      "tsdbDumpCmd.Flag",
      "importCmd.Flag",
      "promQLCmd.Command",
      "CheckSD",
      "app.Model",
      "?.Strings",
      "tsdbDumpOpenMetricsCmd.Arg",
      "promQLLabelsSetCmd.Flag",
      "importRulesCmd.FullCommand",
      "QuerySeries",
      "filepath.Base",
      "queryRangeCmd.Arg",
      "debugCmd.Command",
      "pushMetricsCmd.Flag",
      "?.OpenFile",
      "checkWebConfigCmd.FullCommand",
      "CheckRules",
      "importRules",
      "?.UsageWriter",
      "?.ExistingFileVar",
      "?.URLVar",
      "tsdbBenchCmd.Command",
      "tsdbDumpOpenMetricsCmd.Flag",
      "checkMetricsCmd.FullCommand",
      "testCmd.Command",
      "checkServerHealthCmd.FullCommand",
      "CheckWebConfig",
      "debugAll",
      "QueryLabels",
      "queryAnalyzeCmd.FullCommand",
      "tsdbDumpCmd.FullCommand",
      "?.Duration",
      "tsdbListCmd.Arg",
      "promQLFormatCmd.Arg",
      "promQLLabelsDeleteCmd.Arg",
      "promconfig.WithUserAgent",
      "testRulesCmd.FullCommand",
      "queryAnalyzeCfg.run",
      "pushMetricsCmd.Arg",
      "tsdbBenchWriteCmd.Flag",
      "CheckMetrics",
      "benchmarkWrite",
      "app.Command",
      "debugMetricsCmd.Arg",
      "importRulesCmd.Arg",
      "os.Exit",
      "prom_discovery.RegisterSDMetrics",
      "sdAdapter.Run",
      "a.HelpFlag.Short",
      "a.Parse",
      "promslog.New",
      "prom_discovery.NewRefreshMetrics",
      "ctx.Done",
      "fmt.Println",
      "context.Background",
      "logger.Error",
      "adapter.NewAdapter",
      "newDiscovery",
      "prometheus.NewRegistry",
      "r.Body.Close",
      "remote.DecodeWriteRequest",
      "printV1",
      "remote.DecodeWriteV2Request",
      "fmt.Println",
      "r.Header.Get",
      "http.Error",
      "printV2",
      "fmt.Sprintf",
      "log.Fatal",
      "http.ListenAndServe",
      "http.HandleFunc",
      "err.Error",
      "promslog.New",
      "buildClients",
      "serve",
      "logger.Error",
      "os.Exit",
      "parseFlags",
      "http.Handle",
      "promhttp.Handler",
      "os.Create",
      "f.Close",
      "len",
      "path.Base",
      "os.ReadFile",
      "filepath.Join",
      "f.WriteString",
      "fmt.Sprintf",
      "log.Fatal",
      "yaml.Unmarshal",
      "promqltest.MigrateTestData",
      "fmt.Printf",
      "os.Exit",
      "flag.String",
      "flag.Parse",
      "len",
      "strings.ReplaceAll",
      "funcDocsRe.FindStringSubmatch",
      "fmt.Println",
      "make",
      "sort.Strings",
      "blackfriday.Run",
      "bufio.NewReader",
      "append",
      "fmt.Printf",
      "log.Fatalln",
      "r.ReadString",
      "saveCurrent",
      "string",
      "http.Get",
      "append",
      "sort.Strings",
      "fmt.Println",
      "fmt.Printf",
      "formatValueTypes",
      "formatValueType",
      "make",
      "len"
    ],
    "makeBucketBounds": [
      "float64"
    ],
    "makeDiscovery": [
      "makeDiscoveryWithVersion"
    ],
    "makeDiscoveryWithMetadata": [
      "makeDiscovery"
    ],
    "makeDiscoveryWithVersion": [
      "panic",
      "promslog.NewNopLogger",
      "fake.NewSimpleClientset",
      "clientset.Discovery",
      "prometheus.NewRegistry",
      "discovery.NewRefreshMetrics",
      "newDiscovererMetrics",
      "metrics.Register"
    ],
    "makeEndpointSliceV1": [
      "protocolptr",
      "boolptr",
      "strptr",
      "int32ptr"
    ],
    "makeEnumeratedNode": [
      "makeNode",
      "fmt.Sprintf"
    ],
    "makeEvenSampleSlice": [
      "valEven",
      "make",
      "sampleFunc"
    ],
    "makeExternalService": [
      "int32"
    ],
    "makeFunc": [
      "make"
    ],
    "makeIngress": [
      "classString"
    ],
    "makeInitContainerPods": [
      "types.UID",
      "int32"
    ],
    "makeInputTargetGroup": [
      "model.LabelValue",
      "model.LabelName"
    ],
    "makeInt64Pointer": [
      "new",
      "new",
      "new",
      "new"
    ],
    "makeLabels": [
      "make",
      "len",
      "append",
      "sort.Strings"
    ],
    "makeLabelsMap": [
      "make",
      "len",
      "label.GetName",
      "fmt.Sprintf",
      "label.GetValue"
    ],
    "makeLoadBalancerService": [
      "int32"
    ],
    "makeMergeSeriesSet": [
      "make",
      "len",
      "NewMockSeriesSet",
      "newGenericMergeSeriesSet"
    ],
    "makeMultiPortPods": [
      "makeOptionalBool",
      "int32",
      "types.UID"
    ],
    "makeMultiPortService": [
      "int32"
    ],
    "makePods": [
      "types.UID",
      "int32"
    ],
    "makeSeries": [
      "float64",
      "NewListSeries",
      "labels.FromStrings",
      "fmt.Sprintf",
      "append",
      "int64"
    ],
    "makeService": [
      "makeSuffixedService"
    ],
    "makeStopIterator": [
      "c.Iterator"
    ],
    "makeSuffixedService": [
      "int32",
      "fmt.Sprintf"
    ],
    "makeTestGauges": [
      "fmt.Fprintf",
      "sb.Bytes"
    ],
    "makeTimeseries": [
      "?.GetValue",
      "m.GetGauge",
      "q.GetValue",
      "m.GetHistogram",
      "b.GetCumulativeCount",
      "errors.New",
      "make",
      "len",
      "m.GetSummary",
      "?.GetSampleSum",
      "?.GetSampleCount",
      "m.GetUntyped",
      "m.GetTimestampMs",
      "?.UnixNano",
      "int64",
      "toTimeseries",
      "fmt.Sprint",
      "float64",
      "b.GetUpperBound",
      "time.Now",
      "m.GetCounter",
      "q.GetQuantile"
    ],
    "makeXDSResourceHTTPEndpointURL": [
      "fmt.Sprintf",
      "errors.New",
      "len",
      "path.Join",
      "string"
    ],
    "mapFromVM": [
      "string",
      "append"
    ],
    "mapFromVMScaleSetVM": [
      "string",
      "append"
    ],
    "mapLabelsToNumbers": [
      "t.toNumUnlocked",
      "append",
      "sizeVarint",
      "uint64",
      "t.mx.Lock",
      "t.mx.Unlock"
    ],
    "mapToArray": [
      "make",
      "len",
      "append"
    ],
    "marathonTestAppListWithContainerNetworkAndPortMappings": [
      "make"
    ],
    "marathonTestAppListWithContainerPortMappings": [
      "make"
    ],
    "marathonTestAppListWithDockerContainerPortMappings": [
      "make"
    ],
    "marathonTestAppListWithMultiplePorts": [
      "make"
    ],
    "marathonTestAppListWithPortDefinitions": [
      "make"
    ],
    "marathonTestAppListWithPortDefinitionsRequirePorts": [
      "make"
    ],
    "marshalExemplarJSON": [
      "jsonutil.MarshalFloat",
      "jsonutil.MarshalTimestamp",
      "stream.WriteObjectEnd",
      "stream.WriteObjectStart",
      "stream.WriteObjectField",
      "marshalLabelsJSON",
      "stream.WriteMore"
    ],
    "marshalFPointJSON": [
      "jsonutil.MarshalTimestamp",
      "stream.WriteMore",
      "jsonutil.MarshalFloat",
      "stream.WriteArrayEnd",
      "stream.WriteArrayStart"
    ],
    "marshalHPointJSON": [
      "stream.WriteArrayStart",
      "jsonutil.MarshalTimestamp",
      "stream.WriteMore",
      "jsonutil.MarshalHistogram",
      "stream.WriteArrayEnd"
    ],
    "marshalLabelToSizedBuffer": [
      "len",
      "copy",
      "encodeSize"
    ],
    "marshalLabelsJSON": [
      "stream.WriteString",
      "stream.WriteRaw",
      "stream.WriteObjectEnd",
      "stream.WriteObjectStart",
      "lbls.Range",
      "stream.WriteMore"
    ],
    "marshalLabelsToSizedBuffer": [
      "len",
      "marshalLabelToSizedBuffer"
    ],
    "marshalNumbersToSizedBuffer": [
      "len",
      "encodeVarint"
    ],
    "marshalSampleJSON": [
      "stream.WriteObjectField",
      "jsonutil.MarshalTimestamp",
      "stream.WriteArrayEnd",
      "stream.WriteObjectEnd",
      "stream.WriteObjectStart",
      "marshalLabelsJSON",
      "stream.WriteMore",
      "stream.WriteArrayStart",
      "jsonutil.MarshalFloat",
      "jsonutil.MarshalHistogram"
    ],
    "marshalSeriesJSON": [
      "marshalFPointJSON",
      "len",
      "stream.WriteArrayEnd",
      "marshalHPointJSON",
      "stream.WriteObjectStart",
      "stream.WriteArrayStart",
      "stream.WriteMore",
      "stream.WriteObjectEnd",
      "stream.WriteObjectField",
      "marshalLabelsJSON"
    ],
    "marshalTargetGroups": [
      "make",
      "len",
      "targetGroupAlias",
      "json.Marshal"
    ],
    "matchLabels": [
      "m.Matches",
      "lset.Get"
    ],
    "matches": [
      "lbls.Get",
      "m.Matches"
    ],
    "matchesHostnamePattern": [
      "strings.Split",
      "len"
    ],
    "matchesMatcherSets": [
      "len",
      "matches"
    ],
    "matchesRun": [
      "run.MatchString"
    ],
    "matchesSomeMatcherSet": [
      "m.Matches",
      "lbls.Get"
    ],
    "maxHeap.get": [
      "slices.SortFunc"
    ],
    "maxHeap.init": [
      "make"
    ],
    "maxHeap.push": [
      "append",
      "len"
    ],
    "maxSchemaAppender.AppendHistogram": [
      "app.Appender.AppendHistogram",
      "histogram.IsExponentialSchema",
      "h.ReduceResolution",
      "fh.ReduceResolution"
    ],
    "maxTimestamp.Get": [
      "m.mtx.Lock",
      "m.mtx.Unlock"
    ],
    "maxTimestamp.Set": [
      "m.mtx.Lock",
      "m.mtx.Unlock",
      "m.Gauge.Set"
    ],
    "measureTime": [
      "time.Now",
      "f",
      "time.Since",
      "fmt.Printf"
    ],
    "memChunk.OverlapsClosedInterval": [
      "overlapsClosedInterval"
    ],
    "memSeries.append": [
      "s.appendPreprocessor",
      "s.app.Append",
      "s.txs.add"
    ],
    "memSeries.appendFloatHistogram": [
      "s.histogramsAppendPreprocessor",
      "s.app.AppendFloatHistogram",
      "s.txs.add",
      "rangeForTimestamp"
    ],
    "memSeries.appendHistogram": [
      "s.histogramsAppendPreprocessor",
      "s.app.AppendHistogram",
      "s.txs.add",
      "rangeForTimestamp"
    ],
    "memSeries.appendPreprocessor": [
      "s.cutNewHeadChunk",
      "c.chunk.Bytes",
      "c.chunk.Encoding",
      "c.chunk.NumSamples",
      "rangeForTimestamp",
      "computeChunkEndTime",
      "len"
    ],
    "memSeries.appendable": [
      "s.maxTime",
      "storage.NewDuplicateHistogramToFloatErr",
      "math.Float64bits",
      "storage.NewDuplicateFloatErr"
    ],
    "memSeries.appendableFloatHistogram": [
      "s.maxTime",
      "fh.Equals"
    ],
    "memSeries.appendableHistogram": [
      "s.maxTime",
      "h.Equals"
    ],
    "memSeries.chunk": [
      "errors.As",
      "panic",
      "memChunkPool.Get",
      "s.headChunks.atOffset",
      "int",
      "s.headChunks.len",
      "len",
      "chunkDiskMapper.Chunk"
    ],
    "memSeries.cleanupAppendIDsBelow": [
      "s.txs.cleanupAppendIDsBelow"
    ],
    "memSeries.cutNewHeadChunk": [
      "s.headChunks.chunk.Appender",
      "chunkenc.IsValidEncoding",
      "chunkenc.NewEmptyChunk",
      "panic",
      "chunkenc.NewXORChunk",
      "rangeForTimestamp"
    ],
    "memSeries.cutNewOOOHeadChunk": [
      "s.mmapCurrentOOOHeadChunk",
      "NewOOOChunk"
    ],
    "memSeries.encodeToSnapshotRecord": [
      "s.labels",
      "buf.PutBEFloat64",
      "record.EncodeHistogram",
      "buf.PutUvarint",
      "buf.Get",
      "buf.PutByte",
      "uint64",
      "record.EncodeLabels",
      "s.Lock",
      "s.Unlock",
      "buf.PutBE64int64",
      "byte",
      "s.headChunks.chunk.Bytes",
      "record.EncodeFloatHistogram",
      "buf.PutBE64",
      "s.headChunks.chunk.Encoding",
      "buf.PutUvarintBytes"
    ],
    "memSeries.headChunkID": [
      "chunks.HeadChunkID"
    ],
    "memSeries.histogramsAppendPreprocessor": [
      "s.cutNewHeadChunk",
      "c.chunk.Encoding",
      "c.chunk.NumSamples",
      "c.chunk.Bytes",
      "rangeForTimestamp",
      "float64",
      "computeChunkEndTime",
      "len"
    ],
    "memSeries.insert": [
      "c.chunk.NumSamples",
      "int",
      "s.cutNewOOOHeadChunk",
      "c.chunk.Insert"
    ],
    "memSeries.iterator": [
      "s.headChunks.len",
      "chk.chunk.NumSamples",
      "s.txs.iterator",
      "it.At",
      "it.Next",
      "c.Iterator",
      "makeStopIterator",
      "int",
      "c.NumSamples",
      "isoState.IsolationDisabled",
      "s.headChunks.atOffset",
      "len",
      "max",
      "chunkenc.NewNopIterator"
    ],
    "memSeries.labels": [
      "s.Lock",
      "s.Unlock"
    ],
    "memSeries.maxTime": [
      "len"
    ],
    "memSeries.minTime": [
      "len",
      "s.headChunks.oldest"
    ],
    "memSeries.mmapChunks": [
      "append",
      "uint16",
      "chk.chunk.NumSamples",
      "s.headChunks.len",
      "s.headChunks.atOffset",
      "chunkDiskMapper.WriteChunk"
    ],
    "memSeries.mmapCurrentOOOHeadChunk": [
      "chunkDiskMapper.WriteChunk",
      "append",
      "memchunk.chunk.NumSamples",
      "s.ooo.oooHeadChunk.chunk.ToEncodedChunks",
      "handleChunkWriteError",
      "make",
      "len",
      "logger.Error",
      "s.lset.String",
      "uint16"
    ],
    "memSeries.oooChunk": [
      "int",
      "len",
      "chunkDiskMapper.Chunk"
    ],
    "memSeries.oooHeadChunkID": [
      "chunks.HeadChunkID"
    ],
    "memSeries.truncateChunksBefore": [
      "chk.len",
      "len",
      "chunks.HeadChunkID",
      "append",
      "c.ref.GreaterThan"
    ],
    "memSeries.updateTimestamp": [
      "m.Unlock",
      "m.Lock"
    ],
    "mergeGenericQuerier.Close": [
      "tsdb_errors.NewMulti",
      "querier.Close",
      "errs.Add",
      "errs.Err"
    ],
    "mergeGenericQuerier.LabelNames": [
      "q.mergeResults",
      "q.LabelNames",
      "fmt.Errorf"
    ],
    "mergeGenericQuerier.LabelValues": [
      "q.mergeResults",
      "q.LabelValues",
      "fmt.Errorf"
    ],
    "mergeGenericQuerier.Select": [
      "qr.Select",
      "newGenericMergeSeriesSet",
      "s.Next",
      "copy",
      "wg.Add",
      "make",
      "len",
      "append",
      "querier.Select",
      "wg.Done",
      "wg.Wait",
      "close"
    ],
    "mergeGenericQuerier.mergeResults": [
      "ws.Merge",
      "truncateToLimit",
      "mergeStrings",
      "lq.Len",
      "resultsFn",
      "lq.Get",
      "lq.SplitByHalf",
      "q.mergeResults"
    ],
    "mergeRanges": [
      "first.PositionRange",
      "last.PositionRange"
    ],
    "mergeResult": [
      "mergeSamples",
      "valuesToSamples",
      "record.Time",
      "record.Value",
      "record.Measurement",
      "record.Values",
      "filterOutBuiltInLabels",
      "concatLabels",
      "tagsToLabelPairs"
    ],
    "mergeSamples": [
      "make",
      "len",
      "append"
    ],
    "mergeStrings": [
      "len",
      "make",
      "append"
    ],
    "mergedOOOChunks.Iterator": [
      "storage.ChainSampleIteratorFromIterables"
    ],
    "mergedStringIter.Next": [
      "m.a.At",
      "m.a.Next",
      "m.a.Err",
      "m.Err",
      "m.b.At",
      "m.b.Next",
      "m.b.Err"
    ],
    "metaEntry.size": [
      "len"
    ],
    "metaStatistics.String": [
      "fmt.Sprintf",
      "ms.Count"
    ],
    "metaStatistics.update": [
      "ms.avgPop.update",
      "int",
      "ms.maxPop.update",
      "ms.total.update",
      "ms.minPop.update"
    ],
    "metadataEntryEqual": [
      "labels.Equal"
    ],
    "metricRegistererImpl.RegisterMetrics": [
      "rh.reg.Register",
      "rh.UnregisterMetrics",
      "fmt.Errorf"
    ],
    "metricRegistererImpl.UnregisterMetrics": [
      "rh.reg.Unregister"
    ],
    "metrics.instrumentHandler": [
      "m.requestCounter.WithLabelValues",
      "promhttp.InstrumentHandlerCounter",
      "m.requestCounter.MustCurryWith",
      "promhttp.InstrumentHandlerDuration",
      "m.requestDuration.MustCurryWith",
      "promhttp.InstrumentHandlerResponseSize",
      "m.responseSize.MustCurryWith"
    ],
    "metrics.instrumentHandlerWithPrefix": [
      "m.instrumentHandler"
    ],
    "mmap": [
      "errors.New",
      "unix.Mmap",
      "int",
      "f.Fd",
      "uint32",
      "os.NewSyscallError",
      "syscall.MapViewOfFile",
      "syscall.CloseHandle",
      "unsafe.Pointer",
      "syscall.CreateFileMapping",
      "syscall.Handle",
      "f.Fd",
      "uintptr"
    ],
    "mmappedChunk.OverlapsClosedInterval": [
      "overlapsClosedInterval"
    ],
    "mmappedChunksDir": [
      "filepath.Join"
    ],
    "mmappedFile.Close": [
      "f.m.Unmap",
      "fmt.Errorf",
      "f.f.Close",
      "errors.Join"
    ],
    "mockAppendable.Append": [
      "l.Hash",
      "l.IsEmpty",
      "l.HasDuplicateLabelNames",
      "append"
    ],
    "mockAppendable.AppendCTZeroSample": [
      "l.HasDuplicateLabelNames",
      "append",
      "l.Hash",
      "l.IsEmpty"
    ],
    "mockAppendable.AppendExemplar": [
      "l.Hash",
      "append"
    ],
    "mockAppendable.AppendHistogram": [
      "l.Hash",
      "l.IsEmpty",
      "l.HasDuplicateLabelNames",
      "append"
    ],
    "mockAppendable.AppendHistogramCTZeroSample": [
      "l.Hash",
      "l.IsEmpty",
      "l.HasDuplicateLabelNames",
      "append"
    ],
    "mockAppendable.Commit": [
      "m.Rollback"
    ],
    "mockAppendable.SetOptions": [
      "panic"
    ],
    "mockAppendable.UpdateMetadata": [
      "append"
    ],
    "mockBReader.Tombstones": [
      "tombstones.NewMemTombstones"
    ],
    "mockChunkIterator.At": [
      "panic",
      "chunkenc.FromData",
      "chunkenc.Encoding"
    ],
    "mockChunkIterator.Next": [
      "len"
    ],
    "mockChunkQuerier.Select": [
      "NewMockChunkSeriesSet",
      "make",
      "len",
      "copy",
      "sort.Sort",
      "chunkSeriesByLabel"
    ],
    "mockChunkReader.ChunkOrIterable": [
      "errors.New"
    ],
    "mockChunkSeriesSet.At": [
      "?.ToLabels",
      "m.series"
    ],
    "mockChunkSeriesSet.Err": [
      "m.err"
    ],
    "mockChunkSeriesSet.Next": [
      "len",
      "len",
      "m.next"
    ],
    "mockChunkSeriesSet.Warnings": [
      "m.ws"
    ],
    "mockCompactorFailing.CompactOOO": [
      "errors.New"
    ],
    "mockCompactorFailing.Write": [
      "createBlock",
      "require.NoError",
      "?.ULID.String",
      "require.Equal",
      "len",
      "genSeries",
      "block.Meta",
      "errors.New",
      "OpenBlock",
      "block.Close",
      "append",
      "filepath.Join",
      "b.Meta",
      "blockDirs"
    ],
    "mockCompactorFn.Compact": [
      "c.compactFn"
    ],
    "mockCompactorFn.Plan": [
      "c.planFn"
    ],
    "mockCompactorFn.Write": [
      "c.writeFn"
    ],
    "mockCredential.GetToken": [
      "m.MethodCalled",
      "args.Get",
      "args.Error"
    ],
    "mockDialContext.dialContext": [
      "dc.addrFrequencyMu.Lock",
      "dc.addrFrequencyMu.Unlock",
      "dc.MethodCalled",
      "args.Error"
    ],
    "mockDialContext.getCount": [
      "dc.addrFrequencyMu.Unlock",
      "dc.addrFrequencyMu.Lock"
    ],
    "mockEC2Client.DescribeAvailabilityZonesWithContext": [
      "len",
      "errors.New",
      "make",
      "strptr"
    ],
    "mockEC2Client.DescribeInstancesPagesWithContext": [
      "r.SetInstances",
      "r.SetOwnerId",
      "o.SetReservations",
      "fn"
    ],
    "mockIONOSServers": [
      "os.ReadFile",
      "err.Error",
      "w.Write",
      "r.Header.Get",
      "fmt.Sprintf",
      "http.Error",
      "?.Set",
      "w.Header"
    ],
    "mockIndex.AddSeries": [
      "fmt.Errorf",
      "l.Range",
      "append",
      "fmt.Errorf",
      "l.Range",
      "append"
    ],
    "mockIndex.LabelNames": [
      "series.l.Get",
      "series.l.Range",
      "make",
      "append",
      "sort.Strings",
      "len",
      "matcher.Matches"
    ],
    "mockIndex.LabelNamesFor": [
      "postings.At",
      "postings.Err",
      "len",
      "append",
      "make",
      "postings.Next",
      "?.l.Range"
    ],
    "mockIndex.LabelValueFor": [
      "?.l.Get"
    ],
    "mockIndex.LabelValues": [
      "append",
      "matcher.Matches",
      "series.l.Get",
      "slices.Contains",
      "len",
      "append"
    ],
    "mockIndex.Postings": [
      "append",
      "m.SortedPostings",
      "NewListPostings",
      "Merge",
      "make",
      "len",
      "append",
      "index.NewListPostings",
      "index.Merge"
    ],
    "mockIndex.PostingsForAllLabelValues": [
      "append",
      "index.NewListPostings",
      "index.Merge"
    ],
    "mockIndex.PostingsForLabelMatching": [
      "index.NewListPostings",
      "index.Merge",
      "match",
      "append"
    ],
    "mockIndex.Series": [
      "errors.New",
      "builder.Assign",
      "append",
      "builder.Assign",
      "append"
    ],
    "mockIndex.ShardedPostings": [
      "append",
      "index.NewListPostings",
      "make",
      "p.Next",
      "p.At",
      "s.l.Hash"
    ],
    "mockIndex.SortedLabelValues": [
      "m.LabelValues",
      "sort.Strings"
    ],
    "mockIndex.SortedPostings": [
      "ErrPostings",
      "fmt.Errorf",
      "sort.Slice",
      "labels.Compare",
      "NewListPostings",
      "ExpandPostings",
      "labels.Compare",
      "index.NewListPostings",
      "index.ExpandPostings",
      "index.ErrPostings",
      "fmt.Errorf",
      "sort.Slice"
    ],
    "mockIndex.Symbols": [
      "sort.Strings",
      "index.NewStringListIter",
      "append"
    ],
    "mockIndex.WritePostings": [
      "index.ExpandPostings",
      "fmt.Errorf"
    ],
    "mockIndexWriter.AddSeries": [
      "make",
      "len",
      "copyChunk",
      "fmt.Errorf",
      "append"
    ],
    "mockMatcherIndex.LabelNamesFor": [
      "errors.New"
    ],
    "mockMatcherIndex.LabelValueFor": [
      "errors.New"
    ],
    "mockMatcherIndex.LabelValues": [
      "errors.New"
    ],
    "mockMatcherIndex.Postings": [
      "index.EmptyPostings"
    ],
    "mockMatcherIndex.PostingsForAllLabelValues": [
      "index.ErrPostings",
      "errors.New"
    ],
    "mockMatcherIndex.PostingsForLabelMatching": [
      "index.ErrPostings",
      "errors.New"
    ],
    "mockMatcherIndex.SortedLabelValues": [
      "errors.New"
    ],
    "mockMatcherIndex.SortedPostings": [
      "index.EmptyPostings"
    ],
    "mockQuerier.LabelNames": [
      "m.mtx.Lock",
      "m.mtx.Unlock"
    ],
    "mockQuerier.LabelValues": [
      "m.mtx.Unlock",
      "m.mtx.Lock",
      "append"
    ],
    "mockQuerier.Select": [
      "len",
      "copy",
      "sort.Sort",
      "append",
      "m.mtx.Unlock",
      "make",
      "NewListSeries",
      "labels.FromStrings",
      "seriesByLabel",
      "m.mtx.Lock"
    ],
    "mockReaderOfLabels.LabelNames": [
      "panic"
    ],
    "mockReaderOfLabels.LabelNamesFor": [
      "panic"
    ],
    "mockReaderOfLabels.LabelValueFor": [
      "panic"
    ],
    "mockReaderOfLabels.LabelValues": [
      "make"
    ],
    "mockReaderOfLabels.Postings": [
      "panic"
    ],
    "mockReaderOfLabels.PostingsForAllLabelValues": [
      "panic"
    ],
    "mockReaderOfLabels.PostingsForLabelMatching": [
      "panic"
    ],
    "mockReaderOfLabels.Series": [
      "panic"
    ],
    "mockReaderOfLabels.ShardedPostings": [
      "panic"
    ],
    "mockReaderOfLabels.SortedLabelValues": [
      "panic"
    ],
    "mockReaderOfLabels.SortedPostings": [
      "panic"
    ],
    "mockReaderOfLabels.Symbols": [
      "panic"
    ],
    "mockSampleIterator.At": [
      "?.T",
      "?.F"
    ],
    "mockSampleIterator.AtFloatHistogram": [
      "?.T",
      "?.FH"
    ],
    "mockSampleIterator.AtHistogram": [
      "?.T",
      "?.H"
    ],
    "mockSampleIterator.AtT": [
      "?.T"
    ],
    "mockSampleIterator.Next": [
      "len",
      "?.Type"
    ],
    "mockSampleIterator.Seek": [
      "len",
      "?.T",
      "?.Type"
    ],
    "mockScalewayInstance": [
      "r.Header.Get",
      "http.Error",
      "?.Set",
      "w.Header",
      "os.ReadFile",
      "err.Error",
      "w.Write"
    ],
    "mockSeries.Iterator": [
      "c.Iterator",
      "storage.ChainSampleIteratorFromIterators",
      "append",
      "chunkenc.MockSeriesIterator"
    ],
    "mockSeries.Labels": [
      "labels.FromStrings",
      "labels.FromStrings"
    ],
    "mockSeriesIterator.At": [
      "m.at"
    ],
    "mockSeriesIterator.Err": [
      "m.err"
    ],
    "mockSeriesIterator.Next": [
      "m.next",
      "len"
    ],
    "mockSeriesIterator.Seek": [
      "m.seek"
    ],
    "mockSeriesSet.At": [
      "m.series"
    ],
    "mockSeriesSet.Err": [
      "m.err"
    ],
    "mockSeriesSet.Next": [
      "len",
      "m.next"
    ],
    "mockSeriesSet.Warnings": [
      "m.ws"
    ],
    "mockServer": [
      "w.WriteHeader",
      "fmt.Fprintln",
      "httptest.NewServer",
      "http.HandlerFunc",
      "r.ParseForm",
      "t.Cleanup",
      "httptest.NewServer",
      "http.HandlerFunc",
      "?.Decode",
      "json.NewDecoder",
      "w.WriteHeader",
      "http.ServeFile"
    ],
    "mockWriter.Write": [
      "fmt.Errorf",
      "append",
      "len",
      "proto.Unmarshal"
    ],
    "mockdiscoveryProvider.Run": [
      "ctx.Done",
      "time.After",
      "make",
      "len"
    ],
    "mockedRemoteClient.Read": [
      "fmt.Errorf",
      "FromLabelMatchers",
      "s.ToLabels",
      "l.Get",
      "m.Matches",
      "append",
      "FromQueryResult"
    ],
    "multiError.Add": [
      "errors.As",
      "append"
    ],
    "multiError.Err": [
      "len"
    ],
    "multiReadCloser.Close": [
      "tsdb_errors.NewMulti",
      "tsdb_errors.CloseAll",
      "?.Err"
    ],
    "multiReadCloser.Read": [
      "m.reader.Read"
    ],
    "multipleAppender.add": [
      "m.appender.Append",
      "fmt.Errorf",
      "m.commit"
    ],
    "multipleAppender.commit": [
      "fmt.Errorf",
      "m.writer.Appender",
      "m.appender.Commit"
    ],
    "multipleAppender.flushAndCommit": [
      "m.commit",
      "m.writer.Flush",
      "fmt.Errorf"
    ],
    "munmap": [
      "errors.New",
      "unix.Munmap",
      "unsafe.Pointer",
      "os.NewSyscallError",
      "syscall.UnmapViewOfFile"
    ],
    "mustNewMatcher": [
      "NewMatcher",
      "require.NoError"
    ],
    "mustParseURL": [
      "url.Parse",
      "panic"
    ],
    "mustRegisterMessage": [
      "typeRegistry.RegisterMessage",
      "panic"
    ],
    "mutateReportSampleLabels": [
      "lb.Labels",
      "labels.NewBuilder",
      "target.LabelsRange",
      "lb.Set",
      "lset.Get"
    ],
    "mutateSampleLabels": [
      "lb.Set",
      "lset.Get",
      "len",
      "resolveConflictingExposedLabels",
      "relabel.Process",
      "labels.NewBuilder",
      "target.LabelsRange",
      "lset.Has",
      "append",
      "lb.Labels"
    ],
    "nameAndLabels": [
      "rule.Name",
      "?.String",
      "rule.Labels"
    ],
    "needsSplit": [
      "n.String",
      "len"
    ],
    "newAPI": [
      "v1.NewAPI",
      "url.String",
      "len",
      "promhttp.RoundTripperFunc",
      "req.Header.Add",
      "roundTripper.RoundTrip",
      "api.NewClient"
    ],
    "newAlertMetrics": [
      "m.queueCapacity.Set",
      "float64",
      "r.MustRegister",
      "prometheus.NewSummaryVec",
      "prometheus.NewCounterVec",
      "prometheus.NewCounter",
      "prometheus.NewGaugeFunc",
      "prometheus.NewGauge"
    ],
    "newAlertmanagerSet": [
      "config_util.NewClientFromConfig",
      "sigv4.NewSigV4RoundTripper"
    ],
    "newAuthTokenFileRoundTripper": [
      "os.ReadFile",
      "fmt.Errorf",
      "os.ReadFile",
      "fmt.Errorf"
    ],
    "newAzureResourceFromID": [
      "promslog.NewNopLogger",
      "arm.ParseResourceID",
      "fmt.Errorf",
      "logger.Error"
    ],
    "newBReader": [
      "len"
    ],
    "newBaremetalDiscovery": [
      "config.NewRoundTripperFromConfig",
      "loadProfile",
      "version.PrometheusUserAgent",
      "scw.WithProfile",
      "string",
      "scw.NewClient",
      "scw.WithHTTPClient",
      "time.Duration",
      "scw.WithUserAgent",
      "fmt.Errorf",
      "newAuthTokenFileRoundTripper"
    ],
    "newBasicScrapeLoop": [
      "newBasicScrapeLoopWithFallback"
    ],
    "newBasicScrapeLoopWithFallback": [
      "newScrapeLoop",
      "labels.NewSymbolTable",
      "newTestScrapeMetrics"
    ],
    "newBlockBaseQuerier": [
      "fmt.Errorf",
      "b.Chunks",
      "indexr.Close",
      "b.Tombstones",
      "chunkr.Close",
      "tombstones.NewMemTombstones",
      "b.Meta",
      "b.Index"
    ],
    "newBucketIterator": [
      "len",
      "int"
    ],
    "newCRC32": [
      "crc32.New",
      "crc32.New",
      "crc32.New"
    ],
    "newChunkBuffer": [
      "make"
    ],
    "newChunkDiskMapperRef": [
      "ChunkDiskMapperRef"
    ],
    "newChunkToSeriesDecoder": [
      "chk.Chunk.Iterator"
    ],
    "newChunkWriteQueue": [
      "newWriteJobQueue",
      "make",
      "time.Now",
      "counters.WithLabelValues",
      "reg.MustRegister",
      "q.start",
      "prometheus.NewCounterVec",
      "min"
    ],
    "newChunkedSeriesIterator": [
      "it.reset"
    ],
    "newCompressedResponseWriter": [
      "writer.Header",
      "gzip.NewWriter",
      "zlib.NewWriter",
      "req.Header.Get",
      "strings.Cut",
      "strings.TrimSpace",
      "?.Set"
    ],
    "newConfigLintConfig": [
      "len",
      "newRulesLintConfig",
      "strings.Join",
      "strings.Split",
      "append"
    ],
    "newCredential": [
      "azidentity.ClientID",
      "azidentity.NewManagedIdentityCredential",
      "azcore.TokenCredential",
      "azidentity.NewClientSecretCredential",
      "string",
      "len",
      "azidentity.NewDefaultAzureCredential"
    ],
    "newDBMetrics": [
      "prometheus.NewGauge",
      "prometheus.NewCounterVec",
      "prometheus.NewCounter",
      "prometheus.NewSummary",
      "r.MustRegister",
      "uint64",
      "prometheus.NewGauge",
      "r.MustRegister",
      "prometheus.NewGaugeFunc",
      "db.mtx.RUnlock",
      "float64",
      "len",
      "prometheus.NewHistogram",
      "db.mtx.RLock",
      "b.GetSymbolTableSize",
      "prometheus.NewCounter",
      "db.head.MinTime"
    ],
    "newDialContextWithRoundRobinDNS": [
      "rand.NewSource",
      "?.Unix",
      "time.Now",
      "rand.New"
    ],
    "newDirectIOWriter": [
      "fileDirectIORqmts",
      "fmt.Errorf",
      "checkInitialUnalignedOffset",
      "alignedBlock"
    ],
    "newDiscovererMetrics": [
      "prometheus.NewCounter",
      "discovery.NewMetricRegisterer",
      "prometheus.NewSummaryVec",
      "discovery.NewMetricRegisterer",
      "m.rpcDuration.WithLabelValues",
      "prometheus.NewCounter",
      "prometheus.NewCounter",
      "discovery.NewMetricRegisterer",
      "prometheus.NewSummary",
      "NewTimestampCollector",
      "discovery.NewMetricRegisterer",
      "prometheus.NewCounter",
      "prometheus.NewCounter",
      "discovery.NewMetricRegisterer",
      "RoleEndpointSlice.String",
      "RoleNode.String",
      "RoleIngress.String",
      "m.eventCount.WithLabelValues",
      "m.failuresCount.Add",
      "prometheus.NewCounterVec",
      "prometheus.NewCounter",
      "discovery.NewMetricRegisterer",
      "RoleEndpoint.String",
      "RolePod.String",
      "RoleService.String",
      "prometheus.NewCounter",
      "discovery.NewMetricRegisterer",
      "prometheus.NewCounter",
      "discovery.NewMetricRegisterer",
      "prometheus.NewCounter",
      "prometheus.NewSummary",
      "discovery.NewMetricRegisterer"
    ],
    "newDiscovery": [
      "NewDiscovery",
      "require.NoError",
      "promslog.NewNopLogger",
      "NewTestMetrics",
      "prometheus.NewRegistry",
      "make"
    ],
    "newEqualMultiStringMatcher": [
      "make"
    ],
    "newFParams": [
      "ev.eval",
      "len",
      "math.IsNaN",
      "math.Max",
      "math.Min"
    ],
    "newFloatHistogramIterator": [
      "newBReader",
      "binary.BigEndian.Uint16",
      "it.br.readBits",
      "CounterResetHeader"
    ],
    "newGenericMergeSeriesSet": [
      "len",
      "set.Next",
      "heap.Push",
      "set.Err"
    ],
    "newHcloudDiscovery": [
      "hcloud.WithEndpoint",
      "config.NewRoundTripperFromConfig",
      "hcloud.NewClient",
      "hcloud.WithApplication",
      "hcloud.WithHTTPClient",
      "time.Duration"
    ],
    "newHeadMetrics": [
      "prometheus.NewGauge",
      "prometheus.NewGaugeFunc",
      "prometheus.NewCounter",
      "prometheus.NewCounterVec",
      "r.MustRegister",
      "h.iso.lowWatermark",
      "h.chunkDiskMapper.Size",
      "h.logger.Error",
      "float64",
      "h.NumSeries",
      "prometheus.NewHistogram",
      "h.MaxTime",
      "h.MinTime",
      "h.iso.lastAppendID",
      "prometheus.NewSummary",
      "err.Error"
    ],
    "newHighestTimestampMetric": [
      "prometheus.NewGauge"
    ],
    "newHistogramIterator": [
      "CounterResetHeader",
      "newBReader",
      "binary.BigEndian.Uint16",
      "it.br.readBits"
    ],
    "newInstanceDiscovery": [
      "promslog.NewNopLogger",
      "conf.secretKeyForConfig",
      "newAuthTokenFileRoundTripper",
      "scw.WithUserAgent",
      "version.PrometheusUserAgent",
      "fmt.Errorf",
      "config.NewRoundTripperFromConfig",
      "loadProfile",
      "scw.NewClient",
      "scw.WithHTTPClient",
      "time.Duration",
      "scw.WithProfile"
    ],
    "newJSONEntry": [
      "?.Unix",
      "time.Now",
      "_newJSONEntry",
      "trimStringByBytes",
      "len"
    ],
    "newKumaTestHTTPDiscovery": [
      "prometheus.NewRegistry",
      "discovery.NewRefreshMetrics",
      "c.NewDiscovererMetrics",
      "metrics.Register",
      "NewKumaHTTPDiscovery",
      "errors.New"
    ],
    "newLoadBalancerDiscovery": [
      "promslog.NewNopLogger"
    ],
    "newLock": [
      "errors.New",
      "os.OpenFile",
      "os.OpenFile",
      "l.set",
      "f.Close",
      "l.set",
      "f.Close",
      "os.OpenFile",
      "syscall.UTF16PtrFromString",
      "syscall.CreateFile"
    ],
    "newManagedIdentityTokenCredential": [
      "azidentity.ClientID",
      "azidentity.NewManagedIdentityCredential"
    ],
    "newMemSeries": [
      "newTxRing"
    ],
    "newMergedPostings": [
      "storage.SeriesRef",
      "loser.New"
    ],
    "newMetaStatistics": [
      "newDistribution"
    ],
    "newMetrics": [
      "prometheus.NewCounterVec",
      "prometheus.NewHistogramVec",
      "prometheus.ExponentialBuckets",
      "prometheus.NewGauge",
      "r.MustRegister",
      "registerFederationMetrics"
    ],
    "newMockChunkSeriesSet": [
      "labels.NewScratchBuilder",
      "len"
    ],
    "newMockDialContext": [
      "make",
      "?.Return",
      "m.On"
    ],
    "newMockIndex": [
      "make",
      "make"
    ],
    "newMockSeriesSet": [
      "len"
    ],
    "newMultipleAppender": [
      "blockWriter.Appender"
    ],
    "newNopChunkReader": [
      "chunkenc.NewXORChunk"
    ],
    "newOAuthTokenCredential": [
      "azidentity.NewClientSecretCredential"
    ],
    "newOOOIsolation": [
      "list.New"
    ],
    "newQueue": [
      "make"
    ],
    "newQueueManagerMetrics": [
      "prometheus.NewGauge",
      "prometheus.NewCounter",
      "prometheus.NewCounterVec",
      "prometheus.NewHistogram",
      "append"
    ],
    "newReader": [
      "int64",
      "b.Len",
      "fmt.Errorf",
      "binary.BigEndian.Uint32",
      "b.Range",
      "int",
      "labels.NewSymbolTable",
      "r.b.Len",
      "len",
      "r.symbols.ReverseLookup",
      "int",
      "NewSymbols",
      "binary.BigEndian.Uint32",
      "r.b.Range",
      "ReadPostingsOffsetTable",
      "string",
      "copy",
      "fmt.Errorf",
      "NewTOCFromByteSlice",
      "append",
      "make"
    ],
    "newRefresher": [
      "newHcloudDiscovery",
      "newRobotDiscovery",
      "errors.New",
      "openstack.NewClient",
      "config.NewTLSConfig",
      "time.Duration",
      "conntrack.DialWithName",
      "gophercloud.Availability",
      "newInstanceDiscovery",
      "errors.New",
      "openstack.AuthOptionsFromEnv",
      "string",
      "conntrack.NewDialContextFunc",
      "conntrack.DialWithTracing",
      "newHypervisorDiscovery",
      "newLoadBalancerDiscovery",
      "newVpsDiscovery",
      "newDedicatedServerDiscovery",
      "fmt.Errorf",
      "newBaremetalDiscovery",
      "newInstanceDiscovery",
      "errors.New",
      "newServerDiscovery"
    ],
    "newReverseFloatBucketIterator": [
      "len",
      "int32"
    ],
    "newRobotDiscovery": [
      "time.Duration",
      "config.NewRoundTripperFromConfig"
    ],
    "newRuleConcurrencyController": [
      "semaphore.NewWeighted"
    ],
    "newRuleImporter": [
      "config.end.Format",
      "rules.NewManager",
      "logger.Info",
      "config.start.Format"
    ],
    "newRulesLintConfig": [
      "fmt.Printf",
      "strings.Split"
    ],
    "newSDKTokenCredential": [
      "azidentity.NewDefaultAzureCredential"
    ],
    "newSampleRing": [
      "make",
      "r.reset"
    ],
    "newScopeFromScopeMetrics": [
      "scopeMetrics.Scope",
      "s.Name",
      "s.Version",
      "scopeMetrics.SchemaUrl",
      "s.Attributes"
    ],
    "newScrapableServer": [
      "fmt.Fprint",
      "close",
      "make",
      "httptest.NewServer",
      "http.HandlerFunc"
    ],
    "newScrapeLoop": [
      "ContextWithMetricMetadataStore",
      "ContextWithTarget",
      "context.WithCancel",
      "promslog.NewNopLogger",
      "pool.New",
      "make",
      "newScrapeCache"
    ],
    "newScrapeMetrics": [
      "reg.Register",
      "fmt.Errorf",
      "prometheus.NewDesc",
      "prometheus.NewCounter",
      "prometheus.NewSummaryVec",
      "prometheus.NewGaugeVec",
      "prometheus.NewCounterVec"
    ],
    "newScrapePool": [
      "promslog.NewNopLogger",
      "config.ToEscapingScheme",
      "context.Background",
      "newScrapeCache",
      "newScrapeLoop",
      "config_util.NewClientFromConfig",
      "fmt.Errorf",
      "opts.target.SetMetadataStore",
      "logger.With",
      "mutateSampleLabels",
      "mutateReportSampleLabels",
      "sp.metrics.targetScrapePoolTargetLimit.WithLabelValues",
      "app.Appender",
      "context.WithCancel",
      "labels.NewSymbolTable",
      "time.Now",
      "?.Set",
      "float64"
    ],
    "newSecondaryQuerierFrom": [
      "newGenericQuerierFrom"
    ],
    "newSecondaryQuerierFromChunk": [
      "newGenericQuerierFromChunk"
    ],
    "newSeq": [
      "append"
    ],
    "newServer": [
      "r.URL.String",
      "?.Add",
      "w.Header",
      "require.NoError",
      "url.Parse",
      "model.Duration",
      "httptest.NewServer",
      "http.HandlerFunc",
      "time.Sleep",
      "t.Errorf",
      "w.Write"
    ],
    "newServerDiscovery": [
      "config.NewRoundTripperFromConfig",
      "ionoscloud.NewConfiguration",
      "time.Duration",
      "version.PrometheusUserAgent",
      "ionoscloud.NewAPIClient",
      "config.NewRoundTripperFromConfig",
      "fmt.Sprintf",
      "time.Duration",
      "auth.SetupAuth",
      "fmt.Errorf"
    ],
    "newStripeSeries": [
      "make",
      "make"
    ],
    "newTLSConfig": [
      "os.ReadFile",
      "require.NoError",
      "caCertPool.AppendCertsFromPEM",
      "fmt.Sprintf",
      "tls.LoadX509KeyPair",
      "x509.NewCertPool"
    ],
    "newTarGzFileWriter": [
      "os.Create",
      "fmt.Errorf",
      "gzip.NewWriter",
      "tar.NewWriter"
    ],
    "newTest": [
      "test.parse",
      "test.clear"
    ],
    "newTestClientAndQueueManager": [
      "NewTestWriteClient",
      "newTestQueueManager"
    ],
    "newTestDB": [
      "require.NoError",
      "t.Cleanup",
      "db.Close",
      "t.TempDir",
      "Open",
      "DefaultOptions"
    ],
    "newTestDBWithOpts": [
      "db.Close",
      "t.TempDir",
      "Open",
      "require.NoError",
      "t.Cleanup"
    ],
    "newTestDiscoverer": [
      "make"
    ],
    "newTestEngine": [
      "promqltest.NewTestEngine"
    ],
    "newTestHTTPServerBuilder": [
      "httptest.NewServer",
      "io.ReadAll",
      "status.Load",
      "w.WriteHeader",
      "json.Unmarshal",
      "alertsEqual",
      "int",
      "http.HandlerFunc",
      "r.BasicAuth",
      "fmt.Errorf"
    ],
    "newTestHead": [
      "newTestHeadWithOptions",
      "newTestHeadDefaultOptions"
    ],
    "newTestHeadDefaultOptions": [
      "opts.OutOfOrderTimeWindow.Store",
      "time.Minute.Milliseconds",
      "DefaultHeadOptions",
      "opts.MaxExemplars.Store",
      "opts.EnableNativeHistograms.Store"
    ],
    "newTestHeadWithOptions": [
      "filepath.Join",
      "require.NoError",
      "NewHead",
      "h.chunkDiskMapper.IterateAllChunks",
      "t.TempDir",
      "wlog.NewSize"
    ],
    "newTestQueueManager": [
      "newHighestTimestampMetric",
      "t.TempDir",
      "newQueueManagerMetrics",
      "NewQueueManager",
      "newEWMARate",
      "labels.EmptyLabels",
      "newPool"
    ],
    "newTestRegistryAndScrapeMetrics": [
      "prometheus.NewRegistry",
      "newScrapeMetrics",
      "require.NoError"
    ],
    "newTestRuleImporter": [
      "promslog.NewNopLogger",
      "start.Add",
      "newRuleImporter"
    ],
    "newTestRunner": [
      "t.Helper",
      "t.TempDir",
      "make"
    ],
    "newTestScrapeMetrics": [
      "newTestRegistryAndScrapeMetrics"
    ],
    "newTestStorage": [
      "teststorage.New"
    ],
    "newTestTarget": [
      "labels.NewBuilder",
      "lb.Set",
      "strings.TrimPrefix",
      "lb.Labels"
    ],
    "newTestTargetRetriever": [
      "make",
      "scrape.NewTarget",
      "nt.Report"
    ],
    "newTokenCredential": [
      "newOAuthTokenCredential",
      "newSDKTokenCredential",
      "getCloudConfiguration",
      "newManagedIdentityTokenCredential"
    ],
    "newTokenProvider": [
      "getAudience"
    ],
    "newTritonDiscovery": [
      "metrics.Register",
      "New",
      "prometheus.NewRegistry",
      "discovery.NewRefreshMetrics",
      "c.NewDiscovererMetrics"
    ],
    "newTxRing": [
      "make"
    ],
    "newUnsupportedChunk": [
      "chunkenc.NewXORChunk"
    ],
    "newWLMetrics": [
      "w.logger.Error",
      "float64",
      "?.NewCounterVec",
      "?.NewSummary",
      "?.NewCounter",
      "?.NewGauge",
      "w.Size",
      "promauto.With",
      "?.NewGaugeFunc",
      "err.Error"
    ],
    "newWriteJobQueue": [
      "panic",
      "sync.NewCond"
    ],
    "newWriteToMock": [
      "make"
    ],
    "newXORChunk": [
      "NewXORChunk"
    ],
    "nextSequenceFile": [
      "segmentFile",
      "int",
      "os.ReadDir",
      "uint64",
      "strconv.ParseUint",
      "f.Name"
    ],
    "noErr": [
      "panic"
    ],
    "nodeAddress": [
      "errors.New",
      "append",
      "apiv1.NodeAddressType"
    ],
    "nodeLabels": [
      "make",
      "lv",
      "addObjectMetaLabels"
    ],
    "nodeName": [
      "cache.DeletionHandlingMetaNamespaceKeyFunc"
    ],
    "nodeSource": [
      "nodeSourceFromName"
    ],
    "nomadMetrics.Register": [
      "m.metricRegisterer.RegisterMetrics"
    ],
    "nomadMetrics.Unregister": [
      "m.metricRegisterer.UnregisterMetrics"
    ],
    "nonNilMultiError.Error": [
      "len",
      "fmt.Fprintf",
      "buf.WriteString",
      "err.Error",
      "buf.String"
    ],
    "nonNilMultiError.Is": [
      "errors.Is"
    ],
    "noopChunkQuerier.Select": [
      "NoopChunkedSeriesSet"
    ],
    "noopQuerier.Select": [
      "NoopSeriesSet"
    ],
    "noopScrapeManager.Get": [
      "errors.New"
    ],
    "normalizeBody": [
      "sort.Strings",
      "append",
      "strings.Join",
      "body.ReadString",
      "len"
    ],
    "normalizeFloatsInLabelValues": [
      "strconv.ParseFloat",
      "formatOpenMetricsFloat"
    ],
    "normalizeNewLine": [
      "bytes.ReplaceAll",
      "strings.Contains"
    ],
    "notReadyReadStorage.Querier": [
      "fmt.Errorf"
    ],
    "notReadyReadStorage.StartTime": [
      "fmt.Errorf"
    ],
    "notReadyReadStorage.Stats": [
      "fmt.Errorf"
    ],
    "onceProvider.Run": [
      "len",
      "close"
    ],
    "oneShotCloser.Close": [
      "errors.New"
    ],
    "oneShotCloser.Read": [
      "errors.New",
      "c.r.Read"
    ],
    "oooHeadChunk.OverlapsClosedInterval": [
      "overlapsClosedInterval"
    ],
    "oooIsolation.HasOpenReadsAtOrBefore": [
      "i.mtx.RLock",
      "i.mtx.RUnlock",
      "i.openReads.Front",
      "e.Next",
      "ref.GreaterThan"
    ],
    "oooIsolation.TrackReadAfter": [
      "i.mtx.Lock",
      "i.openReads.PushBack",
      "i.mtx.Unlock"
    ],
    "oooIsolationState.Close": [
      "s.i.mtx.Lock",
      "s.i.openReads.Remove",
      "s.i.mtx.Unlock"
    ],
    "open": [
      "errs.Err",
      "DefaultBlocksToDelete",
      "errors.As",
      "db.logger.Warn",
      "wbl.Repair",
      "removeBestEffortTmpDirs",
      "wlog.NewSize",
      "?.Seconds",
      "db.inOrderBlocksMaxTime",
      "make",
      "headOpts.OutOfOrderTimeWindow.Store",
      "db.cmtx.Lock",
      "close",
      "tsdbutil.NewDirLocker",
      "opts.NewCompactorFunc",
      "db.head.metrics.walCorruptionsTotal.Inc",
      "repairBadIndexVersion",
      "cancel",
      "db.oooWasEnabled.Store",
      "float64",
      "time.Duration",
      "NewHead",
      "max",
      "newDBMetrics",
      "os.MkdirAll",
      "promslog.NewNopLogger",
      "NewDBStats",
      "db.Close",
      "fileutil.DirSize",
      "int64",
      "db.head.Init",
      "fmt.Errorf",
      "chunkenc.NewPool",
      "errs.Add",
      "headOpts.MaxExemplars.Store",
      "headOpts.EnableNativeHistograms.Store",
      "db.metrics.retentionDuration.Set",
      "filepath.Join",
      "db.logger.Info",
      "db.locker.Lock",
      "os.IsNotExist",
      "db.cmtx.Unlock",
      "tsdb_errors.NewMulti",
      "DefaultHeadOptions",
      "db.metrics.maxBytes.Set",
      "db.head.MinOOOTime",
      "headOpts.OutOfOrderCapMax.Store",
      "context.Background",
      "wal.Repair",
      "db.generateCompactionDelay",
      "db.run",
      "context.WithCancel",
      "NewLeveledCompactorWithOptions",
      "db.reload"
    ],
    "openBlock": [
      "tsdb.OpenDBReadOnly",
      "db.LastBlockID",
      "db.Block"
    ],
    "openBlocks": [
      "fmt.Errorf",
      "make",
      "readMetaFile",
      "l.Error",
      "getBlock",
      "OpenBlock",
      "append",
      "blockDirs"
    ],
    "openDBWithMetrics": [
      "reg.MustRegister",
      "prometheus.NewGaugeFunc",
      "db.Blocks",
      "?.MinTime",
      "db.Head",
      "logger.With",
      "len",
      "float64",
      "?.Meta",
      "?.MaxTime",
      "tsdb.Open"
    ],
    "openDir": [
      "len",
      "syscall.UTF16PtrFromString",
      "uint32",
      "syscall.CreateFile"
    ],
    "openMetricsLexer.Error": [
      "errors.New"
    ],
    "openMetricsLexer.Lex": [
      "len",
      "panic",
      "fmt.Errorf",
      "l.next"
    ],
    "openMetricsLexer.next": [
      "len",
      "byte"
    ],
    "openTestDB": [
      "require.NoError",
      "t.TempDir",
      "DefaultOptions",
      "len",
      "Open",
      "validateOpts",
      "open"
    ],
    "optimizeAlternatingLiterals": [
      "regexp.QuoteMeta",
      "newEqualMultiStringMatcher",
      "strings.IndexByte",
      "multiMatcher.add",
      "multiMatcher.setMatches",
      "len",
      "strings.Count"
    ],
    "optimizeConcatRegex": [
      "string",
      "append",
      "clearCapture",
      "len"
    ],
    "optimizeEqualOrPrefixStringMatchers": [
      "len",
      "findEqualOrPrefixStringMatchers",
      "newEqualMultiStringMatcher",
      "multiMatcher.add",
      "multiMatcher.addPrefix"
    ],
    "optsFactory": [
      "ts.UnixMilli",
      "inflightMu.Lock",
      "maxInflight.Store",
      "inflightMu.Unlock",
      "maxInflight.Load",
      "time.Sleep",
      "labels.FromStrings",
      "context.Background",
      "promslog.NewNopLogger",
      "inflightQueries.Add"
    ],
    "orStringMatcher.Matches": [
      "matcher.Matches"
    ],
    "orderedGroups": [
      "sort.Slice",
      "?.Name",
      "make",
      "len",
      "append"
    ],
    "otelErrHandler.Handle": [
      "o"
    ],
    "otelMetricTypeToPromMetricType": [
      "otelMetric.Type",
      "?.IsMonotonic",
      "otelMetric.Sum",
      "?.AggregationTemporality",
      "otelMetric.Histogram",
      "otelMetric.ExponentialHistogram"
    ],
    "otlpWriteHandler.ServeHTTP": [
      "hasDelta",
      "r.Context",
      "h.defaultConsumer.ConsumeMetrics",
      "errors.Is",
      "h.d2cConsumer.ConsumeMetrics",
      "w.WriteHeader",
      "DecodeOTLPWriteRequest",
      "h.logger.Error",
      "err.Error",
      "http.Error",
      "req.Metrics"
    ],
    "overwriteReadTimeout": [
      "t.Cleanup"
    ],
    "parseAndPushMetrics": [
      "client.Store",
      "context.Background",
      "fmtutil.MetricTextToWriteRequest",
      "bytes.NewReader",
      "fmt.Fprintln",
      "metricsData.Marshal",
      "compression.Encode"
    ],
    "parseBrokenJSON": [
      "len",
      "strings.ReplaceAll",
      "string"
    ],
    "parseDuration": [
      "model.ParseDuration",
      "time.Duration",
      "float64",
      "fmt.Errorf",
      "time.Duration",
      "model.ParseDuration",
      "strconv.ParseFloat"
    ],
    "parseExcludeAlerts": [
      "strings.ToLower",
      "?.Get",
      "r.URL.Query",
      "strconv.ParseBool",
      "fmt.Errorf"
    ],
    "parseExpect": [
      "regexp.Compile",
      "patExpect.FindStringSubmatch",
      "strings.TrimSpace",
      "errors.New",
      "fmt.Errorf"
    ],
    "parseFlags": [
      "a.HelpFlag.Short",
      "?.Default",
      "?.DurationVar",
      "a.Parse",
      "fmt.Fprintf",
      "os.Exit",
      "kingpin.New",
      "filepath.Base",
      "a.Flag",
      "flag.AddFlags",
      "a.Usage",
      "os.Getenv",
      "?.StringVar"
    ],
    "parseFloat": [
      "strings.ContainsAny",
      "errors.New",
      "strconv.ParseFloat"
    ],
    "parseIPList": [
      "netip.ParsePrefix",
      "errors.New",
      "ipPrefix.Bits",
      "ipPrefix.Addr",
      "ipAddr.IsValid",
      "append",
      "netip.ParseAddr",
      "ipPrefix.IsValid",
      "ipAddr.IsUnspecified",
      "len"
    ],
    "parseLabel": [
      "uint64",
      "int32",
      "int",
      "errors.New",
      "model.LabelName",
      "utf8.ValidString",
      "len",
      "uint",
      "b.Add",
      "?.IsValid",
      "skipMetrics",
      "fmt.Errorf",
      "yoloString"
    ],
    "parseLastEvaluation": [
      "json.Unmarshal",
      "time.Parse"
    ],
    "parseLimitParam": [
      "strconv.Atoi",
      "errors.New"
    ],
    "parseListRulesPaginationRequest": [
      "?.Get",
      "r.URL.Query",
      "invalidParamError",
      "errors.New",
      "strconv.ParseInt",
      "fmt.Errorf"
    ],
    "parseLoad": [
      "patLoad.MatchString",
      "patLoad.FindStringSubmatch",
      "time.Duration",
      "raise",
      "model.ParseDuration",
      "newLoadCmd",
      "len",
      "parseSeries",
      "cmd.set"
    ],
    "parseMatchersParam": [
      "errors.New",
      "parser.ParseMetricSelectors",
      "lm.Matches"
    ],
    "parseNerveMember": [
      "net.JoinHostPort",
      "strconv.Itoa",
      "json.Unmarshal",
      "fmt.Errorf",
      "model.LabelValue"
    ],
    "parseNumber": [
      "strconv.ParseInt",
      "float64",
      "strconv.ParseFloat",
      "fmt.Errorf"
    ],
    "parseSeries": [
      "parser.ParseSeriesDesc",
      "parser.EnrichParseError"
    ],
    "parseServersetMember": [
      "model.LabelName",
      "strutil.SanitizeLabelName",
      "json.Unmarshal",
      "fmt.Errorf",
      "model.LabelValue",
      "net.JoinHostPort",
      "strconv.Itoa"
    ],
    "parseStartTimeAndEndTime": [
      "?.Add",
      "time.Now",
      "parseTime",
      "fmt.Errorf"
    ],
    "parseTime": [
      "time.Parse",
      "fmt.Errorf",
      "strconv.ParseFloat",
      "math.Modf",
      "?.UTC",
      "time.Unix",
      "int64",
      "float64",
      "time.Parse",
      "strconv.ParseFloat",
      "math.Modf",
      "time.Unix",
      "float64",
      "fmt.Errorf",
      "math.Round",
      "?.UTC",
      "int64"
    ],
    "parseTimeParam": [
      "r.FormValue",
      "parseTime",
      "fmt.Errorf"
    ],
    "parsedSample.String": [
      "ps.Labels.String",
      "strconv.FormatFloat"
    ],
    "parsedSamplesString": [
      "len",
      "?.String",
      "ps.String"
    ],
    "parser.Close": [
      "parserPool.Put"
    ],
    "parser.InjectItem": [
      "panic"
    ],
    "parser.Lex": [
      "p.lex.NextItem",
      "posrange.Pos",
      "len",
      "p.addParseErr",
      "errors.New",
      "p.InjectItem",
      "append",
      "int"
    ],
    "parser.ParseExpr": [
      "p.recover",
      "p.parseGenerated",
      "len",
      "p.checkAST"
    ],
    "parser.addOffset": [
      "p.addParseErrf",
      "e.PositionRange"
    ],
    "parser.addOffsetExpr": [
      "p.addParseErrf",
      "e.PositionRange"
    ],
    "parser.addParseErr": [
      "append"
    ],
    "parser.addParseErrf": [
      "p.addParseErr",
      "fmt.Errorf"
    ],
    "parser.addSemanticError": [
      "p.addParseErr",
      "p.yyParser.lval.item.PositionRange"
    ],
    "parser.assembleVectorSelector": [
      "labels.NewMatcher",
      "panic",
      "append"
    ],
    "parser.buildHistogramBucketsAndSpans": [
      "uint32",
      "len",
      "p.addParseErrf",
      "p.yyParser.lval.item.PositionRange",
      "int32"
    ],
    "parser.buildHistogramFromMap": [
      "p.yyParser.lval.item.PositionRange",
      "p.buildHistogramBucketsAndSpans",
      "int32",
      "p.addParseErrf"
    ],
    "parser.checkAST": [
      "node.PositionRange",
      "n.Op.IsAggregator",
      "n.PositionRange",
      "n.RHS.Type",
      "lm.Matches",
      "n.Type",
      "n.Expr.PositionRange",
      "opRange",
      "n.LHS.Type",
      "n.Op.IsOperator",
      "fmt.Sprintf",
      "?.Type",
      "?.PositionRange",
      "p.checkAST",
      "DocumentedType",
      "p.expectType",
      "n.RHS.PositionRange",
      "n.Op.IsSetOperator",
      "len",
      "p.addParseErrf",
      "e.PositionRange",
      "n.LHS.PositionRange",
      "isSpace",
      "rune",
      "n.Op.IsComparisonOperator"
    ],
    "parser.expectType": [
      "p.checkAST",
      "p.addParseErrf",
      "node.PositionRange",
      "DocumentedType"
    ],
    "parser.experimentalDurationExpr": [
      "p.addParseErrf",
      "e.PositionRange"
    ],
    "parser.getAtModifierVars": [
      "p.addParseErrf",
      "e.PositionRange"
    ],
    "parser.histogramsDecreaseSeries": [
      "p.histogramsSeries",
      "a.Sub"
    ],
    "parser.histogramsIncreaseSeries": [
      "p.histogramsSeries",
      "a.Add"
    ],
    "parser.histogramsSeries": [
      "make",
      "uint64",
      "fmt.Errorf",
      "combine",
      "cur.Copy"
    ],
    "parser.mergeMaps": [
      "p.addParseErrf"
    ],
    "parser.newAggregateExpr": [
      "ret.Op.IsAggregatorWithParam",
      "ret.Op.IsExperimentalAggregator",
      "len",
      "p.addParseErrf",
      "ret.PositionRange"
    ],
    "parser.newLabelMatcher": [
      "p.unquoteString",
      "panic",
      "labels.NewMatcher",
      "p.addParseErr",
      "mergeRanges"
    ],
    "parser.newMetricNameMatcher": [
      "labels.NewMatcher",
      "p.addParseErr",
      "value.PositionRange"
    ],
    "parser.number": [
      "p.addParseErrf",
      "p.yyParser.lval.item.PositionRange",
      "strconv.ParseInt",
      "float64",
      "strconv.ParseFloat"
    ],
    "parser.parseGenerated": [
      "p.InjectItem",
      "p.yyParser.Parse"
    ],
    "parser.recover": [
      "recover",
      "make",
      "runtime.Stack",
      "fmt.Fprintf"
    ],
    "parser.setAtModifierPreprocessor": [
      "p.getAtModifierVars"
    ],
    "parser.setTimestamp": [
      "math.IsInf",
      "math.IsNaN",
      "float64",
      "p.addParseErrf",
      "e.PositionRange",
      "p.getAtModifierVars",
      "new",
      "timestamp.FromFloatSeconds"
    ],
    "parser.unexpected": [
      "errMsg.WriteString",
      "p.yyParser.lval.item.desc",
      "p.addParseErr",
      "p.yyParser.lval.item.PositionRange",
      "errors.New",
      "errMsg.String"
    ],
    "parser.unquoteString": [
      "p.addParseErrf",
      "p.yyParser.lval.item.PositionRange",
      "strutil.Unquote"
    ],
    "pathFromMetric": [
      "append",
      "buffer.String",
      "buffer.WriteString",
      "escape",
      "len",
      "string",
      "make",
      "sort.Sort",
      "fmt.Sprintf"
    ],
    "pathsFromIngressPaths": [
      "make",
      "len"
    ],
    "permutateChunkIntervals": [
      "permutateChunkIntervals",
      "make",
      "len",
      "copy",
      "append"
    ],
    "pickSchema": [
      "float64",
      "int32",
      "math.Floor",
      "math.Log2"
    ],
    "pk": [
      "fmt.Sprintf"
    ],
    "plan9Lock.Release": [
      "l.f.Close"
    ],
    "podLabels": [
      "lv",
      "podReady",
      "string",
      "addObjectMetaLabels",
      "GetControllerOf"
    ],
    "podReady": [
      "lv",
      "strings.ToLower",
      "string"
    ],
    "podSource": [
      "podSourceFromNamespaceAndName"
    ],
    "podSourceFromNamespaceAndName": [
      "namespacedName"
    ],
    "pool.Get": [
      "p.histogram.Get",
      "p.floatHistogram.Get",
      "fmt.Errorf",
      "c.Reset",
      "p.xor.Get"
    ],
    "pool.Put": [
      "c.Encoding",
      "fmt.Errorf",
      "c.Reset",
      "sp.Put"
    ],
    "pool.intern": [
      "p.mtx.RUnlock",
      "p.mtx.Lock",
      "p.mtx.Unlock",
      "newEntry",
      "?.refs.Store",
      "p.mtx.RLock",
      "interned.refs.Inc"
    ],
    "pool.release": [
      "p.mtx.Unlock",
      "interned.refs.Load",
      "delete",
      "p.mtx.RLock",
      "p.mtx.RUnlock",
      "noReferenceReleases.Inc",
      "interned.refs.Dec",
      "p.mtx.Lock"
    ],
    "populateSeries": [
      "make",
      "append",
      "rand.Float64",
      "storage.NewListSeries",
      "labels.FromMap",
      "len"
    ],
    "populateTestWL": [
      "enc.Samples",
      "enc.Tombstones",
      "enc.Exemplars",
      "enc.MmapMarkers",
      "enc.Metadata",
      "require.NoError",
      "w.Log",
      "enc.Series"
    ],
    "populateTimeSeries": [
      "prompb.FromLabels",
      "append",
      "prompb.FromIntHistogram",
      "prompb.FromFloatHistogram"
    ],
    "populateV2TimeSeries": [
      "symbolTable.SymbolizeLabels",
      "append",
      "writev2.FromIntHistogram",
      "writev2.FromFloatHistogram",
      "writev2.FromMetadataType",
      "symbolTable.Symbolize"
    ],
    "populateWithDelChunkSeriesIterator.Next": [
      "len",
      "p.next",
      "p.populateCurrForSingleChunk",
      "p.populateChunksFromIterable"
    ],
    "populateWithDelChunkSeriesIterator.populateChunksFromIterable": [
      "p.currDelIter.Err",
      "p.currDelIter.AtT",
      "app.AppendFloatHistogram",
      "app.Append",
      "app.AppendHistogram",
      "fmt.Errorf",
      "append",
      "currentChunk.Appender",
      "p.currDelIter.AtFloatHistogram",
      "len",
      "p.currDelIter.Next",
      "currentValueType.NewChunk",
      "p.currDelIter.At",
      "p.currDelIter.AtHistogram"
    ],
    "populateWithDelChunkSeriesIterator.populateCurrForSingleChunk": [
      "p.currDelIter.Next",
      "p.currDelIter.Err",
      "fmt.Errorf",
      "p.currDelIter.AtT",
      "chunkenc.NewHistogramChunk",
      "app.AppendHistogram",
      "chunkenc.NewFloatHistogramChunk",
      "p.currDelIter.AtHistogram",
      "app.Append",
      "p.currDelIter.AtFloatHistogram",
      "newChunk.Appender",
      "chunkenc.NewXORChunk",
      "app.AppendFloatHistogram",
      "p.currDelIter.At"
    ],
    "populateWithDelChunkSeriesIterator.reset": [
      "p.populateWithDelGenericSeriesIterator.reset"
    ],
    "populateWithDelGenericSeriesIterator.next": [
      "p.currMeta.OverlapsClosedInterval",
      "iterable.Iterator",
      "p.currMeta.Chunk.Iterator",
      "len",
      "p.bufIter.Intervals.Add",
      "hcr.ChunkOrIterableWithCopy",
      "p.cr.ChunkOrIterable",
      "fmt.Errorf",
      "p.blockID.String"
    ],
    "populateWithDelSeriesIterator.At": [
      "p.curr.At"
    ],
    "populateWithDelSeriesIterator.AtFloatHistogram": [
      "p.curr.AtFloatHistogram"
    ],
    "populateWithDelSeriesIterator.AtHistogram": [
      "p.curr.AtHistogram"
    ],
    "populateWithDelSeriesIterator.AtT": [
      "p.curr.AtT"
    ],
    "populateWithDelSeriesIterator.Err": [
      "p.curr.Err",
      "p.populateWithDelGenericSeriesIterator.Err"
    ],
    "populateWithDelSeriesIterator.Next": [
      "p.curr.Next",
      "p.next",
      "p.currMeta.Chunk.Iterator"
    ],
    "populateWithDelSeriesIterator.Seek": [
      "p.curr.Seek",
      "p.Next"
    ],
    "populateWithDelSeriesIterator.reset": [
      "p.populateWithDelGenericSeriesIterator.reset"
    ],
    "portWasUsed": [
      "slices.Contains"
    ],
    "postPath": [
      "fmt.Sprintf",
      "string",
      "path.Join"
    ],
    "postingsFailingAfterNthCall.Err": [
      "errors.New",
      "p.Postings.Err"
    ],
    "postingsFailingAfterNthCall.Next": [
      "p.Postings.Next"
    ],
    "postingsFailingAfterNthCall.Seek": [
      "p.Postings.Seek"
    ],
    "postingsForMatcher": [
      "ix.Postings",
      "m.SetMatches",
      "len",
      "ix.PostingsForLabelMatching",
      "it.Err"
    ],
    "postingsWithIndexHeap.Len": [
      "len"
    ],
    "postingsWithIndexHeap.Less": [
      "?.p.At"
    ],
    "postingsWithIndexHeap.Pop": [
      "len"
    ],
    "postingsWithIndexHeap.Push": [
      "append"
    ],
    "postingsWithIndexHeap.at": [
      "?.p.At"
    ],
    "postingsWithIndexHeap.empty": [
      "len"
    ],
    "postingsWithIndexHeap.next": [
      "fmt.Errorf",
      "h.popIndex",
      "pi.p.Next",
      "heap.Fix",
      "pi.p.Err"
    ],
    "postingsWithIndexHeap.popIndex": [
      "heap.Fix"
    ],
    "preallocExtend": [
      "preallocFixed",
      "preallocExtendTrunc",
      "f.Fd",
      "errors.As",
      "preallocExtendTrunc",
      "syscall.Fallocate",
      "int",
      "preallocExtendTrunc"
    ],
    "preallocExtendTrunc": [
      "f.Seek",
      "f.Truncate"
    ],
    "preallocFixed": [
      "unix.FcntlFstore",
      "f.Fd",
      "syscall.Fallocate",
      "int",
      "f.Fd",
      "errors.As"
    ],
    "prepareTestEncodedCounter": [
      "proto.Int64",
      "buf.WriteString",
      "t.Helper",
      "timestamp.FromTime",
      "require.NoError",
      "buf.String",
      "t.Fatalf",
      "ct.IsZero",
      "proto.String",
      "expfmt.WithUnit",
      "t.Log",
      "buf.Bytes",
      "expfmt.WithCreatedLines",
      "proto.Float64",
      "timestamppb.New",
      "protoMarshalDelimited",
      "?.Encode",
      "expfmt.NewEncoder",
      "expfmt.NewFormat"
    ],
    "preprocessExprHelper": [
      "panic",
      "fmt.Sprintf",
      "makeInt64Pointer",
      "timestamp.FromTime",
      "preprocessExprHelper",
      "newStepInvariantExpr",
      "make",
      "len"
    ],
    "printBlocks": [
      "tabwriter.NewWriter",
      "fmt.Fprintf",
      "time.Duration",
      "b.Size",
      "tw.Flush",
      "fmt.Fprintln",
      "b.Meta",
      "getFormattedTime",
      "getFormattedBytes"
    ],
    "printV1": [
      "hp.ToIntHistogram",
      "labels.NewScratchBuilder",
      "fmt.Println",
      "ts.ToLabels",
      "ep.ToExemplar",
      "hp.IsFloatHistogram",
      "hp.ToFloatHistogram",
      "fmt.Printf",
      "h.String"
    ],
    "printV2": [
      "fmt.Println",
      "fmt.Printf",
      "ep.ToExemplar",
      "labels.NewScratchBuilder",
      "ts.ToLabels",
      "ts.ToMetadata",
      "hp.IsFloatHistogram",
      "hp.ToFloatHistogram",
      "h.String",
      "hp.ToIntHistogram"
    ],
    "processClassicHistogramSeries": [
      "convertnhcb.GetHistogramMetricBase",
      "m2.Hash",
      "newTempHistogramWrapper",
      "convertnhcb.NewTempHistogram",
      "updateHistogram"
    ],
    "processExternalLabels": [
      "b.Get",
      "b.Set"
    ],
    "processTestFileLines": [
      "strings.TrimSpace",
      "evalRegex.MatchString",
      "indentRegex.FindStringSubmatch",
      "strings.Contains",
      "evalRegex.FindStringSubmatch",
      "append",
      "strings.HasPrefix",
      "fmt.Sprintf",
      "strings.TrimPrefix",
      "len"
    ],
    "promTextToProto": [
      "buf.Bytes",
      "p.TextToMetricFamilies",
      "binary.AppendUvarint",
      "uint64",
      "len",
      "sort.Strings",
      "proto.Marshal",
      "buf.Write",
      "tb.Helper",
      "bytes.NewReader",
      "tb.Fatal",
      "append"
    ],
    "prometheusCommandWithLogging": [
      "captureLogsToTLog",
      "prom.Process.Kill",
      "stdoutWriter.Close",
      "stderrWriter.Close",
      "exec.Command",
      "wg.Done",
      "strconv.Itoa",
      "append",
      "t.Cleanup",
      "prom.Wait",
      "wg.Wait",
      "io.Pipe",
      "wg.Add"
    ],
    "promlexer.Error": [
      "errors.New"
    ],
    "promlexer.Lex": [
      "fmt.Errorf",
      "l.next",
      "l.consumeComment",
      "len",
      "panic"
    ],
    "promlexer.consumeComment": [
      "l.cur",
      "l.next"
    ],
    "promlexer.next": [
      "byte",
      "len"
    ],
    "promqlPrinter.printLabelValues": [
      "fmt.Println"
    ],
    "promqlPrinter.printSeries": [
      "fmt.Println"
    ],
    "promqlPrinter.printValue": [
      "fmt.Println"
    ],
    "protoMarshalDelimited": [
      "uint64",
      "len",
      "buf.Bytes",
      "make",
      "binary.PutUvarint",
      "require.NoError",
      "buf.Write",
      "t.Helper",
      "proto.Marshal"
    ],
    "protoToSamples": [
      "model.SampleValue",
      "model.Time",
      "make",
      "len",
      "model.LabelName",
      "model.LabelValue",
      "append"
    ],
    "putCustomBound": [
      "math.Round",
      "isWholeWhenMultiplied",
      "b.writeBit",
      "b.writeBits",
      "math.Float64bits",
      "putVarbitUint",
      "uint64"
    ],
    "putFPointSlice": [
      "fPointPool.Put"
    ],
    "putHPointSlice": [
      "hPointPool.Put"
    ],
    "putHistogramChunkLayoutCustomBounds": [
      "putVarbitUint",
      "uint64",
      "len",
      "putCustomBound"
    ],
    "putHistogramChunkLayoutSpans": [
      "putVarbitUint",
      "uint64",
      "len",
      "putVarbitInt",
      "int64"
    ],
    "putMatrixSelectorHPointSlice": [
      "matrixSelectorHPool.Put"
    ],
    "putVarbitInt": [
      "b.writeBits",
      "uint64",
      "b.writeBit",
      "bitRange"
    ],
    "putVarbitUint": [
      "b.writeBit",
      "bitRangeUint",
      "b.writeBits"
    ],
    "putZeroThreshold": [
      "math.Frexp",
      "b.writeBits",
      "math.Float64bits",
      "byte",
      "b.writeByte"
    ],
    "quantile": [
      "math.NaN",
      "math.Inf",
      "sort.Sort",
      "float64",
      "int",
      "len",
      "math.IsNaN",
      "math.Max",
      "math.Floor",
      "math.Min"
    ],
    "querier.LabelNames": [
      "errors.New"
    ],
    "querier.LabelValues": [
      "errors.New"
    ],
    "querier.Select": [
      "append",
      "storage.NoopSeriesSet",
      "q.addExternalLabels",
      "storage.ErrSeriesSet",
      "len",
      "ToQuery",
      "fmt.Errorf",
      "q.client.Read",
      "newSeriesSetFilter"
    ],
    "querier.addExternalLabels": [
      "q.externalLabels.Range",
      "append",
      "len",
      "copy",
      "labels.NewMatcher",
      "panic",
      "make",
      "q.externalLabels.Len"
    ],
    "querierAdapter.Select": [
      "q.genericQuerier.Select"
    ],
    "query": [
      "engine.NewInstantQuery",
      "q.Exec",
      "errors.New",
      "queryFn",
      "make",
      "len",
      "v.Metric.Map",
      "q.Select",
      "storage.ExpandSamples",
      "context.Background",
      "ss.At",
      "ss.Err",
      "ss.Warnings",
      "ss.Next",
      "len",
      "?.String",
      "require.NoError",
      "q.Close",
      "series.Iterator",
      "it.Err",
      "series.Labels",
      "require.Empty"
    ],
    "query.Cancel": [
      "q.cancel"
    ],
    "query.Close": [
      "putFPointSlice",
      "putHPointSlice"
    ],
    "query.Exec": [
      "span.SetAttributes",
      "attribute.String",
      "q.stmt.String",
      "q.ng.exec",
      "trace.SpanFromContext"
    ],
    "queryAllSeries": [
      "it.Next",
      "it.At",
      "series.Labels",
      "labels.MustNewMatcher",
      "series.Iterator",
      "it.Err",
      "ss.At",
      "require.NoError",
      "append",
      "q.Select",
      "context.Background",
      "ss.Next"
    ],
    "queryAndExpandChunks": [
      "queryChunks",
      "make",
      "storage.ExpandSamples",
      "chk.Chunk.Iterator",
      "require.NoError",
      "append"
    ],
    "queryChunks": [
      "q.Select",
      "require.NoError",
      "ss.At",
      "?.String",
      "series.Labels",
      "ss.Warnings",
      "context.Background",
      "series.Iterator",
      "it.At",
      "it.Err",
      "ss.Err",
      "it.Next",
      "len",
      "require.Empty",
      "q.Close",
      "ss.Next",
      "append"
    ],
    "queryLogTest.String": [
      "strconv.Itoa"
    ],
    "queryLogTest.configuration": [
      "filepath.Join"
    ],
    "queryLogTest.params": [
      "append",
      "filepath.Join"
    ],
    "queryLogTest.query": [
      "io.ReadAll",
      "parseLastEvaluation",
      "lastEvalTime.IsZero",
      "panic",
      "http.Get",
      "require.Equal",
      "require.NoError",
      "r.Body.Close",
      "newEvalTime.After",
      "time.Sleep",
      "fmt.Sprintf",
      "url.QueryEscape"
    ],
    "queryLogTest.queryString": [
      "panic"
    ],
    "queryLogTest.run": [
      "p.skip",
      "require.NoError",
      "p.waitForPrometheus",
      "newFile.Close",
      "len",
      "queryLogFile.Name",
      "require.Empty",
      "append",
      "exec.Command",
      "wg.Wait",
      "wg.Done",
      "require.Len",
      "require.GreaterOrEqual",
      "p.validateLastQuery",
      "os.Rename",
      "fmt.Sprintf",
      "prom.StderrPipe",
      "io.ReadAll",
      "p.exactQueryCount",
      "require.Equal",
      "require.Positive",
      "os.CreateTemp",
      "t.TempDir",
      "p.params",
      "prom.Start",
      "prom.Wait",
      "readQueryLog",
      "os.Remove",
      "wg.Add",
      "t.Log",
      "string",
      "prom.Process.Kill",
      "p.query",
      "p.configFile.Name",
      "p.setQueryLog",
      "reloadPrometheusConfig",
      "newFile.Name"
    ],
    "queryLogTest.setQueryLog": [
      "p.configFile.Truncate",
      "require.NoError",
      "p.configFile.Seek",
      "fmt.Fprintf",
      "p.configFile.Write",
      "p.configuration"
    ],
    "queryLogTest.skip": [
      "t.Skip",
      "net.Listen",
      "fmt.Sprintf",
      "l.Close"
    ],
    "queryLogTest.validateLastQuery": [
      "p.queryString",
      "filepath.Join",
      "panic",
      "len",
      "require.Equal"
    ],
    "queryLogTest.waitForPrometheus": [
      "http.Get",
      "fmt.Sprintf",
      "time.Sleep"
    ],
    "queryResultByLabelSorter.Len": [
      "len"
    ],
    "querySamples": [
      "api.Query",
      "errors.New"
    ],
    "queryableBlock.Querier": [
      "NewBlockQuerier"
    ],
    "queue.Append": [
      "cap",
      "q.newBatch",
      "q.batchMtx.Lock",
      "q.batchMtx.Unlock",
      "append",
      "len"
    ],
    "queue.Batch": [
      "cap",
      "q.batchMtx.Lock",
      "q.batchMtx.Unlock",
      "q.newBatch"
    ],
    "queue.FlushAndShutdown": [
      "q.tryEnqueueingBatch",
      "time.Sleep",
      "q.batchMtx.Lock",
      "q.batchMtx.Unlock",
      "close"
    ],
    "queue.ReturnForReuse": [
      "q.poolMtx.Lock",
      "q.poolMtx.Unlock",
      "len",
      "cap",
      "append"
    ],
    "queue.newBatch": [
      "q.poolMtx.Lock",
      "q.poolMtx.Unlock",
      "len",
      "make"
    ],
    "queue.tryEnqueueingBatch": [
      "q.batchMtx.Lock",
      "q.batchMtx.Unlock",
      "len"
    ],
    "queueManagerMetrics.register": [
      "m.reg.MustRegister"
    ],
    "queueManagerMetrics.unregister": [
      "m.reg.Unregister"
    ],
    "raise": [
      "fmt.Errorf"
    ],
    "randString": [
      "make",
      "randGenerator.Intn",
      "len",
      "string"
    ],
    "randStrings": [
      "make",
      "append",
      "randString"
    ],
    "randStringsWithSuffix": [
      "randStrings"
    ],
    "randomAppsURL": [
      "rand.Intn",
      "len",
      "fmt.Sprintf"
    ],
    "randomChunk": [
      "chunk.Appender",
      "require.NoError",
      "app.Append",
      "rand.Int63",
      "rand.Float64",
      "chunkenc.NewXORChunk",
      "rand.Int"
    ],
    "rangeQueryCases": [
      "strings.Contains",
      "append",
      "strings.ReplaceAll"
    ],
    "readBogusMetaFile": [
      "fmt.Errorf",
      "os.ReadFile",
      "filepath.Join",
      "json.Unmarshal"
    ],
    "readConfigs": [
      "field.Index",
      "val.Kind",
      "strings.TrimPrefix",
      "len",
      "structVal.Field",
      "field.Kind",
      "field.Len",
      "structVal.NumField",
      "panic",
      "fmt.Errorf",
      "?.IsZero",
      "val.Elem",
      "val.Interface",
      "strconv.Itoa",
      "append",
      "StaticConfig",
      "val.IsZero",
      "?.Elem",
      "field.Type"
    ],
    "readCustomBound": [
      "readVarbitUint",
      "br.readBits",
      "math.Float64frombits",
      "float64"
    ],
    "readDirs": [
      "filepath.Walk",
      "strings.TrimPrefix",
      "len",
      "append"
    ],
    "readHandler.ServeHTTP": [
      "?.GlobalConfig.ExternalLabels.Map",
      "len",
      "append",
      "h.remoteReadGate.Start",
      "err.Error",
      "h.remoteReadStreamedXORChunks",
      "h.queries.Inc",
      "h.remoteReadGate.Done",
      "h.remoteReadSamples",
      "h.config",
      "make",
      "slices.SortFunc",
      "strings.Compare",
      "r.Context",
      "http.Error",
      "h.queries.Dec",
      "DecodeReadRequest",
      "NegotiateResponseType"
    ],
    "readHandler.remoteReadSamples": [
      "?.Set",
      "ToQueryResult",
      "httpErr.Status",
      "MergeLabels",
      "errors.As",
      "http.Error",
      "filterExtLabelsFromMatchers",
      "h.logger.Warn",
      "w.Error",
      "querier.Close",
      "httpErr.Error",
      "EncodeReadResponse",
      "w.Header",
      "make",
      "h.queryable.Querier",
      "len",
      "err.Error",
      "querier.Select"
    ],
    "readHandler.remoteReadStreamedXORChunks": [
      "w.Header",
      "filterExtLabelsFromMatchers",
      "querier.Select",
      "httpErr.Error",
      "h.queryable.ChunkQuerier",
      "querier.Close",
      "h.logger.Warn",
      "err.Error",
      "StreamChunkedReadResponses",
      "NewChunkedWriter",
      "errors.As",
      "?.Set",
      "int64",
      "http.Error",
      "w.Error",
      "httpErr.Status"
    ],
    "readHistogramChunkLayout": [
      "readVarbitInt",
      "int32",
      "readHistogramChunkLayoutSpans",
      "histogram.IsCustomBucketsSchema",
      "readHistogramChunkLayoutCustomBounds",
      "readZeroThreshold"
    ],
    "readHistogramChunkLayoutCustomBounds": [
      "readVarbitUint",
      "int",
      "readCustomBound",
      "append"
    ],
    "readHistogramChunkLayoutSpans": [
      "readVarbitUint",
      "int",
      "readVarbitInt",
      "append",
      "uint32",
      "int32"
    ],
    "readMetaFile": [
      "os.ReadFile",
      "filepath.Join",
      "json.Unmarshal",
      "fmt.Errorf",
      "int64",
      "len"
    ],
    "readPrometheusLabels": [
      "bufio.NewScanner",
      "scanner.Scan",
      "r.Replace",
      "strings.Split",
      "make",
      "strings.NewReplacer",
      "scanner.Text",
      "len",
      "append",
      "labels.New",
      "ml.Hash"
    ],
    "readQueryLog": [
      "append",
      "os.Open",
      "require.NoError",
      "file.Close",
      "bufio.NewScanner",
      "scanner.Scan",
      "json.Unmarshal",
      "scanner.Bytes"
    ],
    "readResultWithTimeout": [
      "make",
      "time.After",
      "len",
      "t.Logf",
      "ctx.Done"
    ],
    "readSeriesSet": [
      "append",
      "series.Labels",
      "ss.Err",
      "ss.Next",
      "ss.At",
      "series.Iterator",
      "it.Next",
      "it.At",
      "?.String"
    ],
    "readTestFile": [
      "require.NoError",
      "string",
      "t.Helper",
      "os.ReadFile"
    ],
    "readTestWAL": [
      "sr.Close",
      "record.NewDecoder",
      "labels.NewSymbolTable",
      "wlog.NewReader",
      "r.Record",
      "dec.Samples",
      "dec.FloatHistogramSamples",
      "dec.Metadata",
      "dec.Exemplars",
      "wlog.NewSegmentsReader",
      "dec.Type",
      "append",
      "require.NoError",
      "r.Next",
      "dec.Series",
      "dec.HistogramSamples",
      "dec.Tombstones",
      "require.Fail",
      "r.Err"
    ],
    "readTestdataFile": [
      "f.Close",
      "io.ReadAll",
      "tb.Helper",
      "os.Open",
      "filepath.Join",
      "require.NoError",
      "tb.Cleanup"
    ],
    "readTextParseTestMetrics": [
      "t.Helper",
      "os.ReadFile",
      "t.Fatal"
    ],
    "readVarbitInt": [
      "b.readBitFast",
      "b.readBit",
      "b.readBits",
      "int64",
      "fmt.Errorf",
      "b.readBitsFast"
    ],
    "readVarbitUint": [
      "b.readBitFast",
      "b.readBit",
      "b.readBits",
      "fmt.Errorf",
      "b.readBitsFast"
    ],
    "readWALSamples": [
      "sr.Close",
      "r.Next",
      "r.Record",
      "dec.Series",
      "storage.SeriesRef",
      "record.NewDecoder",
      "dec.Type",
      "dec.Samples",
      "lastSeries.Labels.Copy",
      "dec.HistogramSamples",
      "require.NoError",
      "wlog.NewReader",
      "make",
      "t.Helper",
      "wlog.NewSegmentsReader",
      "labels.NewSymbolTable",
      "append"
    ],
    "readZeroThreshold": [
      "int",
      "br.ReadByte",
      "br.readBits",
      "math.Float64frombits",
      "math.Ldexp"
    ],
    "readable": [
      "len",
      "len"
    ],
    "readyScrapeManager.Get": [
      "rm.mtx.RUnlock",
      "rm.mtx.RLock"
    ],
    "readyScrapeManager.Set": [
      "rm.mtx.Lock",
      "rm.mtx.Unlock"
    ],
    "readyStorage.Appender": [
      "s.get",
      "x.Appender"
    ],
    "readyStorage.ApplyConfig": [
      "s.get",
      "db.ApplyConfig"
    ],
    "readyStorage.ChunkQuerier": [
      "s.get",
      "x.ChunkQuerier"
    ],
    "readyStorage.CleanTombstones": [
      "panic",
      "fmt.Sprintf",
      "s.get",
      "db.CleanTombstones"
    ],
    "readyStorage.Close": [
      "s.get",
      "x.Close"
    ],
    "readyStorage.Delete": [
      "db.Delete",
      "panic",
      "fmt.Sprintf",
      "s.get"
    ],
    "readyStorage.ExemplarQuerier": [
      "s.get",
      "db.ExemplarQuerier",
      "panic",
      "fmt.Sprintf"
    ],
    "readyStorage.Querier": [
      "s.get",
      "x.Querier"
    ],
    "readyStorage.Set": [
      "s.mtx.Lock",
      "s.mtx.Unlock"
    ],
    "readyStorage.Snapshot": [
      "s.get",
      "db.Snapshot",
      "panic",
      "fmt.Sprintf"
    ],
    "readyStorage.StartTime": [
      "s.get",
      "db.StartTime",
      "len",
      "db.Blocks",
      "?.Meta",
      "?.Unix",
      "time.Now",
      "panic",
      "fmt.Sprintf"
    ],
    "readyStorage.Stats": [
      "fmt.Sprintf",
      "s.get",
      "?.Stats",
      "db.Head",
      "panic"
    ],
    "readyStorage.WALReplayStatus": [
      "s.getStats",
      "x.Head.WALReplayStatus.GetWALReplayStatus"
    ],
    "readyStorage.get": [
      "s.mtx.RLock",
      "s.mtx.RUnlock"
    ],
    "readyStorage.getStats": [
      "s.mtx.RLock",
      "s.mtx.RUnlock"
    ],
    "realByteSlice.Len": [
      "len",
      "len"
    ],
    "recTypeFromHeader": [
      "recType"
    ],
    "reduceResolution": [
      "int",
      "targetIdx",
      "len",
      "append"
    ],
    "registerConfig": [
      "sort.Search",
      "len",
      "append",
      "config.Name",
      "panic",
      "reflect.SliceOf",
      "reflect.StructTag",
      "fmt.Sprintf",
      "copy"
    ],
    "registerFederationMetrics": [
      "r.MustRegister"
    ],
    "regularBucketIterator.Next": [
      "len"
    ],
    "relabel": [
      "lb.Set",
      "lb.Del",
      "md5.Sum",
      "strconv.FormatUint",
      "cap",
      "make",
      "cfg.Regex.MatchString",
      "varInRegexTemplate",
      "panic",
      "append",
      "strings.Join",
      "cfg.Regex.ExpandString",
      "lb.Range",
      "strings.ToUpper",
      "binary.BigEndian.Uint64",
      "cfg.Regex.ReplaceAllString",
      "len",
      "string",
      "target.IsValid",
      "strings.ToLower",
      "lb.Get",
      "cfg.Regex.FindStringSubmatchIndex",
      "model.LabelName",
      "fmt.Errorf"
    ],
    "relabelAlerts": [
      "lb.Set",
      "relabel.ProcessBuilder",
      "lb.Labels",
      "a.Labels.Get",
      "labels.EmptyLabels",
      "lb.Reset",
      "externalLabels.Range",
      "append",
      "labels.NewBuilder"
    ],
    "reloadAndValidate": [
      "ruleManager.Update",
      "tmpFile.Name",
      "labels.EmptyLabels",
      "require.NoError",
      "tmpFile.Seek",
      "tmpFile.Write",
      "yaml.Marshal",
      "formatRules",
      "t.Fail"
    ],
    "reloadConfig": [
      "noStepSuqueryInterval.Set",
      "timingsLogger.Info",
      "config.LoadFile",
      "timingsLogger.With",
      "fmt.Errorf",
      "time.Since",
      "updateGoGC",
      "logger.Info",
      "configSuccessTime.SetToCurrentTime",
      "time.Now",
      "rl.reloader",
      "logger.Error",
      "configSuccess.Set",
      "callback"
    ],
    "reloadPrometheusConfig": [
      "t.Helper",
      "http.Post",
      "require.NoError",
      "require.Equal"
    ],
    "removeBestEffortTmpDirs": [
      "f.Name",
      "l.Error",
      "l.Info",
      "os.ReadDir",
      "os.IsNotExist",
      "isTmpDir",
      "os.RemoveAll",
      "filepath.Join"
    ],
    "removedPostings.Err": [
      "rp.full.Err",
      "rp.remove.Err"
    ],
    "removedPostings.Next": [
      "rp.full.At",
      "rp.remove.At",
      "rp.remove.Seek",
      "rp.full.Next",
      "rp.remove.Next"
    ],
    "removedPostings.Seek": [
      "rp.full.Seek",
      "rp.remove.Seek",
      "rp.Next"
    ],
    "repairBadIndexVersion": [
      "repl.Sync",
      "os.RemoveAll",
      "logger.Error",
      "err.Error",
      "repl.Name",
      "repl.WriteAt",
      "broken.Name",
      "len",
      "logger.Info",
      "os.Open",
      "io.Copy",
      "filepath.Join",
      "errs.Err",
      "broken.Close",
      "os.Create",
      "append",
      "tsdb_errors.NewMulti",
      "repl.Close",
      "blockDirs",
      "fmt.Errorf",
      "make",
      "readBogusMetaFile",
      "errs.Add",
      "fileutil.Replace",
      "writeMetaFile"
    ],
    "repairLastChunkFile": [
      "fmt.Errorf",
      "f.Read",
      "os.RemoveAll",
      "delete",
      "os.Open",
      "make",
      "errors.Is",
      "f.Close",
      "binary.BigEndian.Uint32"
    ],
    "replaceYAMLTypeError": [
      "strings.ReplaceAll",
      "errors.As",
      "oldTyp.String",
      "newTyp.String"
    ],
    "requireContainsSample": [
      "labels.Equal",
      "require.Fail",
      "fmt.Sprintf",
      "t.Helper"
    ],
    "requireEntries": [
      "cmp.FilterValues",
      "cmpopts.EquateEmpty",
      "cmp.AllowUnexported",
      "t.Helper",
      "testutil.RequireEqualWithOptions"
    ],
    "requireEqual": [
      "cmp.AllowUnexported",
      "t.Helper",
      "testutil.RequireEqualWithOptions",
      "cmp.Comparer",
      "t.Helper",
      "testutil.RequireEqualWithOptions",
      "cmp.AllowUnexported"
    ],
    "requireEqualOOOSamples": [
      "require.Equal",
      "float64",
      "prom_testutil.ToFloat64",
      "db.head.metrics.outOfOrderSamplesAppended.WithLabelValues"
    ],
    "requireEqualSamples": [
      "actualSample.F",
      "expectedSample.T",
      "actualSample.T",
      "expectedSample.Type",
      "expectedSample.H",
      "actualSample.H",
      "s.FH",
      "expectedSample.F",
      "require.Len",
      "require.Equal",
      "s.H",
      "counterResetAsString",
      "actualSample.FH",
      "len",
      "?.String",
      "actualSample.Type",
      "?.Compact",
      "expectedSample.FH"
    ],
    "requireEqualSeries": [
      "require.True",
      "requireEqualSamples"
    ],
    "requireEqualSlice": [
      "len",
      "require.Empty",
      "require.Equal"
    ],
    "requireTargetGroups": [
      "string",
      "t.Helper",
      "marshalTargetGroups",
      "panic",
      "require.JSONEq"
    ],
    "requireTargets": [
      "t.Helper",
      "scrapeManager.TargetsActive",
      "len",
      "sort.Strings",
      "slices.Equal",
      "require.Eventually",
      "t.Fatalf",
      "append",
      "t.String"
    ],
    "resetValAndLset": [
      "labels.EmptyLabels"
    ],
    "resize": [
      "cap",
      "make",
      "cap",
      "make"
    ],
    "resolveAndGlobFilepaths": [
      "fmt.Fprintln",
      "append",
      "filepath.IsAbs",
      "filepath.Join",
      "filepath.Glob",
      "len"
    ],
    "resolveConflictingExposedLabels": [
      "slices.SortStableFunc",
      "len",
      "lb.Get",
      "lb.Set"
    ],
    "resultMetric": [
      "buf.Write",
      "enh.lb.Keep",
      "rhs.Get",
      "enh.lb.Labels",
      "bytes.NewBuffer",
      "rhs.Bytes",
      "?.SetToLabels",
      "len",
      "enh.resetBuilder",
      "buf.Bytes",
      "enh.lb.Del",
      "make",
      "lhs.Bytes",
      "string",
      "changesMetricSchema",
      "enh.lb.Set"
    ],
    "retry": [
      "t.Helper",
      "time.NewTicker",
      "f",
      "ticker.Stop",
      "t.Logf"
    ],
    "retryAfterDuration": [
      "time.Until",
      "model.Duration",
      "strconv.Atoi",
      "time.Parse",
      "?.Seconds"
    ],
    "retryOnError": [
      "f",
      "ctx.Done",
      "time.After"
    ],
    "returnAPIError": [
      "errors.As",
      "errors.Is"
    ],
    "reusableCache": [
      "zeroConfig",
      "reflect.DeepEqual"
    ],
    "reuseOrGetFPointSlices": [
      "cap",
      "len",
      "getFPointSlice"
    ],
    "reuseOrGetHPointSlices": [
      "cap",
      "len",
      "getHPointSlice"
    ],
    "reverseFloatBucketIterator.Next": [
      "int32"
    ],
    "robotDiscovery.refresh": [
      "fmt.Errorf",
      "json.Unmarshal",
      "strconv.Itoa",
      "strconv.FormatBool",
      "strconv.FormatUint",
      "ip.To4",
      "fmt.Sprintf",
      "io.Copy",
      "resp.Body.Close",
      "io.ReadAll",
      "strings.ToLower",
      "net.JoinHostPort",
      "net.ParseIP",
      "http.NewRequest",
      "req.Header.Add",
      "d.client.Do",
      "make",
      "len",
      "model.LabelValue",
      "uint64"
    ],
    "robotSDTestSuite.SetupTest": [
      "s.Mock.HandleRobotServers",
      "NewSDMock",
      "s.Mock.Setup"
    ],
    "role.UnmarshalYAML": [
      "unmarshal",
      "fmt.Errorf"
    ],
    "roundTripCheckRequest.RoundTrip": [
      "rt.checkRequest"
    ],
    "ruleDependencyController.AnalyseRules": [
      "buildDependencyMap",
      "r.SetDependentRules",
      "depMap.dependents",
      "r.SetDependencyRules",
      "depMap.dependencies"
    ],
    "ruleImporter.importAll": [
      "r.Name",
      "importer.importRule",
      "?.String",
      "r.Query",
      "r.Labels",
      "importer.logger.Info",
      "group.Rules",
      "int64",
      "append"
    ],
    "ruleImporter.importRule": [
      "promslog.NewNopLogger",
      "labels.NewBuilder",
      "string",
      "app.flushAndCommit",
      "?.UnixNano",
      "grp.Interval",
      "min",
      "float64",
      "end.Unix",
      "importer.logger.Warn",
      "lb.Set",
      "lb.Labels",
      "?.String",
      "getCompatibleBlockDuration",
      "grp.EvalTimestamp",
      "startWithAlignment.Add",
      "tsdb.NewBlockWriter",
      "value.Timestamp.Time",
      "max",
      "?.UTC",
      "time.Unix",
      "startWithAlignment.Unix",
      "importer.apiClient.QueryRange",
      "?.Err",
      "val.Type",
      "int64",
      "w.Close",
      "newMultipleAppender",
      "start.Unix",
      "tsdb_errors.NewMulti",
      "ruleLabels.Range",
      "timestamp.FromTime",
      "end.Before",
      "fmt.Errorf",
      "app.add"
    ],
    "ruleImporter.loadGroups": [
      "importer.ruleManager.LoadGroups"
    ],
    "rulePaths": [
      "make",
      "len"
    ],
    "ruleUnitTest": [
      "yaml.UnmarshalStrict",
      "filepath.Dir",
      "make",
      "fmt.Errorf",
      "ts.Case",
      "tc.Fail",
      "os.ReadFile",
      "ts.Abort",
      "len",
      "e.Error",
      "append",
      "matchesRun",
      "time.Duration",
      "ts.Settime",
      "?.Format",
      "time.Now",
      "fmt.Sprintf",
      "t.test",
      "resolveAndGlobFilepaths",
      "model.Duration"
    ],
    "rulesAlertsToAPIAlerts": [
      "make",
      "len",
      "ruleAlert.State.String",
      "strconv.FormatFloat",
      "ruleAlert.KeepFiringSince.IsZero"
    ],
    "rulesRetrieverMock.CreateAlertingRules": [
      "rules.NewAlertingRule",
      "promslog.NewNopLogger",
      "labels.FromStrings",
      "append",
      "parser.ParseExpr",
      "require.NoError"
    ],
    "rulesRetrieverMock.CreateRuleGroups": [
      "parser.ParseExpr",
      "storage.Close",
      "rules.EngineQueryFunc",
      "rules.NewGroup",
      "m.CreateAlertingRules",
      "promslog.NewNopLogger",
      "teststorage.New",
      "promqltest.NewTestEngineWithOpts",
      "append",
      "require.NoError",
      "rules.NewRecordingRule",
      "labels.FromStrings",
      "m.AlertingRules",
      "context.Background"
    ],
    "runManagers": [
      "t.Helper",
      "model.Duration",
      "discovery.NewRefreshMetrics",
      "require.NoError",
      "discovery.NewManager",
      "promslog.NewNopLogger",
      "discovery.Updatert",
      "NewManager",
      "discoveryManager.Run",
      "discoveryManager.SyncCh",
      "prometheus.NewRegistry",
      "discovery.RegisterSDMetrics",
      "scrapeManager.Run"
    ],
    "runScrapeLoopTest": [
      "context.WithCancel",
      "series.Next",
      "it.Next",
      "it.Err",
      "s.Appender",
      "labels.FromStrings",
      "timestamp.FromTime",
      "series.At",
      "q.Close",
      "it.At",
      "?.Labels",
      "require.NoError",
      "slApp.Commit",
      "s.Querier",
      "sl.append",
      "?.Iterator",
      "now.Truncate",
      "now.Add",
      "q.Select",
      "require.NotEqual",
      "newBasicScrapeLoop",
      "time.Now",
      "sl.appender",
      "append",
      "context.Background",
      "?.UnixNano",
      "labels.MustNewMatcher",
      "series.Err",
      "require.Equal",
      "cancel"
    ],
    "runTest": [
      "newTest",
      "test.storage.Close",
      "test.cancelCtx",
      "test.exec"
    ],
    "runTestSteps": [
      "verifyScrapeInterval",
      "t.TempDir",
      "os.WriteFile",
      "prom.Start",
      "require.Eventually",
      "resp.Body.Close",
      "filepath.Join",
      "t.Logf",
      "testutil.RandomUnprivilegedPort",
      "require.NoError",
      "http.Get",
      "prometheusCommandWithLogging",
      "strconv.Itoa",
      "verifyConfigReloadMetric"
    ],
    "rwExporter.ConsumeMetrics": [
      "otlpCfg.TranslationStrategy.ShouldEscape",
      "rw.logger.Warn",
      "annots.AsStrings",
      "len",
      "converter.Metadata",
      "rw.config",
      "converter.FromMetrics",
      "otlpCfg.TranslationStrategy.ShouldAddSuffixes",
      "otlptranslator.NewPromoteResourceAttributes",
      "rw.write",
      "converter.TimeSeries",
      "otlptranslator.NewPrometheusConverter"
    ],
    "rwProtoMsgFlagParser.Set": [
      "config.RemoteWriteProtoMsg",
      "t.Validate",
      "slices.Contains",
      "fmt.Errorf",
      "append"
    ],
    "rwProtoMsgFlagParser.String": [
      "make",
      "len",
      "append",
      "string",
      "strings.Join"
    ],
    "safeHeadChunk.Iterator": [
      "c.s.Unlock",
      "c.s.Lock",
      "c.s.iterator"
    ],
    "safePromQLNoStepSubqueryInterval.Get": [
      "i.value.Load"
    ],
    "safePromQLNoStepSubqueryInterval.Set": [
      "durationToInt64Millis",
      "time.Duration",
      "i.value.Store"
    ],
    "sample.Copy": [
      "s.h.Copy",
      "s.fh.Copy",
      "s.h.Copy",
      "s.fh.Copy"
    ],
    "sampleAndChunkQueryableClient.ChunkQuerier": [
      "c.preferLocalStorage",
      "storage.NoopChunkedQuerier"
    ],
    "sampleAndChunkQueryableClient.Querier": [
      "c.preferLocalStorage",
      "storage.NoopQuerier"
    ],
    "sampleAndChunkQueryableClient.preferLocalStorage": [
      "c.callback"
    ],
    "sampleCount": [
      "rms.Len",
      "?.ScopeMetrics",
      "?.Metrics",
      "ms.At",
      "m.Gauge",
      "sms.At",
      "?.Len",
      "?.BucketCounts",
      "ms.Len",
      "m.Sum",
      "m.Histogram",
      "dps.Len",
      "m.Summary",
      "md.ResourceMetrics",
      "rms.At",
      "sms.Len",
      "m.Type",
      "?.DataPoints",
      "dps.At",
      "m.ExponentialHistogram"
    ],
    "sampleRing.add": [
      "addH",
      "addFH",
      "append",
      "addSample",
      "addF"
    ],
    "sampleRing.addF": [
      "addF",
      "addSample",
      "r.add"
    ],
    "sampleRing.addFH": [
      "addFH",
      "addSample",
      "r.add"
    ],
    "sampleRing.addH": [
      "addH",
      "addSample",
      "r.add"
    ],
    "sampleRing.at": [
      "len"
    ],
    "sampleRing.atF": [
      "len"
    ],
    "sampleRing.atFH": [
      "len"
    ],
    "sampleRing.atH": [
      "len"
    ],
    "sampleRing.iterator": [
      "r.it.reset"
    ],
    "sampleRing.nthLast": [
      "r.atF",
      "r.atH",
      "r.atFH",
      "r.at"
    ],
    "sampleRing.reduceDelta": [
      "genericReduceDelta"
    ],
    "sampleRing.samples": [
      "make",
      "len",
      "copy"
    ],
    "sampledResponseHTTPHandler": [
      "w.Header",
      "float64",
      "int64",
      "proto.Marshal",
      "require.NoError",
      "w.Write",
      "snappy.Encode",
      "?.Set"
    ],
    "samples.Len": [
      "len"
    ],
    "samplesForRange": [
      "append",
      "len"
    ],
    "samplesIteratorHeap.Len": [
      "len"
    ],
    "samplesIteratorHeap.Less": [
      "?.AtT"
    ],
    "samplesIteratorHeap.Pop": [
      "len"
    ],
    "samplesIteratorHeap.Push": [
      "append"
    ],
    "sanitizeAttributes": [
      "fmt.Errorf",
      "strings.TrimSpace",
      "errors.Join"
    ],
    "sanitizeSplitHostPort": [
      "net.SplitHostPort",
      "strings.HasSuffix",
      "err.Error"
    ],
    "scalarBinop": [
      "math.Atan2",
      "panic",
      "fmt.Errorf",
      "math.Pow",
      "math.Mod",
      "btos"
    ],
    "scrapeCache.GetMetadata": [
      "c.metaMtx.Lock",
      "c.metaMtx.Unlock"
    ],
    "scrapeCache.LengthMetadata": [
      "c.metaMtx.Lock",
      "c.metaMtx.Unlock",
      "len"
    ],
    "scrapeCache.ListMetadata": [
      "append",
      "c.metaMtx.Lock",
      "c.metaMtx.Unlock",
      "make",
      "len"
    ],
    "scrapeCache.SizeMetadata": [
      "c.metaMtx.Lock",
      "c.metaMtx.Unlock",
      "e.size"
    ],
    "scrapeCache.addDropped": [
      "string"
    ],
    "scrapeCache.addRef": [
      "string"
    ],
    "scrapeCache.forEachStale": [
      "f"
    ],
    "scrapeCache.get": [
      "string"
    ],
    "scrapeCache.getDropped": [
      "string"
    ],
    "scrapeCache.iterDone": [
      "c.metaMtx.Lock",
      "len",
      "c.metaMtx.Unlock",
      "c.metrics.targetScrapeCacheFlushForced.Inc",
      "delete"
    ],
    "scrapeCache.setHelp": [
      "c.metaMtx.Lock",
      "c.metaMtx.Unlock",
      "yoloString",
      "string"
    ],
    "scrapeCache.setType": [
      "c.metaMtx.Lock",
      "c.metaMtx.Unlock",
      "yoloString",
      "string"
    ],
    "scrapeCache.setUnit": [
      "c.metaMtx.Lock",
      "c.metaMtx.Unlock",
      "yoloString",
      "string"
    ],
    "scrapeLoop.addReportSample": [
      "sl.cache.get",
      "b.Reset",
      "b.Set",
      "app.Append",
      "sl.cache.addRef",
      "sl.l.Debug",
      "fmt.Sprintf",
      "sl.reportSampleMutator",
      "string",
      "lset.Hash",
      "app.UpdateMetadata",
      "errors.Is",
      "labels.EmptyLabels",
      "len",
      "b.Labels"
    ],
    "scrapeLoop.append": [
      "appender",
      "p.Series",
      "sl.cache.addDropped",
      "app.Append",
      "sl.cache.addRef",
      "sl.l.Warn",
      "sl.cache.setHelp",
      "sl.metrics.targetScrapePoolExceededLabelLimits.Inc",
      "p.CreatedTimestamp",
      "app.AppendHistogram",
      "sl.metrics.targetScrapeNativeHistogramBucketLimit.Inc",
      "sl.cache.setUnit",
      "float64",
      "textparse.New",
      "sl.sampleMutator",
      "sl.checkAddError",
      "append",
      "sl.metrics.targetScrapeSampleLimit.Inc",
      "p.Histogram",
      "string",
      "sl.metrics.targetScrapeExemplarOutOfOrder.Add",
      "timestamp.FromTime",
      "sl.l.Error",
      "sl.cache.setType",
      "p.Labels",
      "lset.Has",
      "sl.updateStaleMarkers",
      "lset.Hash",
      "lset.String",
      "sl.cache.get",
      "textparse.NewNHCBParser",
      "slices.SortFunc",
      "app.AppendExemplar",
      "app.UpdateMetadata",
      "p.Help",
      "verifyLabelLimits",
      "p.Type",
      "app.AppendHistogramCTZeroSample",
      "isSeriesPartOfFamily",
      "len",
      "sl.l.Debug",
      "p.Next",
      "errors.Is",
      "p.Exemplar",
      "make",
      "sl.cache.iterDone",
      "sl.cache.getDropped",
      "lset.IsEmpty",
      "lset.IsValid",
      "fmt.Errorf",
      "p.Unit",
      "app.AppendCTZeroSample",
      "sl.cache.trackStaleness",
      "fmt.Sprintf",
      "lset.Get"
    ],
    "scrapeLoop.checkAddError": [
      "sl.l.Debug",
      "string",
      "sl.metrics.targetScrapeSampleOutOfOrder.Inc",
      "sl.metrics.targetScrapeSampleDuplicate.Inc",
      "sl.metrics.targetScrapeSampleOutOfBounds.Inc",
      "errors.Is"
    ],
    "scrapeLoop.endOfRunStaleness": [
      "sl.appender",
      "app.Commit",
      "last.IsZero",
      "time.Now",
      "time.After",
      "app.Rollback",
      "sl.l.Warn",
      "sl.append",
      "sl.reportStale",
      "sl.parentCtx.Done"
    ],
    "scrapeLoop.getForcedError": [
      "sl.forcedErrMtx.Lock",
      "sl.forcedErrMtx.Unlock"
    ],
    "scrapeLoop.report": [
      "labels.NewBuilderWithSymbolTable",
      "sl.addReportSample",
      "duration.Seconds",
      "float64",
      "sl.timeout.Seconds",
      "sl.scraper.Report",
      "timestamp.FromTime"
    ],
    "scrapeLoop.reportStale": [
      "math.Float64frombits",
      "labels.NewBuilder",
      "labels.EmptyLabels",
      "sl.addReportSample",
      "timestamp.FromTime",
      "app.SetOptions"
    ],
    "scrapeLoop.run": [
      "?.Round",
      "time.Now",
      "min",
      "alignedScrapeTime.Add",
      "time.After",
      "ticker.Stop",
      "sl.scraper.offset",
      "close",
      "time.NewTicker",
      "sl.parentCtx.Done",
      "sl.scrapeAndReport",
      "sl.ctx.Done",
      "scrapeTime.Sub",
      "sl.endOfRunStaleness"
    ],
    "scrapeLoop.scrapeAndReport": [
      "last.IsZero",
      "sl.metrics.targetIntervalLength.WithLabelValues",
      "sl.interval.String",
      "app.Commit",
      "sl.l.Error",
      "sl.l.Warn",
      "buf.Bytes",
      "sl.scrapeFailureLoggerMtx.RUnlock",
      "sl.scrapeFailureLoggerMtx.RLock",
      "time.Now",
      "context.WithTimeout",
      "sl.scraper.scrape",
      "sl.buffers.Put",
      "cancel",
      "sl.appender",
      "sl.report",
      "len",
      "?.Seconds",
      "app.Rollback",
      "sl.getForcedError",
      "?.Error",
      "?.Observe",
      "sl.scraper.readResponse",
      "slog.New",
      "scrapeErr.Error",
      "errors.Is",
      "time.Since",
      "bytes.NewBuffer",
      "sl.l.Debug",
      "sl.append",
      "sl.buffers.Get"
    ],
    "scrapeLoop.setForcedError": [
      "sl.forcedErrMtx.Lock",
      "sl.forcedErrMtx.Unlock"
    ],
    "scrapeLoop.setScrapeFailureLogger": [
      "?.With",
      "slog.New",
      "ts.String",
      "sl.scrapeFailureLoggerMtx.Lock",
      "sl.scrapeFailureLoggerMtx.Unlock",
      "?.Handler"
    ],
    "scrapeLoop.stop": [
      "sl.cancel"
    ],
    "scrapeLoop.updateStaleMarkers": [
      "math.Float64frombits",
      "errors.Is",
      "sl.cache.forEachStale",
      "app.SetOptions",
      "app.Append"
    ],
    "scrapeManagerMock.Get": [
      "errors.New"
    ],
    "scrapeMetrics.Unregister": [
      "sm.reg.Unregister"
    ],
    "scrapePool.ActiveTargets": [
      "sp.targetMtx.Lock",
      "sp.targetMtx.Unlock",
      "append"
    ],
    "scrapePool.DroppedTargets": [
      "sp.targetMtx.Unlock",
      "sp.targetMtx.Lock"
    ],
    "scrapePool.DroppedTargetsCount": [
      "sp.targetMtx.Lock",
      "sp.targetMtx.Unlock"
    ],
    "scrapePool.SetScrapeFailureLogger": [
      "slog.New",
      "sp.targetMtx.Lock",
      "sp.targetMtx.Unlock",
      "s.setScrapeFailureLogger",
      "sp.scrapeFailureLoggerMtx.Lock",
      "sp.scrapeFailureLoggerMtx.Unlock",
      "?.Handler",
      "?.With"
    ],
    "scrapePool.Sync": [
      "sp.metrics.targetSyncIntervalLength.WithLabelValues",
      "sp.targetMtx.Lock",
      "sp.metrics.targetSyncFailed.WithLabelValues",
      "sp.sync",
      "sp.checkSymbolTable",
      "time.Since",
      "float64",
      "uint",
      "?.Set",
      "?.Observe",
      "len",
      "sp.metrics.targetScrapePoolSymbolTableItems.WithLabelValues",
      "sp.targetMtx.Unlock",
      "?.Seconds",
      "sp.mtx.Lock",
      "time.Now",
      "labels.NewBuilderWithSymbolTable",
      "?.Add",
      "sp.metrics.targetScrapePoolSyncsCounter.WithLabelValues",
      "append",
      "sp.symbolTable.Len",
      "?.Inc",
      "sp.mtx.Unlock",
      "TargetsFromGroup",
      "sp.logger.Error",
      "t.LabelsRange"
    ],
    "scrapePool.checkSymbolTable": [
      "time.Now",
      "time.Since",
      "sp.symbolTable.Len",
      "labels.NewSymbolTable",
      "sp.restartLoops"
    ],
    "scrapePool.getScrapeFailureLogger": [
      "sp.scrapeFailureLoggerMtx.RLock",
      "sp.scrapeFailureLoggerMtx.RUnlock"
    ],
    "scrapePool.refreshTargetLimitErr": [
      "len",
      "int",
      "sp.metrics.targetScrapePoolExceededTargetLimit.Inc",
      "fmt.Errorf"
    ],
    "scrapePool.reload": [
      "time.Now",
      "reusableCache",
      "?.Set",
      "time.Duration",
      "?.Seconds",
      "time.Since",
      "sp.mtx.Unlock",
      "sp.restartLoops",
      "sp.mtx.Lock",
      "sp.metrics.targetScrapePoolReloadsFailed.Inc",
      "float64",
      "oldClient.CloseIdleConnections",
      "sp.metrics.targetScrapePoolReloads.Inc",
      "config_util.NewClientFromConfig",
      "fmt.Errorf",
      "model.ToEscapingScheme",
      "sp.metrics.targetScrapePoolTargetLimit.WithLabelValues",
      "?.Observe",
      "sp.metrics.targetReloadIntervalLength.WithLabelValues",
      "?.String"
    ],
    "scrapePool.restartLoops": [
      "sp.config.ConvertClassicHistogramsToNHCBEnabled",
      "acceptHeader",
      "newLoop.setScrapeFailureLogger",
      "int",
      "sp.config.ScrapeFallbackProtocol.HeaderMediaType",
      "oldLoop.getCache",
      "newScrapeCache",
      "sp.newLoop",
      "sp.targetMtx.Unlock",
      "pickSchema",
      "sp.targetMtx.Lock",
      "oldLoop.disableEndOfRunStalenessMarkers",
      "acceptEncodingHeader",
      "newLoop.setForcedError",
      "wg.Done",
      "sp.getScrapeFailureLogger",
      "newLoop.run",
      "sp.config.AlwaysScrapeClassicHistogramsEnabled",
      "wg.Wait",
      "int64",
      "sp.refreshTargetLimitErr",
      "t.intervalAndTimeout",
      "wg.Add",
      "oldLoop.stop",
      "time.Duration"
    ],
    "scrapePool.stop": [
      "wg.Add",
      "wg.Done",
      "sp.metrics.targetScrapePoolTargetsAdded.DeleteLabelValues",
      "sp.metrics.targetScrapePoolSymbolTableItems.DeleteLabelValues",
      "sp.cancel",
      "sp.targetMtx.Lock",
      "sp.metrics.targetScrapePoolSyncsCounter.DeleteLabelValues",
      "delete",
      "sp.client.CloseIdleConnections",
      "sp.targetMtx.Unlock",
      "wg.Wait",
      "sp.metrics.targetSyncIntervalLength.DeleteLabelValues",
      "sp.mtx.Lock",
      "l.stop",
      "sp.metrics.targetSyncFailed.DeleteLabelValues",
      "sp.mtx.Unlock",
      "sp.metrics.targetScrapePoolTargetLimit.DeleteLabelValues"
    ],
    "scrapePool.sync": [
      "?.SetScrapeConfig",
      "wg.Add",
      "t.hash",
      "sp.newLoop",
      "l.setScrapeFailureLogger",
      "l.run",
      "make",
      "int64",
      "sp.config.ConvertClassicHistogramsToNHCBEnabled",
      "len",
      "int",
      "acceptEncodingHeader",
      "time.Duration",
      "sp.targetMtx.Lock",
      "wg.Done",
      "sp.metrics.targetScrapePoolTargetsAdded.WithLabelValues",
      "l.stop",
      "delete",
      "sp.targetMtx.Unlock",
      "pickSchema",
      "sp.config.ScrapeFallbackProtocol.HeaderMediaType",
      "?.Set",
      "sp.refreshTargetLimitErr",
      "float64",
      "wg.Wait",
      "sp.config.AlwaysScrapeClassicHistogramsEnabled",
      "t.intervalAndTimeout",
      "acceptHeader",
      "l.setForcedError"
    ],
    "secondaryQuerier.LabelNames": [
      "s.genericQuerier.LabelNames",
      "w.Add"
    ],
    "secondaryQuerier.LabelValues": [
      "w.Add",
      "s.genericQuerier.LabelValues"
    ],
    "secondaryQuerier.Select": [
      "panic",
      "s.once.Do",
      "set.Next",
      "set.Warnings",
      "set.Err",
      "warningsOnlySeriesSet",
      "ws.Add",
      "append",
      "s.genericQuerier.Select",
      "len"
    ],
    "segmentBufReader.Close": [
      "s.Close"
    ],
    "segmentBufReader.Read": [
      "len",
      "r.buf.Read",
      "errors.Is",
      "r.buf.Reset"
    ],
    "segmentFile": [
      "filepath.Join",
      "fmt.Sprintf"
    ],
    "selectChunkSeriesSet": [
      "index.SortedPostings",
      "NewBlockChunkSeriesSet",
      "PostingsForMatchers",
      "storage.ErrChunkSeriesSet",
      "index.ShardedPostings"
    ],
    "selectSeriesSet": [
      "index.ShardedPostings",
      "index.SortedPostings",
      "newBlockSeriesSet",
      "newNopChunkReader",
      "PostingsForMatchers",
      "storage.ErrSeriesSet"
    ],
    "send": [
      "ctx.Done"
    ],
    "sendSamples": [
      "w.Name",
      "len",
      "sentSamples.WithLabelValues",
      "float64",
      "time.Now",
      "w.Write",
      "?.Seconds",
      "time.Since",
      "logger.Warn",
      "?.Add",
      "failedSamples.WithLabelValues",
      "?.Observe",
      "sentBatchDuration.WithLabelValues"
    ],
    "senderFunc.Send": [
      "s"
    ],
    "sequenceFiles": [
      "os.ReadDir",
      "strconv.ParseUint",
      "fi.Name",
      "append",
      "filepath.Join",
      "fi.Name",
      "append",
      "filepath.Join",
      "os.ReadDir",
      "strconv.ParseUint"
    ],
    "seriesByLabel.Len": [
      "len"
    ],
    "seriesByLabel.Less": [
      "labels.Compare",
      "?.Labels"
    ],
    "seriesFilter.Labels": [
      "b.Labels",
      "labels.NewBuilder",
      "sf.Series.Labels",
      "b.Del"
    ],
    "seriesHashmap.Delete": [
      "len",
      "delete",
      "append"
    ],
    "seriesHashmap.Get": [
      "labels.Equal"
    ],
    "seriesHashmap.Set": [
      "append",
      "labels.Equal",
      "make"
    ],
    "seriesHashmap.del": [
      "len",
      "delete",
      "append"
    ],
    "seriesHashmap.get": [
      "labels.Equal",
      "s.labels"
    ],
    "seriesHashmap.set": [
      "labels.Equal",
      "existing.labels",
      "s.labels",
      "make",
      "prev.labels",
      "append"
    ],
    "seriesMergerAdapter.Merge": [
      "append",
      "a.VerticalSeriesMergeFunc",
      "make",
      "len"
    ],
    "seriesRefSet.count": [
      "s.mtx.Lock",
      "s.mtx.Unlock",
      "len"
    ],
    "seriesRefSet.merge": [
      "s.mtx.Lock",
      "s.mtx.Unlock",
      "maps.Copy"
    ],
    "seriesSelector": [
      "builder.WriteString",
      "builder.WriteRune",
      "duration.String",
      "builder.String"
    ],
    "seriesSetAdapter.At": [
      "a.genericSeriesSet.At"
    ],
    "seriesSetFilter.At": [
      "ssf.SeriesSet.At"
    ],
    "seriesSetToChunkSet.At": [
      "NewSeriesToChunkEncoder",
      "c.SeriesSet.At"
    ],
    "seriesSetToChunkSet.Err": [
      "c.SeriesSet.Err"
    ],
    "seriesSetToChunkSet.Next": [
      "c.Err",
      "c.SeriesSet.Next"
    ],
    "seriesToChunkEncoder.Iterator": [
      "NewListChunkSeriesIterator",
      "int64",
      "chk.Appender",
      "app.AppendHistogram",
      "seriesIter.Err",
      "seriesIter.AtHistogram",
      "seriesIter.AtFloatHistogram",
      "typ.String",
      "s.Series.Iterator",
      "chunkenc.NewEmptyChunk",
      "typ.ChunkEncoding",
      "fmt.Errorf",
      "app.AppendFloatHistogram",
      "lcsi.Reset",
      "seriesIter.Next",
      "appendChunk",
      "seriesIter.At",
      "app.Append"
    ],
    "serve": [
      "remote.DecodeWriteRequest",
      "logger.Error",
      "wg.Add",
      "sendSamples",
      "io.ReadAll",
      "fmt.Sprintf",
      "?.Set",
      "http.HandleFunc",
      "snappy.Encode",
      "float64",
      "proto.Unmarshal",
      "logger.Warn",
      "http.Error",
      "len",
      "wg.Done",
      "wg.Wait",
      "reader.Read",
      "reader.Name",
      "proto.Marshal",
      "receivedSamples.Add",
      "protoToSamples",
      "snappy.Decode",
      "w.Header",
      "w.Write",
      "http.ListenAndServe",
      "err.Error"
    ],
    "serveDebug": [
      "pprof.Trace",
      "route.Param",
      "strings.TrimPrefix",
      "pprof.Cmdline",
      "pprof.Profile",
      "pprof.Symbol",
      "req.Context",
      "http.Redirect",
      "strings.HasPrefix",
      "http.NotFound",
      "pprof.Index"
    ],
    "serverDiscovery.refresh": [
      "net.JoinHostPort",
      "strconv.FormatUint",
      "join",
      "model.LabelName",
      "?.Depth",
      "api.DatacentersServersGet",
      "make",
      "uint64",
      "model.LabelValue",
      "strutil.SanitizeLabelName",
      "?.Execute",
      "append",
      "len"
    ],
    "serverOnlyFlag": [
      "fmt.Sprintf",
      "append",
      "?.PreAction",
      "app.Flag"
    ],
    "serverSDTestSuite.SetupTest": [
      "NewSDMock",
      "s.Mock.Setup",
      "s.Mock.HandleServers"
    ],
    "serviceLabels": [
      "addObjectMetaLabels",
      "make",
      "lv"
    ],
    "serviceSource": [
      "serviceSourceFromNamespaceAndName"
    ],
    "setAtomicToNewer": [
      "value.Load",
      "value.CompareAndSwap"
    ],
    "setHeadersTransport.RoundTrip": [
      "req.Header.Set",
      "s.RoundTripper.RoundTrip"
    ],
    "setOffsetForAtModifier": [
      "subqueryTimes",
      "time.Duration",
      "parser.Inspect",
      "getOffset"
    ],
    "setPathWithPrefix": [
      "handler",
      "r.WithContext",
      "httputil.ContextWithPath",
      "r.Context"
    ],
    "setUnavailStatusOnTSDBNotReady": [
      "errors.Is"
    ],
    "setUpRuleEvalTest": [
      "promqltest.LoadedStorage"
    ],
    "setup": [
      "httptest.NewServer",
      "server.Close",
      "http.NewServeMux"
    ],
    "setupRangeQueryTestData": [
      "stor.Appender",
      "int64",
      "stor.ForceHeadMMap",
      "stor.Compact",
      "append",
      "make",
      "strconv.Itoa",
      "len",
      "a.Append",
      "float64",
      "a.Commit",
      "context.Background",
      "labels.FromStrings"
    ],
    "setupRemote": [
      "r.Context",
      "remote.ToQueryResult",
      "querier.Close",
      "?.Set",
      "querier.Select",
      "remote.EncodeReadResponse",
      "remote.DecodeReadRequest",
      "err.Error",
      "remote.FromLabelMatchers",
      "len",
      "s.Querier",
      "w.Header",
      "httptest.NewServer",
      "http.HandlerFunc",
      "http.Error",
      "make"
    ],
    "setupTestServer": [
      "?.Set",
      "w.Header",
      "w.Write",
      "w.WriteHeader",
      "server.Close",
      "http.HandlerFunc",
      "once.Do",
      "httptest.NewServer",
      "t.Cleanup"
    ],
    "setupTestTargetRetriever": [
      "t.Helper",
      "labels.FromMap",
      "errors.New",
      "labels.EmptyLabels",
      "newTestTargetRetriever"
    ],
    "shards.enqueue": [
      "s.enqueuedExemplars.Inc",
      "s.qm.metrics.pendingHistograms.Inc",
      "s.mtx.RLock",
      "uint64",
      "len",
      "?.Append",
      "s.enqueuedSamples.Inc",
      "s.qm.metrics.pendingExemplars.Inc",
      "s.mtx.RUnlock",
      "s.qm.metrics.pendingSamples.Inc",
      "s.enqueuedHistograms.Inc"
    ],
    "shards.runShard": [
      "strconv.Itoa",
      "proto.NewBuffer",
      "make",
      "ctx.Done",
      "s.qm.metrics.pendingHistograms.Sub",
      "queue.Chan",
      "time.NewTimer",
      "s.sendSamples",
      "s.qm.metrics.pendingSamples.Sub",
      "s.samplesDroppedOnHardShutdown.Add",
      "s.running.Dec",
      "int",
      "s.enqueuedExemplars.Load",
      "len",
      "sendBatch",
      "time.Duration",
      "stop",
      "populateV2TimeSeries",
      "symbolTable.Reset",
      "s.qm.metrics.pendingExemplars.Sub",
      "uint32",
      "close",
      "s.qm.metrics.failedExemplarsTotal.Add",
      "s.qm.metrics.failedHistogramsTotal.Add",
      "timer.Reset",
      "s.qm.metrics.failedSamplesTotal.Add",
      "queue.ReturnForReuse",
      "compression.NewSyncEncodeBuffer",
      "timer.Stop",
      "populateTimeSeries",
      "s.qm.logger.Debug",
      "s.sendV2Samples",
      "s.enqueuedHistograms.Load",
      "queue.Batch",
      "writev2.NewSymbolTable",
      "float64",
      "symbolTable.Symbols",
      "s.enqueuedSamples.Load",
      "s.exemplarsDroppedOnHardShutdown.Add",
      "s.histogramsDroppedOnHardShutdown.Add"
    ],
    "shards.sendSamples": [
      "time.Now",
      "s.sendSamplesWithBackoff",
      "s.updateMetrics",
      "time.Since"
    ],
    "shards.sendSamplesWithBackoff": [
      "isSampleOld",
      "s.qm.metrics.metadataTotal.Add",
      "s.qm.metrics.sentBatchDuration.Observe",
      "s.qm.sendWriteRequestWithBackoff",
      "accumulatedStatsMu.Lock",
      "span.SetAttributes",
      "?.Seconds",
      "addStats",
      "s.qm.buildRequestLimitTimestamp.Load",
      "span.End",
      "attribute.String",
      "s.qm.metrics.exemplarsTotal.Add",
      "accumulatedStats.Add",
      "s.qm.storeClient.Endpoint",
      "s.qm.metrics.retriedHistogramsTotal.Add",
      "span.RecordError",
      "s.qm.metrics.retriedSamplesTotal.Add",
      "s.qm.metrics.retriedExemplarsTotal.Add",
      "buildWriteRequest",
      "time.Now",
      "s.qm.client",
      "time.Since",
      "accumulatedStatsMu.Unlock",
      "attribute.Int",
      "errors.Is",
      "s.qm.metrics.highestSentTimestamp.Set",
      "time.Duration",
      "otel.Tracer",
      "s.qm.metrics.samplesTotal.Add",
      "s.qm.storeClient.Name",
      "float64",
      "s.qm.metrics.histogramsTotal.Add",
      "?.Store",
      "s.qm.buildRequestLimitTimestamp.Store",
      "len",
      "isTimeSeriesOldFilter",
      "?.Start",
      "s.qm.metrics.sentBytesTotal.Add"
    ],
    "shards.sendV2Samples": [
      "s.sendV2SamplesWithBackoff",
      "s.updateMetrics",
      "time.Since",
      "time.Now"
    ],
    "shards.sendV2SamplesWithBackoff": [
      "isV2TimeSeriesOldFilter",
      "span.End",
      "attribute.Int",
      "s.qm.metrics.retriedExemplarsTotal.Add",
      "s.qm.sendWriteRequestWithBackoff",
      "accumulatedStatsMu.Lock",
      "accumulatedStatsMu.Unlock",
      "s.qm.buildRequestLimitTimestamp.Load",
      "s.qm.storeClient.Name",
      "s.qm.metrics.exemplarsTotal.Add",
      "s.qm.buildRequestLimitTimestamp.Store",
      "time.Now",
      "rs.NoDataWritten",
      "time.Duration",
      "s.qm.metrics.sentBatchDuration.Observe",
      "attribute.String",
      "s.qm.storeClient.Endpoint",
      "float64",
      "errors.Is",
      "isSampleOld",
      "otel.Tracer",
      "s.qm.metrics.retriedHistogramsTotal.Add",
      "s.qm.metrics.sentBytesTotal.Add",
      "buildV2WriteRequest",
      "s.qm.metrics.retriedSamplesTotal.Add",
      "s.qm.client",
      "?.Seconds",
      "addStats",
      "s.qm.metrics.samplesTotal.Add",
      "s.qm.metrics.metadataTotal.Add",
      "span.SetAttributes",
      "s.qm.metrics.histogramsTotal.Add",
      "fmt.Errorf",
      "span.RecordError",
      "s.qm.metrics.highestSentTimestamp.Set",
      "accumulatedStats.Add",
      "?.Start",
      "time.Since",
      "len",
      "?.Store"
    ],
    "shards.start": [
      "s.mtx.Lock",
      "context.WithCancel",
      "s.enqueuedHistograms.Store",
      "s.samplesDroppedOnHardShutdown.Store",
      "s.histogramsDroppedOnHardShutdown.Store",
      "s.mtx.Unlock",
      "s.qm.metrics.pendingSamples.Set",
      "context.Background",
      "s.running.Store",
      "int32",
      "s.runShard",
      "s.qm.metrics.numShards.Set",
      "float64",
      "make",
      "s.enqueuedSamples.Store",
      "s.exemplarsDroppedOnHardShutdown.Store",
      "s.metadataDroppedOnHardShutdown.Store",
      "newQueue",
      "s.enqueuedExemplars.Store"
    ],
    "shards.stop": [
      "fmt.Sprintf",
      "close",
      "s.mtx.RUnlock",
      "s.mtx.Unlock",
      "queue.FlushAndShutdown",
      "counter.Load",
      "s.qm.logger.Error",
      "logDroppedError",
      "s.mtx.RLock",
      "s.mtx.Lock",
      "time.After",
      "s.hardShutdown"
    ],
    "shards.updateMetrics": [
      "s.enqueuedSamples.Sub",
      "s.enqueuedHistograms.Sub",
      "s.qm.metrics.failedSamplesTotal.Add",
      "?.Unix",
      "s.qm.metrics.pendingSamples.Sub",
      "s.qm.dataOutDuration.incr",
      "s.qm.lastSendTimestamp.Store",
      "time.Now",
      "s.qm.metrics.pendingExemplars.Sub",
      "s.qm.metrics.failedHistogramsTotal.Add",
      "s.qm.logger.Error",
      "int64",
      "s.enqueuedExemplars.Sub",
      "float64",
      "s.qm.dataOut.incr",
      "s.qm.metrics.pendingHistograms.Sub",
      "s.qm.metrics.failedExemplarsTotal.Add"
    ],
    "sharedLimitListener.Accept": [
      "l.acquire",
      "l.Listener.Accept",
      "c.Close",
      "l.release"
    ],
    "sharedLimitListener.Close": [
      "l.closeOnce.Do",
      "close",
      "l.Listener.Close"
    ],
    "sharedLimitListenerConn.Close": [
      "l.Conn.Close",
      "l.releaseOnce.Do"
    ],
    "shortDuration": [
      "d.String",
      "strings.HasSuffix",
      "len"
    ],
    "signatureFunc": [
      "slices.Sort",
      "string",
      "lset.BytesWithLabels",
      "append",
      "lset.BytesWithoutLabels"
    ],
    "simpleFloatFunc": [
      "el.Metric.DropReserved",
      "append",
      "f"
    ],
    "simpleHistogramFunc": [
      "el.Metric.DropMetricName",
      "append",
      "f"
    ],
    "simpleTestScrapeLoop": [
      "cancel",
      "teststorage.New",
      "t.Cleanup",
      "s.Close",
      "context.WithCancel",
      "context.Background",
      "newBasicScrapeLoop"
    ],
    "sizeVarint": [
      "panic"
    ],
    "sizeWhenEncoded": [
      "panic"
    ],
    "skipMetrics": [
      "len",
      "uint",
      "uint64",
      "int",
      "fmt.Errorf"
    ],
    "skipRemote": [
      "fmt.Errorf",
      "len",
      "uint",
      "uint64",
      "int"
    ],
    "skipSpaces": [
      "l.next",
      "l.ignore",
      "isSpace",
      "l.peek"
    ],
    "skipTypes": [
      "uint",
      "uint64",
      "int",
      "fmt.Errorf",
      "len",
      "len",
      "uint",
      "uint64",
      "int",
      "fmt.Errorf"
    ],
    "slowRegexpString": [
      "sb.WriteString",
      "strconv.Itoa",
      "sb.String"
    ],
    "sortAlerts": [
      "sort.Slice",
      "labels.Compare"
    ],
    "sortFunc": [
      "sort.Slice"
    ],
    "sortLines": [
      "strings.Split",
      "slices.Sort",
      "strings.Join"
    ],
    "sortMatrix": [
      "sort.SliceStable",
      "getLe"
    ],
    "sortSamples": [
      "sort.Slice"
    ],
    "sortTargetsByID": [
      "string",
      "slices.SortFunc",
      "strings.Compare"
    ],
    "sortTimeSeries": [
      "fmt.Sprint",
      "sort.Slice"
    ],
    "sovMetrics": [
      "math_bits.Len64"
    ],
    "sovRemote": [
      "math_bits.Len64"
    ],
    "sovTypes": [
      "math_bits.Len64",
      "math_bits.Len64"
    ],
    "sozMetrics": [
      "sovMetrics",
      "uint64",
      "int64"
    ],
    "sozRemote": [
      "sovRemote",
      "uint64",
      "int64"
    ],
    "sozTypes": [
      "sovTypes",
      "uint64",
      "int64",
      "sovTypes",
      "uint64",
      "int64"
    ],
    "spansMatch": [
      "len",
      "allEmptySpans",
      "len",
      "allEmptySpans"
    ],
    "spansProtoToSpans": [
      "make",
      "len",
      "make",
      "len"
    ],
    "spansToSpansProto": [
      "make",
      "len",
      "len",
      "make"
    ],
    "splitByRange": [
      "len",
      "append"
    ],
    "startGarbageServer": [
      "w.WriteHeader",
      "t.Cleanup",
      "url.Parse",
      "require.NoError",
      "httptest.NewServer",
      "http.HandlerFunc",
      "requestCount.Inc"
    ],
    "startTime": [
      "?.Unix",
      "time.Now"
    ],
    "startsOrEndsWithQuote": [
      "strings.HasPrefix",
      "strings.HasSuffix"
    ],
    "staticConfig": [
      "append",
      "strconv.Itoa",
      "model.LabelValue"
    ],
    "staticDiscoverer.Run": [
      "close",
      "ctx.Done"
    ],
    "statistics.String": [
      "fmt.Sprintf"
    ],
    "stepStat.MarshalJSON": [
      "json.Marshal",
      "float64"
    ],
    "stepStat.String": [
      "fmt.Sprintf"
    ],
    "stopIterator.Next": [
      "it.Iterator.Next"
    ],
    "storageSeriesIterator.AtHistogram": [
      "panic",
      "errors.New"
    ],
    "storageSeriesIterator.Next": [
      "panic",
      "len"
    ],
    "storageSeriesIterator.Seek": [
      "len",
      "ssi.Next"
    ],
    "stringFromArg": [
      "unwrapStepInvariantExpr",
      "unwrapParenExpr"
    ],
    "stringListIter.Next": [
      "len"
    ],
    "stringMatcherFromRegexp": [
      "clearBeginEndText",
      "stringMatcherFromRegexpInternal",
      "optimizeEqualOrPrefixStringMatchers"
    ],
    "stringMatcherFromRegexpInternal": [
      "orStringMatcher",
      "findSetMatchesInternal",
      "clearCapture",
      "append",
      "isCaseInsensitive",
      "make",
      "stringMatcherFromRegexpInternal",
      "newLiteralPrefixStringMatcher",
      "len",
      "string"
    ],
    "stringSliceFromArgs": [
      "make",
      "len",
      "stringFromArg"
    ],
    "stripeSeries.GC": [
      "series.Lock",
      "int",
      "?.Delete",
      "?.Unlock",
      "s.gcMut.Lock",
      "s.gcMut.Unlock",
      "delete",
      "check",
      "series.Unlock",
      "?.Lock"
    ],
    "stripeSeries.GetByHash": [
      "uint64",
      "?.RLock",
      "?.RUnlock",
      "?.Get"
    ],
    "stripeSeries.GetByID": [
      "uint64",
      "?.RLock",
      "?.RUnlock"
    ],
    "stripeSeries.GetLatestExemplar": [
      "uint64",
      "?.RLock",
      "?.RUnlock"
    ],
    "stripeSeries.Set": [
      "uint64",
      "?.Lock",
      "?.Unlock",
      "?.Set"
    ],
    "stripeSeries.SetLatestExemplar": [
      "?.Unlock",
      "uint64",
      "?.Lock"
    ],
    "stripeSeries.gc": [
      "?.ref.Unpack",
      "series.minTime",
      "int",
      "storage.SeriesRef",
      "series.lset.Range",
      "s.iterForDeletion",
      "series.Unlock",
      "len",
      "?.Lock",
      "?.Unlock",
      "series.Lock",
      "?.del",
      "series.truncateChunksBefore",
      "delete"
    ],
    "stripeSeries.getByHash": [
      "uint64",
      "?.RLock",
      "?.get",
      "?.RUnlock"
    ],
    "stripeSeries.getByID": [
      "uint64",
      "?.RLock",
      "?.RUnlock"
    ],
    "stripeSeries.getOrSet": [
      "uint64",
      "?.Lock",
      "?.get",
      "?.Unlock",
      "?.set",
      "s.seriesLifecycleCallback.PreCreation",
      "createSeries"
    ],
    "stripeSeries.iterForDeletion": [
      "?.Lock",
      "checkDeletedFunc",
      "?.Unlock",
      "s.seriesLifecycleCallback.PostDeletion",
      "len",
      "make"
    ],
    "stripeSeries.postCreation": [
      "s.seriesLifecycleCallback.PostCreation"
    ],
    "stripeSeriesWithCollidingSeries": [
      "labelsWithHashCollision",
      "lbls1.Hash",
      "newStripeSeries",
      "s.Set",
      "require.NoError",
      "require.True",
      "require.Same",
      "t.Helper",
      "labelsWithHashCollision",
      "lbls1.Hash",
      "newStripeSeries",
      "s.getOrSet"
    ],
    "symbolsIter.Next": [
      "yoloString",
      "s.d.UvarintBytes",
      "s.d.Err"
    ],
    "syncAppendable.Appender": [
      "s.Appendable.Appender"
    ],
    "syncAppender.Append": [
      "s.lock.Lock",
      "s.lock.Unlock",
      "s.Appender.Append"
    ],
    "syncAppender.AppendHistogram": [
      "s.lock.Lock",
      "s.lock.Unlock",
      "s.Appender.AppendHistogram"
    ],
    "syncDBuffer.zstdDecBuf": [
      "b.onceZstd.Do",
      "zstd.NewReader"
    ],
    "syncEBuffer.zstdEncBuf": [
      "zstd.NewWriter",
      "b.onceZstd.Do"
    ],
    "tagsFromMetric": [
      "string",
      "make",
      "len",
      "make",
      "len",
      "string",
      "TagValue"
    ],
    "tagsToLabelPairs": [
      "fmt.Sprintf",
      "make",
      "len",
      "append"
    ],
    "tarGzFileWriter.close": [
      "w.tarWriter.Close",
      "w.gzWriter.Close",
      "w.file.Close"
    ],
    "tarGzFileWriter.write": [
      "int64",
      "len",
      "w.tarWriter.WriteHeader",
      "w.tarWriter.Write"
    ],
    "targetEndpoint": [
      "net.JoinHostPort",
      "strconv.Itoa",
      "int",
      "len"
    ],
    "targetScraper.readResponse": [
      "resp.Header.Get",
      "io.LimitReader",
      "s.buf.Reset",
      "s.gzipr.Close",
      "io.Copy",
      "resp.Body.Close",
      "fmt.Errorf",
      "s.metrics.targetScrapeExceededBodySizeLimit.Inc",
      "bufio.NewReader",
      "gzip.NewReader",
      "s.gzipr.Reset"
    ],
    "targetScraper.scrape": [
      "req.Header.Add",
      "strconv.FormatFloat",
      "s.client.Do",
      "s.req.WithContext",
      "?.String",
      "s.URL",
      "req.Header.Set",
      "s.timeout.Seconds",
      "http.NewRequest"
    ],
    "targetsForApp": [
      "strconv.FormatBool",
      "strutil.SanitizeLabelName",
      "model.LabelName",
      "append",
      "make",
      "net.JoinHostPort",
      "lv",
      "len",
      "strconv.Itoa",
      "app.isContainerNet",
      "targetEndpoint",
      "strconv.Itoa",
      "model.LabelName",
      "append",
      "make",
      "len",
      "extractPortMapping",
      "model.LabelValue",
      "strutil.SanitizeLabelName"
    ],
    "temporaryDirectory.Close": [
      "os.RemoveAll",
      "os.IsNotExist",
      "require.NoError"
    ],
    "test.clear": [
      "t.open",
      "context.WithCancel",
      "context.Background",
      "t.storage.Close",
      "require.NoError",
      "t.cancelCtx"
    ],
    "test.exec": [
      "app.Commit",
      "t.execEval",
      "panic",
      "t.clear",
      "t.storage.Appender",
      "cmd.append",
      "app.Rollback"
    ],
    "test.execEval": [
      "do",
      "tt.Run",
      "fmt.Sprintf",
      "require.NoError",
      "errors.New",
      "t.execRangeEval",
      "t.execInstantEval"
    ],
    "test.execInstantEval": [
      "atModifierTestCases",
      "append",
      "t.runInstantQuery"
    ],
    "test.execRangeEval": [
      "cmd.checkExpectedFailure",
      "cmd.checkAnnotations",
      "cmd.compareResult",
      "engine.NewRangeQuery",
      "fmt.Errorf",
      "q.Close",
      "q.Exec",
      "cmd.isFail"
    ],
    "test.parse": [
      "getLines",
      "strings.ToLower",
      "patSpace.Split",
      "strings.HasPrefix",
      "t.parseEval",
      "raise",
      "len",
      "parseLoad",
      "append"
    ],
    "test.parseEval": [
      "strings.Split",
      "parseExpect",
      "parser.EnrichParseError",
      "fmt.Errorf",
      "strings.TrimSpace",
      "parseSeries",
      "patEvalInstant.FindStringSubmatch",
      "strings.Index",
      "strings.TrimPrefix",
      "validateExpectedCmds",
      "parseNumber",
      "parser.ParseExpr",
      "time.Duration",
      "strings.HasPrefix",
      "regexp.Compile",
      "patEvalRange.FindStringSubmatch",
      "testStartTime.Add",
      "cmd.expect",
      "posrange.Pos",
      "newInstantEvalCmd",
      "cmd.expectMetric",
      "raise",
      "append",
      "model.ParseDuration",
      "formatErr",
      "newRangeEvalCmd",
      "len"
    ],
    "test.runInstantQuery": [
      "cmd.checkAnnotations",
      "timeMilliseconds",
      "cmd.isFail",
      "q.Close",
      "q.Exec",
      "cmd.checkExpectedFailure",
      "cmd.compareResult",
      "engine.NewRangeQuery",
      "len",
      "append",
      "engine.NewInstantQuery",
      "fmt.Errorf",
      "iq.evalTime.Add",
      "cmd.isOrdered",
      "assertMatrixSorted",
      "make"
    ],
    "testBlockQuerier": [
      "res.Next",
      "res.Err",
      "sexpChks.Labels",
      "rmChunkRefs",
      "require.NoError",
      "q.Close",
      "sexp.Labels",
      "c.expChks.Next",
      "?.Chunk.Iterator",
      "t.Run",
      "res.At",
      "sres.Iterator",
      "require.Len",
      "c.exp.Next",
      "require.Empty",
      "sexpChks.Iterator",
      "len",
      "sres.Labels",
      "sexp.Iterator",
      "storage.ExpandChunks",
      "q.Select",
      "require.Equal",
      "c.exp.At",
      "res.Warnings",
      "context.Background",
      "storage.ExpandSamples",
      "c.expChks.At",
      "append"
    ],
    "testBlocks": [
      "require.Equal",
      "block.MinTime",
      "block.MaxTime",
      "db.Querier",
      "require.NoError",
      "q.Close",
      "testutil.RequireEqual",
      "db.Blocks",
      "queryAllSeries",
      "sortSamples",
      "len",
      "require.Len"
    ],
    "testChunk": [
      "require.NoError",
      "it1.Next",
      "len",
      "it3.Next",
      "float64",
      "app.Append",
      "it1.Err",
      "require.Equal",
      "it2.At",
      "it3.Seek",
      "c.Appender",
      "append",
      "c.Iterator",
      "it1.At",
      "it2.Next",
      "int64",
      "rand.Intn",
      "it2.Err",
      "it3.At",
      "it3.Err"
    ],
    "testChunkQuerierOOOQuery": [
      "addSample",
      "s.T",
      "require.GreaterOrEqual",
      "filter",
      "require.NoError",
      "t.Run",
      "db.ChunkQuerier",
      "queryChunks",
      "series1.String",
      "time.Hour.Milliseconds",
      "appendFunc",
      "require.Equal",
      "require.Positive",
      "db.DisableCompactions",
      "it.Err",
      "fmt.Sprintf",
      "querier.Close",
      "db.EnableNativeHistograms",
      "db.Close",
      "?.T",
      "require.NotNil",
      "require.Len",
      "requireEqualOOOSamples",
      "labels.FromStrings",
      "sampleFunc",
      "len",
      "requireEqualSamples",
      "openTestDB",
      "time.Minute.Milliseconds",
      "minutes",
      "sort.Slice",
      "chunk.Chunk.Iterator",
      "storage.ExpandSamples",
      "context.Background",
      "app.Commit",
      "append",
      "labels.MustNewMatcher",
      "require.LessOrEqual",
      "DefaultOptions",
      "db.Appender"
    ],
    "testChunkQuerierShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks": [
      "float64",
      "app.Commit",
      "querier.Select",
      "it.Next",
      "labels.FromStrings",
      "fmt.Sprintf",
      "context.Background",
      "db.Head",
      "crc32.New",
      "rand.Int31n",
      "append",
      "db.Compact",
      "?.Iterator",
      "labels.MustNewMatcher",
      "crc32.MakeTable",
      "openTestDB",
      "int64",
      "db.Appender",
      "db.Close",
      "require.Equal",
      "prom_testutil.ToFloat64",
      "db.ChunkQuerier",
      "it.At",
      "seriesSet.Err",
      "require.NoError",
      "make",
      "app.Append",
      "seriesSet.At",
      "chkCRC32.Write",
      "chkCRC32.Reset",
      "chunk.Bytes",
      "db.DisableCompactions",
      "querier.Close",
      "seriesSet.Next"
    ],
    "testCodec.Encode": [
      "fmt.Sprintf"
    ],
    "testDefaultQueueConfig": [
      "model.Duration"
    ],
    "testDiscoverer.Run": [
      "close",
      "ctx.Done"
    ],
    "testDiskFillingUpAfterDisablingOOO": [
      "t.Cleanup",
      "scenario.appendFunc",
      "app.Commit",
      "series1.Hash",
      "os.ReadDir",
      "require.Nil",
      "DefaultOptions",
      "labels.FromStrings",
      "db.head.mmapHeadChunks",
      "t.TempDir",
      "db.Appender",
      "append",
      "addSamples",
      "db.head.series.getByHash",
      "require.NotContains",
      "require.Len",
      "finfo.Size",
      "Open",
      "int64",
      "require.Contains",
      "f.Name",
      "checkMmapFileContents",
      "require.Equal",
      "prometheus.NewRegistry",
      "require.NotEmpty",
      "mmappedChunksDir",
      "make",
      "context.Background",
      "require.NoError",
      "db.Close",
      "db.Compact",
      "db.head.wbl.Dir",
      "time.Minute.Milliseconds",
      "len",
      "?.Info",
      "db.DisableCompactions"
    ],
    "testEndpoints": [
      "api.now",
      "q.Encode",
      "assertAPIError",
      "require.Len",
      "require.JSONEq",
      "labels.FromStrings",
      "getRuleGroupNextToken",
      "?.Pointer",
      "strings.NewReader",
      "methods",
      "tr.ResetMetadataStore",
      "assertAPIResponseLength",
      "timestamp.FromTime",
      "start.Add",
      "context.Background",
      "route.WithParam",
      "string",
      "labels.FromMap",
      "require.NoError",
      "tr.SetMetadataStoreForTargets",
      "es.AppendExemplar",
      "test.zeroFunc",
      "assertAPIResponse",
      "json.Marshal",
      "sort.Slice",
      "samplePrometheusCfg.String",
      "test.query.Encode",
      "test.sorter",
      "assertAPIResponseMetadataLen",
      "time.Unix",
      "reflect.ValueOf",
      "r.Header.Set",
      "fmt.Sprintf",
      "t.Run",
      "describeAPIFunc",
      "req.WithContext",
      "http.NewRequest",
      "float64",
      "append",
      "request",
      "test.endpoint"
    ],
    "testEngine": [
      "tb.Helper",
      "promqltest.NewTestEngineWithOpts",
      "t.Helper",
      "promqltest.NewTestEngineWithOpts"
    ],
    "testError.Error": [
      "fmt.Sprintf"
    ],
    "testFloatHistogramSub": [
      "a.Copy",
      "aCopy.Sub",
      "require.Equal",
      "b.Copy",
      "expected.Copy",
      "require.EqualError",
      "require.NoError",
      "res.Compact",
      "expectedCopy.Compact"
    ],
    "testGroup.maxEvalTime": [
      "time.Duration"
    ],
    "testGroup.seriesLoadingString": [
      "fmt.Sprintf",
      "shortDuration"
    ],
    "testGroup.test": [
      "alertRule.SetRestored",
      "g.Eval",
      "jsondiff.DefaultConsoleOptions",
      "fmt.Println",
      "time.Unix",
      "len",
      "gotAlerts.Len",
      "tg.maxEvalTime",
      "ts.Add",
      "suite.Context",
      "ar.Name",
      "ar.ActiveAlerts",
      "sort.Sort",
      "gotAlerts.String",
      "parsedSamplesString",
      "time.Duration",
      "cmp.Comparer",
      "q.Exec",
      "?.Truncate",
      "rules.NewManager",
      "labels.Compare",
      "err.Error",
      "ts.Before",
      "a.Annotations.Copy",
      "r.Name",
      "v.String",
      "time.Now",
      "r.LastError",
      "json.Marshal",
      "ts.Equal",
      "cmp.Equal",
      "math.Inf",
      "indentLines",
      "expAlerts.Len",
      "parser.ParseMetric",
      "suite.Close",
      "append",
      "fmt.Errorf",
      "jsondiff.Compare",
      "rules.EngineQueryFunc",
      "orderedGroups",
      "sort.Slice",
      "a.Labels.Copy",
      "expAlerts.String",
      "testCase.EvalTime.String",
      "s.Metric.Copy",
      "suite.QueryEngine",
      "make",
      "parser.ParseSeriesDesc",
      "suite.Storage",
      "suite.Queryable",
      "g.Rules",
      "?.Sub",
      "promslog.NewNopLogger",
      "fmt.Sprintf",
      "ts.Sub",
      "labels.FromMap",
      "promqltest.HistogramTestExpression",
      "context.Background",
      "math.Nextafter",
      "query",
      "m.LoadGroups",
      "testcase.EvalTime.String",
      "fmt.Printf",
      "time.Since",
      "?.UTC",
      "mint.Add",
      "suite.WithSamplesTill",
      "?.NewInstantQuery",
      "promqltest.NewLazyLoader",
      "tg.seriesLoadingString"
    ],
    "testHeadAppendHistogramAndCommitConcurrency": [
      "wg.Done",
      "app.Commit",
      "wg.Wait",
      "head.Close",
      "require.NoError",
      "wg.Add",
      "head.Appender",
      "context.Background",
      "appendFn",
      "newTestHead"
    ],
    "testHeadMinOOOTimeUpdate": [
      "wlog.NewSize",
      "filepath.Join",
      "DefaultHeadOptions",
      "NewHead",
      "h.MinOOOTime",
      "t.TempDir",
      "require.NoError",
      "app.Commit",
      "h.truncateOOO",
      "h.Close",
      "context.Background",
      "scenario.appendFunc",
      "labels.FromStrings",
      "require.Equal",
      "appendSample",
      "int64",
      "opts.OutOfOrderTimeWindow.Store",
      "time.Minute.Milliseconds",
      "opts.EnableNativeHistograms.Store",
      "t.Cleanup",
      "h.Init",
      "h.Appender"
    ],
    "testHeadSeriesChunkRace": [
      "newTestHead",
      "h.Init",
      "context.Background",
      "labels.FromStrings",
      "app.Commit",
      "wg.Wait",
      "app.Append",
      "q.Close",
      "wg.Add",
      "wg.Done",
      "ss.Err",
      "require.NoError",
      "h.Appender",
      "int64",
      "labels.EmptyLabels",
      "NewBlockQuerier",
      "h.gc",
      "h.Close",
      "labels.MustNewMatcher",
      "h.updateMinMaxTime",
      "q.Select",
      "ss.Next"
    ],
    "testHeader": [
      "r.Header.Get",
      "require.Equal",
      "t.Helper"
    ],
    "testHistogramAdd": [
      "expected.Copy",
      "require.EqualError",
      "require.NoError",
      "res.Compact",
      "expectedCopy.Compact",
      "a.Copy",
      "aCopy.Add",
      "require.Equal",
      "b.Copy"
    ],
    "testHistogramAppendAndQueryHelper": [
      "append",
      "query",
      "?.FH",
      "context.Background",
      "app.AppendHistogram",
      "series4.String",
      "baseH.Copy",
      "series1.String",
      "len",
      "h.ToFloat",
      "require.Equal",
      "t.Run",
      "series2.String",
      "int64",
      "app.Append",
      "?.T",
      "appendHistogram",
      "?.Copy",
      "?.H",
      "time.Minute.Milliseconds",
      "db.Close",
      "labels.FromStrings",
      "db.Querier",
      "labels.MustNewMatcher",
      "testQuery",
      "series3.String",
      "openTestDB",
      "minute",
      "h.Copy",
      "appendFloat",
      "t.Helper",
      "t.Cleanup",
      "app.Commit",
      "require.NoError",
      "db.Appender"
    ],
    "testHistogramStaleSampleHelper": [
      "head.MinTime",
      "value.IsStaleNaN",
      "head.Appender",
      "newTestHead",
      "t.Cleanup",
      "q.Select",
      "ss.At",
      "it.AtHistogram",
      "require.Len",
      "tsdbutil.GenerateTestHistograms",
      "l.Hash",
      "head.Init",
      "NewBlockQuerier",
      "eh.fh.Copy",
      "math.Float64frombits",
      "q.Close",
      "it.Next",
      "app.Append",
      "head.MaxTime",
      "require.True",
      "append",
      "h.ToFloat",
      "head.series.getByHash",
      "labels.FromStrings",
      "make",
      "s.Iterator",
      "len",
      "it.AtFloatHistogram",
      "app.AppendHistogram",
      "head.mmapHeadChunks",
      "require.NoError",
      "ss.Next",
      "labels.MustNewMatcher",
      "require.False",
      "int64",
      "app.Commit",
      "require.Empty",
      "testQuery",
      "t.Helper",
      "head.Close",
      "eh.h.Copy",
      "require.NotNil",
      "s.headChunks.len",
      "context.Background",
      "require.Equal"
    ],
    "testHistogramsSeriesToChunks": [
      "getCounterResetHint",
      "cs.h.Copy",
      "ExpandChunks",
      "encoder.Iterator",
      "len",
      "require.Equalf",
      "encodedSample.H",
      "value.IsStaleNaN",
      "labels.FromStrings",
      "append",
      "t.Error",
      "require.Equal",
      "require.NoError",
      "encodedSample.Type",
      "NewListSeries",
      "NewSeriesToChunkEncoder",
      "chunks.ChunkMetasToSamples",
      "encodedSample.FH",
      "cs.fh.Copy",
      "encoder.Labels",
      "require.Len",
      "require.Truef"
    ],
    "testLoop.getForcedError": [
      "l.forcedErrMtx.Lock",
      "l.forcedErrMtx.Unlock"
    ],
    "testLoop.run": [
      "l.startFunc",
      "panic"
    ],
    "testLoop.setForcedError": [
      "l.forcedErrMtx.Lock",
      "l.forcedErrMtx.Unlock"
    ],
    "testLoop.stop": [
      "l.stopFunc"
    ],
    "testMethod": [
      "require.Equal"
    ],
    "testNativeHistogramMaxSchemaSet": [
      "w.Write",
      "fmt.Sprintf",
      "require.Eventually",
      "seriesS.At",
      "prometheus.NewHistogram",
      "teststorage.New",
      "context.Background",
      "metricsServer.Close",
      "strings.ReplaceAll",
      "model.Duration",
      "config.Load",
      "make",
      "require.Len",
      "it.AtHistogram",
      "append",
      "httptest.NewServer",
      "http.HandlerFunc",
      "require.True",
      "require.NoError",
      "mng.ApplyConfig",
      "seriesS.Next",
      "require.Equal",
      "nativeHistogram.Observe",
      "protoMarshalDelimited",
      "?.Set",
      "s.Close",
      "NewManager",
      "mng.Run",
      "s.Querier",
      "prometheus.NewRegistry",
      "registry.Gather",
      "q.Select",
      "series.Iterator",
      "seriesS.Err",
      "registry.Register",
      "w.Header",
      "s.EnableNativeHistograms",
      "promslog.NewNopLogger",
      "mng.Stop",
      "labels.MustNewMatcher",
      "it.Next",
      "require.NotEmpty"
    ],
    "testNoGapAfterRestartWithOOO": [
      "requireEqualSeries",
      "t.Run",
      "t.TempDir",
      "verifySamples",
      "require.Equal",
      "db.head.MaxTime",
      "labels.FromStrings",
      "db.Appender",
      "time.Minute.Milliseconds",
      "append",
      "labels.MustNewMatcher",
      "t.Cleanup",
      "db.Blocks",
      "require.Error",
      "app.Commit",
      "addSamples",
      "db.Compact",
      "scenario.appendFunc",
      "require.NoError",
      "series1.String",
      "DefaultOptions",
      "len",
      "?.MaxTime",
      "db.head.MinTime",
      "scenario.sampleFunc",
      "db.DisableCompactions",
      "require.Len",
      "?.MinTime",
      "verifyBlockRanges",
      "context.Background",
      "db.Querier",
      "fmt.Sprintf",
      "query",
      "Open",
      "db.Close"
    ],
    "testOOOAppendAndQuery": [
      "float64",
      "requireEqualSeries",
      "addSample",
      "verifyOOOMinMaxTimes",
      "db.Appender",
      "rand.Intn",
      "append",
      "db.Close",
      "require.Equal",
      "labels.FromStrings",
      "time.Minute.Milliseconds",
      "make",
      "scenario.appendFunc",
      "s.T",
      "db.DisableCompactions",
      "db.EnableNativeHistograms",
      "t.Cleanup",
      "db.head.MinOOOTime",
      "?.T",
      "db.head.MaxOOOTime",
      "prom_testutil.ToFloat64",
      "lbls.String",
      "minutes",
      "db.Querier",
      "app.Commit",
      "time.Hour.Milliseconds",
      "context.Background",
      "require.Error",
      "DefaultOptions",
      "app.Rollback",
      "testQuery",
      "query",
      "labels.MustNewMatcher",
      "sort.Slice",
      "requireEqualOOOSamples",
      "openTestDB",
      "require.NoError",
      "int64"
    ],
    "testOOOAppendWithNoSeries": [
      "opts.OutOfOrderTimeWindow.Store",
      "require.Equal",
      "ms.headChunks.chunk.NumSamples",
      "appendSample",
      "NewHead",
      "t.Cleanup",
      "h.Init",
      "verifyOOOSamples",
      "h.Close",
      "h.Appender",
      "context.Background",
      "appendFunc",
      "require.Nil",
      "t.TempDir",
      "DefaultHeadOptions",
      "opts.OutOfOrderCapMax.Store",
      "require.NotNil",
      "require.NoError",
      "time.Minute.Milliseconds",
      "opts.EnableNativeHistograms.Store",
      "ms.ooo.oooHeadChunk.chunk.NumSamples",
      "newLabels",
      "wlog.NewSize",
      "app.Commit",
      "lbls.Hash",
      "require.False",
      "app.Rollback",
      "filepath.Join",
      "h.getOrCreate",
      "labels.FromStrings",
      "strconv.Itoa",
      "verifyInOrderSamples"
    ],
    "testOOOCompaction": [
      "scenario.appendFunc",
      "NewBlockQuerier",
      "require.NoError",
      "db.DisableCompactions",
      "app.Commit",
      "scenario.sampleFunc",
      "requireEqualSeries",
      "db.CompactOOOHead",
      "context.Background",
      "Open",
      "db.Appender",
      "append",
      "series1.String",
      "verifyDBSamples",
      "os.ReadDir",
      "require.Greater",
      "DefaultOptions",
      "db.Compact",
      "require.False",
      "query",
      "require.Positive",
      "require.Empty",
      "db.Blocks",
      "db.head.wbl.Sync",
      "verifySamples",
      "addSample",
      "time.Minute.Milliseconds",
      "labels.MustNewMatcher",
      "ms.ooo.oooHeadChunk.chunk.NumSamples",
      "require.Len",
      "make",
      "t.TempDir",
      "labels.FromStrings",
      "require.Nil",
      "require.Equal",
      "f.Size",
      "mmappedChunksDir",
      "NewRangeHead",
      "db.Close",
      "db.head.getOrCreate",
      "checkEmptyOOOChunk",
      "series2.String",
      "?.Name",
      "int64",
      "t.Cleanup",
      "db.Querier",
      "checkNonEmptyOOOChunk",
      "db.head.wbl.Dir",
      "?.Info",
      "db.CompactHead",
      "lbls.Hash"
    ],
    "testOOOCompactionFailure": [
      "t.TempDir",
      "t.Cleanup",
      "mmappedChunksDir",
      "db.DisableCompactions",
      "verifyFirstWBLFileIs0",
      "db.CompactOOOHead",
      "require.False",
      "require.Nil",
      "scenario.sampleFunc",
      "series1.String",
      "requireEqualSeries",
      "db.CompactHead",
      "DefaultOptions",
      "require.Empty",
      "db.Blocks",
      "?.Info",
      "verifySamples",
      "db.Appender",
      "addSample",
      "os.ReadDir",
      "f.Name",
      "verifyMmapFiles",
      "make",
      "query",
      "time.Minute.Milliseconds",
      "require.NoError",
      "scenario.appendFunc",
      "db.head.wbl.Sync",
      "db.head.wbl.Dir",
      "require.Equal",
      "?.Name",
      "require.Greater",
      "f.Size",
      "require.Error",
      "NewBlockQuerier",
      "Open",
      "app.Commit",
      "int64",
      "len",
      "series1.Hash",
      "NewRangeHead",
      "append",
      "context.Background",
      "db.EnableNativeHistograms",
      "db.Close",
      "labels.FromStrings",
      "require.Len",
      "db.head.getOrCreate",
      "labels.MustNewMatcher"
    ],
    "testOOOCompactionWithDisabledWriteLog": [
      "db.DisableCompactions",
      "db.EnableNativeHistograms",
      "db.Appender",
      "db.Compact",
      "verifySamples",
      "labels.FromStrings",
      "scenario.appendFunc",
      "db.head.getOrCreate",
      "int64",
      "?.MinTime",
      "make",
      "append",
      "query",
      "t.Cleanup",
      "addSamples",
      "lbls.Hash",
      "ms.ooo.oooHeadChunk.chunk.NumSamples",
      "require.Empty",
      "db.Blocks",
      "require.Equal",
      "scenario.sampleFunc",
      "t.TempDir",
      "db.Close",
      "require.False",
      "context.Background",
      "time.Minute.Milliseconds",
      "Open",
      "DefaultOptions",
      "require.NoError",
      "require.Len",
      "require.Nil",
      "NewBlockQuerier",
      "labels.MustNewMatcher",
      "requireEqualSeries",
      "?.MaxTime",
      "series1.String",
      "app.Commit",
      "require.Positive",
      "series2.String"
    ],
    "testOOOCompactionWithNormalCompaction": [
      "db.Compact",
      "require.Equal",
      "append",
      "verifySamples",
      "require.NoError",
      "require.False",
      "require.Empty",
      "make",
      "requireEqualSeries",
      "db.Blocks",
      "require.Len",
      "scenario.sampleFunc",
      "NewBlockQuerier",
      "Open",
      "db.Close",
      "labels.FromStrings",
      "require.Positive",
      "int64",
      "context.Background",
      "app.Commit",
      "addSamples",
      "db.head.getOrCreate",
      "lbls.Hash",
      "?.MinTime",
      "DefaultOptions",
      "time.Minute.Milliseconds",
      "?.MaxTime",
      "query",
      "labels.MustNewMatcher",
      "db.DisableCompactions",
      "db.EnableNativeHistograms",
      "t.Cleanup",
      "scenario.appendFunc",
      "series1.String",
      "t.TempDir",
      "db.Appender",
      "ms.ooo.oooHeadChunk.chunk.NumSamples",
      "require.Nil",
      "series2.String"
    ],
    "testOOODisabled": [
      "app.Rollback",
      "require.Equal",
      "db.head.metrics.outOfBoundSamples.WithLabelValues",
      "require.True",
      "s1.Hash",
      "require.False",
      "db.EnableNativeHistograms",
      "labels.FromStrings",
      "requireEqualSeries",
      "db.Dir",
      "labels.MustNewMatcher",
      "time.Minute.Milliseconds",
      "db.Appender",
      "app.Commit",
      "os.ReadDir",
      "DefaultOptions",
      "minutes",
      "scenario.appendFunc",
      "db.Querier",
      "requireEqualOOOSamples",
      "require.NoError",
      "context.Background",
      "query",
      "float64",
      "path.Join",
      "os.IsNotExist",
      "db.DisableCompactions",
      "t.Cleanup",
      "lbls.String",
      "require.Error",
      "append",
      "prom_testutil.ToFloat64",
      "require.Nil",
      "openTestDB",
      "db.Close",
      "addSample",
      "db.head.metrics.outOfOrderSamples.WithLabelValues",
      "db.head.getOrCreate",
      "require.NotNil",
      "make",
      "scenario.sampleFunc"
    ],
    "testOOOHeadChunkReader_Chunk": [
      "labels.FromStrings",
      "db.Appender",
      "ir.Series",
      "iterable.Iterator",
      "time.Minute.Milliseconds",
      "context.Background",
      "chunkenc.Chunk",
      "require.Nil",
      "app.Commit",
      "newTestDBWithOpts",
      "c.Iterator",
      "require.NoError",
      "cr.ChunkOrIterable",
      "scenario.sampleFunc",
      "fmt.Sprintf",
      "scenario.appendFunc",
      "storage.ExpandSamples",
      "DefaultOptions",
      "minutes",
      "requireEqualSamples",
      "s1.String",
      "t.Run",
      "NewHeadAndOOOChunkReader",
      "NewHeadAndOOOIndexReader",
      "require.EqualError",
      "require.Len",
      "len",
      "cr.Close"
    ],
    "testOOOHeadChunkReader_Chunk_ConsistentQueryResponseDespiteOfHeadExpanding": [
      "cr.Close",
      "requireEqualSamples",
      "s1.String",
      "labels.FromStrings",
      "fmt.Sprintf",
      "db.Appender",
      "require.NoError",
      "NewHeadAndOOOChunkReader",
      "NewHeadAndOOOIndexReader",
      "ir.Series",
      "len",
      "DefaultOptions",
      "time.Minute.Milliseconds",
      "scenario.sampleFunc",
      "t.Run",
      "newTestDBWithOpts",
      "require.Nil",
      "minutes",
      "context.Background",
      "app.Commit",
      "require.Len",
      "cr.ChunkOrIterable",
      "scenario.appendFunc",
      "iterable.Iterator",
      "storage.ExpandSamples"
    ],
    "testOOOHeadChunkReader_LabelValues": [
      "head.Close",
      "app.Commit",
      "t.Cleanup",
      "context.Background",
      "head.Appender",
      "labels.FromStrings",
      "t.Run",
      "int64",
      "require.NoError",
      "scenario.appendFunc",
      "NewHeadAndOOOIndexReader",
      "labels.MustNewMatcher",
      "oh.LabelValues",
      "require.Equal",
      "newTestHead",
      "sort.Strings"
    ],
    "testOOOInsert": [
      "makeEvenSampleSlice",
      "valOdd",
      "chunk.Insert",
      "valEven",
      "require.Equal",
      "NewOOOChunk",
      "make",
      "sampleFunc",
      "append"
    ],
    "testOOOInsertDuplicate": [
      "chunk.Insert",
      "require.False",
      "require.Equal",
      "NewOOOChunk",
      "makeEvenSampleSlice"
    ],
    "testOOOInterleavedImplicitCounterResets": [
      "require.True",
      "app.Commit",
      "querier.Close",
      "labels.MustNewMatcher",
      "require.Equal",
      "db.Close",
      "db.Appender",
      "context.Background",
      "s.H",
      "s.FH",
      "queryAndExpandChunks",
      "db.DisableCompactions",
      "db.Querier",
      "app.AppendHistogram",
      "t.Run",
      "DefaultOptions",
      "openTestDB",
      "appendFunc",
      "query",
      "uint64",
      "require.Len",
      "time.Hour.Milliseconds",
      "int64",
      "float64",
      "require.NoError",
      "len",
      "t.Fatalf",
      "db.ChunkQuerier",
      "labels.FromStrings"
    ],
    "testOOOMmapCorruption": [
      "require.NoError",
      "db.Appender",
      "context.Background",
      "app.Commit",
      "requireEqualSeries",
      "require.Less",
      "os.RemoveAll",
      "series1.String",
      "require.Len",
      "require.Equal",
      "prom_testutil.ToFloat64",
      "len",
      "labels.MustNewMatcher",
      "os.ReadDir",
      "path.Join",
      "?.Name",
      "f0.Size",
      "time.Minute.Milliseconds",
      "Open",
      "scenario.appendFunc",
      "append",
      "f.WriteAt",
      "f.Close",
      "DefaultOptions",
      "db.DisableCompactions",
      "t.Cleanup",
      "addSamples",
      "db.head.chunkDiskMapper.CutNewFile",
      "db.Querier",
      "query",
      "t.TempDir",
      "db.Close",
      "labels.FromStrings",
      "?.T",
      "db.head.wbl.Dir",
      "?.Info",
      "int64",
      "sort.Slice",
      "verifySamples",
      "mmappedChunksDir",
      "os.Rename",
      "require.Greater",
      "os.OpenFile"
    ],
    "testOOOMmapReplay": [
      "h.Appender",
      "require.Equal",
      "make",
      "wlog.NewSize",
      "context.Background",
      "h.getOrCreate",
      "chk.NumSamples",
      "require.NoError",
      "opts.OutOfOrderCapMax.Store",
      "h.Init",
      "scenario.appendFunc",
      "app.Commit",
      "int64",
      "filepath.Join",
      "DefaultHeadOptions",
      "opts.OutOfOrderTimeWindow.Store",
      "require.False",
      "int",
      "h.Close",
      "require.Len",
      "time.Minute.Milliseconds",
      "opts.EnableNativeHistograms.Store",
      "NewHead",
      "labels.FromStrings",
      "l.Hash",
      "h.chunkDiskMapper.Chunk",
      "require.NotNil",
      "len",
      "t.TempDir",
      "appendSample",
      "copy"
    ],
    "testOOONativeHistogramsWithCounterResets": [
      "openTestDB",
      "context.Background",
      "scenario.appendFunc",
      "db.Querier",
      "s.Type",
      "db.Close",
      "?.T",
      "querier.Close",
      "db.DisableCompactions",
      "lbls.String",
      "query",
      "require.Len",
      "fmt.Sprintf",
      "db.Appender",
      "s.H",
      "labels.MustNewMatcher",
      "time.Minute.Milliseconds",
      "t.Run",
      "s.FH",
      "app.Commit",
      "labels.FromStrings",
      "minutes",
      "append",
      "require.NotNil",
      "DefaultOptions",
      "time.Hour.Milliseconds",
      "require.NoError",
      "make",
      "batch.shouldReset",
      "sort.Slice",
      "requireEqualSeries"
    ],
    "testOOOQueryAfterRestartWithSnapshotAndRemovedWBL": [
      "require.False",
      "path.Join",
      "?.MinTime",
      "context.Background",
      "labels.FromStrings",
      "app.Commit",
      "lbls.Hash",
      "require.NotNil",
      "os.RemoveAll",
      "series2.String",
      "db.Querier",
      "require.Nil",
      "append",
      "labels.MustNewMatcher",
      "scenario.appendFunc",
      "db.head.getOrCreate",
      "require.Len",
      "t.TempDir",
      "time.Minute.Milliseconds",
      "require.NoError",
      "db.DisableCompactions",
      "query",
      "verifySamples",
      "db.Blocks",
      "?.MaxTime",
      "Open",
      "t.Cleanup",
      "require.Equal",
      "series1.String",
      "requireEqualSeries",
      "db.CompactOOOHead",
      "int64",
      "DefaultOptions",
      "db.Appender",
      "addSamples",
      "make",
      "require.Empty",
      "db.Close",
      "scenario.sampleFunc"
    ],
    "testOOOWALWrite": [
      "context.Background",
      "dec.Samples",
      "t.Fatalf",
      "getRecords",
      "labels.FromStrings",
      "db.Appender",
      "dec.HistogramSamples",
      "path.Join",
      "t.TempDir",
      "db.EnableNativeHistograms",
      "t.Cleanup",
      "db.Close",
      "app.Commit",
      "r.Next",
      "dec.MmapMarkers",
      "Open",
      "require.NoError",
      "record.NewDecoder",
      "r.Record",
      "require.Equal",
      "dec.Type",
      "time.Minute.Milliseconds",
      "wlog.NewReader",
      "append",
      "DefaultOptions",
      "appendSample",
      "wlog.NewSegmentsReader",
      "sr.Close",
      "dec.Series",
      "dec.FloatHistogramSamples"
    ],
    "testOutOfOrderRuntimeConfig": [
      "verifySamples",
      "fmt.Sprintf",
      "db.ApplyConfig",
      "require.NoError",
      "labels.FromStrings",
      "require.Error",
      "db.head.wbl.Size",
      "require.Positive",
      "Open",
      "getDB",
      "doOOOCompaction",
      "require.NotNil",
      "t.Cleanup",
      "append",
      "series1.String",
      "t.Run",
      "require.Nil",
      "time.Minute.Milliseconds",
      "db.Appender",
      "app.Commit",
      "require.Empty",
      "db.Blocks",
      "t.TempDir",
      "DefaultOptions",
      "addSamples",
      "makeConfig",
      "context.Background",
      "int64",
      "sort.Slice",
      "db.Querier",
      "query",
      "db.DisableCompactions",
      "labels.MustNewMatcher",
      "requireEqualSeries",
      "require.NotEmpty",
      "require.Equal",
      "db.Close",
      "scenario.appendFunc",
      "?.T",
      "db.compactOOOHead"
    ],
    "testOutOfOrderSamplesMetric": [
      "prom_testutil.ToFloat64",
      "db.Compact",
      "labels.FromStrings",
      "db.Appender",
      "require.Equal",
      "db.head.minValidTime.Load",
      "db.Close",
      "db.DisableCompactions",
      "db.head.metrics.outOfOrderSamples.WithLabelValues",
      "context.Background",
      "db.head.metrics.outOfBoundSamples.WithLabelValues",
      "scenario.appendFunc",
      "appendSample",
      "int64",
      "app.Commit",
      "require.Positive",
      "t.TempDir",
      "Open",
      "require.NoError"
    ],
    "testPanicOnApplyConfig": [
      "require.NoError",
      "t.Cleanup",
      "db.ApplyConfig",
      "t.TempDir",
      "DefaultOptions",
      "time.Minute.Milliseconds",
      "db.Appender",
      "scenario.appendFunc",
      "db.DisableCompactions",
      "append",
      "app.Commit",
      "addSamples",
      "Open",
      "db.Close",
      "labels.FromStrings",
      "context.Background",
      "prometheus.NewRegistry"
    ],
    "testParse": [
      "errors.Is",
      "p.Series",
      "string",
      "p.Next",
      "int64p",
      "p.CreatedTimestamp",
      "p.Unit",
      "t.Helper",
      "t.Fatal",
      "p.Histogram",
      "p.Labels",
      "p.Help",
      "p.Comment",
      "require.NoError",
      "p.Exemplar",
      "append",
      "p.Type"
    ],
    "testPostingsForLabelMatching": [
      "t.Helper",
      "labels.FromStrings",
      "setUp",
      "ir.Close",
      "index.ExpandPostings",
      "require.Equal",
      "context.Background",
      "t.Cleanup",
      "require.NoError",
      "t.Run",
      "ir.PostingsForLabelMatching",
      "require.NotNil"
    ],
    "testQuerierOOOQuery": [
      "require.Positive",
      "db.DisableCompactions",
      "db.Querier",
      "?.T",
      "time.Minute.Milliseconds",
      "appendFunc",
      "sampleFunc",
      "t.Run",
      "db.EnableNativeHistograms",
      "sort.Slice",
      "labels.MustNewMatcher",
      "DefaultOptions",
      "time.Hour.Milliseconds",
      "minutes",
      "openTestDB",
      "db.Close",
      "addSample",
      "app.Commit",
      "query",
      "context.Background",
      "requireEqualSamples",
      "querier.Close",
      "series1.String",
      "require.NotNil",
      "require.Len",
      "labels.FromStrings",
      "db.Appender",
      "filter",
      "append",
      "require.NoError",
      "fmt.Sprintf",
      "requireEqualOOOSamples"
    ],
    "testQuerierShouldNotPanicIfHeadChunkIsTruncatedWhileReadingQueriedChunks": [
      "db.Head",
      "it.Err",
      "float64",
      "seriesSet.Next",
      "it.Next",
      "db.Close",
      "fmt.Sprintf",
      "int64",
      "db.Compact",
      "prom_testutil.ToFloat64",
      "labels.MustNewMatcher",
      "?.Iterator",
      "it.At",
      "append",
      "db.Querier",
      "querier.Select",
      "make",
      "seriesSet.At",
      "rand.Int31n",
      "context.Background",
      "app.Append",
      "querier.Close",
      "seriesSet.Err",
      "require.ErrorContains",
      "labels.FromStrings",
      "app.Commit",
      "db.Appender",
      "require.NoError",
      "db.DisableCompactions",
      "require.Equal",
      "openTestDB"
    ],
    "testQueryOOOHeadDuringTruncate": [
      "t.Cleanup",
      "db.Appender",
      "app.Append",
      "int",
      "labels.MustNewMatcher",
      "q.Close",
      "t.TempDir",
      "require.NoError",
      "db.Close",
      "context.Background",
      "require.Equal",
      "verify",
      "db.DisableCompactions",
      "storage.SeriesRef",
      "int64",
      "labels.FromStrings",
      "requireEqualOOOSamples",
      "require.Empty",
      "q.LabelNames",
      "q.LabelValues",
      "DefaultOptions",
      "Open",
      "app.Commit",
      "make",
      "db.Compact",
      "makeQuerier"
    ],
    "testResourceClient.Fetch": [
      "rc.fetch"
    ],
    "testRunner.appendString": [
      "t.Helper",
      "os.OpenFile",
      "require.NoError",
      "f.Close",
      "f.WriteString"
    ],
    "testRunner.copyFile": [
      "t.Helper",
      "t.copyFileTo",
      "filepath.Base"
    ],
    "testRunner.copyFileTo": [
      "filepath.Join",
      "newf.Name",
      "t.Helper",
      "os.CreateTemp",
      "require.NoError",
      "os.Open",
      "io.Copy",
      "f.Close",
      "newf.Close",
      "os.Rename"
    ],
    "testRunner.lastReceive": [
      "t.mtx.Lock",
      "t.mtx.Unlock"
    ],
    "testRunner.requireTargetGroups": [
      "json.Marshal",
      "panic",
      "require.Equal",
      "string",
      "t.Helper"
    ],
    "testRunner.requireUpdate": [
      "t.Fatalf",
      "ref.Equal",
      "t.targets",
      "t.requireTargetGroups",
      "?.Sub",
      "t.Helper",
      "time.After",
      "t.lastReceive",
      "len",
      "t.Logf",
      "ref.After"
    ],
    "testRunner.run": [
      "d.Run",
      "metrics.Unregister",
      "time.Now",
      "metrics.Register",
      "t.mtx.Lock",
      "context.Background",
      "require.NoError",
      "close",
      "os.RemoveAll",
      "filepath.Join",
      "model.Duration",
      "prometheus.NewRegistry",
      "discovery.NewRefreshMetrics",
      "conf.NewDiscovererMetrics",
      "NewDiscovery",
      "t.mtx.Unlock",
      "context.WithCancel"
    ],
    "testRunner.stop": [
      "t.cancelSD",
      "close"
    ],
    "testRunner.targets": [
      "append",
      "sort.Strings",
      "t.mtx.Lock",
      "t.mtx.Unlock"
    ],
    "testRunner.writeString": [
      "os.CreateTemp",
      "require.NoError",
      "newf.WriteString",
      "newf.Close",
      "os.Rename",
      "newf.Name",
      "t.Helper"
    ],
    "testScraper.readResponse": [
      "ts.scrapeFunc"
    ],
    "testTargetRetriever.ResetMetadataStore": [
      "tt.SetMetadataStore"
    ],
    "testTargetRetriever.SetMetadataStoreForTargets": [
      "errors.New",
      "at.SetMetadataStore"
    ],
    "testTargetRetriever.TargetsDroppedCounts": [
      "make",
      "len"
    ],
    "testTemplateExpansion": [
      "url.Parse",
      "NewTemplateExpander",
      "expander.ExpandHTML",
      "expander.Expand",
      "require.EqualError",
      "require.Equal",
      "panic",
      "context.Background",
      "model.Time",
      "require.Error",
      "require.NoError"
    ],
    "testTemplateParsing": [
      "timestamp.FromTime",
      "parseTest",
      "template.NewTemplateExpander",
      "context.TODO",
      "strings.Join",
      "append",
      "fmt.Errorf",
      "template.AlertTemplateData",
      "model.Time",
      "time.Now",
      "tmpl.ParseTest"
    ],
    "testTest": [
      "runTest"
    ],
    "testTokenExpiry": [
      "?.Add",
      "time.Now"
    ],
    "testTritonSDRefresh": [
      "httptest.NewTLSServer",
      "s.Close",
      "strconv.Atoi",
      "td.refresh",
      "m.Unregister",
      "http.HandlerFunc",
      "url.Parse",
      "require.NotNil",
      "require.NotZero",
      "require.Len",
      "require.NotEmpty",
      "context.Background",
      "newTritonDiscovery",
      "fmt.Fprintln",
      "require.NoError",
      "net.SplitHostPort"
    ],
    "testUpdateServices": [
      "ts.Close",
      "metrics.Register",
      "metrics.Unregister",
      "context.Background",
      "NewDiscovery",
      "md.refresh",
      "httptest.NewServer",
      "prometheus.NewRegistry",
      "discovery.NewRefreshMetrics",
      "conf.NewDiscovererMetrics",
      "refreshMetrics.Unregister",
      "NewDiscovery",
      "testConfig",
      "prometheus.NewRegistry",
      "cfg.NewDiscovererMetrics",
      "metrics.Unregister",
      "refreshMetrics.Unregister",
      "discovery.NewRefreshMetrics",
      "metrics.Register",
      "md.refresh",
      "context.Background",
      "md.refresh",
      "context.Background",
      "httptest.NewServer",
      "ts.Close",
      "prometheus.NewRegistry",
      "conf.NewDiscovererMetrics",
      "NewDiscovery",
      "discovery.NewRefreshMetrics",
      "metrics.Register",
      "metrics.Unregister",
      "refreshMetrics.Unregister"
    ],
    "testWALReplayRaceOnSamplesLoggedBeforeSeries": [
      "require.NoError",
      "app.Append",
      "db.Dir",
      "q.Select",
      "labels.MustNewMatcher",
      "chunksIt.Err",
      "db.Appender",
      "context.Background",
      "reopenDB.Close",
      "require.Equal",
      "db.DisableCompactions",
      "set.At",
      "set.Err",
      "?.wal.Log",
      "app.Commit",
      "reopenDB.ChunkQuerier",
      "labels.FromStrings",
      "strconv.Itoa",
      "chunksIt.Next",
      "require.Equalf",
      "?.String",
      "?.Labels",
      "set.Next",
      "?.Iterator",
      "append",
      "chunks.HeadSeriesRef",
      "uint64",
      "float64",
      "db.Head",
      "db.Close",
      "openTestDB",
      "enc.Samples",
      "Open",
      "promslog.New",
      "int64",
      "t.Cleanup"
    ],
    "testWBLAndMmapReplay": [
      "db.head.chunkDiskMapper.Chunk",
      "t.Cleanup",
      "?.T",
      "require.Equal",
      "addSample",
      "require.NoError",
      "minutes",
      "query",
      "newWbl.Dir",
      "lbls.String",
      "s1.String",
      "wlog.NewSegmentsReader",
      "int64",
      "require.NotEmpty",
      "wlog.New",
      "DefaultOptions",
      "db.DisableCompactions",
      "db.Appender",
      "Open",
      "wlog.NewReader",
      "sr.Close",
      "openTestDB",
      "require.False",
      "mmappedChunksDir",
      "app.Commit",
      "float64",
      "db.head.MinOOOTime",
      "promslog.NewNopLogger",
      "newWbl.Close",
      "requireEqualSeries",
      "testQuery",
      "s1.Hash",
      "record.NewDecoder",
      "time.Hour.Milliseconds",
      "chk.Iterator",
      "resetMmapToOriginal",
      "os.Rename",
      "time.Minute.Milliseconds",
      "t.Run",
      "require.Positive",
      "db.head.getOrCreate",
      "append",
      "labels.MustNewMatcher",
      "db.head.wbl.Dir",
      "filepath.Join",
      "fileutil.CopyDirs",
      "r.Next",
      "db.Close",
      "make",
      "rand.Intn",
      "newWbl.Log",
      "len",
      "dec.Type",
      "scenario.appendFunc",
      "sort.Slice",
      "os.RemoveAll",
      "context.Background",
      "storage.ExpandSamples",
      "db.head.MaxOOOTime",
      "resetWBLToOriginal",
      "labels.FromStrings",
      "db.Querier",
      "t.TempDir",
      "prom_testutil.ToFloat64",
      "labels.NewSymbolTable",
      "r.Record"
    ],
    "testWBLReplay": [
      "h.getOrCreate",
      "l.String",
      "app.Commit",
      "h.MaxOOOTime",
      "appendSample",
      "require.NotNil",
      "?.chunk.Iterator",
      "wlog.NewSize",
      "h.Appender",
      "l.Hash",
      "storage.ExpandSamples",
      "sort.Slice",
      "labels.FromStrings",
      "context.Background",
      "opts.OutOfOrderTimeWindow.Store",
      "time.Minute.Milliseconds",
      "ms.ooo.oooHeadChunk.chunk.ToEncodedChunks",
      "t.TempDir",
      "DefaultHeadOptions",
      "append",
      "require.Equal",
      "h.MinTime",
      "h.MaxTime",
      "filepath.Join",
      "NewHead",
      "h.Init",
      "scenario.appendFunc",
      "h.Close",
      "require.Len",
      "require.NoError",
      "opts.EnableNativeHistograms.Store",
      "?.T",
      "requireEqualSamples",
      "h.MinOOOTime",
      "require.False"
    ],
    "testWblReplayAfterOOODisableAndRestart": [
      "query",
      "t.TempDir",
      "Open",
      "t.Cleanup",
      "labels.FromStrings",
      "append",
      "addSamples",
      "verifySamples",
      "time.Minute.Milliseconds",
      "db.DisableCompactions",
      "app.Commit",
      "sort.Slice",
      "?.T",
      "requireEqualSeries",
      "require.NoError",
      "db.Close",
      "db.Appender",
      "scenario.appendFunc",
      "labels.MustNewMatcher",
      "DefaultOptions",
      "context.Background",
      "series1.String",
      "db.Querier"
    ],
    "textToProto": [
      "binary.AppendUvarint",
      "uint64",
      "len",
      "buf.Write",
      "proto.UnmarshalText",
      "proto.Marshal"
    ],
    "timeLimitAppender.Append": [
      "app.Appender.Append",
      "fmt.Errorf",
      "app.Appender.Append"
    ],
    "timeLimitAppender.AppendExemplar": [
      "fmt.Errorf",
      "app.Appender.AppendExemplar"
    ],
    "timeLimitAppender.AppendHistogram": [
      "fmt.Errorf",
      "app.Appender.AppendHistogram"
    ],
    "timeMilliseconds": [
      "t.UnixNano",
      "int64",
      "t.UnixNano",
      "int64"
    ],
    "timeSeriesSignature": [
      "ByLabelName",
      "h.Write",
      "append",
      "h.WriteString",
      "h.Sum64",
      "xxhash.Sum64",
      "sort.Sort",
      "make",
      "len",
      "cap",
      "xxhash.New"
    ],
    "timestampTracker.Commit": [
      "samplesIn.Add",
      "float64",
      "exemplarsIn.Add",
      "histogramsIn.Add",
      "t.highestRecvTimestamp.Set",
      "t.writeStorage.samplesIn.incr"
    ],
    "tlsHosts": [
      "append"
    ],
    "toFloat64": [
      "m.Gauge.GetValue",
      "m.Counter.GetValue",
      "m.Untyped.GetValue",
      "math.NaN"
    ],
    "toHash": [
      "yaml.Marshal",
      "md5.Sum",
      "hex.EncodeToString"
    ],
    "toNormalisedLower": [
      "len",
      "strings.Map",
      "norm.NFKD.String",
      "toNormalisedLowerSlow"
    ],
    "toNormalisedLowerSlow": [
      "norm.NFKD.String",
      "yoloString",
      "cap",
      "len",
      "copy",
      "strings.Map"
    ],
    "toTimeseries": [
      "makeLabels",
      "append"
    ],
    "todoDetectFamilySwitch": [
      "labels.NewBuilder",
      "b.Set",
      "string",
      "b.Labels"
    ],
    "token.String": [
      "fmt.Sprintf"
    ],
    "tokenProvider.getAccessToken": [
      "tokenProvider.getToken",
      "errors.New",
      "err.Error",
      "tokenProvider.mu.Lock",
      "tokenProvider.mu.Unlock",
      "tokenProvider.valid"
    ],
    "tokenProvider.getToken": [
      "tokenProvider.credentialClient.GetToken",
      "len",
      "errors.New",
      "tokenProvider.updateRefreshTime"
    ],
    "tokenProvider.updateRefreshTime": [
      "?.Add",
      "time.Now",
      "time.Until",
      "deltaExpirytime.After",
      "?.UTC",
      "errors.New",
      "accessToken.ExpiresOn.UTC"
    ],
    "tokenProvider.valid": [
      "tokenProvider.refreshTime.After",
      "?.UTC",
      "time.Now",
      "len"
    ],
    "tooManyMatches": [
      "len"
    ],
    "totalHPointSize": [
      "h.size"
    ],
    "translateAST": [
      "n.Step.Milliseconds",
      "strconv.FormatFloat",
      "m.Card.String",
      "translateAST",
      "sanitizeList",
      "append",
      "n.Range.Milliseconds",
      "vs.OriginalOffset.Milliseconds",
      "translateMatchers",
      "getStartOrEnd",
      "n.Op.String",
      "panic",
      "n.OriginalOffset.Milliseconds"
    ],
    "translateMatchers": [
      "append",
      "m.Type.String"
    ],
    "tree": [
      "Children",
      "tree",
      "fmt.Sprintf",
      "strings.Split"
    ],
    "trimStringByBytes": [
      "len",
      "utf8.RuneStart",
      "string"
    ],
    "truncateResults": [
      "len"
    ],
    "truncateToLimit": [
      "len"
    ],
    "tsdbOptions.ToTSDBOptions": [
      "int",
      "int64",
      "time.Duration"
    ],
    "txRing.add": [
      "int",
      "len",
      "make",
      "copy"
    ],
    "txRing.cleanupAppendIDsBelow": [
      "len",
      "int",
      "uint32"
    ],
    "txRingIterator.Next": [
      "int",
      "len"
    ],
    "unhex": [
      "rune"
    ],
    "unixLock.Release": [
      "errors.New",
      "l.set",
      "l.f.Close",
      "l.set",
      "l.f.Close"
    ],
    "unixLock.set": [
      "errors.New",
      "syscall.FcntlFlock",
      "l.f.Fd",
      "syscall.Flock",
      "int",
      "l.f.Fd"
    ],
    "unknownRule.Labels": [
      "labels.EmptyLabels"
    ],
    "unpackHeadChunkRef": [
      "chunks.HeadChunkRef",
      "?.Unpack"
    ],
    "unquoteChar": [
      "utf8.DecodeRuneInString",
      "rune",
      "len",
      "unhex"
    ],
    "unreplace": [
      "byte",
      "lvalReplacer.Replace",
      "strings.IndexByte"
    ],
    "unsafeMarshalFPointJSON": [
      "marshalFPointJSON"
    ],
    "unsafeMarshalHPointJSON": [
      "marshalHPointJSON"
    ],
    "unsafeMarshalLabelsJSON": [
      "marshalLabelsJSON"
    ],
    "unsafeMarshalMatrixJSON": [
      "stream.WriteArrayStart",
      "marshalSeriesJSON",
      "len",
      "stream.WriteMore",
      "stream.WriteArrayEnd"
    ],
    "unsafeMarshalSampleJSON": [
      "marshalSampleJSON"
    ],
    "unsafeMarshalSeriesJSON": [
      "marshalSeriesJSON"
    ],
    "unsafeMarshalVectorJSON": [
      "stream.WriteArrayStart",
      "marshalSampleJSON",
      "len",
      "stream.WriteMore",
      "stream.WriteArrayEnd"
    ],
    "updateGoGC": [
      "debug.SetGCPercent",
      "logger.Info",
      "os.Setenv",
      "strconv.Itoa"
    ],
    "urlMustParse": [
      "url.Parse",
      "panic"
    ],
    "urlSource": [
      "fmt.Sprintf"
    ],
    "v2RequestToWriteRequest": [
      "make",
      "len",
      "labels.NewScratchBuilder",
      "rts.ToLabels",
      "append",
      "e.ToExemplar",
      "h.IsFloatHistogram",
      "prompb.FromIntHistogram",
      "h.ToIntHistogram",
      "?.Range",
      "?.Labels.Range",
      "prompb.FromFloatHistogram",
      "h.ToFloatHistogram"
    ],
    "valEven": [
      "int64"
    ],
    "valOdd": [
      "int64"
    ],
    "valid2Tg": [
      "model.LabelValue",
      "fileSource",
      "model.LabelName"
    ],
    "validTg": [
      "model.LabelValue",
      "model.LabelName",
      "fileSource"
    ],
    "validateAcceptScrapeProtocols": [
      "len",
      "errors.New",
      "strings.ToLower",
      "string",
      "fmt.Errorf",
      "sp.Validate"
    ],
    "validateAuthConfigs": [
      "len",
      "fmt.Errorf",
      "append"
    ],
    "validateAuthParam": [
      "len",
      "fmt.Errorf"
    ],
    "validateExpectedAnnotationsOfType": [
      "e.Type",
      "e.String",
      "allAnnos.AsErrors",
      "e.CheckMatch",
      "len",
      "fmt.Errorf",
      "slices.ContainsFunc"
    ],
    "validateExpectedCmds": [
      "len",
      "errors.New"
    ],
    "validateExponentialHistogramCount": [
      "h.Negative",
      "require.Equal",
      "h.Count",
      "uint64",
      "?.AsRaw",
      "?.BucketCounts",
      "h.Positive"
    ],
    "validateHeaders": [
      "strings.ToLower",
      "errors.New",
      "fmt.Errorf"
    ],
    "validateHeadersForTracing": [
      "strings.ToLower",
      "errors.New",
      "fmt.Errorf"
    ],
    "validateHistogramCount": [
      "uint64",
      "?.AsRaw",
      "h.BucketCounts",
      "require.Equal",
      "h.Count"
    ],
    "validateLabelsAndMetricName": [
      "fmt.Errorf",
      "?.IsValid",
      "model.LabelName",
      "model.IsValidMetricName",
      "model.LabelValue"
    ],
    "validateNativeHistogramCount": [
      "uint64",
      "require.Equal",
      "require.NotNil",
      "require.IsType"
    ],
    "validateOptions": [
      "DefaultOptions",
      "int64"
    ],
    "validateOpts": [
      "len",
      "ExponentialBlockRanges",
      "DefaultOptions"
    ],
    "validateRecord": [
      "fmt.Errorf",
      "errors.New"
    ],
    "valuesToSamples": [
      "fmt.Errorf",
      "float64",
      "timestamp.UnixMilli"
    ],
    "varInRegexTemplate": [
      "strings.Contains"
    ],
    "varianceOverTime": [
      "samples.Metric.Get",
      "annos.Add",
      "annotations.NewHistogramIgnoredInMixedRangeInfo",
      "?.PositionRange",
      "aggrOverTime",
      "kahanSumInc",
      "varianceToResult",
      "len"
    ],
    "vectorByReverseValueHeap.Len": [
      "len"
    ],
    "vectorByReverseValueHeap.Less": [
      "math.IsNaN"
    ],
    "vectorByReverseValueHeap.Pop": [
      "len"
    ],
    "vectorByReverseValueHeap.Push": [
      "append"
    ],
    "vectorByValueHeap.Len": [
      "len"
    ],
    "vectorByValueHeap.Less": [
      "math.IsNaN"
    ],
    "vectorByValueHeap.Pop": [
      "len"
    ],
    "vectorByValueHeap.Push": [
      "append"
    ],
    "vectorElemBinop": [
      "math.Pow",
      "annotations.NewIncompatibleTypesInBinOpInfo",
      "?.Div",
      "?.Sub",
      "?.Compact",
      "?.Add",
      "res.Compact",
      "hlhs.Equals",
      "panic",
      "math.Mod",
      "math.Atan2",
      "fmt.Errorf",
      "?.Mul",
      "hrhs.Copy",
      "hlhs.Copy"
    ],
    "verifyConfigReloadMetric": [
      "strings.HasPrefix",
      "strings.Fields",
      "len",
      "strconv.ParseFloat",
      "http.Get",
      "io.ReadAll",
      "strings.Split",
      "require.NoError",
      "resp.Body.Close",
      "string"
    ],
    "verifyLabelLimits": [
      "len",
      "lset.Get",
      "lset.Len",
      "fmt.Errorf",
      "lset.Validate"
    ],
    "verifyPresence": [
      "t.Helper",
      "require.True",
      "l.String",
      "require.Truef",
      "require.Falsef"
    ],
    "verifyScrapeInterval": [
      "require.NoError",
      "resp.Body.Close",
      "io.ReadAll",
      "json.Unmarshal",
      "strings.Contains",
      "http.Get"
    ],
    "verifySyncedPresence": [
      "t.Helper",
      "t.Fatalf",
      "l.String"
    ],
    "visitMockQueriers": [
      "f",
      "visitMockQueriersInGenericQuerier"
    ],
    "visitMockQueriersInGenericQuerier": [
      "visitMockQueriersInGenericQuerier",
      "visitMockQueriers"
    ],
    "visitStringMatcher": [
      "callback",
      "visitStringMatcher"
    ],
    "vpsDiscovery.getSource": [
      "d.config.Name",
      "d.getService",
      "fmt.Sprintf"
    ],
    "vpsDiscovery.refresh": [
      "getVpsList",
      "d.getSource",
      "err.Error",
      "ip.String",
      "ip.Is6",
      "createClient",
      "getVpsDetails",
      "d.logger.Warn",
      "fmt.Sprintf",
      "append",
      "ip.Is4",
      "model.LabelValue",
      "strconv.Itoa"
    ],
    "walSubsetProcessor.closeAndDrain": [
      "close"
    ],
    "walSubsetProcessor.processWALSamples": [
      "h.chunkRange.Load",
      "h.metrics.chunksCreated.Inc",
      "ms.mmapChunks",
      "ms.appendFloatHistogram",
      "close",
      "h.resetSeriesWithMMappedChunks",
      "ms.append",
      "ms.appendHistogram",
      "make",
      "h.minValidTime.Load",
      "int64",
      "h.series.getByID",
      "h.metrics.chunks.Inc",
      "h.updateMinMaxTime"
    ],
    "walSubsetProcessor.setup": [
      "make"
    ],
    "warningsOnlySeriesSet.Warnings": [
      "annotations.Annotations"
    ],
    "wblSubsetProcessor.closeAndDrain": [
      "close"
    ],
    "wblSubsetProcessor.processWBLSamples": [
      "make",
      "ms.insert",
      "h.metrics.chunksCreated.Inc",
      "h.metrics.chunks.Inc",
      "h.updateMinOOOMaxOOOTime",
      "close",
      "h.opts.OutOfOrderCapMax.Load",
      "int64",
      "h.series.getByID"
    ],
    "wblSubsetProcessor.setup": [
      "make"
    ],
    "windowsLock.Release": [
      "syscall.Close"
    ],
    "withStackTracer": [
      "http.HandlerFunc",
      "recover",
      "make",
      "runtime.Stack",
      "l.Error",
      "panic",
      "h.ServeHTTP"
    ],
    "wlMetrics.Unregister": [
      "w.r.Unregister"
    ],
    "writeArgTable": [
      "fmt.Sprintf",
      "strings.Repeat",
      "len",
      "createArgRow",
      "append",
      "writeTable"
    ],
    "writeBenchmark.ingestScrapes": [
      "len",
      "wg.Done",
      "b.ingestScrapesShard",
      "int64",
      "total.Load",
      "wg.Add",
      "fmt.Println",
      "total.Add",
      "wg.Wait"
    ],
    "writeBenchmark.ingestScrapesShard": [
      "context.TODO",
      "app.Append",
      "app.Commit",
      "make",
      "len",
      "append",
      "uint64",
      "b.storage.Appender",
      "float64",
      "panic"
    ],
    "writeBenchmark.startProfiling": [
      "os.Create",
      "filepath.Join",
      "fmt.Errorf",
      "pprof.StartCPUProfile",
      "runtime.SetBlockProfileRate",
      "runtime.SetMutexProfileFraction"
    ],
    "writeBenchmark.stopProfiling": [
      "pprof.StopCPUProfile",
      "?.WriteTo",
      "pprof.Lookup",
      "fmt.Errorf",
      "b.memprof.Close",
      "b.blockprof.Close",
      "runtime.SetBlockProfileRate",
      "b.mtxprof.Close",
      "b.cpuprof.Close",
      "runtime.SetMutexProfileFraction"
    ],
    "writeCmdTable": [
      "len",
      "createCmdRow",
      "append",
      "writeTable"
    ],
    "writeConfigs": [
      "?.Interface",
      "?.Addr",
      "fmt.Errorf",
      "reflect.ValueOf",
      "structVal.FieldByName",
      "append",
      "reflect.TypeOf",
      "field.Set",
      "reflect.Append"
    ],
    "writeFlagTable": [
      "len",
      "createFlagRow",
      "append",
      "writeTable",
      "fmt.Sprintf",
      "strings.Repeat"
    ],
    "writeHandler.ServeHTTP": [
      "w.WriteHeader",
      "respStats.SetHeaders",
      "h.logger.Error",
      "http.Error",
      "compression.Decode",
      "r.Context",
      "errors.Is",
      "r.Header.Get",
      "h.parseProtoMsg",
      "strings.ToLower",
      "proto.Unmarshal",
      "err.Error",
      "h.write",
      "fmt.Errorf",
      "append",
      "string",
      "io.ReadAll",
      "h.writeV2"
    ],
    "writeHandler.appendV1Histograms": [
      "hp.IsFloatHistogram",
      "app.AppendHistogram",
      "hp.ToFloatHistogram",
      "hp.ToIntHistogram",
      "errors.Is",
      "h.logger.Error",
      "err.Error",
      "labels.String"
    ],
    "writeHandler.appendV1Samples": [
      "app.Append",
      "s.GetTimestamp",
      "s.GetValue",
      "errors.Is",
      "h.logger.Error",
      "err.Error",
      "labels.String"
    ],
    "writeHandler.appendV2": [
      "h.handleHistogramZeroSample",
      "app.AppendExemplar",
      "ts.ToMetadata",
      "ls.Has",
      "h.logger.Debug",
      "errors.Is",
      "app.Append",
      "hp.ToIntHistogram",
      "fmt.Sprintf",
      "errors.Join",
      "fmt.Errorf",
      "rs.AllSamples",
      "app.AppendHistogram",
      "hp.IsFloatHistogram",
      "float64",
      "h.logger.Error",
      "err.Error",
      "ls.String",
      "h.samplesWithInvalidLabelsTotal.Add",
      "ls.HasDuplicateLabelNames",
      "s.GetTimestamp",
      "s.GetValue",
      "ts.ToLabels",
      "append",
      "ep.ToExemplar",
      "app.UpdateMetadata",
      "h.logger.Warn",
      "labels.NewScratchBuilder",
      "hp.ToFloatHistogram",
      "app.AppendCTZeroSample",
      "ls.IsValid",
      "len"
    ],
    "writeHandler.handleHistogramZeroSample": [
      "hist.ToIntHistogram",
      "hist.IsFloatHistogram",
      "app.AppendHistogramCTZeroSample",
      "hist.ToFloatHistogram"
    ],
    "writeHandler.parseProtoMsg": [
      "len",
      "config.RemoteWriteProtoMsg",
      "ret.Validate",
      "strings.TrimSpace",
      "strings.Split",
      "fmt.Errorf"
    ],
    "writeHandler.write": [
      "?.Add",
      "app.Rollback",
      "ls.HasDuplicateLabelNames",
      "app.AppendExemplar",
      "h.appendable.Appender",
      "labels.NewScratchBuilder",
      "ts.ToLabels",
      "ep.ToExemplar",
      "fmt.Sprintf",
      "h.appendV1Histograms",
      "app.Commit",
      "h.samplesAppendedWithoutMetadata.Add",
      "float64",
      "h.logger.Warn",
      "len",
      "errors.Is",
      "h.logger.Debug",
      "h.samplesWithInvalidLabelsTotal.Add",
      "timestamp.FromTime",
      "time.Now",
      "ls.Has",
      "ls.IsValid",
      "ls.String",
      "h.appendV1Samples"
    ],
    "writeHandler.writeV2": [
      "timestamp.FromTime",
      "h.appendV2",
      "app.Rollback",
      "app.Commit",
      "h.samplesAppendedWithoutMetadata.Add",
      "h.appendable.Appender",
      "?.Add",
      "time.Now",
      "h.logger.Error",
      "float64"
    ],
    "writeHistogramChunkLayout": [
      "int64",
      "putHistogramChunkLayoutSpans",
      "histogram.IsCustomBucketsSchema",
      "putHistogramChunkLayoutCustomBounds",
      "putZeroThreshold",
      "putVarbitInt"
    ],
    "writeIntoFile": [
      "t.Helper",
      "os.CreateTemp",
      "require.NoError",
      "file.WriteString"
    ],
    "writeJobQueue.assertInvariants": [
      "len",
      "q.mtx.Unlock",
      "require.NotNil",
      "require.LessOrEqual",
      "require.GreaterOrEqual",
      "require.Equal",
      "require.Less",
      "require.Len",
      "q.mtx.Lock",
      "require.Positive"
    ],
    "writeJobQueue.close": [
      "q.mtx.Lock",
      "q.mtx.Unlock",
      "q.pushed.Broadcast",
      "q.popped.Broadcast"
    ],
    "writeJobQueue.length": [
      "q.mtx.Lock",
      "q.mtx.Unlock"
    ],
    "writeJobQueue.pop": [
      "q.mtx.Lock",
      "q.mtx.Unlock",
      "q.pushed.Wait",
      "q.popped.Signal"
    ],
    "writeJobQueue.push": [
      "q.popped.Wait",
      "make",
      "q.pushed.Signal",
      "q.mtx.Lock",
      "q.mtx.Unlock"
    ],
    "writeMetaFile": [
      "os.RemoveAll",
      "logger.Error",
      "json.MarshalIndent",
      "f.Write",
      "tsdb_errors.NewMulti",
      "f.Close",
      "fileutil.Replace",
      "filepath.Join",
      "err.Error",
      "os.Create",
      "?.Err",
      "f.Sync",
      "int64"
    ],
    "writeMetadataToMock.AppendWatcherMetadata": [
      "len"
    ],
    "writeSubcommands": [
      "strings.Repeat",
      "writeFlagTable",
      "writeArgTable",
      "len",
      "writeSubcommands",
      "formatHyphenatedWords",
      "fmt.Fprintf"
    ],
    "writeTable": [
      "buf.WriteString",
      "writer.Write",
      "buf.Bytes",
      "len",
      "bytes.NewBuffer",
      "fmt.Fprintf",
      "determineColumnsToRender"
    ],
    "writeTestFile": [
      "os.WriteFile",
      "t.Helper",
      "filepath.Join",
      "require.NoError"
    ],
    "writeToMock.Append": [
      "len",
      "time.Sleep"
    ],
    "writeToMock.AppendExemplars": [
      "time.Sleep",
      "len"
    ],
    "writeToMock.AppendFloatHistograms": [
      "time.Sleep",
      "len"
    ],
    "writeToMock.AppendHistograms": [
      "time.Sleep",
      "len"
    ],
    "writeToMock.SeriesReset": [
      "wtm.seriesLock.Lock",
      "wtm.seriesLock.Unlock",
      "delete"
    ],
    "writeToMock.StoreSeries": [
      "time.Sleep",
      "wtm.UpdateSeriesSegment"
    ],
    "writeToMock.UpdateSeriesSegment": [
      "wtm.seriesLock.Lock",
      "wtm.seriesLock.Unlock"
    ],
    "writeToMock.checkNumSeries": [
      "wtm.seriesLock.Lock",
      "wtm.seriesLock.Unlock",
      "len"
    ],
    "writer.Reset": [
      "b.Writer.Reset"
    ],
    "xdsMetrics.Register": [
      "m.metricRegisterer.RegisterMetrics"
    ],
    "xdsMetrics.Unregister": [
      "m.metricRegisterer.UnregisterMetrics"
    ],
    "xorAppender.Append": [
      "uint8",
      "make",
      "binary.PutVarint",
      "binary.PutUvarint",
      "a.b.writeBit",
      "bitRange",
      "a.b.bytes",
      "a.b.writeByte",
      "math.Float64bits",
      "a.writeVDelta",
      "a.b.writeBits",
      "uint64",
      "binary.BigEndian.Uint16",
      "int64",
      "binary.BigEndian.PutUint16"
    ],
    "xorAppender.AppendFloatHistogram": [
      "panic"
    ],
    "xorAppender.AppendHistogram": [
      "panic"
    ],
    "xorAppender.writeVDelta": [
      "xorWrite"
    ],
    "xorIterator.AtFloatHistogram": [
      "panic"
    ],
    "xorIterator.AtHistogram": [
      "panic"
    ],
    "xorIterator.Next": [
      "it.br.readBits",
      "math.Float64frombits",
      "int64",
      "it.readValue",
      "uint64",
      "binary.ReadVarint",
      "binary.ReadUvarint",
      "it.br.readBitFast",
      "it.br.readBit",
      "it.br.readBitsFast"
    ],
    "xorIterator.Reset": [
      "newBReader",
      "binary.BigEndian.Uint16"
    ],
    "xorIterator.Seek": [
      "it.Next"
    ],
    "xorIterator.readValue": [
      "xorRead"
    ],
    "xorRead": [
      "br.readBitsFast",
      "br.readBits",
      "uint8",
      "math.Float64bits",
      "math.Float64frombits",
      "br.readBitFast",
      "br.readBit"
    ],
    "xorWrite": [
      "b.writeBit",
      "uint8",
      "bits.LeadingZeros64",
      "bits.TrailingZeros64",
      "b.writeBits",
      "int",
      "uint64",
      "math.Float64bits"
    ],
    "yoloBytes": [
      "unsafe.Slice",
      "unsafe.StringData",
      "len",
      "unsafe.Slice",
      "unsafe.StringData",
      "len"
    ],
    "yoloString": [
      "unsafe.String",
      "unsafe.SliceData",
      "len",
      "len",
      "unsafe.String",
      "unsafe.SliceData",
      "len",
      "unsafe.String",
      "unsafe.SliceData",
      "unsafe.String",
      "unsafe.SliceData",
      "len",
      "unsafe.String",
      "unsafe.SliceData",
      "len"
    ],
    "yyErrorMessage": [
      "yyTokname",
      "make",
      "int",
      "len",
      "cap",
      "append"
    ],
    "yyParse": [
      "?.Parse",
      "yyNewParser"
    ],
    "yyParserImpl.Parse": [
      "?.newAggregateExpr",
      "append",
      "?.unquoteString",
      "float64",
      "uint64",
      "?.histogramsIncreaseSeries",
      "dur.Seconds",
      "yylex1",
      "?.node.PositionRange",
      "len",
      "int",
      "?.unexpected",
      "numLit.PositionRange",
      "b.Labels",
      "?.histogramsDecreaseSeries",
      "__yyfmt__.Printf",
      "copy",
      "yyErrorMessage",
      "time.Duration",
      "labels.New",
      "?.mergeMaps",
      "yyStatname",
      "?.IsValid",
      "model.LabelName",
      "?.addOffset",
      "?.setTimestamp",
      "?.newLabelMatcher",
      "math.Float64frombits",
      "?.buildHistogramFromMap",
      "yylex.Error",
      "?.addParseErrf",
      "math.Round",
      "?.addOffsetExpr",
      "labels.NewBuilder",
      "?.number",
      "yyTokname",
      "?.setAtModifierPreprocessor",
      "?.newMap",
      "getFunction",
      "?.assembleVectorSelector",
      "?.newMetricNameMatcher",
      "parseDuration",
      "strconv.ParseUint",
      "?.experimentalDurationExpr",
      "mergeRanges",
      "?.newBinaryExpression",
      "?.item.PositionRange",
      "b.Set",
      "?.addSemanticError",
      "?.addParseErr",
      "int64",
      "make"
    ],
    "yyStatname": [
      "len",
      "__yyfmt__.Sprintf"
    ],
    "yyTokname": [
      "len",
      "__yyfmt__.Sprintf"
    ],
    "yylex1": [
      "uint",
      "lex.Lex",
      "int",
      "len",
      "__yyfmt__.Printf",
      "yyTokname"
    ],
    "zeroOrOneCharacterStringMatcher.Matches": [
      "utf8.DecodeRuneInString",
      "len"
    ]
  }
}
